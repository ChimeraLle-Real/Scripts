--!optimize 2
--// LuauCeption - VM variant
--// Luau 0.654 (8cc289fae430d9b0c22bde209fe5cf2d01751ff1)

local STUB_WARN = true

--// Vanilla Luau Vector3 implementation
--// Provides Vector3 lib if no existing implementation is available
--// Missing: xAxis, yAxis, zAxis, Magnitude, Unit, and all namecall functions
--// Last checked: 11 December 2024
local type = type
local typeof = typeof
local Vector3 = Vector3 do
    local lOk, lRbx = pcall(require, "@lune/roblox")
    Vector3 = Vector3 or (if lOk then lRbx.Vector3 else nil) or (if vector then { new = vector.create } else nil)
end
if not Vector3 then
    local Vector3Internal = {}
    Vector3Internal.__index = Vector3Internal
    Vector3Internal.__type = "Vector3"
    Vector3Internal.__metatable = "This metatable is locked"

    Vector3 = {}
    Vector3.new = function(x, y, z)
        return setmetatable({X = x or 0, Y = y or 0, Z = z or 0}, Vector3Internal)
    end
    Vector3.zero = Vector3.new(0,0,0)
    Vector3.one = Vector3.new(1,1,1)
    table.freeze(Vector3)

    Vector3Internal.__concat = function()
        assert(false, "attempt to concatenate Vector3 with Vector3")
        return
    end
    Vector3Internal.__unm = function(self)
        return Vector3.new(-self.X, -self.Y, -self.Z)
    end
    Vector3Internal.__add = function(self, v3_2)
        v3_2 = if (typeof(v3_2) == "number") then Vector3.new(v3_2, v3_2, v3_2) else v3_2
        return Vector3.new(self.X + v3_2.X, self.Y + v3_2.Y, self.Z + v3_2.Z)
    end
    Vector3Internal.__sub = function(self, v3_2)
        v3_2 = if (typeof(v3_2) == "number") then Vector3.new(v3_2, v3_2, v3_2) else v3_2
        return Vector3.new(self.X - v3_2.X, self.Y - v3_2.Y, self.Z - v3_2.Z)
    end
    Vector3Internal.__mul = function(self, v3_2)
        v3_2 = if (typeof(v3_2) == "number") then Vector3.new(v3_2, v3_2, v3_2) else v3_2
        return Vector3.new(self.X * v3_2.X, self.Y * v3_2.Y, self.Z * v3_2.Z)
    end
    Vector3Internal.__div = function(self, v3_2)
        v3_2 = if (typeof(v3_2) == "number") then Vector3.new(v3_2, v3_2, v3_2) else v3_2
        return Vector3.new(self.X / v3_2.X, self.Y / v3_2.Y, self.Z / v3_2.Z)
    end
    Vector3Internal.__mod = function(_, t)
        if (typeof(t) == "table") and (t["__type"] == "Vector3") then
            assert(false, "attempt to perform arithmetic (mod) on Vector3")
        else
            assert(false, "attempt to perform arithmetic (mod) on Vector3 and "..typeof(t))
        end
        return
    end
    Vector3Internal.__pow = function(_, t)
        if (typeof(t) == "table") and (t["__type"] == "Vector3") then
            assert(false, "attempt to perform arithmetic (pow) on Vector3")
        else
            assert(false, "attempt to perform arithmetic (pow) on Vector3 and "..typeof(t))
        end
        return
    end
    Vector3Internal.__tostring = function(self)
        return self.X..", "..self.Y..", "..self.Z
    end
    Vector3Internal.__eq = function(self, v3_2)
        if (typeof(v3_2) ~= "Vector3") then return false end
        return (self.X == v3_2.X) and (self.Y == v3_2.Y) and (self.Z == v3_2.Z)
    end
    Vector3Internal.__lt = function(self, v3_2)
        if (typeof(v3_2) ~= "Vector3") then return false end
        return (self.X < v3_2.X) and (self.Y < v3_2.Y) and (self.Z < v3_2.Z)
    end
    Vector3Internal.__le = function(self, v3_2)
        if (typeof(v3_2) ~= "Vector3") then return false end
        return (self.X <= v3_2.X) and (self.Y <= v3_2.Y) and (self.Z <= v3_2.Z)
    end
    Vector3Internal.__len = function()
        assert(false, "attempt to get length of a Vector3 value")
        return
    end

    local oldtype = type
    type = function(v)
        return if (oldtype(v) == "table") and v["__type"] then v["__type"] else oldtype(v)
    end

    local oldtypeof = typeof
    typeof = function(v)
        return if (oldtypeof(v) == "table") and v["__type"] then v["__type"] else oldtypeof(v)
    end
end

local function no_op(num)
	return num
end

local bit_lshift = bit32.lshift
local bit_rshift = bit32.rshift
local bit_arshift = bit32.arshift

local bit_and = bit32.band
local bit_or = bit32.bor
local bit_xor = bit32.bxor
local bit_not = bit32.bnot

local bit_extract = bit32.extract
local bit_replace = bit32.replace

-- X: a[0 __21]
-- Y: a[22__31]
--  | b[0 __11]
-- Z: b[12__31]
local constructor = Vector3.new

local rt_i64_ZERO = constructor(0, 0, 0)

local function rt_i64_from_u32(data_1, data_2)
	local x = bit_and(data_1, 0x3FFFFF)
	local y = bit_and(data_2, 0x3FFFFF)
	local z = bit_replace(bit_rshift(data_1, 22), bit_rshift(data_2, 22), 10, 10)

	return constructor(x, y, z)
end

local function rt_i64_is_zero(value)
	return value == rt_i64_ZERO
end

local function load_d1(value)
	return bit_replace(bit_and(value.X, 0x3FFFFF), value.Z, 22, 10)
end

local function load_d2(value)
	return bit_replace(bit_and(value.Y, 0x3FFFFF), bit_rshift(value.Z, 10), 22, 10)
end

local function rt_i64_into_u32(value)
	local x, y, z = value.X, value.Y, value.Z
	return bit_replace(bit_and(x, 0x3FFFFF), z, 22, 10), bit_replace(bit_and(y, 0x3FFFFF), bit_rshift(z, 10), 22, 10)
end

local function rt_i64_from_u64(value)
	return rt_i64_from_u32(bit_and(value % 0x100000000), bit_and(value / 0x100000000))
end

local function rt_convert_f64_u64(value)
	local value_1, value_2 = rt_i64_into_u32(value)
	return value_1 + value_2 * 0x100000000
end

local rt_i64_ONE = rt_i64_from_u64(1)
local NUM_SIX_FOUR = rt_i64_from_u64(64)
local NUM_BIT_26 = rt_i64_from_u64(0x4000000)
local NUM_BIT_52 = rt_i64_from_u64(0x10000000000000)

local function rt_add_i64(lhs, rhs)
	local lhs_1, lhs_2 = rt_i64_into_u32(lhs)
	local rhs_1, rhs_2 = rt_i64_into_u32(rhs)
	local data_1 = lhs_1 + rhs_1
	local data_2 = lhs_2 + rhs_2

	if data_1 >= 0x100000000 then
		data_1 = data_1 - 0x100000000
		data_2 = data_2 + 1
	end

	if data_2 >= 0x100000000 then
		data_2 = data_2 - 0x100000000
	end

	return rt_i64_from_u32(data_1, data_2)
end

local function rt_sub_i64(lhs, rhs)
	local lhs_1, lhs_2 = rt_i64_into_u32(lhs)
	local rhs_1, rhs_2 = rt_i64_into_u32(rhs)
	local data_1 = lhs_1 - rhs_1
	local data_2 = lhs_2 - rhs_2

	if data_1 < 0 then
		data_1 = data_1 + 0x100000000
		data_2 = data_2 - 1
	end

	if data_2 < 0 then
		data_2 = data_2 + 0x100000000
	end

	return rt_i64_from_u32(data_1, data_2)
end

local function rt_lt_u64(lhs, rhs)
	local data_l_2 = load_d2(lhs)
	local data_r_2 = load_d2(rhs)

	return data_l_2 < data_r_2 or (data_l_2 == data_r_2 and load_d1(lhs) < load_d1(rhs))
end

local function rt_mul_i64(lhs, rhs)
	if rt_i64_is_zero(lhs) or rt_i64_is_zero(rhs) then
		return rt_i64_ZERO
	elseif rt_lt_u64(lhs, NUM_BIT_26) and rt_lt_u64(rhs, NUM_BIT_26) then
		return rt_i64_from_u64(load_d1(lhs) * load_d1(rhs))
	end

	-- Divide each long into 4 chunks of 16 bits, and then add up 4x4 products_
	-- We can skip products that would overflow_
	local lhs_1, lhs_2 = rt_i64_into_u32(lhs)
	local rhs_1, rhs_2 = rt_i64_into_u32(rhs)

	local a48 = bit_rshift(lhs_2, 16)
	local a32 = bit_and(lhs_2, 0xFFFF)
	local a16 = bit_rshift(lhs_1, 16)
	local a00 = bit_and(lhs_1, 0xFFFF)

	local b48 = bit_rshift(rhs_2, 16)
	local b32 = bit_and(rhs_2, 0xFFFF)
	local b16 = bit_rshift(rhs_1, 16)
	local b00 = bit_and(rhs_1, 0xFFFF)

	local c00 = a00 * b00
	local c16 = bit_rshift(c00, 16)

	c00 = bit_and(c00, 0xFFFF)
	c16 = c16 + a16 * b00

	local c32 = bit_rshift(c16, 16)

	c16 = bit_and(c16, 0xFFFF)
	c16 = c16 + a00 * b16
	c32 = c32 + bit_rshift(c16, 16)
	c16 = bit_and(c16, 0xFFFF)
	c32 = c32 + a32 * b00

	local c48 = bit_rshift(c32, 16)

	c32 = bit_and(c32, 0xFFFF)
	c32 = c32 + a16 * b16
	c48 = c48 + bit_rshift(c32, 16)
	c32 = bit_and(c32, 0xFFFF)
	c32 = c32 + a00 * b32
	c48 = c48 + bit_rshift(c32, 16)
	c32 = bit_and(c32, 0xFFFF)
	c48 = c48 + a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48
	c48 = bit_and(c48, 0xFFFF)

	local data_1 = bit_replace(c00, c16, 16, 16)
	local data_2 = bit_replace(c32, c48, 16, 16)

	return rt_i64_from_u32(data_1, data_2)
end

local function rt_bit_or_i64(lhs, rhs)
	local x = bit_or(lhs.X, rhs.X)
	local y = bit_or(lhs.Y, rhs.Y)
	local z = bit_or(lhs.Z, rhs.Z)

	return constructor(x, y, z)
end

local function rt_shl_i64(lhs, rhs)
	local count = rhs.X % 64

	if count == 0 then
		return lhs
	elseif count < 32 then
		local pad = 32 - count
		local lhs_1, lhs_2 = rt_i64_into_u32(lhs)

		local data_1 = bit_lshift(lhs_1, count)
		local data_2 = bit_replace(bit_rshift(lhs_1, pad), lhs_2, count, pad)

		return rt_i64_from_u32(data_1, data_2)
	else
		local lhs_1 = load_d1(lhs)

		return rt_i64_from_u32(0, bit_lshift(lhs_1, count - 32))
	end
end

local function rt_div_u64(lhs, rhs)
	if rt_i64_is_zero(rhs) then
		error("division by zero")
	elseif rt_i64_is_zero(lhs) then
		return rt_i64_ZERO, rt_i64_ZERO
	elseif rt_lt_u64(lhs, NUM_BIT_52) and rt_lt_u64(rhs, NUM_BIT_52) then
		local lhs_u = rt_convert_f64_u64(lhs)
		local rhs_u = rt_convert_f64_u64(rhs)

		return rt_i64_from_u64(lhs_u / rhs_u), rt_i64_from_u64(lhs_u % rhs_u)
	end

	local quotient = rt_i64_ZERO
	local remainder = rt_i64_ZERO

	local num_1, num_2 = rt_i64_into_u32(lhs)

	for i = 63, 0, -1 do
		local rem_1, rem_2 = rt_i64_into_u32(rt_shl_i64(remainder, rt_i64_ONE))

		if i > 31 then
			rem_1 = bit_or(rem_1, bit_extract(num_2, i - 32, 1))
		else
			rem_1 = bit_or(rem_1, bit_extract(num_1, i, 1))
		end

		remainder = rt_i64_from_u32(rem_1, rem_2)

		if not rt_lt_u64(remainder, rhs) then
			remainder = rt_sub_i64(remainder, rhs)
			quotient = rt_bit_or_i64(quotient, rt_shl_i64(rt_i64_ONE, rt_i64_from_u32(i, 0)))
		end
	end

	return quotient, remainder
end

local function rt_i64_is_negative(value)
	return value.Z >= 0x80000
end

local function rt_i64_negate(value)
	local value_1, value_2 = rt_i64_into_u32(value)
	local data_1 = bit_not(value_1) + 1
	local data_2 = bit_not(value_2)

	if data_1 >= 0x100000000 then
		data_1 = data_1 - 0x100000000
		data_2 = data_2 + 1
	end

	if data_2 >= 0x100000000 then
		data_2 = data_2 - 0x100000000
	end

	return rt_i64_from_u32(data_1, data_2)
end

local function rt_div_i64(lhs, rhs)
	local left_negative = rt_i64_is_negative(lhs)
	local right_negative = rt_i64_is_negative(rhs)

	if left_negative then
		lhs = rt_i64_negate(lhs)
	end

	if right_negative then
		rhs = rt_i64_negate(rhs)
	end

	local quotient, remainder = rt_div_u64(lhs, rhs)

	if left_negative ~= right_negative then
		quotient = rt_i64_negate(quotient)
	end

	if left_negative then
		remainder = rt_i64_negate(remainder)
	end

	return quotient, remainder
end

local function rt_bit_and_i64(lhs, rhs)
	local x = bit_and(lhs.X, rhs.X)
	local y = bit_and(lhs.Y, rhs.Y)
	local z = bit_and(lhs.Z, rhs.Z)

	return constructor(x, y, z)
end

local function rt_bit_not_i64(value)
	local x = bit_and(bit_not(value.X), 0xFFFFFF)
	local y = bit_and(bit_not(value.Y), 0xFFFFFF)
	local z = bit_and(bit_not(value.Z), 0xFFFFFF)

	return constructor(x, y, z)
end

local function rt_bit_xor_i64(lhs, rhs)
	local x = bit_xor(lhs.X, rhs.X)
	local y = bit_xor(lhs.Y, rhs.Y)
	local z = bit_xor(lhs.Z, rhs.Z)

	return constructor(x, y, z)
end

local function rt_shr_u64(lhs, rhs)
	local count = rhs.X % 64

	if count == 0 then
		return lhs
	elseif count < 32 then
		local lhs_1, lhs_2 = rt_i64_into_u32(lhs)

		local data_1 = bit_replace(bit_rshift(lhs_1, count), lhs_2, 32 - count, count)
		local data_2 = bit_rshift(lhs_2, count)

		return rt_i64_from_u32(data_1, data_2)
	else
		local lhs_2 = load_d2(lhs)

		return rt_i64_from_u32(bit_rshift(lhs_2, count - 32), 0)
	end
end

local function rt_shr_i64(lhs, rhs)
	local count = rhs.X % 64

	if count == 0 then
		return lhs
	elseif count < 32 then
		local lhs_1, lhs_2 = rt_i64_into_u32(lhs)

		local data_1 = bit_replace(bit_rshift(lhs_1, count), lhs_2, 32 - count, count)
		local data_2 = bit_arshift(lhs_2, count)

		return rt_i64_from_u32(data_1, data_2)
	else
		local lhs_2 = load_d2(lhs)

		local data_1 = bit_arshift(lhs_2, count - 32)
		local data_2 = lhs_2 >= 0x80000000 and 0xFFFFFFFF or 0

		return rt_i64_from_u32(data_1, data_2)
	end
end

local function rt_rotl_i64(lhs, rhs)
	if rt_i64_is_zero(rhs) then
		return lhs
	else
		local data_1 = rt_shl_i64(lhs, rhs)
		local data_2 = rt_shr_u64(lhs, rt_sub_i64(NUM_SIX_FOUR, rhs))

		return rt_bit_or_i64(data_1, data_2)
	end
end

local function rt_rotr_i64(lhs, rhs)
	if rt_i64_is_zero(rhs) then
		return lhs
	else
		local data_1 = rt_shr_u64(lhs, rhs)
		local data_2 = rt_shl_i64(lhs, rt_sub_i64(NUM_SIX_FOUR, rhs))

		return rt_bit_or_i64(data_1, data_2)
	end
end

local function rt_eq_i64(lhs, rhs)
	return lhs == rhs
end

local function rt_gt_u64(lhs, rhs)
	local data_l_2 = load_d2(lhs)
	local data_r_2 = load_d2(rhs)

	return data_l_2 > data_r_2 or (data_l_2 == data_r_2 and load_d1(lhs) > load_d1(rhs))
end

local function rt_lt_i64(lhs, rhs)
	local neg_a = rt_i64_is_negative(lhs)
	local neg_b = rt_i64_is_negative(rhs)

	if neg_a and not neg_b then
		return true
	elseif not neg_a and neg_b then
		return false
	else
		return rt_i64_is_negative(rt_sub_i64(lhs, rhs))
	end
end

local function rt_gt_i64(lhs, rhs)
	local neg_a = rt_i64_is_negative(lhs)
	local neg_b = rt_i64_is_negative(rhs)

	if neg_a and not neg_b then
		return false
	elseif not neg_a and neg_b then
		return true
	else
		return rt_i64_is_negative(rt_sub_i64(rhs, lhs))
	end
end

local function rt_convert_f64_i32(num)
	return bit_xor(num, 0x80000000) - 0x80000000
end

local assert = assert

local math_abs = math.abs
local math_fmod = math.fmod
local math_modf = math.modf
local math_round = math.round
local math_sign = math.sign
local math_min = math.min
local math_max = math.max

local function rt_add_i32(lhs, rhs)
	return bit_or(lhs + rhs, 0)
end

local function rt_sub_i32(lhs, rhs)
	return bit_or(lhs - rhs, 0)
end

local function rt_mul_i32(lhs, rhs)
	if (lhs + rhs) < 0x8000000 then
		return bit_or(lhs * rhs, 0)
	else
		local a16 = bit_rshift(lhs, 16)
		local a00 = bit_and(lhs, 0xFFFF)
		local b16 = bit_rshift(rhs, 16)
		local b00 = bit_and(rhs, 0xFFFF)

		local c00 = a00 * b00
		local c16 = a16 * b00 + a00 * b16

		return bit_or(c00 + bit_lshift(c16, 16), 0)
	end
end

local function rt_div_i32(lhs, rhs)
	assert(rhs ~= 0, "division by zero")

	lhs = rt_convert_f64_i32(lhs)
	rhs = rt_convert_f64_i32(rhs)

	return bit_or(math_modf(lhs / rhs), 0)
end

local function rt_div_u32(lhs, rhs)
	assert(rhs ~= 0, "division by zero")

	return bit_or(math_modf(lhs / rhs), 0)
end

local function rt_rem_i32(lhs, rhs)
	assert(rhs ~= 0, "division by zero")

	lhs = rt_convert_f64_i32(lhs)
	rhs = rt_convert_f64_i32(rhs)

	return bit_or(math_fmod(lhs, rhs), 0)
end

local function rt_rem_i64(lhs, rhs)
	local _, remainder = rt_div_i64(lhs, rhs)

	return remainder
end

local function rt_rem_u64(lhs, rhs)
	local _, remainder = rt_div_u64(lhs, rhs)

	return remainder
end

local function rt_neg_f64(num)
	return -num
end

local function rt_min_f64(lhs, rhs)
	if rhs == rhs then
		return math_min(lhs, rhs)
	else
		return rhs
	end
end

local function rt_max_f64(lhs, rhs)
	if rhs == rhs then
		return math_max(lhs, rhs)
	else
		return rhs
	end
end

local buffer_create = buffer.create

local CP_INSTANCE = buffer_create(8)

local buffer_write_f64 = buffer.writef64
local buffer_read_i8 = buffer.readi8

local function rt_copysign_f64(lhs, rhs)
	buffer_write_f64(CP_INSTANCE, 0, rhs)

	if buffer_read_i8(CP_INSTANCE, 7) >= 0 then
		return (math_abs(lhs))
	else
		return -math_abs(lhs)
	end
end

local function rt_nearest_f32(num)
	local result = math_round(num)

	if (math_abs(num) + 0.5) % 2 == 1 then
		return result - math_sign(result)
	else
		return result
	end
end

local bit_countlz = bit32.countlz
local bit_countrz = bit32.countrz

local function rt_popcnt_i32(num)
	num = num - bit_and(bit_rshift(num, 1), 0x55555555)
	num = bit_and(num, 0x33333333) + bit_and(bit_rshift(num, 2), 0x33333333)
	num = bit_and((num + bit_rshift(num, 4)), 0x0F0F0F0F)
	num = num + bit_rshift(num, 8)
	num = num + bit_rshift(num, 16)
	return bit_and(num, 0x0000003F)
end

local function rt_clz_i64(num)
	local data_1, data_2 = rt_i64_into_u32(num)
	local temp

	if data_2 == 0 then
		temp = bit_countlz(data_1) + 32
	else
		temp = bit_countlz(data_2)
	end

	return rt_i64_from_u32(temp, 0)
end

local function rt_ctz_i64(num)
	local data_1, data_2 = rt_i64_into_u32(num)
	local temp

	if data_1 == 0 then
		temp = bit_countrz(data_2) + 32
	else
		temp = bit_countrz(data_1)
	end

	return rt_i64_from_u32(temp, 0)
end

local function rt_popcnt_i64(num)
	local data_1, data_2 = rt_i64_into_u32(num)
	local temp = rt_popcnt_i32(data_1) + rt_popcnt_i32(data_2)

	return rt_i64_from_u32(temp, 0)
end

local function rt_le_i32(lhs, rhs)
	return rt_convert_f64_i32(lhs) <= rt_convert_f64_i32(rhs)
end

local function rt_lt_i32(lhs, rhs)
	return rt_convert_f64_i32(lhs) < rt_convert_f64_i32(rhs)
end

local function rt_ge_i32(lhs, rhs)
	return rt_convert_f64_i32(lhs) >= rt_convert_f64_i32(rhs)
end

local function rt_gt_i32(lhs, rhs)
	return rt_convert_f64_i32(lhs) > rt_convert_f64_i32(rhs)
end

local function rt_ne_i64(lhs, rhs)
	return not rt_eq_i64(lhs, rhs)
end

local function rt_le_i64(lhs, rhs)
	return rt_lt_i64(lhs, rhs) or rt_eq_i64(lhs, rhs)
end

local function rt_le_u64(lhs, rhs)
	return rt_lt_u64(lhs, rhs) or rt_eq_i64(lhs, rhs)
end

local function rt_ge_i64(lhs, rhs)
	return rt_gt_i64(lhs, rhs) or rt_eq_i64(lhs, rhs)
end

local function rt_ge_u64(lhs, rhs)
	return rt_gt_u64(lhs, rhs) or rt_eq_i64(lhs, rhs)
end

local bit_lrotate = bit32.lrotate
local bit_rrotate = bit32.rrotate

local function rt_shl_i32(lhs, rhs)
	return bit_lshift(lhs, rhs % 32)
end

local function rt_shr_u32(lhs, rhs)
	return bit_rshift(lhs, rhs % 32)
end

local function rt_shr_i32(lhs, rhs)
	return bit_arshift(lhs, rhs % 32)
end

local function rt_rotl_i32(lhs, rhs)
	return bit_lrotate(lhs, rhs % 32)
end

local function rt_rotr_i32(lhs, rhs)
	return bit_rrotate(lhs, rhs % 32)
end

local math_ceil = math.ceil
local math_floor = math.floor
local math_clamp = math.clamp

local NUM_MIN_I64 = rt_i64_from_u32(0, 0x80000000)
local NUM_MAX_I64 = rt_i64_from_u32(0xFFFFFFFF, 0x7FFFFFFF)
local NUM_MAX_U64 = rt_i64_from_u32(0xFFFFFFFF, 0xFFFFFFFF)

local function rt_truncate_f64(num)
	if num >= 0 then
		return math_floor(num)
	else
		return math_ceil(num)
	end
end

local function rt_wrap_i32_i64(num)
	local data_1, _ = rt_i64_into_u32(num)

	return data_1
end

local function rt_truncate_i32_f64(num)
	return bit_or(rt_truncate_f64(num), 0)
end

local function rt_truncate_i64_f64(num)
	if num < 0 then
		local temp = rt_i64_from_u64(-num)

		return rt_i64_negate(temp)
	else
		return rt_i64_from_u64(num)
	end
end

local function rt_truncate_u64_f64(num)
	if num <= 0 then
		return rt_i64_ZERO
	else
		return rt_i64_from_u64(math_floor(num))
	end
end

local function rt_saturate_i32_f64(num)
	local temp = math_clamp(rt_truncate_f64(num), -0x80000000, 0x7FFFFFFF)

	return bit_or(temp, 0)
end

local function rt_saturate_u32_f64(num)
	return math_clamp(rt_truncate_f64(num), 0, 0xFFFFFFFF)
end

local function rt_saturate_i64_f64(num)
	if num >= 2 ^ 63 - 1 then
		return NUM_MAX_I64
	elseif num <= -2 ^ 63 then
		return NUM_MIN_I64
	else
		return rt_truncate_i64_f64(num)
	end
end

local function rt_saturate_u64_f64(num)
	if num >= 2 ^ 64 then
		return NUM_MAX_U64
	elseif num <= 0 then
		return rt_i64_ZERO
	else
		return rt_truncate_i64_f64(num)
	end
end

local function rt_extend_i32_n8(num)
	num = bit_and(num, 0xFF)

	if num >= 0x80 then
		return bit_or(num - 0x100, 0)
	else
		return num
	end
end

local function rt_extend_i32_n16(num)
	num = bit_and(num, 0xFFFF)

	if num >= 0x8000 then
		return bit_or(num - 0x10000, 0)
	else
		return num
	end
end

local function rt_extend_i64_n8(num)
	local data_1, _ = rt_i64_into_u32(num)

	data_1 = bit_and(data_1, 0xFF)

	if data_1 >= 0x80 then
		local temp = rt_i64_from_u32(-data_1 + 0x100, 0)

		return rt_i64_negate(temp)
	else
		return rt_i64_from_u32(data_1, 0)
	end
end

local function rt_extend_i64_n16(num)
	local data_1, _ = rt_i64_into_u32(num)

	data_1 = bit_and(data_1, 0xFFFF)

	if data_1 >= 0x8000 then
		local temp = rt_i64_from_u32(-data_1 + 0x10000, 0)

		return rt_i64_negate(temp)
	else
		return rt_i64_from_u32(data_1, 0)
	end
end

local function rt_extend_i64_n32(num)
	local data_1, _ = rt_i64_into_u32(num)

	if data_1 >= 0x80000000 then
		local temp = rt_i64_from_u32(-data_1 + 0x100000000, 0)

		return rt_i64_negate(temp)
	else
		return rt_i64_from_u32(data_1, 0)
	end
end

local function rt_extend_i64_i32(num)
	if num >= 0x80000000 then
		local temp = rt_i64_from_u32(-num + 0x100000000, 0)

		return rt_i64_negate(temp)
	else
		return rt_i64_from_u32(num, 0)
	end
end

local function rt_extend_i64_u32(num)
	return rt_i64_from_u32(num, 0)
end

local function rt_convert_f64_i64(num)
	if rt_i64_is_negative(num) then
		local temp = rt_i64_negate(num)

		return -rt_convert_f64_u64(temp)
	else
		return rt_convert_f64_u64(num)
	end
end

local RE_INSTANCE = buffer_create(8)

local buffer_read_f32 = buffer.readf32
local buffer_read_f64 = buffer.readf64
local buffer_read_u32 = buffer.readu32

local buffer_write_f32 = buffer.writef32
local buffer_write_u32 = buffer.writeu32

local function rt_reinterpret_i32_f32(num)
	buffer_write_f32(RE_INSTANCE, 0, num)

	return buffer_read_u32(RE_INSTANCE, 0)
end

local function rt_reinterpret_i64_f64(num)
	buffer_write_f64(RE_INSTANCE, 0, num)

	local data_1 = buffer_read_u32(RE_INSTANCE, 0)
	local data_2 = buffer_read_u32(RE_INSTANCE, 4)

	return rt_i64_from_u32(data_1, data_2)
end

local function rt_reinterpret_f32_i32(num)
	buffer_write_u32(RE_INSTANCE, 0, num)

	return buffer_read_f32(RE_INSTANCE, 0)
end

local function rt_reinterpret_f64_i64(num)
	local data_1, data_2 = rt_i64_into_u32(num)

	buffer_write_u32(RE_INSTANCE, 0, data_1)
	buffer_write_u32(RE_INSTANCE, 4, data_2)

	return buffer_read_f64(RE_INSTANCE, 0)
end

local string_sub = string.sub

local buffer_to_string = buffer.tostring
local buffer_from_string = buffer.fromstring

local buffer_len = buffer.len
local buffer_copy = buffer.copy
local buffer_fill = buffer.fill

local buffer_read_u8 = buffer.readu8
local buffer_read_i16 = buffer.readi16
local buffer_read_u16 = buffer.readu16
local buffer_read_i32 = buffer.readi32

local buffer_write_u8 = buffer.writeu8
local buffer_write_u16 = buffer.writeu16

local function rt_load_i32_i8(memory, addr)
	return bit_or(buffer_read_i8(memory.data, addr), 0)
end

local function rt_load_i32_u8(memory, addr)
	return buffer_read_u8(memory.data, addr)
end

local function rt_load_i32_i16(memory, addr)
	return bit_or(buffer_read_i16(memory.data, addr), 0)
end

local function rt_load_i32_u16(memory, addr)
	return buffer_read_u16(memory.data, addr)
end

local function rt_load_i32(memory, addr)
	return buffer_read_u32(memory.data, addr)
end

local function rt_load_i64_i8(memory, addr)
	local value = buffer_read_i8(memory.data, addr)

	if value >= 0 then
		return rt_i64_from_u32(value, 0)
	else
		return rt_i64_from_u32(value + 0x100000000, 0xFFFFFFFF)
	end
end

local function rt_load_i64_u8(memory, addr)
	return rt_i64_from_u32(buffer_read_u8(memory.data, addr), 0)
end

local function rt_load_i64_i16(memory, addr)
	local value = buffer_read_i16(memory.data, addr)

	if value >= 0 then
		return rt_i64_from_u32(value, 0)
	else
		return rt_i64_from_u32(value + 0x100000000, 0xFFFFFFFF)
	end
end

local function rt_load_i64_u16(memory, addr)
	return rt_i64_from_u32(buffer_read_u16(memory.data, addr), 0)
end

local function rt_load_i64_i32(memory, addr)
	local value = buffer_read_i32(memory.data, addr)

	if value >= 0 then
		return rt_i64_from_u32(value, 0)
	else
		return rt_i64_from_u32(value + 0x100000000, 0xFFFFFFFF)
	end
end

local function rt_load_i64_u32(memory, addr)
	return rt_i64_from_u32(buffer_read_u32(memory.data, addr), 0)
end

local function rt_load_i64(memory, addr)
	local data = memory.data
	local value_1 = buffer_read_u32(data, addr)
	local value_2 = buffer_read_u32(data, addr + 4)

	return rt_i64_from_u32(value_1, value_2)
end

local function rt_load_f32(memory, addr)
	return buffer_read_f32(memory.data, addr)
end

local function rt_load_f64(memory, addr)
	return buffer_read_f64(memory.data, addr)
end

local function rt_load_string(memory, addr, len)
	local temp = buffer_create(len)

	buffer_copy(temp, 0, memory.data, addr, len)

	return buffer_to_string(temp)
end

local function rt_store_i32_n8(memory, addr, value)
	buffer_write_u8(memory.data, addr, value)
end

local function rt_store_i32_n16(memory, addr, value)
	buffer_write_u16(memory.data, addr, value)
end

local function rt_store_i32(memory, addr, value)
	buffer_write_u32(memory.data, addr, value)
end

local function rt_store_i64_n8(memory, addr, value)
	local value_1, _ = rt_i64_into_u32(value)

	buffer_write_u8(memory.data, addr, value_1)
end

local function rt_store_i64_n16(memory, addr, value)
	local value_1, _ = rt_i64_into_u32(value)

	buffer_write_u16(memory.data, addr, value_1)
end

local function rt_store_i64_n32(memory, addr, value)
	local value_1, _ = rt_i64_into_u32(value)

	buffer_write_u32(memory.data, addr, value_1)
end

local function rt_store_i64(memory, addr, value)
	local data = memory.data
	local value_1, value_2 = rt_i64_into_u32(value)

	buffer_write_u32(data, addr, value_1)
	buffer_write_u32(data, addr + 4, value_2)
end

local function rt_store_f32(memory, addr, value)
	buffer_write_f32(memory.data, addr, value)
end

local function rt_store_f64(memory, addr, value)
	buffer_write_f64(memory.data, addr, value)
end

local function rt_store_string(memory, addr, data, len)
	local content = if not len or len == #data then data else string_sub(data, 1, len)
	local temp = buffer_from_string(content)

	buffer_copy(memory.data, addr, temp)
end

local function rt_store_copy(memory_1, addr_1, memory_2, addr_2, len)
	buffer_copy(memory_1.data, addr_1, memory_2.data, addr_2, len)
end

local function rt_store_fill(memory, addr, len, value)
	buffer_fill(memory.data, addr, value, len)
end

local WASM_PAGE_SIZE = 65536

local function rt_allocator_new(min, max)
	return { max = max, data = buffer_create(min * WASM_PAGE_SIZE) }
end

local function rt_allocator_size(memory)
	return buffer_len(memory.data) / WASM_PAGE_SIZE
end

local function rt_allocator_grow(memory, num)
	local old = rt_allocator_size(memory)
	local new = old + num

	if new <= memory.max then
		local reallocated = buffer_create(new * WASM_PAGE_SIZE)

		buffer_copy(reallocated, 0, memory.data)

		memory.data = reallocated

		return old
	else
		return 0xFFFFFFFF
	end
end

local memory_at_0
local FUNC_LIST = table.create(851)
local TABLE_LIST = table.create(0)
local MEMORY_LIST = table.create(0)
local GLOBAL_LIST = table.create(1)
FUNC_LIST[14] = --[[ luaF_newproto(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[354](loc_0, 112, rt_load_i32_u8(memory_at_0, loc_0 + 4))
		loc_1 = reg_0
		loc_2 = rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 20)
		rt_store_i32_n8(memory_at_0, loc_1, 11)
		rt_store_i32_n8(memory_at_0, loc_1 + 1, bit_and(loc_2, 3))
		rt_store_i32_n8(memory_at_0, loc_1 + 2, rt_load_i32_u8(memory_at_0, loc_0 + 4))
		reg_0 = FUNC_LIST[611](rt_add_i32(loc_1, 3), 0, 109)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[15] = --[[ luaF_newLclosure(lua_State*, int, Table*, Proto*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[354](loc_0, rt_add_i32(rt_shl_i32(loc_1, 4), 24), rt_load_i32_u8(memory_at_0, loc_0 + 4))
		loc_4 = reg_0
		loc_5 = rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 20)
		rt_store_i32_n8(memory_at_0, loc_4, 7)
		rt_store_i32_n8(memory_at_0, loc_4 + 1, bit_and(loc_5, 3))
		loc_5 = rt_load_i32_u8(memory_at_0, loc_0 + 4)
		rt_store_i32(memory_at_0, loc_4 + 12, loc_2)
		loc_0 = 0
		rt_store_i32_n8(memory_at_0, loc_4 + 3, 0)
		rt_store_i32_n8(memory_at_0, loc_4 + 2, loc_5)
		rt_store_i32_n8(memory_at_0, loc_4 + 4, loc_1)
		loc_2 = rt_load_i32_u8(memory_at_0, loc_3 + 6)
		rt_store_i32(memory_at_0, loc_4 + 16, loc_3)
		rt_store_i32_n8(memory_at_0, loc_4 + 6, 0)
		rt_store_i32_n8(memory_at_0, loc_4 + 5, loc_2)
		while true do
			if rt_le_i32(loc_1, 0) then
				break
			end
			loc_5 = bit_and(loc_1, 3)
			loc_3 = rt_add_i32(loc_4, 36)
			if loc_1 >= 4 then
				while true do
					loc_6 = bit_and(loc_1, 2147483644)
					loc_2 = 0
					while true do
						loc_1 = rt_add_i32(rt_shl_i32(loc_0, 4), loc_3)
						rt_store_i32(memory_at_0, loc_1, 0)
						rt_store_i32(memory_at_0, loc_1 + 16, 0)
						rt_store_i32(memory_at_0, loc_1 + 32, 0)
						rt_store_i32(memory_at_0, loc_1 + 48, 0)
						loc_0 = rt_add_i32(loc_0, 4)
						loc_2 = rt_add_i32(loc_2, 4)
						if loc_6 ~= loc_2 then
							continue
						end
						break
					end
					break
				end
			end
			if loc_5 == 0 then
				break
			end
			loc_1 = 0
			while true do
				rt_store_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_0, 4), loc_3), 0)
				loc_0 = rt_add_i32(loc_0, 1)
				loc_1 = rt_add_i32(loc_1, 1)
				if loc_5 ~= loc_1 then
					continue
				end
				break
			end
			break
		end
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[16] = --[[ luaF_newCclosure(lua_State*, int, Table*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[354](loc_0, rt_add_i32(rt_shl_i32(loc_1, 4), 32), rt_load_i32_u8(memory_at_0, loc_0 + 4))
		loc_3 = reg_0
		loc_4 = rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 20)
		rt_store_i32_n8(memory_at_0, loc_3, 7)
		rt_store_i32_n8(memory_at_0, loc_3 + 1, bit_and(loc_4, 3))
		loc_0 = rt_load_i32_u8(memory_at_0, loc_0 + 4)
		rt_store_i32(memory_at_0, loc_3 + 12, loc_2)
		rt_store_i32_n8(memory_at_0, loc_3 + 3, 1)
		rt_store_i32_n8(memory_at_0, loc_3 + 2, loc_0)
		rt_store_i32(memory_at_0, loc_3 + 24, 0)
		rt_store_i64(memory_at_0, loc_3 + 16, rt_i64_ZERO)
		rt_store_i32_n16(memory_at_0, loc_3 + 5, 20)
		rt_store_i32_n8(memory_at_0, loc_3 + 4, loc_1)
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[17] = --[[ luaF_findupval(lua_State*, lua_TValue*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		loc_4 = rt_add_i32(loc_0, 60)
		loc_5 = rt_load_i32(memory_at_0, loc_0 + 16)
		while true do
			while true do
				loc_3 = rt_load_i32(memory_at_0, loc_0 + 60)
				if loc_3 == 0 then
					break
				end
				loc_6 = rt_load_i32(memory_at_0, loc_3 + 4)
				if loc_1 > loc_6 then
					break
				end
				while true do
					loc_2 = loc_3
					if loc_1 == loc_6 then
						desired = 1
						break
					end
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 16)
					if loc_3 ~= 0 then
						while true do
							loc_6 = rt_load_i32(memory_at_0, loc_3 + 4)
							if loc_1 <= loc_6 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_4 = rt_add_i32(loc_2, 16)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[354](loc_0, 24, rt_load_i32_u8(memory_at_0, loc_0 + 4))
			loc_2 = reg_0
			loc_3 = rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 20)
			rt_store_i32_n8(memory_at_0, loc_2, 12)
			rt_store_i32_n8(memory_at_0, loc_2 + 1, bit_and(loc_3, 3))
			loc_3 = rt_load_i32_u8(memory_at_0, loc_0 + 4)
			rt_store_i32(memory_at_0, loc_2 + 4, loc_1)
			rt_store_i32_n8(memory_at_0, loc_2 + 3, 0)
			rt_store_i32_n8(memory_at_0, loc_2 + 2, loc_3)
			rt_store_i32(memory_at_0, loc_2 + 16, rt_load_i32(memory_at_0, loc_4))
			rt_store_i32(memory_at_0, loc_4, loc_2)
			rt_store_i32(memory_at_0, loc_2 + 8, rt_add_i32(loc_5, 1416))
			loc_3 = rt_load_i32(memory_at_0, loc_5 + 1428)
			rt_store_i32(memory_at_0, loc_2 + 12, loc_3)
			rt_store_i32(memory_at_0, loc_3 + 8, loc_2)
			rt_store_i32(memory_at_0, loc_5 + 1428, loc_2)
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[18] = --[[ luaF_freeupval(lua_State*, UpVal*, lua_Page*) ]] function(loc_0, loc_1, loc_2)
	while true do
		FUNC_LIST[356](loc_0, loc_1, 24, rt_load_i32_u8(memory_at_0, loc_1 + 2), loc_2)
		break
	end
end
FUNC_LIST[19] = --[[ luaF_close(lua_State*, lua_TValue*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local desired
	while true do
		while true do
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 60)
			if loc_2 == 0 then
				break
			end
			while true do
				if loc_1 > rt_load_i32(memory_at_0, loc_2 + 4) then
					desired = 1
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 60, rt_load_i32(memory_at_0, rt_add_i32(loc_2, 16)))
				loc_3 = rt_load_i32(memory_at_0, loc_2 + 8)
				rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 12) + 8, loc_3)
				rt_store_i32(memory_at_0, loc_3 + 12, rt_load_i32(memory_at_0, loc_2 + 12))
				loc_3 = rt_load_i32(memory_at_0, loc_2 + 4)
				rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_3))
				rt_store_i64(memory_at_0, loc_2 + 16, rt_load_i64(memory_at_0, loc_3 + 8))
				rt_store_i32(memory_at_0, loc_2 + 4, rt_add_i32(loc_2, 8))
				FUNC_LIST[52](loc_0, loc_2)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 60)
				if loc_2 ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[20] = --[[ luaF_closeupval(lua_State*, UpVal*, bool) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_1 + 8)
		rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 12) + 8, loc_3)
		rt_store_i32(memory_at_0, loc_3 + 12, rt_load_i32(memory_at_0, loc_1 + 12))
		if loc_2 == 0 then
			while true do
				loc_2 = rt_add_i32(loc_1, 8)
				loc_3 = rt_load_i32(memory_at_0, loc_1 + 4)
				rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_3))
				rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
				rt_store_i32(memory_at_0, loc_1 + 4, loc_2)
				FUNC_LIST[52](loc_0, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[21] = --[[ luaF_freeproto(lua_State*, Proto*, lua_Page*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	while true do
		FUNC_LIST[355](loc_0, rt_load_i32(memory_at_0, loc_1 + 12), rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 72), 2), rt_load_i32_u8(memory_at_0, loc_1 + 2))
		FUNC_LIST[355](loc_0, rt_load_i32(memory_at_0, loc_1 + 16), rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 76), 2), rt_load_i32_u8(memory_at_0, loc_1 + 2))
		FUNC_LIST[355](loc_0, rt_load_i32(memory_at_0, loc_1 + 8), rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 88), 4), rt_load_i32_u8(memory_at_0, loc_1 + 2))
		loc_3 = rt_load_i32(memory_at_0, loc_1 + 32)
		if loc_3 ~= 0 then
			while true do
				FUNC_LIST[355](loc_0, loc_3, rt_load_i32(memory_at_0, loc_1 + 92), rt_load_i32_u8(memory_at_0, loc_1 + 2))
				break
			end
		end
		FUNC_LIST[355](loc_0, rt_load_i32(memory_at_0, loc_1 + 40), rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 80), 4), rt_load_i32_u8(memory_at_0, loc_1 + 2))
		FUNC_LIST[355](loc_0, rt_load_i32(memory_at_0, loc_1 + 44), rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 84), 2), rt_load_i32_u8(memory_at_0, loc_1 + 2))
		loc_3 = rt_load_i32(memory_at_0, loc_1 + 56)
		if loc_3 ~= 0 then
			while true do
				FUNC_LIST[355](loc_0, loc_3, rt_load_i32(memory_at_0, loc_1 + 72), rt_load_i32_u8(memory_at_0, loc_1 + 2))
				break
			end
		end
		if rt_load_i32(memory_at_0, loc_1 + 24) ~= 0 then
			while true do
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1744)](loc_0, loc_1)
				break
			end
		end
		loc_3 = rt_load_i32(memory_at_0, loc_1 + 60)
		if loc_3 ~= 0 then
			while true do
				FUNC_LIST[355](loc_0, loc_3, rt_load_i32(memory_at_0, loc_1 + 108), rt_load_i32_u8(memory_at_0, loc_1 + 2))
				break
			end
		end
		FUNC_LIST[356](loc_0, loc_1, 112, rt_load_i32_u8(memory_at_0, loc_1 + 2), loc_2)
		break
	end
end
FUNC_LIST[22] = --[[ luaF_freeclosure(lua_State*, Closure*, lua_Page*) ]] function(loc_0, loc_1, loc_2)
	while true do
		FUNC_LIST[356](loc_0, loc_1, rt_add_i32(rt_shl_i32(rt_load_i32_u8(memory_at_0, loc_1 + 4), 4), (if rt_load_i32_u8(memory_at_0, loc_1 + 3) ~= 0 then 32 else 24)), rt_load_i32_u8(memory_at_0, loc_1 + 2), loc_2)
		break
	end
end
FUNC_LIST[23] = --[[ luaF_getlocal(Proto const*, int, int) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_4 = rt_load_i32(memory_at_0, loc_0 + 80)
			if rt_gt_i32(loc_4, 0) then
				while true do
					loc_5 = rt_load_i32(memory_at_0, loc_0 + 40)
					loc_0 = 0
					while true do
						while true do
							loc_3 = rt_add_i32(rt_shl_i32(loc_0, 4), loc_5)
							if rt_gt_i32(rt_load_i32(memory_at_0, loc_3 + 4), loc_2) then
								break
							end
							if rt_le_i32(rt_load_i32(memory_at_0, loc_3 + 8), loc_2) then
								break
							end
							loc_1 = rt_sub_i32(loc_1, 1)
							if loc_1 == 0 then
								desired = 1
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
						loc_0 = rt_add_i32(loc_0, 1)
						if loc_4 ~= loc_0 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = 0
			break
		end
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[24] = --[[ luaB_newbuffer(lua_State*, unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		if loc_1 >= 1073741825 then
			while true do
				FUNC_LIST[351](loc_0)
				error("out of code bounds")
			end
		end
		reg_0 = FUNC_LIST[354](loc_0, rt_add_i32((if loc_1 <= 8 then 8 else loc_1), 8), rt_load_i32_u8(memory_at_0, loc_0 + 4))
		loc_2 = reg_0
		loc_3 = rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 20)
		rt_store_i32_n8(memory_at_0, loc_2, 10)
		rt_store_i32_n8(memory_at_0, loc_2 + 1, bit_and(loc_3, 3))
		loc_0 = rt_load_i32_u8(memory_at_0, loc_0 + 4)
		rt_store_i32(memory_at_0, loc_2 + 4, loc_1)
		rt_store_i32_n8(memory_at_0, loc_2 + 2, loc_0)
		reg_0 = FUNC_LIST[611](rt_add_i32(loc_2, 8), 0, loc_1)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[25] = --[[ luaB_freebuffer(lua_State*, Buffer*, lua_Page*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_1 + 4)
		FUNC_LIST[356](loc_0, loc_1, (if loc_3 < 8 then 16 else rt_add_i32(loc_3, 8)), rt_load_i32_u8(memory_at_0, loc_1 + 2), loc_2)
		break
	end
end
FUNC_LIST[26] = --[[ luaopen_coroutine ]] function(loc_0)
	local reg_0
	while true do
		FUNC_LIST[228](loc_0, 4161, 6608)
		FUNC_LIST[149](loc_0, 1, 4220, 0, 2)
		FUNC_LIST[165](loc_0, 4294967294, 4220)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[27] = --[[ coresumey(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[137](loc_0, 1)
		loc_2 = reg_0
		if loc_2 ~= 0 then
			while true do
				reg_0 = FUNC_LIST[29](loc_0, loc_2, rt_sub_i32(rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_load_i32(memory_at_0, loc_0 + 12)), 4), 1))
				loc_1 = reg_0
				if loc_1 == 4294967294 then
					while true do
						loc_1 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1724)
						if loc_1 ~= 0 then
							while true do
								FUNC_LIST[577](loc_0, loc_1, loc_2)
								break
							end
							if desired then
								break
							end
						end
						reg_0 = FUNC_LIST[91](loc_0)
						desired = 0
						break
					end
					if desired then
						break
					end
				end
				if rt_lt_i32(loc_1, 0) then
					while true do
						FUNC_LIST[150](loc_0, 0)
						FUNC_LIST[108](loc_0, 4294967294)
						reg_0 = 2
						desired = 0
						break
					end
					if desired then
						break
					end
				end
				FUNC_LIST[150](loc_0, 1)
				FUNC_LIST[108](loc_0, bit_xor(loc_1, 4294967295))
				reg_0 = rt_add_i32(loc_1, 1)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[205](loc_0, 1, 4911)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[28] = --[[ coresumecont(lua_State*, int) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[137](loc_0, 1)
		loc_3 = reg_0
		if loc_3 ~= 0 then
			while true do
				loc_2 = rt_load_i32_u8(memory_at_0, loc_3 + 3)
				if loc_2 == 6 then
					while true do
						loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1724)
						if loc_2 ~= 0 then
							while true do
								FUNC_LIST[577](loc_0, loc_2, loc_3)
								break
							end
							if desired then
								break
							end
						end
						reg_0 = FUNC_LIST[91](loc_0)
						desired = 0
						break
					end
					if desired then
						break
					end
				end
				while true do
					while true do
						while true do
							if loc_2 <= 1 then
								while true do
									loc_2 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 8), rt_load_i32(memory_at_0, loc_3 + 12)), 4)
									loc_4 = rt_add_i32(loc_2, 1)
									reg_0 = FUNC_LIST[98](loc_0, loc_4)
									if reg_0 ~= 0 then
										desired = 4
										break
									end
									FUNC_LIST[203](loc_0, 4200, 0)
									error("out of code bounds")
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							FUNC_LIST[99](loc_0, 2)
							FUNC_LIST[100](loc_3, loc_0, 1)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						FUNC_LIST[100](loc_3, loc_0, loc_2)
						if rt_ge_i32(loc_2, 0) then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					FUNC_LIST[150](loc_0, 0)
					FUNC_LIST[108](loc_0, 4294967294)
					reg_0 = 2
					desired = 0
					break
				end
				if desired then
					break
				end
				FUNC_LIST[150](loc_0, 1)
				FUNC_LIST[108](loc_0, bit_xor(loc_2, 4294967295))
				reg_0 = loc_4
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[205](loc_0, 1, 4911)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[29] = --[[ auxresume(lua_State*, lua_State*, int) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								if rt_load_i32_u8(memory_at_0, loc_1 + 3) == 1 then
									break
								end
								reg_0 = FUNC_LIST[175](loc_0, loc_1)
								loc_4 = reg_0
								if loc_4 == 1 then
									break
								end
								rt_store_i32(memory_at_0, loc_3, rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_4, 2), 6672)))
								reg_0 = FUNC_LIST[148](loc_0, 4077, loc_3)
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if loc_2 ~= 0 then
									while true do
										reg_0 = FUNC_LIST[98](loc_1, loc_2)
										if reg_0 == 0 then
											desired = 3
											break
										end
										FUNC_LIST[100](loc_0, loc_1, loc_2)
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								if rt_load_i32_u8(memory_at_0, 31008) ~= 1 then
									break
								end
								if rt_ge_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 8), rt_load_i32(memory_at_0, loc_1 + 12)), 128001) then
									desired = 2
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							rt_store_i32_n8(memory_at_0, loc_1 + 6, rt_load_i32_u8(memory_at_0, loc_0 + 6))
							reg_0 = FUNC_LIST[86](loc_1, loc_0, loc_2)
							loc_2 = reg_0
							if loc_2 <= 1 then
								while true do
									loc_2 = rt_load_i32(memory_at_0, loc_1 + 8)
									loc_4 = rt_load_i32(memory_at_0, loc_1 + 12)
									if loc_2 == loc_4 then
										while true do
											loc_2 = 0
											desired = 4
											break
										end
										if desired then
											break
										end
									end
									loc_2 = rt_shr_i32(rt_sub_i32(loc_2, loc_4), 4)
									if rt_ge_i32(loc_2, 20) then
										while true do
											reg_0 = FUNC_LIST[98](loc_0, rt_add_i32(loc_2, 1))
											if reg_0 == 0 then
												desired = 1
												break
											end
											break
										end
										if desired then
											break
										end
									end
									FUNC_LIST[100](loc_1, loc_0, loc_2)
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_2 == 6 then
								while true do
									loc_2 = 4294967294
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							FUNC_LIST[100](loc_1, loc_0, 1)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_2 = 4294967295
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
					reg_0 = loc_2
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[203](loc_0, 4171, 0)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[203](loc_0, 4171, 0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[203](loc_0, 4200, 0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[30] = --[[ cocreate(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		FUNC_LIST[214](loc_0, 1, 7)
		reg_1 = FUNC_LIST[102](loc_0)
		FUNC_LIST[101](loc_0, reg_1, 1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[31] = --[[ corunning(lua_State*) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[152](loc_0)
		if reg_0 ~= 0 then
			while true do
				FUNC_LIST[140](loc_0)
				break
			end
		end
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[32] = --[[ costatus(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	local reg_1
	while true do
		reg_0 = FUNC_LIST[137](loc_0, 1)
		loc_1 = reg_0
		if loc_1 == 0 then
			while true do
				FUNC_LIST[205](loc_0, 1, 4911)
				error("out of code bounds")
			end
		end
		reg_1 = FUNC_LIST[175](loc_0, loc_1)
		FUNC_LIST[146](loc_0, rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(reg_1, 2), 6672)))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[33] = --[[ cowrap(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		FUNC_LIST[214](loc_0, 1, 7)
		reg_1 = FUNC_LIST[102](loc_0)
		FUNC_LIST[101](loc_0, reg_1, 1)
		FUNC_LIST[149](loc_0, 3, 0, 1, 4)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[34] = --[[ auxwrapy(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			reg_1 = FUNC_LIST[137](loc_0, 4294957293)
			loc_2 = reg_1
			reg_0 = FUNC_LIST[29](loc_0, loc_2, rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_load_i32(memory_at_0, loc_0 + 12)), 4))
			loc_1 = reg_0
			if loc_1 == 4294967294 then
				while true do
					loc_1 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1724)
					if loc_1 ~= 0 then
						while true do
							FUNC_LIST[577](loc_0, loc_1, loc_2)
							break
						end
						if desired then
							break
						end
					end
					reg_0 = FUNC_LIST[91](loc_0)
					loc_1 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 0) then
				break
			end
			reg_0 = FUNC_LIST[116](loc_0, 4294967295)
			if reg_0 ~= 0 then
				while true do
					FUNC_LIST[204](loc_0, 1)
					FUNC_LIST[108](loc_0, 4294967294)
					FUNC_LIST[182](loc_0, 2)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[179](loc_0)
			error("out of code bounds")
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[35] = --[[ auxwrapcont(lua_State*, int) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		while true do
			reg_0 = FUNC_LIST[137](loc_0, 4294957293)
			loc_3 = reg_0
			loc_2 = rt_load_i32_u8(memory_at_0, loc_3 + 3)
			if loc_2 == 6 then
				while true do
					loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1724)
					if loc_2 ~= 0 then
						while true do
							FUNC_LIST[577](loc_0, loc_2, loc_3)
							break
						end
						if desired then
							break
						end
					end
					reg_0 = FUNC_LIST[91](loc_0)
					loc_2 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				while true do
					if loc_2 <= 1 then
						while true do
							loc_2 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 8), rt_load_i32(memory_at_0, loc_3 + 12)), 4)
							reg_0 = FUNC_LIST[98](loc_0, rt_add_i32(loc_2, 1))
							if reg_0 ~= 0 then
								desired = 3
								break
							end
							FUNC_LIST[203](loc_0, 4200, 0)
							error("out of code bounds")
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[99](loc_0, 2)
					FUNC_LIST[100](loc_3, loc_0, 1)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[100](loc_3, loc_0, loc_2)
				if rt_ge_i32(loc_2, 0) then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[116](loc_0, 4294967295)
			if reg_0 ~= 0 then
				while true do
					FUNC_LIST[204](loc_0, 1)
					FUNC_LIST[108](loc_0, 4294967294)
					FUNC_LIST[182](loc_0, 2)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[179](loc_0)
			error("out of code bounds")
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[36] = --[[ coyield(lua_State*) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[90](loc_0, rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_load_i32(memory_at_0, loc_0 + 12)), 4))
		break
	end
	return reg_0
end
FUNC_LIST[37] = --[[ coyieldable(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[92](loc_0)
		FUNC_LIST[150](loc_0, reg_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[38] = --[[ coclose(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		while true do
			reg_0 = FUNC_LIST[137](loc_0, 1)
			loc_1 = reg_0
			if loc_1 ~= 0 then
				while true do
					reg_0 = FUNC_LIST[175](loc_0, loc_1)
					loc_2 = reg_0
					if bit_and((if rt_sub_i32(loc_2, 3) >= 2 then 1 else 0), (if loc_2 ~= 1 then 1 else 0)) ~= 0 then
						desired = 1
						break
					end
					loc_2 = 1
					while true do
						if rt_load_i32_u8(memory_at_0, loc_1 + 3) <= 1 then
							while true do
								FUNC_LIST[150](loc_0, 1)
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[150](loc_0, 0)
						if rt_load_i32_u8(memory_at_0, 35120) == 1 then
							while true do
								while true do
									while true do
										while true do
											if not br_map[1] then
												br_map[1] = (function()
													return { [0] = 0, 1, }
												end)()
											end
											temp = br_map[1][rt_sub_i32(rt_load_i32_u8(memory_at_0, loc_1 + 3), 4)] or 2
											if temp < 1 then
												break
											elseif temp > 1 then
												desired = 5
												break
											else
												desired = 6
												break
											end
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
										FUNC_LIST[146](loc_0, 1121)
										loc_2 = 2
										desired = 3
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
									FUNC_LIST[146](loc_0, 3507)
									loc_2 = 2
									desired = 3
									break
								end
								if desired then
									break
								end
								loc_2 = 2
								reg_0 = FUNC_LIST[105](loc_1)
								if reg_0 == 0 then
									desired = 3
									break
								end
								FUNC_LIST[100](loc_1, loc_0, 1)
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_2 = 2
						reg_0 = FUNC_LIST[105](loc_1)
						if reg_0 == 0 then
							break
						end
						FUNC_LIST[100](loc_1, loc_0, 1)
						break
					end
					if desired then
						break
					end
					FUNC_LIST[378](loc_1)
					GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
					reg_0 = loc_2
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[205](loc_0, 1, 4911)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32(memory_at_0, loc_3, rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_2, 2), 6672)))
		FUNC_LIST[203](loc_0, 4051, loc_3)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[39] = --[[ luaC_freeall(lua_State*) ]] function(loc_0)
	while true do
		FUNC_LIST[360](loc_0, loc_0, 12)
		break
	end
end
FUNC_LIST[40] = --[[ deletegco(void*, lua_Page*, GCObject*) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		FUNC_LIST[41](loc_0, loc_2, loc_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[41] = --[[ freeobj(lua_State*, GCObject*, lua_Page*) ]] function(loc_0, loc_1, loc_2)
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											if not br_map[1] then
												br_map[1] = (function()
													return { [0] = 5, 3, 1, 6, 4, 7, 0, 2, }
												end)()
											end
											temp = br_map[1][rt_sub_i32(rt_load_i32_u8(memory_at_0, loc_1), 5)] or 8
											if temp < 4 then
												if temp < 2 then
													if temp < 1 then
														break
													else
														desired = 8
														break
													end
												elseif temp > 2 then
													desired = 6
													break
												else
													desired = 7
													break
												end
											elseif temp > 4 then
												if temp < 7 then
													if temp < 6 then
														desired = 4
														break
													else
														desired = 3
														break
													end
												elseif temp > 7 then
													desired = 1
													break
												else
													desired = 2
													break
												end
											else
												desired = 5
												break
											end
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										FUNC_LIST[21](loc_0, loc_1, loc_2)
										desired = 0
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									FUNC_LIST[22](loc_0, loc_1, loc_2)
									desired = 0
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								FUNC_LIST[18](loc_0, loc_1, loc_2)
								desired = 0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[424](loc_0, loc_1, loc_2)
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[377](loc_0, loc_1, loc_2)
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[388](loc_0, loc_1, loc_2)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[465](loc_0, loc_1, loc_2)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[25](loc_0, loc_1, loc_2)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
end
FUNC_LIST[42] = --[[ luaC_step(lua_State*, bool) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0.0
	local loc_14 = 0.0
	local loc_15 = 0.0
	local loc_16 = rt_i64_ZERO
	local loc_17 = rt_i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	local desired
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
		loc_5 = rt_load_i32(memory_at_0, loc_2 + 36)
		loc_4 = rt_load_i32(memory_at_0, loc_2 + 40)
		loc_6 = rt_div_i32(rt_mul_i32(rt_load_i32(memory_at_0, loc_2 + 48), rt_load_i32(memory_at_0, loc_2 + 52)), 100)
		loc_3 = rt_load_i32(memory_at_0, loc_2 + 1700)
		if loc_3 ~= 0 then
			while true do
				TABLE_LIST[0].data[loc_3](loc_0, 0)
				break
			end
		end
		loc_7 = rt_load_i32_u8(memory_at_0, loc_2 + 21)
		if loc_7 ~= 0 then
			while true do
				reg_0 = loc_7
				break
			end
		else
			while true do
				reg_1 = FUNC_LIST[374]()
				rt_store_f64(memory_at_0, loc_2 + 3456, reg_1)
				reg_0 = rt_load_i32_u8(memory_at_0, loc_2 + 21)
				break
			end
		end
		loc_7 = reg_0
		reg_0 = FUNC_LIST[43](loc_0, loc_6)
		loc_6 = rt_div_u32(rt_mul_i32(reg_0, 100), rt_load_i32(memory_at_0, loc_2 + 48))
		loc_3 = rt_load_i32(memory_at_0, loc_2 + 40)
		while true do
			if rt_load_i32_u8(memory_at_0, loc_2 + 21) == 0 then
				while true do
					loc_5 = rt_mul_i32(rt_load_i32(memory_at_0, loc_2 + 44), rt_div_u32(loc_3, 100))
					loc_4 = loc_5
					loc_13 = rt_load_f64(memory_at_0, loc_2 + 3464)
					loc_14 = (loc_13 - rt_load_f64(memory_at_0, loc_2 + 3472))
					if loc_14 < 1e-3 then
						while true do
							reg_0 = loc_4
							break
						end
						if desired then
							break
						end
					else
						while true do
							loc_8 = rt_load_i32(memory_at_0, loc_2 + 3432)
							loc_9 = rt_add_i32(rt_shl_i32(bit_and(loc_8, 31), 2), loc_2)
							loc_10 = rt_load_i32(memory_at_0, loc_9 + 3304)
							loc_11 = rt_load_i32(memory_at_0, loc_2 + 3444)
							loc_15 = rt_load_f64(memory_at_0, loc_2 + 3456)
							loc_12 = rt_load_i32(memory_at_0, loc_2 + 3440)
							loc_4 = rt_shr_u32(rt_sub_i32(loc_12, rt_load_i32(memory_at_0, loc_2 + 3448)), 10)
							rt_store_i32(memory_at_0, loc_9 + 3304, loc_4)
							rt_store_i32(memory_at_0, loc_2 + 3432, rt_add_i32(loc_8, 1))
							loc_8 = rt_add_i32(rt_load_i32(memory_at_0, loc_2 + 3436), rt_sub_i32(loc_4, loc_10))
							rt_store_i32(memory_at_0, loc_2 + 3436, loc_8)
							reg_0 = loc_3
							reg_1 = loc_5
							reg_2 = rt_extend_i64_u32(loc_5)
							while true do
								loc_13 = ((loc_13 - loc_15) * (no_op(rt_sub_i32(loc_12, loc_11)) / loc_14))
								if math_abs(loc_13) < 9.223372036854776e18 then
									while true do
										reg_3 = rt_truncate_i64_f64(loc_13)
										desired = 4
										break
									end
									if desired then
										if desired == 4 then
											desired = nil
										end
										break
									end
								end
								reg_3 = rt_i64_from_u32(0, 2147483648)
								break
							end
							if desired then
								break
							end
							loc_16 = reg_3
							reg_3 = loc_16
							while true do
								loc_13 = (((no_op(loc_4) * 4.05e-1) + (rt_convert_f64_i32(loc_8) * 2.4300000000000002e-1)) * 1.024e3)
								if math_abs(loc_13) < 9.223372036854776e18 then
									while true do
										reg_4 = rt_truncate_i64_f64(loc_13)
										desired = 4
										break
									end
									if desired then
										if desired == 4 then
											desired = nil
										end
										break
									end
								end
								reg_4 = rt_i64_from_u32(0, 2147483648)
								break
							end
							if desired then
								break
							end
							loc_17 = reg_4
							loc_16 = rt_add_i64(reg_3, loc_17)
							loc_17 = rt_sub_i64(reg_2, loc_16)
							reg_0 = (if rt_gt_i64(rt_extend_i64_u32(loc_3), loc_17) then reg_0 else (if rt_lt_i64(loc_16, rt_i64_ZERO) then reg_1 else rt_wrap_i32_i64(loc_17)))
							break
						end
						if desired then
							break
						end
					end
					loc_4 = reg_0
					rt_store_i32(memory_at_0, loc_2 + 3448, loc_5)
					rt_store_i32(memory_at_0, loc_2 + 36, loc_4)
					reg_1 = FUNC_LIST[374]()
					rt_store_f64(memory_at_0, loc_2 + 3472, reg_1)
					rt_store_i32(memory_at_0, loc_2 + 3444, rt_load_i32(memory_at_0, loc_2 + 40))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = rt_add_i32(loc_3, loc_6)
			rt_store_i32(memory_at_0, loc_2 + 36, loc_3)
			loc_5 = rt_sub_i32(loc_4, loc_5)
			if loc_5 > loc_3 then
				break
			end
			rt_store_i32(memory_at_0, loc_2 + 36, rt_sub_i32(loc_3, loc_5))
			break
		end
		loc_2 = rt_load_i32(memory_at_0, loc_2 + 1700)
		if loc_2 ~= 0 then
			while true do
				TABLE_LIST[0].data[loc_2](loc_0, loc_7)
				break
			end
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[43] = --[[ gcstep(lua_State*, unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_7 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_7
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								loc_4 = rt_load_i32(memory_at_0, loc_0 + 16)
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 1, 3, 4, 2, 0, }
									end)()
								end
								temp = br_map[1][rt_load_i32_u8(memory_at_0, loc_4 + 21)] or 5
								if temp < 3 then
									if temp < 1 then
										break
									elseif temp > 1 then
										desired = 4
										break
									else
										desired = 5
										break
									end
								elseif temp > 3 then
									if temp < 5 then
										desired = 2
										break
									else
										desired = 1
										break
									end
								else
									desired = 3
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								loc_9 = rt_load_i32(memory_at_0, loc_4 + 384)
								if loc_9 == 0 then
									break
								end
								if loc_1 == 0 then
									break
								end
								while true do
									reg_0 = FUNC_LIST[359](loc_9)
									loc_9 = reg_0
									loc_10 = rt_load_i32(memory_at_0, loc_4 + 384)
									FUNC_LIST[358](loc_10, rt_add_i32(loc_7, 12), rt_add_i32(loc_7, 8), rt_add_i32(loc_7, 4), loc_7)
									while true do
										while true do
											loc_2 = rt_load_i32(memory_at_0, loc_7 + 12)
											if loc_2 ~= rt_load_i32(memory_at_0, loc_7 + 8) then
												while true do
													loc_3 = rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 20)
													loc_8 = bit_and(loc_3, 3)
													loc_6 = bit_xor(loc_3, 3)
													while true do
														while true do
															while true do
																if rt_load_i32_u8(memory_at_0, loc_2) == 0 then
																	break
																end
																loc_3 = rt_load_i32_u8(memory_at_0, loc_2 + 1)
																if bit_and(loc_6, bit_xor(loc_3, 3)) ~= 0 then
																	while true do
																		rt_store_i32_n8(memory_at_0, loc_2 + 1, bit_or(loc_8, bit_and(loc_3, 248)))
																		desired = 13
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																end
																FUNC_LIST[41](loc_0, loc_2, loc_10)
																loc_3 = rt_sub_i32(rt_load_i32(memory_at_0, loc_7 + 4), 1)
																rt_store_i32(memory_at_0, loc_7 + 4, loc_3)
																if loc_3 == 0 then
																	desired = 11
																	break
																end
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																	continue
																end
																break
															end
															loc_3 = rt_load_i32(memory_at_0, loc_7)
															loc_2 = rt_add_i32(loc_3, loc_2)
															if loc_2 ~= rt_load_i32(memory_at_0, loc_7 + 8) then
																continue
															end
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
														reg_0 = rt_load_i32(memory_at_0, loc_7 + 12)
														desired = 9
														break
													end
													if desired then
														break
													end
													reg_0 = rt_add_i32(rt_div_i32(rt_sub_i32(loc_2, rt_load_i32(memory_at_0, loc_7 + 12)), rt_load_i32(memory_at_0, loc_7)), 1)
													desired = 8
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											loc_3 = rt_load_i32(memory_at_0, loc_7)
											reg_0 = loc_2
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_6 = reg_0
										reg_0 = rt_div_i32(rt_sub_i32(loc_2, loc_6), loc_3)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
											continue
										end
										break
									end
									loc_2 = reg_0
									rt_store_i32(memory_at_0, loc_4 + 384, loc_9)
									loc_5 = rt_add_i32(loc_5, rt_shl_i32(loc_2, 4))
									if loc_9 == 0 then
										desired = 6
										break
									end
									if loc_1 > loc_5 then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_9 ~= 0 then
								desired = 1
								break
							end
							loc_2 = rt_load_i32(memory_at_0, loc_4 + 1412)
							rt_store_i32_n8(memory_at_0, loc_2 + 1, bit_or(bit_and(rt_load_i32_u8(memory_at_0, loc_4 + 20), 3), bit_and(rt_load_i32_u8(memory_at_0, loc_2 + 1), 248)))
							loc_3 = rt_load_i32(memory_at_0, loc_0 + 16)
							loc_2 = rt_load_i32(memory_at_0, loc_3 + 8)
							loc_6 = rt_div_i32(loc_2, 4)
							while true do
								if rt_lt_i32(loc_2, 65) then
									break
								end
								if loc_6 <= rt_load_i32(memory_at_0, loc_3 + 4) then
									break
								end
								FUNC_LIST[384](loc_0, rt_shr_u32(loc_2, 1))
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							rt_store_i32_n8(memory_at_0, loc_4 + 21, 0)
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[44](loc_0)
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_1 = FUNC_LIST[374]()
					rt_store_f64(memory_at_0, loc_4 + 3464, reg_1)
					rt_store_i32(memory_at_0, loc_4 + 3440, rt_load_i32(memory_at_0, loc_4 + 40))
					loc_1 = rt_load_i32(memory_at_0, loc_0 + 16)
					loc_2 = rt_load_i32(memory_at_0, loc_1 + 1428)
					loc_3 = rt_add_i32(loc_1, 1416)
					if loc_2 ~= loc_3 then
						while true do
							while true do
								while true do
									if bit_and(rt_load_i32_u8(memory_at_0, loc_2 + 1), 7) ~= 0 then
										break
									end
									loc_6 = rt_load_i32(memory_at_0, loc_2 + 4)
									if rt_lt_i32(rt_load_i32(memory_at_0, loc_6 + 12), 5) then
										break
									end
									loc_6 = rt_load_i32(memory_at_0, loc_6)
									if bit_and(rt_load_i32_u8(memory_at_0, loc_6 + 1), 3) == 0 then
										break
									end
									FUNC_LIST[45](loc_1, loc_6)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
								loc_11 = rt_add_i32(loc_11, 24)
								loc_2 = rt_load_i32(memory_at_0, loc_2 + 12)
								if loc_3 ~= loc_2 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if rt_load_i32(memory_at_0, loc_1 + 24) ~= 0 then
						while true do
							while true do
								reg_0 = FUNC_LIST[46](loc_1)
								loc_13 = rt_add_i32(reg_0, loc_13)
								if rt_load_i32(memory_at_0, loc_1 + 24) ~= 0 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = rt_load_i32(memory_at_0, loc_1 + 32)
					rt_store_i32(memory_at_0, loc_1 + 32, 0)
					rt_store_i32(memory_at_0, loc_1 + 24, loc_2)
					if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 3) ~= 0 then
						while true do
							FUNC_LIST[45](loc_1, loc_0)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[47](loc_1)
					if rt_load_i32(memory_at_0, loc_1 + 24) ~= 0 then
						while true do
							while true do
								reg_0 = FUNC_LIST[46](loc_1)
								loc_14 = rt_add_i32(reg_0, loc_14)
								if rt_load_i32(memory_at_0, loc_1 + 24) ~= 0 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = rt_load_i32(memory_at_0, loc_1 + 28)
					rt_store_i32(memory_at_0, loc_1 + 28, 0)
					rt_store_i32(memory_at_0, loc_1 + 24, loc_2)
					if loc_2 ~= 0 then
						while true do
							while true do
								reg_0 = FUNC_LIST[46](loc_1)
								loc_12 = rt_add_i32(reg_0, loc_12)
								if rt_load_i32(memory_at_0, loc_1 + 24) ~= 0 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_6 = rt_load_i32(memory_at_0, loc_1 + 32)
					if loc_6 ~= 0 then
						while true do
							while true do
								loc_2 = rt_load_i32(memory_at_0, loc_6 + 8)
								loc_3 = rt_load_i32_u8(memory_at_0, loc_6 + 6)
								loc_4 = rt_add_i32(rt_add_i32(rt_shl_i32(loc_2, 4), loc_15), rt_shl_i32(32, loc_3))
								loc_15 = rt_add_i32(loc_4, 32)
								reg_0 = 4294967295
								if loc_2 ~= 0 then
									while true do
										while true do
											while true do
												loc_2 = rt_sub_i32(loc_2, 1)
												loc_3 = rt_add_i32(rt_load_i32(memory_at_0, loc_6 + 20), rt_shl_i32(loc_2, 4))
												if rt_lt_i32(rt_load_i32(memory_at_0, loc_3 + 12), 5) then
													break
												end
												loc_5 = rt_load_i32(memory_at_0, loc_3)
												loc_8 = rt_load_i32_u8(memory_at_0, loc_5 + 1)
												if rt_load_i32_u8(memory_at_0, loc_5) == 5 then
													while true do
														rt_store_i32_n8(memory_at_0, loc_5 + 1, bit_and(loc_8, 252))
														desired = 8
														break
													end
													if desired then
														if desired == 8 then
															desired = nil
														end
														break
													end
												end
												if bit_and(loc_8, 3) == 0 then
													break
												end
												rt_store_i32(memory_at_0, loc_3 + 12, 0)
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
													continue
												end
												break
											end
											if loc_2 ~= 0 then
												continue
											end
											break
										end
										if desired then
											break
										end
										reg_1 = rt_load_i32_u8(memory_at_0, loc_6 + 6)
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
											continue
										end
										break
									end
								else
									while true do
										reg_1 = loc_3
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
											continue
										end
										break
									end
								end
								loc_3 = reg_1
								loc_3 = bit_xor(rt_shl_i32(reg_0, loc_3), 4294967295)
								loc_8 = 0
								while true do
									while true do
										loc_2 = loc_3
										loc_3 = rt_add_i32(rt_load_i32(memory_at_0, loc_6 + 24), rt_shl_i32(loc_2, 5))
										loc_5 = rt_load_i32(memory_at_0, loc_3 + 12)
										if loc_5 == 0 then
											break
										end
										while true do
											while true do
												while true do
													loc_4 = rt_load_i32(memory_at_0, loc_3 + 28)
													if bit_and(loc_4, 15) < 5 then
														break
													end
													loc_10 = rt_load_i32(memory_at_0, loc_3 + 16)
													loc_9 = rt_load_i32_u8(memory_at_0, loc_10 + 1)
													if rt_load_i32_u8(memory_at_0, loc_10) == 5 then
														while true do
															rt_store_i32_n8(memory_at_0, loc_10 + 1, bit_and(loc_9, 252))
															loc_5 = rt_load_i32(memory_at_0, loc_3 + 12)
															desired = 10
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
															end
															break
														end
													end
													if bit_and(loc_9, 3) == 0 then
														break
													end
													rt_store_i32(memory_at_0, loc_3 + 12, 0)
													desired = 9
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
												if rt_lt_i32(loc_5, 5) then
													desired = 8
													break
												end
												loc_5 = rt_load_i32(memory_at_0, loc_3)
												loc_4 = rt_load_i32_u8(memory_at_0, loc_5 + 1)
												if rt_load_i32_u8(memory_at_0, loc_5) == 5 then
													while true do
														rt_store_i32_n8(memory_at_0, loc_5 + 1, bit_and(loc_4, 252))
														loc_8 = rt_add_i32(loc_8, 1)
														desired = 7
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
														end
														break
													end
												end
												if bit_and(loc_4, 3) == 0 then
													desired = 8
													break
												end
												rt_store_i32(memory_at_0, loc_3 + 12, 0)
												loc_4 = rt_load_i32(memory_at_0, loc_3 + 28)
												if bit_and(loc_4, 15) < 5 then
													desired = 7
													break
												end
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
											rt_store_i32(memory_at_0, loc_3 + 28, bit_or(bit_and(loc_4, 4294967280), 13))
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
										loc_8 = rt_add_i32(loc_8, 1)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
									loc_3 = rt_sub_i32(loc_2, 1)
									if loc_2 ~= 0 then
										continue
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
								while true do
									loc_2 = rt_load_i32(memory_at_0, loc_6 + 16)
									if loc_2 == 0 then
										break
									end
									if bit_and(rt_load_i32_u8(memory_at_0, loc_2 + 3), 4) ~= 0 then
										break
									end
									reg_0 = FUNC_LIST[460](loc_2, 2, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1536))
									loc_2 = reg_0
									if loc_2 == 0 then
										break
									end
									if rt_load_i32(memory_at_0, loc_2 + 12) ~= 5 then
										break
									end
									reg_0 = FUNC_LIST[747](rt_add_i32(rt_load_i32(memory_at_0, loc_2), 20), 115)
									if reg_0 == 0 then
										break
									end
									if rt_le_i32(rt_div_i32(rt_shl_i32(3, rt_load_i32_u8(memory_at_0, loc_6 + 6)), 8), loc_8) then
										break
									end
									FUNC_LIST[422](loc_0, loc_6, loc_8)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
								loc_6 = rt_load_i32(memory_at_0, loc_6 + 28)
								if loc_6 ~= 0 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_3 = 0
					rt_store_i32(memory_at_0, loc_1 + 32, 0)
					loc_6 = rt_load_i32(memory_at_0, loc_0 + 16)
					loc_2 = rt_load_i32(memory_at_0, loc_6 + 1428)
					loc_6 = rt_add_i32(loc_6, 1416)
					if loc_2 ~= loc_6 then
						while true do
							while true do
								loc_3 = rt_add_i32(loc_3, 24)
								while true do
									if rt_load_i32_u8(memory_at_0, loc_2 + 3) ~= 0 then
										while true do
											rt_store_i32_n8(memory_at_0, loc_2 + 3, 0)
											reg_0 = rt_load_i32(memory_at_0, loc_2 + 12)
											desired = 6
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									loc_5 = rt_load_i32(memory_at_0, loc_2 + 12)
									FUNC_LIST[20](loc_0, loc_2, (if bit_and(rt_load_i32_u8(memory_at_0, loc_2 + 1), 3) ~= 0 then 1 else 0))
									reg_0 = loc_5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
								loc_2 = reg_0
								if loc_2 ~= loc_6 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					rt_store_i32_n8(memory_at_0, loc_1 + 21, 4)
					rt_store_i32(memory_at_0, loc_1 + 384, rt_load_i32(memory_at_0, loc_1 + 380))
					rt_store_i32_n8(memory_at_0, loc_1 + 20, bit_xor(rt_load_i32_u8(memory_at_0, loc_1 + 20), 3))
					loc_5 = rt_add_i32(loc_3, rt_add_i32(loc_15, rt_add_i32(loc_12, rt_add_i32(loc_14, rt_add_i32(loc_11, loc_13)))))
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = rt_load_i32(memory_at_0, loc_4 + 24)
				loc_3 = (if loc_2 ~= 0 then 1 else 0)
				while true do
					if loc_2 == 0 then
						break
					end
					if loc_1 == 0 then
						break
					end
					while true do
						reg_0 = FUNC_LIST[46](loc_4)
						loc_5 = rt_add_i32(reg_0, loc_5)
						loc_2 = rt_load_i32(memory_at_0, loc_4 + 24)
						loc_3 = (if loc_2 ~= 0 then 1 else 0)
						if loc_2 == 0 then
							desired = 3
							break
						end
						if loc_1 > loc_5 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_3 ~= 0 then
					desired = 1
					break
				end
				rt_store_i32_n8(memory_at_0, loc_4 + 21, 2)
				loc_2 = rt_load_i32(memory_at_0, loc_4 + 28)
				rt_store_i32(memory_at_0, loc_4 + 28, 0)
				rt_store_i32(memory_at_0, loc_4 + 24, loc_2)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_4 + 24)
			loc_3 = (if loc_2 ~= 0 then 1 else 0)
			while true do
				if loc_2 == 0 then
					break
				end
				if loc_1 == 0 then
					break
				end
				while true do
					reg_0 = FUNC_LIST[46](loc_4)
					loc_5 = rt_add_i32(reg_0, loc_5)
					loc_2 = rt_load_i32(memory_at_0, loc_4 + 24)
					loc_3 = (if loc_2 ~= 0 then 1 else 0)
					if loc_2 == 0 then
						desired = 2
						break
					end
					if loc_1 > loc_5 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_3 ~= 0 then
				break
			end
			rt_store_i32_n8(memory_at_0, loc_4 + 21, 3)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_7, 16)
		reg_0 = loc_5
		break
	end
	return reg_0
end
FUNC_LIST[44] = --[[ markroot(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
		rt_store_i32(memory_at_0, loc_2 + 32, 0)
		rt_store_i64(memory_at_0, loc_2 + 24, rt_i64_ZERO)
		loc_1 = rt_load_i32(memory_at_0, loc_2 + 1412)
		if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) ~= 0 then
			while true do
				FUNC_LIST[45](loc_2, loc_1)
				reg_0 = rt_load_i32(memory_at_0, loc_2 + 1412)
				break
			end
		else
			while true do
				reg_0 = loc_1
				break
			end
		end
		loc_1 = reg_0
		loc_1 = rt_load_i32(memory_at_0, loc_1 + 56)
		if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) ~= 0 then
			while true do
				FUNC_LIST[45](loc_2, loc_1)
				break
			end
		end
		while true do
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 16)
			if rt_lt_i32(rt_load_i32(memory_at_0, loc_1 + 1644), 5) then
				break
			end
			loc_1 = rt_load_i32(memory_at_0, loc_1 + 1632)
			if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) == 0 then
				break
			end
			FUNC_LIST[45](loc_2, loc_1)
			break
		end
		FUNC_LIST[47](loc_2)
		rt_store_i32_n8(memory_at_0, loc_2 + 21, 1)
		break
	end
end
FUNC_LIST[45] = --[[ reallymarkobject(global_State*, GCObject*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local desired
	local br_map = {}
	while true do
		loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 1)
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											loc_2 = bit_and(loc_2, 252)
											rt_store_i32_n8(memory_at_0, loc_1 + 1, loc_2)
											loc_3 = rt_load_i32_u8(memory_at_0, loc_1)
											if loc_3 ~= 8 then
												while true do
													if not br_map[1] then
														br_map[1] = (function()
															return { [0] = 4, 3, 9, 5, 6, 7, 1, }
														end)()
													end
													temp = br_map[1][rt_sub_i32(loc_3, 6)] or 9
													if temp < 5 then
														if temp < 3 then
															desired = 9
															break
														elseif temp > 3 then
															desired = 6
															break
														else
															desired = 7
															break
														end
													elseif temp > 5 then
														if temp < 7 then
															desired = 4
															break
														elseif temp > 7 then
															desired = 1
															break
														else
															desired = 3
															break
														end
													else
														desired = 5
														break
													end
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											rt_store_i32_n8(memory_at_0, loc_1 + 1, bit_or(loc_2, 4))
											loc_1 = rt_load_i32(memory_at_0, loc_1 + 8)
											if loc_1 == 0 then
												desired = 1
												break
											end
											loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 1)
											if bit_and(loc_2, 3) ~= 0 then
												desired = 8
												break
											end
											desired = 1
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
												continue
											end
											break
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									while true do
										loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
										if rt_lt_i32(rt_load_i32(memory_at_0, loc_2 + 12), 5) then
											break
										end
										loc_3 = rt_load_i32(memory_at_0, loc_2)
										if bit_and(rt_load_i32_u8(memory_at_0, loc_3 + 1), 3) == 0 then
											break
										end
										FUNC_LIST[45](loc_0, loc_3)
										loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if rt_add_i32(loc_1, 8) ~= loc_2 then
										desired = 1
										break
									end
									rt_store_i32_n8(memory_at_0, loc_1 + 1, bit_or(rt_load_i32_u8(memory_at_0, loc_1 + 1), 4))
									desired = 0
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								rt_store_i32(memory_at_0, loc_1 + 8, rt_load_i32(memory_at_0, loc_0 + 24))
								desired = 2
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							rt_store_i32(memory_at_0, loc_1 + 28, rt_load_i32(memory_at_0, loc_0 + 24))
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						rt_store_i32(memory_at_0, loc_1 + 64, rt_load_i32(memory_at_0, loc_0 + 24))
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32_n8(memory_at_0, loc_1 + 1, bit_or(loc_2, 4))
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_1 + 68, rt_load_i32(memory_at_0, loc_0 + 24))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_0 + 24, loc_1)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
end
FUNC_LIST[46] = --[[ propagatemark(global_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 24)
		rt_store_i32_n8(memory_at_0, loc_2 + 1, bit_or(rt_load_i32_u8(memory_at_0, loc_2 + 1), 4))
		while true do
			while true do
				while true do
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 0, 1, 4, 2, 4, 3, }
								end)()
							end
							temp = br_map[1][rt_sub_i32(rt_load_i32_u8(memory_at_0, loc_2), 6)] or 4
							if temp < 2 then
								if temp < 1 then
									break
								else
									desired = 4
									break
								end
							elseif temp > 2 then
								if temp < 4 then
									desired = 2
									break
								else
									desired = 1
									break
								end
							else
								desired = 3
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						rt_store_i32(memory_at_0, loc_0 + 24, rt_load_i32(memory_at_0, loc_2 + 28))
						while true do
							while true do
								while true do
									while true do
										loc_1 = rt_load_i32(memory_at_0, loc_2 + 16)
										if loc_1 == 0 then
											break
										end
										if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) ~= 0 then
											while true do
												FUNC_LIST[45](loc_0, loc_1)
												loc_1 = rt_load_i32(memory_at_0, loc_2 + 16)
												if loc_1 == 0 then
													desired = 8
													break
												end
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 3), 4) ~= 0 then
											break
										end
										reg_0 = FUNC_LIST[460](loc_1, 2, rt_load_i32(memory_at_0, loc_0 + 1536))
										loc_1 = reg_0
										if loc_1 == 0 then
											break
										end
										if rt_load_i32(memory_at_0, loc_1 + 12) ~= 5 then
											break
										end
										loc_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_1), 20)
										reg_0 = FUNC_LIST[747](loc_1, 107)
										loc_3 = reg_0
										reg_1 = FUNC_LIST[747](loc_1, 118)
										loc_1 = reg_1
										if bit_or(loc_3, loc_1) == 0 then
											break
										end
										rt_store_i32(memory_at_0, loc_2 + 28, rt_load_i32(memory_at_0, loc_0 + 32))
										rt_store_i32(memory_at_0, loc_0 + 32, loc_2)
										if (if loc_1 ~= 0 then loc_3 else 0) ~= 0 then
											desired = 6
											break
										end
										loc_4 = (if loc_3 ~= 0 then 1 else 0)
										loc_5 = 1
										reg_0 = loc_5
										if loc_1 ~= 0 then
											desired = 7
											break
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_1 = rt_load_i32(memory_at_0, loc_2 + 8)
									if loc_1 ~= 0 then
										while true do
											while true do
												while true do
													loc_1 = rt_sub_i32(loc_1, 1)
													loc_3 = rt_add_i32(rt_load_i32(memory_at_0, loc_2 + 20), rt_shl_i32(loc_1, 4))
													if rt_lt_i32(rt_load_i32(memory_at_0, loc_3 + 12), 5) then
														break
													end
													loc_3 = rt_load_i32(memory_at_0, loc_3)
													if bit_and(rt_load_i32_u8(memory_at_0, loc_3 + 1), 3) == 0 then
														break
													end
													FUNC_LIST[45](loc_0, loc_3)
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
														continue
													end
													break
												end
												if loc_1 ~= 0 then
													continue
												end
												break
											end
											if desired then
												break
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									reg_0 = 0
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_5 = reg_0
								loc_3 = bit_xor(rt_shl_i32(4294967295, rt_load_i32_u8(memory_at_0, loc_2 + 6)), 4294967295)
								while true do
									while true do
										loc_1 = loc_3
										loc_3 = rt_add_i32(rt_load_i32(memory_at_0, loc_2 + 24), rt_shl_i32(loc_1, 5))
										if rt_load_i32(memory_at_0, loc_3 + 12) == 0 then
											while true do
												loc_6 = rt_load_i32(memory_at_0, loc_3 + 28)
												if bit_and(loc_6, 15) < 5 then
													desired = 8
													break
												end
												rt_store_i32(memory_at_0, loc_3 + 28, bit_or(bit_and(loc_6, 4294967280), 13))
												desired = 8
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										while true do
											if loc_4 ~= 0 then
												break
											end
											if bit_and(rt_load_i32(memory_at_0, loc_3 + 28), 15) < 5 then
												break
											end
											loc_6 = rt_load_i32(memory_at_0, loc_3 + 16)
											if bit_and(rt_load_i32_u8(memory_at_0, loc_6 + 1), 3) == 0 then
												break
											end
											FUNC_LIST[45](loc_0, loc_6)
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										if loc_5 ~= 0 then
											break
										end
										if rt_lt_i32(rt_load_i32(memory_at_0, loc_3 + 12), 5) then
											break
										end
										loc_3 = rt_load_i32(memory_at_0, loc_3)
										if bit_and(rt_load_i32_u8(memory_at_0, loc_3 + 1), 3) == 0 then
											break
										end
										FUNC_LIST[45](loc_0, loc_3)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
											continue
										end
										break
									end
									loc_3 = rt_sub_i32(loc_1, 1)
									if loc_1 ~= 0 then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if bit_or(loc_4, loc_5) ~= 1 then
									desired = 5
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							rt_store_i32_n8(memory_at_0, loc_2 + 1, bit_and(rt_load_i32_u8(memory_at_0, loc_2 + 1), 251))
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = rt_add_i32(rt_add_i32(rt_shl_i32(rt_load_i32(memory_at_0, loc_2 + 8), 4), rt_shl_i32(32, rt_load_i32_u8(memory_at_0, loc_2 + 6))), 32)
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 24, rt_load_i32(memory_at_0, loc_2 + 8))
					loc_1 = rt_load_i32(memory_at_0, loc_2 + 12)
					if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) ~= 0 then
						while true do
							FUNC_LIST[45](loc_0, loc_1)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					while true do
						if rt_load_i32_u8(memory_at_0, loc_2 + 3) ~= 0 then
							while true do
								loc_3 = rt_load_i32_u8(memory_at_0, loc_2 + 4)
								if loc_3 == 0 then
									while true do
										loc_3 = 0
										desired = 4
										break
									end
									if desired then
										break
									end
								end
								loc_5 = rt_add_i32(loc_2, 32)
								loc_1 = 0
								while true do
									while true do
										loc_4 = rt_add_i32(rt_shl_i32(loc_1, 4), loc_5)
										if rt_lt_i32(rt_load_i32(memory_at_0, loc_4 + 12), 5) then
											break
										end
										loc_4 = rt_load_i32(memory_at_0, loc_4)
										if bit_and(rt_load_i32_u8(memory_at_0, loc_4 + 1), 3) == 0 then
											break
										end
										FUNC_LIST[45](loc_0, loc_4)
										loc_3 = rt_load_i32_u8(memory_at_0, loc_2 + 4)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
									loc_1 = rt_add_i32(loc_1, 1)
									if loc_1 < bit_and(loc_3, 255) then
										continue
									end
									break
								end
								if desired then
									break
								end
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_1 = rt_load_i32(memory_at_0, loc_2 + 16)
						if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) ~= 0 then
							while true do
								FUNC_LIST[45](loc_0, loc_1)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_3 = rt_load_i32_u8(memory_at_0, loc_2 + 4)
						if loc_3 == 0 then
							while true do
								loc_3 = 0
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_5 = rt_add_i32(loc_2, 24)
						loc_1 = 0
						while true do
							while true do
								loc_4 = rt_add_i32(rt_shl_i32(loc_1, 4), loc_5)
								if rt_lt_i32(rt_load_i32(memory_at_0, loc_4 + 12), 5) then
									break
								end
								loc_4 = rt_load_i32(memory_at_0, loc_4)
								if bit_and(rt_load_i32_u8(memory_at_0, loc_4 + 1), 3) == 0 then
									break
								end
								FUNC_LIST[45](loc_0, loc_4)
								loc_3 = rt_load_i32_u8(memory_at_0, loc_2 + 4)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							loc_1 = rt_add_i32(loc_1, 1)
							if loc_1 < bit_and(loc_3, 255) then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = rt_shl_i32(bit_and(loc_3, 255), 4)
					if rt_load_i32_u8(memory_at_0, loc_2 + 3) ~= 0 then
						while true do
							reg_0 = rt_add_i32(loc_1, 32)
							desired = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = rt_add_i32(loc_1, 24)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 24, rt_load_i32(memory_at_0, loc_2 + 64))
				while true do
					while true do
						while true do
							if rt_load_i32_u8(memory_at_0, loc_2 + 5) == 0 then
								while true do
									loc_1 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 16) + 1412)
									FUNC_LIST[53](loc_0, loc_2)
									if loc_1 == loc_2 then
										desired = 5
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							FUNC_LIST[53](loc_0, loc_2)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						rt_store_i32(memory_at_0, loc_2 + 64, rt_load_i32(memory_at_0, loc_0 + 28))
						rt_store_i32(memory_at_0, loc_0 + 28, loc_2)
						rt_store_i32_n8(memory_at_0, loc_2 + 1, bit_and(rt_load_i32_u8(memory_at_0, loc_2 + 1), 251))
						if rt_load_i32_u8(memory_at_0, loc_0 + 21) ~= 3 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = rt_load_i32(memory_at_0, loc_2 + 8)
					loc_3 = rt_add_i32(rt_load_i32(memory_at_0, loc_2 + 28), rt_shl_i32(rt_load_i32(memory_at_0, loc_2 + 40), 4))
					if loc_1 >= loc_3 then
						break
					end
					while true do
						rt_store_i32(memory_at_0, loc_1 + 12, 0)
						loc_1 = rt_add_i32(loc_1, 16)
						if loc_3 > loc_1 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if rt_load_i32_u8(memory_at_0, loc_0 + 21) ~= 1 then
						break
					end
					loc_1 = rt_load_i32(memory_at_0, loc_2 + 8)
					loc_5 = rt_load_i32(memory_at_0, loc_2 + 36)
					loc_4 = rt_load_i32(memory_at_0, loc_2 + 20)
					if loc_5 <= loc_4 then
						while true do
							loc_3 = loc_5
							while true do
								loc_0 = rt_load_i32(memory_at_0, loc_3 + 8)
								loc_1 = (if loc_0 > loc_1 then loc_0 else loc_1)
								loc_3 = rt_add_i32(loc_3, 24)
								if loc_4 >= loc_3 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 44)
					if rt_gt_i32(loc_3, 20000) then
						break
					end
					loc_1 = rt_shr_i32(rt_sub_i32(loc_1, rt_load_i32(memory_at_0, loc_2 + 28)), 4)
					loc_0 = rt_shr_i32(rt_sub_i32(loc_4, loc_5), 3)
					while true do
						if rt_load_i32_u8(memory_at_0, 31008) == 1 then
							while true do
								while true do
									if loc_0 >= loc_3 then
										break
									end
									if rt_lt_i32(loc_3, 17) then
										break
									end
									FUNC_LIST[81](loc_2, rt_shr_u32(loc_3, 1))
									break
								end
								if desired then
									break
								end
								reg_0 = rt_mul_i32(loc_1, 3)
								loc_1 = rt_load_i32(memory_at_0, loc_2 + 40)
								if reg_0 >= loc_1 then
									desired = 3
									break
								end
								if rt_gt_i32(loc_1, 90) then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						while true do
							if rt_ge_i32(loc_0, loc_3) then
								break
							end
							if rt_lt_i32(loc_3, 17) then
								break
							end
							FUNC_LIST[81](loc_2, rt_shr_u32(loc_3, 1))
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = rt_mul_i32(loc_1, 3)
						loc_1 = rt_load_i32(memory_at_0, loc_2 + 40)
						if rt_ge_i32(reg_0, loc_1) then
							desired = 3
							break
						end
						if rt_lt_i32(loc_1, 91) then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[80](loc_2, rt_shr_u32(loc_1, 1))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = rt_add_i32(rt_add_i32(rt_mul_i32(rt_load_i32(memory_at_0, loc_2 + 44), 24), rt_shl_i32(rt_load_i32(memory_at_0, loc_2 + 40), 4)), 76)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_0 + 24, rt_load_i32(memory_at_0, loc_2 + 68))
			loc_1 = rt_load_i32(memory_at_0, loc_2 + 48)
			if loc_1 ~= 0 then
				while true do
					rt_store_i32_n8(memory_at_0, loc_1 + 1, bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 252))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = rt_load_i32(memory_at_0, loc_2 + 52)
			if loc_1 ~= 0 then
				while true do
					rt_store_i32_n8(memory_at_0, loc_1 + 1, bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 252))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = rt_load_i32(memory_at_0, loc_2 + 88)
			if rt_gt_i32(loc_4, 0) then
				while true do
					loc_1 = 0
					while true do
						while true do
							loc_3 = rt_add_i32(rt_load_i32(memory_at_0, loc_2 + 8), rt_shl_i32(loc_1, 4))
							if rt_lt_i32(rt_load_i32(memory_at_0, loc_3 + 12), 5) then
								break
							end
							loc_3 = rt_load_i32(memory_at_0, loc_3)
							if bit_and(rt_load_i32_u8(memory_at_0, loc_3 + 1), 3) == 0 then
								break
							end
							FUNC_LIST[45](loc_0, loc_3)
							loc_4 = rt_load_i32(memory_at_0, loc_2 + 88)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
						loc_1 = rt_add_i32(loc_1, 1)
						if rt_gt_i32(loc_4, loc_1) then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				loc_3 = rt_load_i32(memory_at_0, loc_2 + 84)
				if rt_le_i32(loc_3, 0) then
					break
				end
				loc_7 = bit_and(loc_3, 1)
				loc_6 = rt_load_i32(memory_at_0, loc_2 + 44)
				loc_1 = 0
				if loc_3 ~= 1 then
					while true do
						loc_8 = bit_and(loc_3, 2147483646)
						loc_4 = 0
						while true do
							loc_5 = rt_add_i32(rt_shl_i32(loc_1, 2), loc_6)
							loc_3 = rt_load_i32(memory_at_0, loc_5)
							if loc_3 ~= 0 then
								while true do
									rt_store_i32_n8(memory_at_0, loc_3 + 1, bit_and(rt_load_i32_u8(memory_at_0, loc_3 + 1), 252))
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							end
							loc_3 = rt_load_i32(memory_at_0, loc_5 + 4)
							if loc_3 ~= 0 then
								while true do
									rt_store_i32_n8(memory_at_0, loc_3 + 1, bit_and(rt_load_i32_u8(memory_at_0, loc_3 + 1), 252))
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							end
							loc_1 = rt_add_i32(loc_1, 2)
							loc_4 = rt_add_i32(loc_4, 2)
							if loc_8 ~= loc_4 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_7 == 0 then
					break
				end
				loc_1 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_1, 2), loc_6))
				if loc_1 == 0 then
					break
				end
				rt_store_i32_n8(memory_at_0, loc_1 + 1, bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 252))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = rt_load_i32(memory_at_0, loc_2 + 76)
			if rt_gt_i32(loc_4, 0) then
				while true do
					loc_1 = 0
					while true do
						while true do
							loc_3 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_2 + 16), rt_shl_i32(loc_1, 2)))
							if loc_3 == 0 then
								break
							end
							if bit_and(rt_load_i32_u8(memory_at_0, loc_3 + 1), 3) == 0 then
								break
							end
							FUNC_LIST[45](loc_0, loc_3)
							loc_4 = rt_load_i32(memory_at_0, loc_2 + 76)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
						loc_1 = rt_add_i32(loc_1, 1)
						if rt_gt_i32(loc_4, loc_1) then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				loc_7 = rt_load_i32(memory_at_0, loc_2 + 80)
				if rt_le_i32(loc_7, 0) then
					break
				end
				loc_6 = rt_load_i32(memory_at_0, loc_2 + 40)
				loc_1 = 0
				if loc_7 ~= 1 then
					while true do
						loc_8 = bit_and(loc_7, 2147483646)
						loc_0 = 0
						while true do
							loc_5 = rt_add_i32(rt_shl_i32(loc_1, 4), loc_6)
							loc_3 = rt_load_i32(memory_at_0, loc_5)
							if loc_3 ~= 0 then
								while true do
									rt_store_i32_n8(memory_at_0, loc_3 + 1, bit_and(rt_load_i32_u8(memory_at_0, loc_3 + 1), 252))
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							end
							loc_3 = rt_load_i32(memory_at_0, loc_5 + 16)
							if loc_3 ~= 0 then
								while true do
									rt_store_i32_n8(memory_at_0, loc_3 + 1, bit_and(rt_load_i32_u8(memory_at_0, loc_3 + 1), 252))
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							end
							loc_1 = rt_add_i32(loc_1, 2)
							loc_0 = rt_add_i32(loc_0, 2)
							if loc_8 ~= loc_0 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if bit_and(loc_7, 1) == 0 then
					break
				end
				loc_1 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_1, 4), loc_6))
				if loc_1 == 0 then
					break
				end
				rt_store_i32_n8(memory_at_0, loc_1 + 1, bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 252))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = rt_add_i32(rt_add_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_2 + 108), rt_add_i32(rt_load_i32(memory_at_0, loc_2 + 92), rt_shl_i32(rt_add_i32(loc_7, rt_load_i32(memory_at_0, loc_2 + 88)), 4))), rt_shl_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_2 + 84), rt_add_i32(rt_load_i32(memory_at_0, loc_2 + 72), loc_4)), 2)), 112)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[47] = --[[ markmt(global_State*) ]] function(loc_0)
	local loc_1 = 0
	while true do
		while true do
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 1440)
			if loc_1 == 0 then
				break
			end
			if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) == 0 then
				break
			end
			FUNC_LIST[45](loc_0, loc_1)
			break
		end
		while true do
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 1444)
			if loc_1 == 0 then
				break
			end
			if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) == 0 then
				break
			end
			FUNC_LIST[45](loc_0, loc_1)
			break
		end
		while true do
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 1448)
			if loc_1 == 0 then
				break
			end
			if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) == 0 then
				break
			end
			FUNC_LIST[45](loc_0, loc_1)
			break
		end
		while true do
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 1452)
			if loc_1 == 0 then
				break
			end
			if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) == 0 then
				break
			end
			FUNC_LIST[45](loc_0, loc_1)
			break
		end
		while true do
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 1456)
			if loc_1 == 0 then
				break
			end
			if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) == 0 then
				break
			end
			FUNC_LIST[45](loc_0, loc_1)
			break
		end
		while true do
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 1460)
			if loc_1 == 0 then
				break
			end
			if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) == 0 then
				break
			end
			FUNC_LIST[45](loc_0, loc_1)
			break
		end
		while true do
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 1464)
			if loc_1 == 0 then
				break
			end
			if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) == 0 then
				break
			end
			FUNC_LIST[45](loc_0, loc_1)
			break
		end
		while true do
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 1468)
			if loc_1 == 0 then
				break
			end
			if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) == 0 then
				break
			end
			FUNC_LIST[45](loc_0, loc_1)
			break
		end
		while true do
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 1472)
			if loc_1 == 0 then
				break
			end
			if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) == 0 then
				break
			end
			FUNC_LIST[45](loc_0, loc_1)
			break
		end
		while true do
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 1476)
			if loc_1 == 0 then
				break
			end
			if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) == 0 then
				break
			end
			FUNC_LIST[45](loc_0, loc_1)
			break
		end
		while true do
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 1480)
			if loc_1 == 0 then
				break
			end
			if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) == 0 then
				break
			end
			FUNC_LIST[45](loc_0, loc_1)
			break
		end
		break
	end
end
FUNC_LIST[48] = --[[ luaC_fullgc(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
				loc_1 = rt_load_i32_u8(memory_at_0, loc_2 + 21)
				if bit_and(rt_sub_i32(loc_1, 1), 255) <= 2 then
					while true do
						rt_store_i32(memory_at_0, loc_2 + 32, 0)
						rt_store_i64(memory_at_0, loc_2 + 24, rt_i64_ZERO)
						rt_store_i32_n8(memory_at_0, loc_2 + 21, 4)
						rt_store_i32(memory_at_0, loc_2 + 384, rt_load_i32(memory_at_0, loc_2 + 380))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if bit_and(loc_1, 255) == 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				reg_0 = FUNC_LIST[43](loc_0, 4294967295)
				if rt_load_i32_u8(memory_at_0, loc_2 + 21) ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		loc_1 = rt_load_i32(memory_at_0, loc_2 + 1428)
		loc_3 = rt_add_i32(loc_2, 1416)
		if loc_1 ~= loc_3 then
			while true do
				while true do
					rt_store_i32_n8(memory_at_0, loc_1 + 3, 0)
					loc_1 = rt_load_i32(memory_at_0, loc_1 + 12)
					if loc_3 ~= loc_1 then
						continue
					end
					break
				end
				break
			end
		end
		FUNC_LIST[44](loc_0)
		if rt_load_i32_u8(memory_at_0, loc_2 + 21) ~= 0 then
			while true do
				while true do
					reg_0 = FUNC_LIST[43](loc_0, 4294967295)
					if rt_load_i32_u8(memory_at_0, loc_2 + 21) ~= 0 then
						continue
					end
					break
				end
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 16)
		loc_5 = rt_load_i32(memory_at_0, loc_1 + 4)
		loc_6 = rt_load_i32(memory_at_0, loc_1 + 8)
		loc_3 = loc_6
		while true do
			while true do
				loc_1 = loc_3
				loc_4 = rt_div_i32(loc_1, 4)
				if rt_lt_i32(loc_1, 65) then
					break
				end
				loc_3 = rt_shr_u32(loc_1, 1)
				if loc_4 > loc_5 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			break
		end
		if loc_1 ~= loc_6 then
			while true do
				FUNC_LIST[384](loc_0, loc_1)
				break
			end
		end
		loc_3 = rt_load_i32(memory_at_0, loc_2 + 44)
		loc_1 = rt_load_i32(memory_at_0, loc_2 + 40)
		rt_store_i32(memory_at_0, loc_2 + 3448, rt_mul_i32(loc_3, rt_div_u32(loc_1, 100)))
		loc_4 = rt_load_i32(memory_at_0, loc_2 + 48)
		loc_3 = rt_div_u32(rt_mul_i32(rt_sub_i32(rt_div_i32(rt_mul_i32(loc_4, loc_3), 100), 100), loc_1), loc_4)
		rt_store_i32(memory_at_0, loc_2 + 36, (if loc_1 < loc_3 then loc_3 else loc_1))
		break
	end
end
FUNC_LIST[49] = --[[ luaC_barrierf(lua_State*, GCObject*, GCObject*) ]] function(loc_0, loc_1, loc_2)
	local desired
	while true do
		loc_0 = rt_load_i32(memory_at_0, loc_0 + 16)
		if bit_and(rt_sub_i32(rt_load_i32_u8(memory_at_0, loc_0 + 21), 1), 255) <= 2 then
			while true do
				FUNC_LIST[45](loc_0, loc_2)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		rt_store_i32_n8(memory_at_0, loc_1 + 1, bit_or(bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 20), 3), bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 248)))
		break
	end
end
FUNC_LIST[50] = --[[ luaC_barriertable(lua_State*, Table*, GCObject*) ]] function(loc_0, loc_1, loc_2)
	local desired
	while true do
		loc_0 = rt_load_i32(memory_at_0, loc_0 + 16)
		if rt_load_i32_u8(memory_at_0, loc_0 + 21) == 2 then
			while true do
				FUNC_LIST[45](loc_0, loc_2)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		rt_store_i32_n8(memory_at_0, loc_1 + 1, bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 251))
		rt_store_i32(memory_at_0, loc_1 + 28, rt_load_i32(memory_at_0, loc_0 + 28))
		rt_store_i32(memory_at_0, loc_0 + 28, loc_1)
		break
	end
end
FUNC_LIST[51] = --[[ luaC_barrierback(lua_State*, GCObject*, GCObject**) ]] function(loc_0, loc_1, loc_2)
	while true do
		loc_0 = rt_load_i32(memory_at_0, loc_0 + 16)
		rt_store_i32_n8(memory_at_0, loc_1 + 1, bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 251))
		rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_0 + 28))
		rt_store_i32(memory_at_0, loc_0 + 28, loc_1)
		break
	end
end
FUNC_LIST[52] = --[[ luaC_upvalclosed(lua_State*, UpVal*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local desired
	while true do
		while true do
			loc_3 = rt_load_i32_u8(memory_at_0, loc_1 + 1)
			if bit_and(loc_3, 7) ~= 0 then
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
			if bit_and(rt_sub_i32(rt_load_i32_u8(memory_at_0, loc_2 + 21), 1), 255) <= 2 then
				while true do
					rt_store_i32_n8(memory_at_0, loc_1 + 1, bit_or(loc_3, 4))
					loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
					if rt_lt_i32(rt_load_i32(memory_at_0, loc_2 + 12), 5) then
						desired = 1
						break
					end
					loc_2 = rt_load_i32(memory_at_0, loc_2)
					if bit_and(rt_load_i32_u8(memory_at_0, loc_2 + 1), 3) == 0 then
						desired = 1
						break
					end
					loc_0 = rt_load_i32(memory_at_0, loc_0 + 16)
					if bit_and(rt_sub_i32(rt_load_i32_u8(memory_at_0, loc_0 + 21), 1), 255) <= 2 then
						while true do
							FUNC_LIST[45](loc_0, loc_2)
							desired = 0
							break
						end
						if desired then
							break
						end
					end
					rt_store_i32_n8(memory_at_0, loc_1 + 1, bit_or(loc_3, bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 20), 3)))
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i32_n8(memory_at_0, loc_1 + 1, bit_or(loc_3, bit_and(rt_load_i32_u8(memory_at_0, loc_2 + 20), 3)))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
end
FUNC_LIST[53] = --[[ traversestack(global_State*, lua_State*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 56)
		if bit_and(rt_load_i32_u8(memory_at_0, loc_2 + 1), 3) ~= 0 then
			while true do
				FUNC_LIST[45](loc_0, loc_2)
				break
			end
		end
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 68)
		if loc_2 ~= 0 then
			while true do
				rt_store_i32_n8(memory_at_0, loc_2 + 1, bit_and(rt_load_i32_u8(memory_at_0, loc_2 + 1), 252))
				break
			end
		end
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 28)
		loc_3 = rt_load_i32(memory_at_0, loc_1 + 8)
		if loc_2 < loc_3 then
			while true do
				while true do
					while true do
						if rt_lt_i32(rt_load_i32(memory_at_0, loc_2 + 12), 5) then
							break
						end
						loc_4 = rt_load_i32(memory_at_0, loc_2)
						if bit_and(rt_load_i32_u8(memory_at_0, loc_4 + 1), 3) == 0 then
							break
						end
						FUNC_LIST[45](loc_0, loc_4)
						loc_3 = rt_load_i32(memory_at_0, loc_1 + 8)
						break
					end
					loc_2 = rt_add_i32(loc_2, 16)
					if loc_3 > loc_2 then
						continue
					end
					break
				end
				break
			end
		end
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 60)
		if loc_2 ~= 0 then
			while true do
				while true do
					rt_store_i32_n8(memory_at_0, loc_2 + 3, 1)
					if bit_and(rt_load_i32_u8(memory_at_0, loc_2 + 1), 3) ~= 0 then
						while true do
							FUNC_LIST[45](loc_0, loc_2)
							break
						end
					end
					loc_2 = rt_load_i32(memory_at_0, loc_2 + 16)
					if loc_2 ~= 0 then
						continue
					end
					break
				end
				break
			end
		end
		break
	end
end
FUNC_LIST[54] = --[[ lua_getargument ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 20)
			if rt_div_i32(rt_sub_i32(loc_3, rt_load_i32(memory_at_0, loc_0 + 36)), 24) <= loc_1 then
				break
			end
			loc_1 = rt_add_i32(rt_mul_i32(loc_1, 4294967272), loc_3)
			if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 20), 4) ~= 0 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_1 + 4)
			if rt_load_i32(memory_at_0, loc_3 + 12) ~= 7 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_3)
			if rt_load_i32_u8(memory_at_0, loc_5 + 3) ~= 0 then
				break
			end
			if rt_le_i32(loc_2, 0) then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_5 + 16)
			if loc_5 == 0 then
				break
			end
			reg_0 = loc_0
			while true do
				if loc_2 <= rt_load_i32_u8(memory_at_0, loc_5 + 4) then
					while true do
						if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
							while true do
								FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
								break
							end
							if desired then
								break
							end
						end
						reg_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_1), rt_shl_i32(loc_2, 4)), 16)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_load_i32_u8(memory_at_0, loc_5 + 5) == 0 then
					desired = 1
					break
				end
				if rt_le_i32(rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_1), loc_3), 4), loc_2) then
					desired = 1
					break
				end
				if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
					while true do
						FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
						reg_1 = rt_load_i32(memory_at_0, loc_1 + 4)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_1 = loc_3
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_3 = reg_1
				reg_1 = rt_add_i32(loc_3, rt_shl_i32(loc_2, 4))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = reg_1
			FUNC_LIST[97](reg_0, loc_4)
			loc_4 = 1
			break
		end
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[55] = --[[ lua_getlocal ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local reg_1
	local reg_2
	while true do
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 20)
			if rt_div_i32(rt_sub_i32(loc_3, rt_load_i32(memory_at_0, loc_0 + 36)), 24) <= loc_1 then
				break
			end
			loc_1 = rt_add_i32(rt_mul_i32(loc_1, 4294967272), loc_3)
			if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 20), 4) ~= 0 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_1 + 4)
			if rt_load_i32(memory_at_0, loc_3 + 12) ~= 7 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_3)
			if rt_load_i32_u8(memory_at_0, loc_3 + 3) ~= 0 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_3 + 16)
			if loc_3 == 0 then
				break
			end
			loc_6 = rt_load_i32(memory_at_0, loc_1 + 12)
			reg_0 = loc_3
			reg_1 = loc_2
			if loc_6 ~= 0 then
				while true do
					reg_2 = rt_sub_i32(rt_shr_i32(rt_sub_i32(loc_6, rt_load_i32(memory_at_0, loc_3 + 12)), 2), 1)
					break
				end
			else
				while true do
					reg_2 = loc_5
					break
				end
			end
			loc_5 = reg_2
			reg_0 = FUNC_LIST[23](reg_0, reg_1, loc_5)
			loc_3 = reg_0
			if loc_3 == 0 then
				break
			end
			if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
				while true do
					FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
					break
				end
			end
			FUNC_LIST[97](loc_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1), rt_shl_i32(rt_load_i32_u8(memory_at_0, loc_3 + 12), 4)))
			loc_4 = rt_add_i32(rt_load_i32(memory_at_0, loc_3), 20)
			break
		end
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[56] = --[[ lua_setlocal ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 20)
			if rt_div_i32(rt_sub_i32(loc_3, rt_load_i32(memory_at_0, loc_0 + 36)), 24) <= loc_1 then
				break
			end
			loc_1 = rt_add_i32(rt_mul_i32(loc_1, 4294967272), loc_3)
			if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 20), 4) ~= 0 then
				break
			end
			while true do
				loc_3 = rt_load_i32(memory_at_0, loc_1 + 4)
				if rt_load_i32(memory_at_0, loc_3 + 12) ~= 7 then
					break
				end
				loc_3 = rt_load_i32(memory_at_0, loc_3)
				if rt_load_i32_u8(memory_at_0, loc_3 + 3) ~= 0 then
					break
				end
				loc_3 = rt_load_i32(memory_at_0, loc_3 + 16)
				if loc_3 == 0 then
					break
				end
				loc_5 = rt_load_i32(memory_at_0, loc_1 + 12)
				reg_0 = loc_3
				reg_1 = loc_2
				if loc_5 ~= 0 then
					while true do
						reg_2 = rt_sub_i32(rt_shr_i32(rt_sub_i32(loc_5, rt_load_i32(memory_at_0, loc_3 + 12)), 2), 1)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_2 = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_5 = reg_2
				reg_0 = FUNC_LIST[23](reg_0, reg_1, loc_5)
				loc_3 = reg_0
				if loc_3 == 0 then
					break
				end
				loc_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_1), rt_shl_i32(rt_load_i32_u8(memory_at_0, loc_3 + 12), 4))
				loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16)
				rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_4))
				rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
				rt_store_i32(memory_at_0, loc_0 + 8, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
				reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_3), 20)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_0 + 8, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[57] = --[[ lua_stackdepth ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = rt_div_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 20), rt_load_i32(memory_at_0, loc_0 + 36)), 24)
		break
	end
	return reg_0
end
FUNC_LIST[58] = --[[ lua_getinfo ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				if rt_lt_i32(loc_1, 0) then
					while true do
						loc_4 = rt_load_i32(memory_at_0, loc_0 + 8)
						if rt_gt_i32(rt_sub_i32(0, loc_1), rt_shr_i32(rt_sub_i32(loc_4, rt_load_i32(memory_at_0, loc_0 + 12)), 4)) then
							desired = 1
							break
						end
						loc_1 = rt_add_i32(rt_shl_i32(loc_1, 4), loc_4)
						if rt_load_i32(memory_at_0, loc_1 + 12) == 7 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_4 = rt_load_i32(memory_at_0, loc_0 + 20)
				if loc_1 >= rt_div_i32(rt_sub_i32(loc_4, rt_load_i32(memory_at_0, loc_0 + 36)), 24) then
					while true do
						reg_0 = 0
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_6 = rt_add_i32(rt_mul_i32(loc_1, 4294967272), loc_4)
				loc_1 = rt_load_i32(memory_at_0, loc_6 + 4)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = rt_load_i32(memory_at_0, loc_1)
			if loc_4 == 0 then
				while true do
					reg_0 = 0
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_10 = rt_add_i32(loc_3, 32)
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													loc_1 = rt_load_i32_u8(memory_at_0, loc_2)
													if not br_map[1] then
														br_map[1] = (function()
															return { [0] = 4, 7, 7, 7, 7, 6, 7, 7, 7, 7, 7, 2, 7, 5, 7, 7, 7, 7, 1, 7, 3, }
														end)()
													end
													temp = br_map[1][rt_sub_i32(loc_1, 97)] or 0
													if temp < 4 then
														if temp < 2 then
															if temp < 1 then
																break
															else
																desired = 10
																break
															end
														elseif temp > 2 then
															desired = 8
															break
														else
															desired = 9
															break
														end
													elseif temp > 4 then
														if temp < 6 then
															desired = 6
															break
														elseif temp > 6 then
															desired = 4
															break
														else
															desired = 5
															break
														end
													else
														desired = 7
														break
													end
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												if loc_1 ~= 0 then
													desired = 4
													break
												end
												loc_6 = 1
												if loc_8 == 0 then
													desired = 1
													break
												end
												if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
													while true do
														FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
												rt_store_i32(memory_at_0, loc_2 + 12, 7)
												rt_store_i32(memory_at_0, loc_2, loc_8)
												loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
												reg_0 = loc_0
												if rt_le_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 24), loc_2), 16) then
													while true do
														FUNC_LIST[82](loc_0, 1)
														reg_1 = rt_load_i32(memory_at_0, loc_0 + 8)
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												else
													while true do
														reg_1 = loc_2
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_2 = reg_1
												rt_store_i32(memory_at_0, reg_0 + 8, rt_add_i32(loc_2, 16))
												reg_0 = 1
												desired = 0
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											if rt_load_i32_u8(memory_at_0, loc_4 + 3) ~= 0 then
												while true do
													rt_store_i32(memory_at_0, loc_3 + 16, 4294967295)
													rt_store_i32(memory_at_0, loc_3 + 4, 5204)
													rt_store_i32(memory_at_0, loc_3 + 8, 5105)
													rt_store_i32(memory_at_0, loc_3 + 12, 5106)
													loc_2 = rt_add_i32(loc_2, 1)
													desired = 2
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											loc_1 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4 + 16) + 48)
											rt_store_i32(memory_at_0, loc_3 + 4, 5052)
											loc_5 = rt_add_i32(loc_1, 20)
											rt_store_i32(memory_at_0, loc_3 + 8, loc_5)
											rt_store_i32(memory_at_0, loc_3 + 16, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4 + 16) + 100))
											reg_1 = FUNC_LIST[368](loc_10, 256, loc_5, rt_load_i32(memory_at_0, loc_1 + 16))
											rt_store_i32(memory_at_0, loc_3 + 12, reg_1)
											loc_2 = rt_add_i32(loc_2, 1)
											desired = 2
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										if loc_6 ~= 0 then
											while true do
												loc_1 = 4294967295
												while true do
													loc_5 = rt_load_i32(memory_at_0, loc_6 + 4)
													if rt_load_i32(memory_at_0, loc_5 + 12) ~= 7 then
														break
													end
													loc_5 = rt_load_i32(memory_at_0, loc_5)
													if rt_load_i32_u8(memory_at_0, loc_5 + 3) ~= 0 then
														break
													end
													loc_5 = rt_load_i32(memory_at_0, loc_5 + 16)
													loc_1 = 0
													loc_7 = 0
													loc_9 = rt_load_i32(memory_at_0, loc_6 + 12)
													if loc_9 ~= 0 then
														while true do
															reg_0 = rt_sub_i32(rt_shr_i32(rt_sub_i32(loc_9, rt_load_i32(memory_at_0, loc_5 + 12)), 2), 1)
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
															end
															break
														end
													else
														while true do
															reg_0 = loc_7
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
															end
															break
														end
													end
													loc_7 = reg_0
													loc_9 = rt_load_i32(memory_at_0, loc_5 + 32)
													if loc_9 == 0 then
														break
													end
													loc_1 = rt_add_i32(rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_5 + 36), rt_shl_i32(rt_shr_i32(loc_7, rt_load_i32(memory_at_0, loc_5 + 96)), 2))), rt_load_i32_u8(memory_at_0, rt_add_i32(loc_7, loc_9)))
													break
												end
												if desired then
													break
												end
												rt_store_i32(memory_at_0, loc_3 + 20, loc_1)
												loc_2 = rt_add_i32(loc_2, 1)
												desired = 2
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_1 = 4294967295
										reg_0 = loc_3
										if rt_load_i32_u8(memory_at_0, loc_4 + 3) ~= 0 then
											while true do
												reg_1 = loc_1
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										else
											while true do
												reg_1 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4 + 16) + 100)
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_1 = reg_1
										rt_store_i32(memory_at_0, reg_0 + 20, loc_1)
										loc_2 = rt_add_i32(loc_2, 1)
										desired = 2
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									rt_store_i32_n8(memory_at_0, loc_3 + 24, rt_load_i32_u8(memory_at_0, loc_4 + 4))
									loc_2 = rt_add_i32(loc_2, 1)
									desired = 2
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if rt_load_i32_u8(memory_at_0, loc_4 + 3) ~= 0 then
									while true do
										rt_store_i32_n16(memory_at_0, loc_3 + 25, 256)
										loc_2 = rt_add_i32(loc_2, 1)
										desired = 2
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								rt_store_i32_n8(memory_at_0, loc_3 + 26, rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_4 + 16) + 5))
								rt_store_i32_n8(memory_at_0, loc_3 + 25, rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_4 + 16) + 4))
								loc_2 = rt_add_i32(loc_2, 1)
								desired = 2
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								if loc_6 ~= 0 then
									while true do
										loc_1 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_6 + 4))
										if rt_load_i32_u8(memory_at_0, loc_1 + 3) ~= 0 then
											while true do
												loc_1 = rt_load_i32(memory_at_0, loc_1 + 24)
												if loc_1 == 0 then
													desired = 3
													break
												end
												desired = 6
												break
											end
											if desired then
												break
											end
										end
										loc_1 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 16) + 52)
										if loc_1 == 0 then
											desired = 3
											break
										end
										rt_store_i32(memory_at_0, loc_3, rt_add_i32(loc_1, 20))
										loc_2 = rt_add_i32(loc_2, 1)
										desired = 2
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								if rt_load_i32_u8(memory_at_0, loc_4 + 3) ~= 0 then
									while true do
										loc_1 = rt_load_i32(memory_at_0, loc_4 + 24)
										if loc_1 ~= 0 then
											desired = 6
											break
										end
										desired = 3
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_1 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4 + 16) + 52)
								if loc_1 == 0 then
									desired = 3
									break
								end
								loc_1 = rt_add_i32(loc_1, 20)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							rt_store_i32(memory_at_0, loc_3, loc_1)
							loc_2 = rt_add_i32(loc_2, 1)
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_8 = loc_4
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = rt_add_i32(loc_2, 1)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				rt_store_i32(memory_at_0, loc_3, 0)
				loc_2 = rt_add_i32(loc_2, 1)
				continue
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[59] = --[[ luaG_typeerrorL(lua_State*, lua_TValue const*, char const*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local reg_1
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		reg_1 = FUNC_LIST[463](loc_0, loc_1)
		rt_store_i32(memory_at_0, loc_3 + 4, reg_1)
		rt_store_i32(memory_at_0, loc_3, loc_2)
		FUNC_LIST[60](loc_0, 3839, loc_3)
		error("out of code bounds")
	end
end
FUNC_LIST[60] = --[[ luaG_runerrorL(lua_State*, char const*, ...) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 528)
		GLOBAL_LIST[0].value = loc_3
		rt_store_i32(memory_at_0, loc_3 + 524, loc_2)
		reg_0 = FUNC_LIST[740](loc_3, 512, loc_1, loc_2)
		FUNC_LIST[99](loc_0, 1)
		FUNC_LIST[61](loc_0, loc_3)
		FUNC_LIST[79](loc_0, 2)
		error("out of code bounds")
	end
end
FUNC_LIST[61] = --[[ pusherror(lua_State*, char const*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 272)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				loc_4 = rt_load_i32(memory_at_0, loc_0 + 20)
				loc_2 = rt_load_i32(memory_at_0, loc_4 + 4)
				if rt_load_i32(memory_at_0, loc_2 + 12) ~= 7 then
					break
				end
				loc_2 = rt_load_i32(memory_at_0, loc_2)
				if rt_load_i32_u8(memory_at_0, loc_2 + 3) ~= 0 then
					break
				end
				loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 16) + 48)
				reg_0 = FUNC_LIST[368](rt_add_i32(loc_3, 16), 256, rt_add_i32(loc_2, 20), rt_load_i32(memory_at_0, loc_2 + 16))
				loc_7 = reg_0
				loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4 + 4)) + 16)
				loc_4 = rt_load_i32(memory_at_0, loc_4 + 12)
				if loc_4 ~= 0 then
					while true do
						reg_0 = rt_sub_i32(rt_shr_i32(rt_sub_i32(loc_4, rt_load_i32(memory_at_0, loc_2 + 12)), 2), 1)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_5
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_5 = reg_0
				loc_4 = rt_load_i32(memory_at_0, loc_2 + 32)
				if loc_4 ~= 0 then
					while true do
						reg_0 = rt_add_i32(rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_2 + 36), rt_shl_i32(rt_shr_i32(loc_5, rt_load_i32(memory_at_0, loc_2 + 96)), 2))), rt_load_i32_u8(memory_at_0, rt_add_i32(loc_4, loc_5)))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_6
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_6 = reg_0
				rt_store_i32(memory_at_0, loc_3 + 8, loc_1)
				rt_store_i32(memory_at_0, loc_3 + 4, loc_6)
				rt_store_i32(memory_at_0, loc_3, loc_7)
				reg_0 = FUNC_LIST[367](loc_0, 2292, loc_3)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[146](loc_0, loc_1)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 272)
		break
	end
end
FUNC_LIST[62] = --[[ luaG_forerrorL(lua_State*, lua_TValue const*, char const*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local reg_1
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		reg_1 = FUNC_LIST[463](loc_0, loc_1)
		rt_store_i32(memory_at_0, loc_3 + 4, reg_1)
		rt_store_i32(memory_at_0, loc_3, loc_2)
		FUNC_LIST[60](loc_0, 5672, loc_3)
		error("out of code bounds")
	end
end
FUNC_LIST[63] = --[[ luaG_concaterror(lua_State*, lua_TValue*, lua_TValue*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local reg_1
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		reg_0 = FUNC_LIST[463](loc_0, loc_1)
		loc_1 = reg_0
		reg_1 = FUNC_LIST[463](loc_0, loc_2)
		rt_store_i32(memory_at_0, loc_3 + 4, reg_1)
		rt_store_i32(memory_at_0, loc_3, loc_1)
		FUNC_LIST[60](loc_0, 2168, loc_3)
		error("out of code bounds")
	end
end
FUNC_LIST[64] = --[[ luaG_aritherror(lua_State*, lua_TValue const*, lua_TValue const*, TMS) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local reg_0
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		reg_0 = FUNC_LIST[463](loc_0, loc_1)
		loc_1 = reg_0
		reg_0 = FUNC_LIST[463](loc_0, loc_2)
		loc_2 = reg_0
		loc_3 = rt_add_i32(rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_3, 2), 10032)), 2)
		if loc_1 == loc_2 then
			while true do
				rt_store_i32(memory_at_0, loc_4 + 4, loc_1)
				rt_store_i32(memory_at_0, loc_4, loc_3)
				FUNC_LIST[60](loc_0, 2099, loc_4)
				error("out of code bounds")
			end
		end
		rt_store_i32(memory_at_0, loc_4 + 24, loc_2)
		rt_store_i32(memory_at_0, loc_4 + 20, loc_1)
		rt_store_i32(memory_at_0, loc_4 + 16, loc_3)
		FUNC_LIST[60](loc_0, 2244, rt_add_i32(loc_4, 16))
		error("out of code bounds")
	end
end
FUNC_LIST[65] = --[[ luaG_ordererror(lua_State*, lua_TValue const*, lua_TValue const*, TMS) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local reg_0
	local reg_1
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		reg_0 = FUNC_LIST[463](loc_0, loc_1)
		loc_1 = reg_0
		reg_1 = FUNC_LIST[463](loc_0, loc_2)
		rt_store_i32(memory_at_0, loc_4 + 8, reg_1)
		rt_store_i32(memory_at_0, loc_4, loc_1)
		rt_store_i32(memory_at_0, loc_4 + 4, (if loc_3 == 16 then 5212 else (if loc_3 == 17 then 5209 else 5206)))
		FUNC_LIST[60](loc_0, 2071, loc_4)
		error("out of code bounds")
	end
end
FUNC_LIST[66] = --[[ luaG_indexerror(lua_State*, lua_TValue const*, lua_TValue const*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_3
		reg_0 = FUNC_LIST[463](loc_0, loc_1)
		loc_1 = reg_0
		reg_0 = FUNC_LIST[463](loc_0, loc_2)
		loc_4 = reg_0
		while true do
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 5 then
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_2)
			if loc_2 == 0 then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 16) > 64 then
				break
			end
			rt_store_i32(memory_at_0, loc_3 + 16, loc_1)
			rt_store_i32(memory_at_0, loc_3 + 20, rt_add_i32(loc_2, 20))
			FUNC_LIST[60](loc_0, 6313, rt_add_i32(loc_3, 16))
			error("out of code bounds")
		end
		rt_store_i32(memory_at_0, loc_3 + 4, loc_4)
		rt_store_i32(memory_at_0, loc_3, loc_1)
		FUNC_LIST[60](loc_0, 2140, loc_3)
		error("out of code bounds")
	end
end
FUNC_LIST[67] = --[[ luaG_methoderror(lua_State*, lua_TValue const*, TString const*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local reg_1
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		reg_1 = FUNC_LIST[463](loc_0, loc_1)
		rt_store_i32(memory_at_0, loc_3 + 4, reg_1)
		rt_store_i32(memory_at_0, loc_3, rt_add_i32(loc_2, 20))
		FUNC_LIST[60](loc_0, 2202, loc_3)
		error("out of code bounds")
	end
end
FUNC_LIST[68] = --[[ luaG_readonlyerror(lua_State*) ]] function(loc_0)
	while true do
		FUNC_LIST[60](loc_0, 4390, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[69] = --[[ luaG_breakpoint(lua_State*, Proto*, int, bool) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			loc_7 = rt_load_i32(memory_at_0, loc_1 + 32)
			if loc_7 == 0 then
				break
			end
			loc_6 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1752)
			if loc_6 == 0 then
				while true do
					if rt_load_i32(memory_at_0, loc_1 + 24) ~= 0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_5 = rt_load_i32(memory_at_0, loc_1 + 72)
			if rt_le_i32(loc_5, 0) then
				break
			end
			loc_8 = rt_load_i32(memory_at_0, loc_1 + 12)
			while true do
				while true do
					if rt_load_i32_u8(memory_at_0, rt_add_i32(rt_shl_i32(loc_4, 2), loc_8)) == 65 then
						break
					end
					if loc_2 ~= rt_add_i32(rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 36), rt_shl_i32(rt_shr_u32(loc_4, rt_load_i32(memory_at_0, loc_1 + 96)), 2))), rt_load_i32_u8(memory_at_0, rt_add_i32(loc_4, loc_7))) then
						break
					end
					while true do
						if rt_load_i32(memory_at_0, loc_1 + 56) ~= 0 then
							break
						end
						reg_1 = FUNC_LIST[352](loc_0, loc_5, rt_load_i32_u8(memory_at_0, loc_1 + 2))
						rt_store_i32(memory_at_0, loc_1 + 56, reg_1)
						if rt_le_i32(rt_load_i32(memory_at_0, loc_1 + 72), 0) then
							break
						end
						loc_5 = 0
						while true do
							rt_store_i32_n8(memory_at_0, rt_add_i32(loc_5, rt_load_i32(memory_at_0, loc_1 + 56)), rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 12), rt_shl_i32(loc_5, 2))))
							loc_5 = rt_add_i32(loc_5, 1)
							if rt_lt_i32(loc_5, rt_load_i32(memory_at_0, loc_1 + 72)) then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_3 == 0 then
						while true do
							rt_store_i32_n8(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 12), rt_shl_i32(loc_4, 2)), rt_load_i32_u8(memory_at_0, rt_add_i32(loc_4, rt_load_i32(memory_at_0, loc_1 + 56))))
							desired = 1
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					rt_store_i32_n8(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 12), rt_shl_i32(loc_4, 2)), 1)
					if loc_6 == 0 then
						desired = 1
						break
					end
					if rt_load_i32(memory_at_0, loc_1 + 24) == 0 then
						desired = 1
						break
					end
					TABLE_LIST[0].data[loc_6](loc_0, loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_4 = rt_add_i32(loc_4, 1)
				if loc_5 ~= loc_4 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if rt_gt_i32(rt_load_i32(memory_at_0, loc_1 + 76), 0) then
			while true do
				loc_4 = 0
				while true do
					FUNC_LIST[69](loc_0, rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 16), rt_shl_i32(loc_4, 2))), loc_2, loc_3)
					loc_4 = rt_add_i32(loc_4, 1)
					if rt_lt_i32(loc_4, rt_load_i32(memory_at_0, loc_1 + 76)) then
						continue
					end
					break
				end
				break
			end
		end
		break
	end
end
FUNC_LIST[70] = --[[ luaG_getline(Proto*, int) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 32)
		if loc_2 == 0 then
			while true do
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = rt_add_i32(rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 36), rt_shl_i32(rt_shr_i32(loc_1, rt_load_i32(memory_at_0, loc_0 + 96)), 2))), rt_load_i32_u8(memory_at_0, rt_add_i32(loc_1, loc_2)))
		break
	end
	return reg_0
end
FUNC_LIST[71] = --[[ lua_singlestep ]] function(loc_0, loc_1)
	while true do
		rt_store_i32_n8(memory_at_0, loc_0 + 6, (if loc_1 ~= 0 then 1 else 0))
		break
	end
end
FUNC_LIST[72] = --[[ lua_breakpoint ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[95](loc_0, loc_1)
		loc_4 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, reg_0) + 16)
		reg_0 = FUNC_LIST[73](loc_4, loc_2)
		loc_1 = reg_0
		if loc_1 ~= 4294967295 then
			while true do
				FUNC_LIST[69](loc_0, loc_4, loc_1, (if loc_3 ~= 0 then 1 else 0))
				break
			end
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[73] = --[[ getnextline(Proto*, int) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		loc_2 = 4294967295
		while true do
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 32)
			if loc_6 == 0 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 72)
			if rt_le_i32(loc_5, 0) then
				break
			end
			loc_7 = rt_load_i32(memory_at_0, loc_0 + 12)
			while true do
				while true do
					if rt_load_i32_u8(memory_at_0, rt_add_i32(rt_shl_i32(loc_3, 2), loc_7)) == 65 then
						break
					end
					loc_4 = rt_add_i32(rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 36), rt_shl_i32(rt_shr_u32(loc_3, rt_load_i32(memory_at_0, loc_0 + 96)), 2))), rt_load_i32_u8(memory_at_0, rt_add_i32(loc_3, loc_6)))
					if loc_4 == loc_1 then
						while true do
							reg_0 = loc_1
							desired = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if rt_ge_i32(loc_1, loc_4) then
						break
					end
					loc_2 = (if loc_2 == 4294967295 then loc_4 else (if rt_gt_i32(loc_2, loc_4) then loc_4 else loc_2))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_3 = rt_add_i32(loc_3, 1)
				if loc_5 ~= loc_3 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_5 = rt_load_i32(memory_at_0, loc_0 + 76)
		if rt_gt_i32(loc_5, 0) then
			while true do
				loc_0 = rt_load_i32(memory_at_0, loc_0 + 16)
				loc_4 = 0
				while true do
					reg_0 = FUNC_LIST[73](rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_4, 2), loc_0)), loc_1)
					loc_3 = reg_0
					if loc_3 == loc_1 then
						while true do
							reg_0 = loc_1
							desired = 0
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_2 = (if rt_lt_i32(loc_1, loc_3) then (if loc_2 == 4294967295 then loc_3 else (if rt_gt_i32(loc_2, loc_3) then loc_3 else loc_2)) else loc_2)
					loc_4 = rt_add_i32(loc_4, 1)
					if loc_5 ~= loc_4 then
						continue
					end
					break
				end
				if desired then
					break
				end
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[74] = --[[ lua_getcoverage ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		while true do
			reg_0 = FUNC_LIST[95](loc_0, loc_1)
			loc_4 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, reg_0) + 16)
			reg_0 = FUNC_LIST[75](loc_4)
			loc_1 = rt_add_i32(reg_0, 1)
			if loc_1 ~= 0 then
				while true do
					if loc_1 > 1073741823 then
						desired = 1
						break
					end
					loc_5 = rt_shl_i32(loc_1, 2)
					reg_2 = FUNC_LIST[352](loc_0, loc_5, 0)
					loc_6 = reg_2
					FUNC_LIST[76](loc_4, 0, loc_6, loc_1, loc_2, loc_3)
					FUNC_LIST[355](loc_0, loc_6, loc_5, 0)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[351](loc_0)
		error("out of code bounds")
	end
end
FUNC_LIST[75] = --[[ getmaxline(Proto*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 72)
			if rt_le_i32(loc_1, 0) then
				while true do
					loc_1 = 4294967295
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_6 = bit_and(loc_1, 1)
			loc_4 = rt_load_i32(memory_at_0, loc_0 + 32)
			while true do
				if loc_1 == 1 then
					while true do
						loc_1 = 4294967295
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_7 = bit_and(loc_1, 2147483646)
				loc_1 = 4294967295
				while true do
					loc_3 = 0
					reg_0 = loc_1
					if loc_4 ~= 0 then
						while true do
							reg_1 = rt_add_i32(rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 36), rt_shl_i32(rt_shr_u32(loc_2, rt_load_i32(memory_at_0, loc_0 + 96)), 2))), rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, loc_4)))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					else
						while true do
							reg_1 = loc_3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_3 = reg_1
					loc_1 = (if rt_gt_i32(loc_1, loc_3) then reg_0 else loc_3)
					reg_0 = loc_1
					if loc_4 ~= 0 then
						while true do
							loc_3 = bit_or(loc_2, 1)
							reg_1 = rt_add_i32(rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 36), rt_shl_i32(rt_shr_u32(loc_3, rt_load_i32(memory_at_0, loc_0 + 96)), 2))), rt_load_i32_u8(memory_at_0, rt_add_i32(loc_3, loc_4)))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					else
						while true do
							reg_1 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_3 = reg_1
					loc_1 = (if rt_gt_i32(loc_1, loc_3) then reg_0 else loc_3)
					loc_2 = rt_add_i32(loc_2, 2)
					loc_5 = rt_add_i32(loc_5, 2)
					if loc_7 ~= loc_5 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_6 == 0 then
				break
			end
			reg_0 = loc_1
			if loc_4 ~= 0 then
				while true do
					reg_1 = rt_add_i32(rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 36), rt_shl_i32(rt_shr_u32(loc_2, rt_load_i32(memory_at_0, loc_0 + 96)), 2))), rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, loc_4)))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_1 = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = reg_1
			loc_1 = (if rt_gt_i32(loc_1, loc_2) then reg_0 else loc_2)
			break
		end
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 76)
		if rt_gt_i32(loc_4, 0) then
			while true do
				loc_0 = rt_load_i32(memory_at_0, loc_0 + 16)
				loc_2 = 0
				while true do
					reg_1 = FUNC_LIST[75](rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_2, 2), loc_0)))
					loc_3 = reg_1
					loc_1 = (if rt_gt_i32(loc_1, loc_3) then loc_1 else loc_3)
					loc_2 = rt_add_i32(loc_2, 1)
					if loc_4 ~= loc_2 then
						continue
					end
					break
				end
				break
			end
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[76] = --[[ getcoverage(Proto*, int, int*, unsigned long, void*, void (*)(void*, char const*, int, int, int const*, unsigned long)) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[611](loc_2, 255, rt_shl_i32(loc_3, 2))
		loc_7 = reg_0
		loc_6 = rt_load_i32(memory_at_0, loc_0 + 72)
		if rt_gt_i32(loc_6, 0) then
			while true do
				loc_9 = rt_load_i32(memory_at_0, loc_0 + 12)
				loc_2 = 0
				while true do
					loc_8 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_2, 2), loc_9))
					if bit_and(loc_8, 255) == 69 then
						while true do
							loc_6 = rt_load_i32(memory_at_0, loc_0 + 32)
							if loc_6 ~= 0 then
								while true do
									reg_0 = rt_add_i32(rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 36), rt_shl_i32(rt_shr_u32(loc_2, rt_load_i32(memory_at_0, loc_0 + 96)), 2))), rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, loc_6)))
									break
								end
							else
								while true do
									reg_0 = 0
									break
								end
							end
							loc_6 = reg_0
							loc_6 = rt_add_i32(rt_shl_i32(loc_6, 2), loc_7)
							reg_0 = loc_6
							loc_6 = rt_load_i32(memory_at_0, loc_6)
							loc_8 = rt_shr_i32(loc_8, 8)
							rt_store_i32(memory_at_0, reg_0, (if rt_gt_i32(loc_6, loc_8) then loc_6 else loc_8))
							reg_0 = rt_load_i32(memory_at_0, loc_0 + 72)
							break
						end
					else
						while true do
							reg_0 = loc_6
							break
						end
					end
					loc_6 = reg_0
					loc_2 = rt_add_i32(loc_2, 1)
					if rt_gt_i32(loc_6, loc_2) then
						continue
					end
					break
				end
				break
			end
		end
		loc_2 = 0
		loc_6 = rt_load_i32(memory_at_0, loc_0 + 52)
		TABLE_LIST[0].data[loc_5](loc_4, (if loc_6 ~= 0 then rt_add_i32(loc_6, 20) else 0), rt_load_i32(memory_at_0, loc_0 + 100), loc_1, loc_7, loc_3)
		if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 76), 0) then
			while true do
				loc_6 = rt_add_i32(loc_1, 1)
				while true do
					FUNC_LIST[76](rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 16), rt_shl_i32(loc_2, 2))), loc_6, loc_7, loc_3, loc_4, loc_5)
					loc_2 = rt_add_i32(loc_2, 1)
					if rt_lt_i32(loc_2, rt_load_i32(memory_at_0, loc_0 + 76)) then
						continue
					end
					break
				end
				break
			end
		end
		break
	end
end
FUNC_LIST[77] = --[[ lua_debugtrace ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 352)
		GLOBAL_LIST[0].value = loc_2
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 36)
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 20)
		reg_0 = FUNC_LIST[58](loc_0, 0, 2776, rt_sub_i32(loc_2, 4294967232))
		if reg_0 ~= 0 then
			while true do
				loc_1 = rt_sub_i32(loc_3, loc_4)
				loc_4 = rt_div_i32(loc_1, 24)
				loc_6 = rt_sub_i32(loc_4, 11)
				loc_7 = rt_sub_i32(loc_4, 20)
				loc_4 = 0
				loc_8 = (if rt_lt_i32(loc_1, 481) then 1 else 0)
				loc_1 = 0
				while true do
					if rt_load_i32(memory_at_0, loc_2 + 72) ~= 0 then
						while true do
							loc_3 = rt_load_i32(memory_at_0, loc_2 + 76)
							reg_3 = FUNC_LIST[649](loc_3)
							loc_5 = reg_3
							loc_5 = (if rt_add_i32(loc_1, loc_5) > 4095 then rt_sub_i32(4095, loc_1) else loc_5)
							reg_0 = FUNC_LIST[609](rt_add_i32(loc_1, 31024), loc_3, loc_5)
							reg_0 = rt_add_i32(loc_1, loc_5)
							break
						end
					else
						while true do
							reg_0 = loc_1
							break
						end
					end
					loc_1 = reg_0
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 84)
					if rt_gt_i32(loc_3, 0) then
						while true do
							rt_store_i32(memory_at_0, loc_2 + 16, loc_3)
							reg_0 = FUNC_LIST[739](rt_add_i32(loc_2, 32), 32, 4923, rt_add_i32(loc_2, 16))
							reg_3 = FUNC_LIST[649](rt_add_i32(loc_2, 32))
							loc_3 = reg_3
							loc_3 = (if rt_add_i32(loc_1, loc_3) > 4095 then rt_sub_i32(4095, loc_1) else loc_3)
							reg_0 = FUNC_LIST[609](rt_add_i32(loc_1, 31024), rt_add_i32(loc_2, 32), loc_3)
							reg_0 = rt_add_i32(loc_1, loc_3)
							break
						end
					else
						while true do
							reg_0 = loc_1
							break
						end
					end
					loc_1 = reg_0
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 64)
					if loc_3 ~= 0 then
						while true do
							loc_5 = (if rt_sub_i32(loc_1, 4086) >= 4294963200 then 10 else rt_sub_i32(4095, loc_1))
							reg_0 = FUNC_LIST[609](rt_add_i32(loc_1, 31024), 6556, loc_5)
							loc_1 = rt_add_i32(loc_1, loc_5)
							reg_3 = FUNC_LIST[649](loc_3)
							loc_5 = reg_3
							loc_5 = (if rt_add_i32(loc_1, loc_5) > 4095 then rt_sub_i32(4095, loc_1) else loc_5)
							reg_0 = FUNC_LIST[609](rt_add_i32(loc_1, 31024), loc_3, loc_5)
							reg_0 = rt_add_i32(loc_1, loc_5)
							break
						end
					else
						while true do
							reg_0 = loc_1
							break
						end
					end
					loc_1 = reg_0
					loc_3 = (if rt_sub_i32(loc_1, 4095) >= 4294963200 then 1 else rt_sub_i32(4095, loc_1))
					reg_0 = FUNC_LIST[609](rt_add_i32(loc_1, 31024), 6594, loc_3)
					loc_1 = rt_add_i32(loc_1, loc_3)
					while true do
						if loc_8 ~= 0 then
							break
						end
						if loc_4 ~= 9 then
							break
						end
						rt_store_i32(memory_at_0, loc_2, loc_7)
						reg_0 = FUNC_LIST[739](rt_add_i32(loc_2, 32), 32, 6578, loc_2)
						reg_3 = FUNC_LIST[649](rt_add_i32(loc_2, 32))
						loc_4 = reg_3
						loc_4 = (if rt_add_i32(loc_1, loc_4) > 4095 then rt_sub_i32(4095, loc_1) else loc_4)
						reg_0 = FUNC_LIST[609](rt_add_i32(loc_1, 31024), rt_add_i32(loc_2, 32), loc_4)
						loc_1 = rt_add_i32(loc_1, loc_4)
						loc_4 = loc_6
						break
					end
					loc_4 = rt_add_i32(loc_4, 1)
					reg_0 = FUNC_LIST[58](loc_0, loc_4, 2776, rt_sub_i32(loc_2, 4294967232))
					if reg_0 ~= 0 then
						continue
					end
					break
				end
				break
			end
		end
		rt_store_i32_n8(memory_at_0, rt_add_i32(loc_1, 31024), 0)
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 352)
		reg_0 = 31024
		break
	end
	return reg_0
end
FUNC_LIST[78] = --[[ luaD_rawrunprotected(lua_State*, void (*)(lua_State*, void*), void*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 176)
		GLOBAL_LIST[0].value = loc_4
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 16)
		rt_store_i32(memory_at_0, loc_4 + 8, rt_load_i32(memory_at_0, loc_3 + 1652))
		rt_store_i32(memory_at_0, loc_4 + 12, 0)
		rt_store_i32(memory_at_0, loc_3 + 1652, rt_add_i32(loc_4, 8))
		FUNC_LIST[665](rt_add_i32(loc_4, 16), 1, rt_add_i32(loc_4, 172))
		loc_3 = 0
		while true do
			while true do
				if loc_3 == 0 then
					while true do
						rt_store_i32(memory_at_0, 36876, 0)
						FUNC_LIST[1](loc_1, loc_0, loc_2)
						loc_3 = rt_load_i32(memory_at_0, 36876)
						rt_store_i32(memory_at_0, 36876, 0)
						loc_5 = 4294967295
						while true do
							if loc_3 == 0 then
								break
							end
							loc_6 = rt_load_i32(memory_at_0, 36880)
							if loc_6 == 0 then
								break
							end
							reg_0 = FUNC_LIST[666](loc_3, rt_add_i32(loc_4, 172))
							loc_5 = reg_0
							if loc_5 == 0 then
								desired = 1
								break
							end
							FUNC_LIST[668](loc_6)
							break
						end
						if desired then
							break
						end
						reg_0 = FUNC_LIST[669]()
						loc_3 = reg_0
						if loc_5 == 1 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_4 + 8)
			rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1652, loc_3)
			loc_3 = rt_load_i32(memory_at_0, loc_4 + 12)
			GLOBAL_LIST[0].value = rt_add_i32(loc_4, 176)
			reg_0 = loc_3
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[667](loc_3, loc_6)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[79] = --[[ luaD_throw(lua_State*, int) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 16)
		loc_2 = rt_load_i32(memory_at_0, loc_3 + 1652)
		if loc_2 == 0 then
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_3 + 1704)
				if loc_2 ~= 0 then
					while true do
						TABLE_LIST[0].data[loc_2](loc_0, loc_1)
						break
					end
				end
				FUNC_LIST[696]()
				error("out of code bounds")
			end
		end
		rt_store_i32(memory_at_0, loc_2 + 4, loc_1)
		FUNC_LIST[667](rt_add_i32(loc_2, 8), 1)
		error("out of code bounds")
	end
end
FUNC_LIST[80] = --[[ luaD_reallocstack(lua_State*, int) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			while true do
				while true do
					while true do
						if rt_ge_i32(loc_1, 67108865) then
							while true do
								if bit_and(rt_load_i32_u8(memory_at_0, 35120), 1) ~= 0 then
									desired = 4
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_6 = rt_add_i32(loc_1, 5)
						if loc_6 > 268435455 then
							desired = 2
							break
						end
						loc_5 = rt_load_i32(memory_at_0, loc_0 + 28)
						reg_1 = FUNC_LIST[357](loc_0, loc_5, rt_shl_i32(rt_load_i32(memory_at_0, loc_0 + 40), 4), rt_shl_i32(loc_6, 4), rt_load_i32_u8(memory_at_0, loc_0 + 2))
						loc_3 = reg_1
						rt_store_i32(memory_at_0, loc_0 + 28, loc_3)
						while true do
							loc_4 = rt_load_i32(memory_at_0, loc_0 + 40)
							if rt_le_i32(loc_6, loc_4) then
								break
							end
							loc_2 = rt_sub_i32(loc_1, loc_4)
							loc_7 = rt_add_i32(loc_2, 4)
							loc_8 = bit_and(rt_add_i32(loc_2, 5), 7)
							if loc_8 ~= 0 then
								while true do
									loc_2 = 0
									while true do
										rt_store_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_4, 4), loc_3) + 12, 0)
										loc_4 = rt_add_i32(loc_4, 1)
										loc_2 = rt_add_i32(loc_2, 1)
										if loc_8 ~= loc_2 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_7 < 7 then
								break
							end
							while true do
								loc_2 = rt_add_i32(rt_shl_i32(loc_4, 4), loc_3)
								rt_store_i32(memory_at_0, loc_2 + 12, 0)
								rt_store_i32(memory_at_0, loc_2 + 28, 0)
								rt_store_i32(memory_at_0, loc_2 + 44, 0)
								rt_store_i32(memory_at_0, loc_2 + 60, 0)
								rt_store_i32(memory_at_0, loc_2 + 76, 0)
								rt_store_i32(memory_at_0, loc_2 + 92, 0)
								rt_store_i32(memory_at_0, loc_2 + 108, 0)
								rt_store_i32(memory_at_0, loc_2 + 124, 0)
								loc_4 = rt_add_i32(loc_4, 8)
								if loc_6 ~= loc_4 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						rt_store_i32(memory_at_0, loc_0 + 40, loc_6)
						rt_store_i32(memory_at_0, loc_0 + 24, rt_add_i32(rt_shl_i32(loc_1, 4), loc_3))
						rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), loc_5), loc_3))
						loc_2 = rt_load_i32(memory_at_0, loc_0 + 60)
						if loc_2 ~= 0 then
							desired = 3
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[79](loc_0, 4)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					rt_store_i32(memory_at_0, loc_2 + 4, rt_add_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_2 + 4), loc_5), loc_3))
					loc_2 = rt_load_i32(memory_at_0, loc_2 + 16)
					if loc_2 ~= 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[351](loc_0)
			error("out of code bounds")
		end
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 36)
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 20)
		if loc_2 <= loc_4 then
			while true do
				while true do
					rt_store_i32(memory_at_0, loc_2 + 8, rt_add_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_2 + 8), loc_5), loc_3))
					rt_store_i32(memory_at_0, loc_2, rt_add_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_2), loc_5), loc_3))
					rt_store_i32(memory_at_0, loc_2 + 4, rt_add_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_2 + 4), loc_5), loc_3))
					loc_2 = rt_add_i32(loc_2, 24)
					if loc_4 >= loc_2 then
						continue
					end
					break
				end
				break
			end
		end
		rt_store_i32(memory_at_0, loc_0 + 12, rt_add_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 12), loc_5), loc_3))
		break
	end
end
FUNC_LIST[81] = --[[ luaD_reallocCI(lua_State*, int) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		if loc_1 <= 178956970 then
			while true do
				loc_3 = rt_load_i32(memory_at_0, loc_0 + 36)
				loc_4 = rt_mul_i32(loc_1, 24)
				reg_0 = FUNC_LIST[357](loc_0, loc_3, rt_mul_i32(rt_load_i32(memory_at_0, loc_0 + 44), 24), loc_4, rt_load_i32_u8(memory_at_0, loc_0 + 2))
				loc_2 = reg_0
				rt_store_i32(memory_at_0, loc_0 + 44, loc_1)
				rt_store_i32(memory_at_0, loc_0 + 36, loc_2)
				rt_store_i32(memory_at_0, loc_0 + 32, rt_sub_i32(rt_add_i32(loc_2, loc_4), 24))
				rt_store_i32(memory_at_0, loc_0 + 20, rt_add_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 20), loc_3), loc_2))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[351](loc_0)
		error("out of code bounds")
	end
end
FUNC_LIST[82] = --[[ luaD_growstack(lua_State*, int) ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 40)
		FUNC_LIST[80](loc_0, (if rt_gt_i32(loc_1, loc_2) then rt_add_i32(loc_1, loc_2) else rt_shl_i32(loc_2, 1)))
		break
	end
end
FUNC_LIST[83] = --[[ luaD_growCI(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 44)
				if rt_lt_i32(loc_2, 22500) then
					while true do
						loc_1 = rt_shl_i32(loc_2, 1)
						loc_3 = (if rt_gt_i32(loc_2, 19999) then 22500 else (if rt_ge_i32(loc_1, 20000) then 20000 else loc_1))
						if loc_3 >= 178956971 then
							desired = 2
							break
						end
						loc_4 = rt_load_i32(memory_at_0, loc_0 + 36)
						loc_5 = rt_mul_i32(loc_3, 24)
						reg_0 = FUNC_LIST[357](loc_0, loc_4, rt_mul_i32(loc_2, 24), loc_5, rt_load_i32_u8(memory_at_0, loc_0 + 2))
						loc_1 = reg_0
						rt_store_i32(memory_at_0, loc_0 + 44, loc_3)
						rt_store_i32(memory_at_0, loc_0 + 36, loc_1)
						rt_store_i32(memory_at_0, loc_0 + 32, rt_sub_i32(rt_add_i32(loc_1, loc_5), 24))
						loc_1 = rt_add_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 20), loc_4), loc_1)
						rt_store_i32(memory_at_0, loc_0 + 20, loc_1)
						if rt_ge_i32(loc_2, 20000) then
							desired = 1
							break
						end
						loc_2 = rt_add_i32(loc_1, 24)
						rt_store_i32(memory_at_0, loc_0 + 20, loc_2)
						reg_0 = loc_2
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[79](loc_0, 5)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[351](loc_0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[60](loc_0, 1488, 0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[84] = --[[ luaD_checkCstack(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local desired
	while true do
		while true do
			loc_1 = rt_load_i32_u16(memory_at_0, loc_0 + 48)
			if loc_1 ~= 200 then
				while true do
					if loc_1 >= 225 then
						desired = 1
						break
					end
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[60](loc_0, 1486, 0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[79](loc_0, 5)
		error("out of code bounds")
	end
end
FUNC_LIST[85] = --[[ luaD_call(lua_State*, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_4 = rt_add_i32(rt_load_i32_u16(memory_at_0, loc_0 + 48), 1)
		rt_store_i32_n16(memory_at_0, loc_0 + 48, loc_4)
		while true do
			while true do
				loc_3 = bit_and(loc_4, 65535)
				if loc_3 >= 200 then
					while true do
						if loc_3 == 200 then
							desired = 2
							break
						end
						if bit_and(loc_4, 65535) >= 225 then
							desired = 1
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_4 = rt_load_i32(memory_at_0, loc_0 + 28)
				while true do
					reg_0 = FUNC_LIST[581](loc_0, loc_1, loc_2)
					if reg_0 ~= 0 then
						break
					end
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 20)
					rt_store_i32(memory_at_0, loc_3 + 20, bit_or(rt_load_i32(memory_at_0, loc_3 + 20), 1))
					loc_3 = rt_load_i32_u8(memory_at_0, loc_0 + 5)
					rt_store_i32_n8(memory_at_0, loc_0 + 5, 1)
					if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
						while true do
							FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[578](loc_0)
					if bit_and(loc_3, 1) ~= 0 then
						break
					end
					rt_store_i32_n8(memory_at_0, loc_0 + 5, 0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_2 ~= 4294967295 then
					while true do
						rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 28), rt_sub_i32(loc_1, loc_4)), rt_shl_i32(loc_2, 4)))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				rt_store_i32_n16(memory_at_0, loc_0 + 48, rt_sub_i32(rt_load_i32_u16(memory_at_0, loc_0 + 48), 1))
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
				if rt_load_i32(memory_at_0, loc_2 + 40) >= rt_load_i32(memory_at_0, loc_2 + 36) then
					while true do
						reg_0 = FUNC_LIST[42](loc_0, 1)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[60](loc_0, 1486, 0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[79](loc_0, 5)
		error("out of code bounds")
	end
end
FUNC_LIST[86] = --[[ lua_resume ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 0, 2, 1, 1, 1, 1, 2, }
							end)()
						end
						temp = br_map[1][rt_load_i32_u8(memory_at_0, loc_0 + 3)] or 1
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 2
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if rt_load_i32(memory_at_0, loc_0 + 20) == rt_load_i32(memory_at_0, loc_0 + 36) then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_1 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_2, 4))
				rt_store_i32(memory_at_0, loc_0 + 8, loc_1)
				reg_0 = FUNC_LIST[387](loc_0, 4104, 37)
				loc_2 = reg_0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_1 == 0 then
					while true do
						loc_4 = rt_add_i32(loc_0, 48)
						loc_1 = 0
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_1 = rt_load_i32_u16(memory_at_0, loc_1 + 48)
				rt_store_i32_n16(memory_at_0, loc_0 + 48, loc_1)
				if loc_1 < 200 then
					while true do
						loc_4 = rt_add_i32(loc_0, 48)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_1 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_2, 4))
				rt_store_i32(memory_at_0, loc_0 + 8, loc_1)
				reg_0 = FUNC_LIST[387](loc_0, 1486, 16)
				loc_2 = reg_0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32_n8(memory_at_0, loc_0 + 5, 1)
			loc_1 = rt_add_i32(loc_1, 1)
			rt_store_i32_n16(memory_at_0, loc_0 + 50, loc_1)
			rt_store_i32_n16(memory_at_0, loc_0 + 48, loc_1)
			if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
				while true do
					FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									reg_0 = FUNC_LIST[78](loc_0, 13, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_2, 4)))
									loc_3 = reg_0
									if loc_3 ~= 0 then
										while true do
											while true do
												while true do
													loc_1 = rt_load_i32(memory_at_0, loc_0 + 20)
													loc_2 = rt_load_i32(memory_at_0, loc_0 + 36)
													if loc_1 > loc_2 then
														while true do
															while true do
																if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 20), 2) ~= 0 then
																	desired = 10
																	break
																end
																loc_1 = rt_sub_i32(loc_1, 24)
																if loc_2 < loc_1 then
																	continue
																end
																break
															end
															if desired then
																break
															end
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
															end
															break
														end
													end
													rt_store_i32_n8(memory_at_0, loc_0 + 5, 0)
													rt_store_i32_n8(memory_at_0, loc_0 + 3, loc_3)
													rt_store_i32_n16(memory_at_0, loc_0 + 48, rt_load_i32_u16(memory_at_0, loc_0 + 50))
													loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
													if not br_map[2] then
														br_map[2] = (function()
															return { [0] = 5, 5, 3, 4, }
														end)()
													end
													temp = br_map[2][rt_sub_i32(loc_3, 2)] or 6
													if temp < 5 then
														if temp < 4 then
															desired = 7
															break
														else
															desired = 6
															break
														end
													elseif temp > 5 then
														desired = 4
														break
													else
														desired = 5
														break
													end
												end
												if desired then
													if desired == 9 then
														desired = nil
														continue
													end
													break
												end
												rt_store_i32_n8(memory_at_0, loc_0 + 3, loc_3)
												reg_0 = FUNC_LIST[78](loc_0, 14, loc_1)
												loc_3 = reg_0
												if loc_3 ~= 0 then
													continue
												end
												break
											end
											if desired then
												break
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_1 = 0
									rt_store_i32_n8(memory_at_0, loc_0 + 5, 0)
									loc_2 = rt_load_i32_u16(memory_at_0, loc_0 + 50)
									loc_3 = rt_load_i32_u8(memory_at_0, loc_0 + 3)
									if loc_3 == 0 then
										desired = 3
										break
									end
									loc_1 = loc_3
									desired = 2
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = FUNC_LIST[387](loc_0, 1121, 17)
								loc_2 = reg_0
								rt_store_i32(memory_at_0, loc_1 + 12, 5)
								rt_store_i32(memory_at_0, loc_1, loc_2)
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[387](loc_0, 3507, 23)
							loc_2 = reg_0
							rt_store_i32(memory_at_0, loc_1 + 12, 5)
							rt_store_i32(memory_at_0, loc_1, loc_2)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_2 = rt_sub_i32(loc_1, 16)
						rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_2))
						rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = rt_add_i32(loc_1, 16)
					rt_store_i32(memory_at_0, loc_0 + 8, loc_1)
					rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 8, loc_1)
					loc_1 = rt_load_i32_u8(memory_at_0, loc_0 + 3)
					loc_2 = rt_load_i32_u16(memory_at_0, loc_0 + 48)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = rt_load_i32(memory_at_0, loc_0 + 20)
				loc_0 = rt_load_i32(memory_at_0, loc_0 + 8)
				if rt_load_i32(memory_at_0, loc_3 + 8) >= loc_0 then
					break
				end
				rt_store_i32(memory_at_0, loc_3 + 8, loc_0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32_n16(memory_at_0, loc_4, rt_sub_i32(loc_2, 1))
			reg_0 = bit_and(loc_1, 255)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32(memory_at_0, loc_1 + 12, 5)
		rt_store_i32(memory_at_0, loc_1, loc_2)
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
		reg_0 = loc_0
		if rt_le_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 24), loc_1), 16) then
			while true do
				loc_1 = rt_load_i32(memory_at_0, loc_0 + 40)
				FUNC_LIST[80](loc_0, (if rt_le_i32(loc_1, 0) then rt_add_i32(loc_1, 1) else rt_shl_i32(loc_1, 1)))
				reg_1 = rt_load_i32(memory_at_0, loc_0 + 8)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_1 = loc_1
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_1 = reg_1
		rt_store_i32(memory_at_0, reg_0 + 8, rt_add_i32(loc_1, 16))
		reg_0 = 2
		break
	end
	return reg_0
end
FUNC_LIST[87] = --[[ resume(lua_State*, void*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					if rt_load_i32_u8(memory_at_0, loc_0 + 3) == 0 then
						while true do
							if rt_load_i32(memory_at_0, loc_0 + 12) == loc_1 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[581](loc_0, rt_sub_i32(loc_1, 16), 4294967295)
							if reg_0 ~= 0 then
								desired = 2
								break
							end
							loc_1 = rt_load_i32(memory_at_0, loc_0 + 20)
							rt_store_i32(memory_at_0, loc_1 + 20, bit_or(rt_load_i32(memory_at_0, loc_1 + 20), 1))
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					rt_store_i32_n8(memory_at_0, loc_0 + 3, 0)
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 20)
					loc_3 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 4))
					if rt_load_i32_u8(memory_at_0, loc_3 + 3) ~= 0 then
						while true do
							if rt_load_i32(memory_at_0, loc_3 + 20) ~= 0 then
								desired = 3
								break
							end
							FUNC_LIST[582](loc_0, loc_1)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					rt_store_i32(memory_at_0, loc_0 + 12, rt_load_i32(memory_at_0, loc_2))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if rt_load_i32_u8(memory_at_0, loc_0 + 3) ~= 0 then
					break
				end
				while true do
					loc_1 = rt_load_i32(memory_at_0, loc_0 + 20)
					if loc_1 <= rt_load_i32(memory_at_0, loc_0 + 36) then
						desired = 2
						break
					end
					while true do
						loc_1 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 4))
						if rt_load_i32_u8(memory_at_0, loc_1 + 3) ~= 0 then
							while true do
								reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, loc_1 + 20)](loc_0, 0)
								loc_1 = reg_0
								if rt_load_i32_u8(memory_at_0, loc_0 + 3) == 6 then
									desired = 2
									break
								end
								FUNC_LIST[582](loc_0, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4)))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[578](loc_0)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					if rt_load_i32_u8(memory_at_0, loc_0 + 3) == 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[60](loc_0, 4142, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[88] = --[[ resume_handle(lua_State*, void*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_5 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 4))
		rt_store_i32_n16(memory_at_0, loc_0 + 48, rt_load_i32_u16(memory_at_0, loc_0 + 50))
		rt_store_i32(memory_at_0, loc_1 + 20, bit_and(rt_load_i32(memory_at_0, loc_1 + 20), 4294967293))
		loc_4 = rt_load_i32_u8(memory_at_0, loc_0 + 3)
		rt_store_i32_n8(memory_at_0, loc_0 + 3, 0)
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
		while true do
			while true do
				while true do
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 4, 2, 0, 1, }
								end)()
							end
							temp = br_map[1][rt_sub_i32(loc_4, 2)] or 3
							if temp < 2 then
								if temp < 1 then
									break
								else
									desired = 4
									break
								end
							elseif temp > 2 then
								if temp < 4 then
									desired = 2
									break
								else
									desired = 1
									break
								end
							else
								desired = 3
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[387](loc_0, 1121, 17)
						loc_3 = reg_0
						rt_store_i32(memory_at_0, loc_2 + 12, 5)
						rt_store_i32(memory_at_0, loc_2, loc_3)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[387](loc_0, 3507, 23)
					loc_3 = reg_0
					rt_store_i32(memory_at_0, loc_2 + 12, 5)
					rt_store_i32(memory_at_0, loc_2, loc_3)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = rt_sub_i32(loc_2, 16)
				rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_3))
				rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = rt_add_i32(loc_2, 16)
			rt_store_i32(memory_at_0, loc_0 + 8, loc_2)
			break
		end
		rt_store_i32(memory_at_0, loc_0 + 12, rt_load_i32(memory_at_0, loc_1))
		rt_store_i32(memory_at_0, loc_1 + 8, loc_2)
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 36)
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, loc_5 + 20)](loc_0, loc_4)
		loc_4 = reg_0
		loc_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 36), rt_sub_i32(loc_1, loc_2))
		rt_store_i32(memory_at_0, loc_0 + 20, loc_1)
		FUNC_LIST[19](loc_0, rt_load_i32(memory_at_0, loc_1))
		FUNC_LIST[582](loc_0, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_4, 4)))
		while true do
			if rt_load_i32_u8(memory_at_0, loc_0 + 3) ~= 0 then
				break
			end
			while true do
				loc_1 = rt_load_i32(memory_at_0, loc_0 + 20)
				if loc_1 <= rt_load_i32(memory_at_0, loc_0 + 36) then
					desired = 1
					break
				end
				while true do
					loc_1 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 4))
					if rt_load_i32_u8(memory_at_0, loc_1 + 3) ~= 0 then
						while true do
							reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, loc_1 + 20)](loc_0, 0)
							loc_1 = reg_0
							if rt_load_i32_u8(memory_at_0, loc_0 + 3) == 6 then
								desired = 1
								break
							end
							FUNC_LIST[582](loc_0, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4)))
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[578](loc_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				if rt_load_i32_u8(memory_at_0, loc_0 + 3) == 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[89] = --[[ lua_resumeerror ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 0, 2, 1, 1, 1, 1, 2, }
							end)()
						end
						temp = br_map[1][rt_load_i32_u8(memory_at_0, loc_0 + 3)] or 1
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 2
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if rt_load_i32(memory_at_0, loc_0 + 20) == rt_load_i32(memory_at_0, loc_0 + 36) then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
				loc_2 = rt_sub_i32(loc_1, 16)
				rt_store_i32(memory_at_0, loc_0 + 8, loc_2)
				reg_0 = FUNC_LIST[387](loc_0, 4104, 37)
				loc_3 = reg_0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_1 == 0 then
					while true do
						loc_4 = rt_add_i32(loc_0, 48)
						loc_1 = 0
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_1 = rt_load_i32_u16(memory_at_0, loc_1 + 48)
				rt_store_i32_n16(memory_at_0, loc_0 + 48, loc_1)
				if loc_1 < 200 then
					while true do
						loc_4 = rt_add_i32(loc_0, 48)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
				loc_2 = rt_sub_i32(loc_1, 16)
				rt_store_i32(memory_at_0, loc_0 + 8, loc_2)
				reg_0 = FUNC_LIST[387](loc_0, 1486, 16)
				loc_3 = reg_0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32_n8(memory_at_0, loc_0 + 5, 1)
			loc_1 = rt_add_i32(loc_1, 1)
			rt_store_i32_n16(memory_at_0, loc_0 + 50, loc_1)
			rt_store_i32_n16(memory_at_0, loc_0 + 48, loc_1)
			if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
				while true do
					FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = 2
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											loc_1 = rt_load_i32(memory_at_0, loc_0 + 20)
											loc_2 = rt_load_i32(memory_at_0, loc_0 + 36)
											if loc_1 > loc_2 then
												while true do
													while true do
														if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 20), 2) ~= 0 then
															desired = 9
															break
														end
														loc_1 = rt_sub_i32(loc_1, 24)
														if loc_2 < loc_1 then
															continue
														end
														break
													end
													if desired then
														break
													end
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											rt_store_i32_n8(memory_at_0, loc_0 + 5, 0)
											rt_store_i32_n8(memory_at_0, loc_0 + 3, loc_3)
											rt_store_i32_n16(memory_at_0, loc_0 + 48, rt_load_i32_u16(memory_at_0, loc_0 + 50))
											loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
											if not br_map[2] then
												br_map[2] = (function()
													return { [0] = 4, 4, 2, 3, }
												end)()
											end
											temp = br_map[2][rt_sub_i32(loc_3, 2)] or 5
											if temp < 4 then
												if temp < 3 then
													desired = 7
													break
												else
													desired = 6
													break
												end
											elseif temp > 4 then
												desired = 4
												break
											else
												desired = 5
												break
											end
										end
										if desired then
											if desired == 8 then
												desired = nil
												continue
											end
											break
										end
										rt_store_i32_n8(memory_at_0, loc_0 + 3, loc_3)
										reg_0 = FUNC_LIST[78](loc_0, 14, loc_1)
										loc_3 = reg_0
										if loc_3 ~= 0 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_1 = 0
									rt_store_i32_n8(memory_at_0, loc_0 + 5, 0)
									loc_2 = rt_load_i32_u16(memory_at_0, loc_0 + 50)
									loc_3 = rt_load_i32_u8(memory_at_0, loc_0 + 3)
									if loc_3 == 0 then
										desired = 3
										break
									end
									loc_1 = loc_3
									desired = 2
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = FUNC_LIST[387](loc_0, 1121, 17)
								loc_2 = reg_0
								rt_store_i32(memory_at_0, loc_1 + 12, 5)
								rt_store_i32(memory_at_0, loc_1, loc_2)
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[387](loc_0, 3507, 23)
							loc_2 = reg_0
							rt_store_i32(memory_at_0, loc_1 + 12, 5)
							rt_store_i32(memory_at_0, loc_1, loc_2)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_2 = rt_sub_i32(loc_1, 16)
						rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_2))
						rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = rt_add_i32(loc_1, 16)
					rt_store_i32(memory_at_0, loc_0 + 8, loc_1)
					rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 8, loc_1)
					loc_1 = rt_load_i32_u8(memory_at_0, loc_0 + 3)
					loc_2 = rt_load_i32_u16(memory_at_0, loc_0 + 48)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = rt_load_i32(memory_at_0, loc_0 + 20)
				loc_0 = rt_load_i32(memory_at_0, loc_0 + 8)
				if rt_load_i32(memory_at_0, loc_3 + 8) >= loc_0 then
					break
				end
				rt_store_i32(memory_at_0, loc_3 + 8, loc_0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32_n16(memory_at_0, loc_4, rt_sub_i32(loc_2, 1))
			reg_0 = bit_and(loc_1, 255)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32(memory_at_0, rt_sub_i32(loc_1, 4), 5)
		rt_store_i32(memory_at_0, loc_2, loc_3)
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
		reg_0 = loc_0
		if rt_le_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 24), loc_1), 16) then
			while true do
				loc_1 = rt_load_i32(memory_at_0, loc_0 + 40)
				FUNC_LIST[80](loc_0, (if rt_le_i32(loc_1, 0) then rt_add_i32(loc_1, 1) else rt_shl_i32(loc_1, 1)))
				reg_1 = rt_load_i32(memory_at_0, loc_0 + 8)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_1 = loc_1
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_1 = reg_1
		rt_store_i32(memory_at_0, reg_0 + 8, rt_add_i32(loc_1, 16))
		reg_0 = 2
		break
	end
	return reg_0
end
FUNC_LIST[90] = --[[ lua_yield ]] function(loc_0, loc_1)
	local reg_0
	while true do
		if rt_load_i32_u16(memory_at_0, loc_0 + 48) > rt_load_i32_u16(memory_at_0, loc_0 + 50) then
			while true do
				FUNC_LIST[60](loc_0, 1190, 0)
				error("out of code bounds")
			end
		end
		rt_store_i32_n8(memory_at_0, loc_0 + 3, 1)
		rt_store_i32(memory_at_0, loc_0 + 12, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4)))
		reg_0 = 4294967295
		break
	end
	return reg_0
end
FUNC_LIST[91] = --[[ lua_break ]] function(loc_0)
	local reg_0
	while true do
		if rt_load_i32_u16(memory_at_0, loc_0 + 48) > rt_load_i32_u16(memory_at_0, loc_0 + 50) then
			while true do
				FUNC_LIST[60](loc_0, 1139, 0)
				error("out of code bounds")
			end
		end
		rt_store_i32_n8(memory_at_0, loc_0 + 3, 6)
		reg_0 = 4294967295
		break
	end
	return reg_0
end
FUNC_LIST[92] = --[[ lua_isyieldable ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = (if rt_load_i32_u16(memory_at_0, loc_0 + 48) <= rt_load_i32_u16(memory_at_0, loc_0 + 50) then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[93] = --[[ luaD_pcall(lua_State*, void (*)(lua_State*, void*), void*, long, long) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local desired
	local br_map = {}
	while true do
		loc_7 = rt_load_i32(memory_at_0, loc_0 + 36)
		loc_8 = rt_load_i32(memory_at_0, loc_0 + 20)
		loc_9 = rt_load_i32_u8(memory_at_0, loc_0 + 5)
		loc_10 = rt_load_i32_u16(memory_at_0, loc_0 + 48)
		while true do
			reg_0 = FUNC_LIST[78](loc_0, loc_1, loc_2)
			loc_2 = reg_0
			if loc_2 == 0 then
				break
			end
			while true do
				if loc_4 == 0 then
					while true do
						loc_1 = loc_2
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_2 ~= 2 then
					while true do
						loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
						while true do
							while true do
								while true do
									while true do
										if not br_map[1] then
											br_map[1] = (function()
												return { [0] = 2, 0, 1, }
											end)()
										end
										temp = br_map[1][rt_sub_i32(loc_2, 3)] or 3
										if temp < 2 then
											if temp < 1 then
												break
											else
												desired = 6
												break
											end
										elseif temp > 2 then
											desired = 4
											break
										else
											desired = 5
											break
										end
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									reg_0 = FUNC_LIST[387](loc_0, 1121, 17)
									loc_6 = reg_0
									rt_store_i32(memory_at_0, loc_1 + 12, 5)
									rt_store_i32(memory_at_0, loc_1, loc_6)
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								reg_0 = FUNC_LIST[387](loc_0, 3507, 23)
								loc_6 = reg_0
								rt_store_i32(memory_at_0, loc_1 + 12, 5)
								rt_store_i32(memory_at_0, loc_1, loc_6)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							loc_6 = rt_sub_i32(loc_1, 16)
							rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_6))
							rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_6 + 8))
							break
						end
						if desired then
							break
						end
						rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_1, 16))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_3 = FUNC_LIST[78](loc_0, 15, rt_add_i32(loc_4, rt_load_i32(memory_at_0, loc_0 + 28)))
				loc_4 = reg_3
				loc_6 = (if loc_2 ~= 4 then 5 else (if loc_4 == 4 then 4 else 5))
				loc_1 = (if loc_4 ~= 0 then loc_6 else loc_2)
				loc_2 = (if loc_4 ~= 0 then loc_6 else 2)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if bit_and(loc_9, 1) == 0 then
				while true do
					rt_store_i32_n8(memory_at_0, loc_0 + 5, 0)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = rt_load_i32_u16(memory_at_0, loc_0 + 48)
			rt_store_i32_n16(memory_at_0, loc_0 + 48, loc_10)
			while true do
				if rt_load_i32_u16(memory_at_0, loc_0 + 50) < loc_4 then
					break
				end
				loc_4 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1728)
				if loc_4 == 0 then
					break
				end
				TABLE_LIST[0].data[loc_4](loc_0)
				if rt_load_i32_u8(memory_at_0, loc_0 + 3) == 6 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = rt_sub_i32(loc_8, loc_7)
			loc_5 = rt_add_i32(loc_3, rt_load_i32(memory_at_0, loc_0 + 28))
			FUNC_LIST[19](loc_0, loc_5)
			while true do
				while true do
					while true do
						while true do
							if not br_map[2] then
								br_map[2] = (function()
									return { [0] = 2, 2, 0, 1, }
								end)()
							end
							temp = br_map[2][rt_sub_i32(loc_2, 2)] or 3
							if temp < 2 then
								if temp < 1 then
									break
								else
									desired = 4
									break
								end
							elseif temp > 2 then
								desired = 2
								break
							else
								desired = 3
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[387](loc_0, 1121, 17)
						loc_2 = reg_0
						rt_store_i32(memory_at_0, loc_5 + 12, 5)
						rt_store_i32(memory_at_0, loc_5, loc_2)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[387](loc_0, 3507, 23)
					loc_2 = reg_0
					rt_store_i32(memory_at_0, loc_5 + 12, 5)
					rt_store_i32(memory_at_0, loc_5, loc_2)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16)
				rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_2))
				rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_5, 16))
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 36)
			loc_5 = rt_add_i32(loc_4, loc_2)
			rt_store_i32(memory_at_0, loc_0 + 20, loc_5)
			rt_store_i32(memory_at_0, loc_0 + 12, rt_load_i32(memory_at_0, loc_5))
			while true do
				loc_5 = rt_load_i32(memory_at_0, loc_0 + 44)
				if rt_lt_i32(loc_5, 20001) then
					break
				end
				if rt_gt_i32(loc_4, 479975) then
					break
				end
				reg_0 = FUNC_LIST[357](loc_0, loc_2, rt_mul_i32(loc_5, 24), 480000, rt_load_i32_u8(memory_at_0, loc_0 + 2))
				loc_5 = reg_0
				rt_store_i32(memory_at_0, loc_0 + 44, 20000)
				rt_store_i32(memory_at_0, loc_0 + 36, loc_5)
				rt_store_i32(memory_at_0, loc_0 + 32, rt_add_i32(loc_5, 479976))
				rt_store_i32(memory_at_0, loc_0 + 20, rt_add_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 20), loc_2), loc_5))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = loc_1
			break
		end
		reg_0 = loc_5
		break
	end
	return reg_0
end
FUNC_LIST[94] = --[[ callerrfunc(lua_State*, void*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local reg_1
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
		loc_3 = rt_sub_i32(loc_2, 16)
		rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_3))
		rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
		loc_2 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16)
		rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
		reg_0 = loc_0
		if rt_le_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 24), loc_1), 16) then
			while true do
				loc_1 = rt_load_i32(memory_at_0, loc_0 + 40)
				FUNC_LIST[80](loc_0, (if rt_le_i32(loc_1, 0) then rt_add_i32(loc_1, 1) else rt_shl_i32(loc_1, 1)))
				reg_1 = rt_load_i32(memory_at_0, loc_0 + 8)
				break
			end
		else
			while true do
				reg_1 = loc_1
				break
			end
		end
		loc_1 = reg_1
		rt_store_i32(memory_at_0, reg_0 + 8, rt_add_i32(loc_1, 16))
		FUNC_LIST[85](loc_0, rt_sub_i32(loc_1, 16), 1)
		break
	end
end
FUNC_LIST[95] = --[[ luaA_toobject(lua_State*, int) ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_0
		reg_0 = (if loc_1 ~= 9344 then loc_1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[96] = --[[ pseudo2addr(lua_State*, int) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 2, 1, 0, }
							end)()
						end
						temp = br_map[1][rt_add_i32(loc_1, 10002)] or 3
						if temp < 2 then
							if temp < 1 then
								break
							else
								desired = 3
								break
							end
						elseif temp > 2 then
							desired = 1
							break
						else
							desired = 2
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 16), 1632)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_1 = rt_load_i32(memory_at_0, loc_0 + 16)
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 20)
				if loc_2 == rt_load_i32(memory_at_0, loc_0 + 36) then
					while true do
						reg_0 = rt_add_i32(loc_0, 56)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = rt_add_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 4)), 12)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = reg_0
				loc_2 = rt_load_i32(memory_at_0, loc_2)
				rt_store_i32(memory_at_0, loc_1 + 1628, 6)
				rt_store_i32(memory_at_0, loc_1 + 1616, loc_2)
				reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 16), 1616)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 56)
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
			rt_store_i32(memory_at_0, loc_2 + 1628, 6)
			rt_store_i32(memory_at_0, loc_2 + 1616, loc_1)
			reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 16), 1616)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_0 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 4))
		reg_0 = (if rt_load_i32_u8(memory_at_0, loc_0 + 4) < rt_sub_i32(4294957294, loc_1) then 9344 else rt_sub_i32(rt_add_i32(loc_0, rt_shl_i32(rt_sub_i32(0, loc_1), 4)), 160016))
		break
	end
	return reg_0
end
FUNC_LIST[97] = --[[ luaA_pushobject(lua_State*, lua_TValue const*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
		break
	end
end
FUNC_LIST[98] = --[[ lua_checkstack ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	while true do
		while true do
			if rt_gt_i32(loc_1, 8000) then
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
			if rt_gt_i32(rt_add_i32(loc_1, rt_shr_i32(rt_sub_i32(loc_2, rt_load_i32(memory_at_0, loc_0 + 12)), 4)), 8000) then
				break
			end
			loc_3 = 1
			if rt_le_i32(loc_1, 0) then
				break
			end
			loc_4 = rt_shl_i32(loc_1, 4)
			if rt_ge_i32(loc_4, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 24), loc_2)) then
				while true do
					FUNC_LIST[82](loc_0, loc_1)
					reg_0 = rt_load_i32(memory_at_0, loc_0 + 8)
					break
				end
			else
				while true do
					reg_0 = loc_2
					break
				end
			end
			loc_2 = reg_0
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 20)
			loc_0 = rt_add_i32(loc_2, loc_4)
			if rt_load_i32(memory_at_0, loc_1 + 8) >= loc_0 then
				break
			end
			rt_store_i32(memory_at_0, loc_1 + 8, loc_0)
			break
		end
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[99] = --[[ lua_rawcheckstack ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		loc_3 = rt_shl_i32(loc_1, 4)
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
		if rt_ge_i32(loc_3, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 24), loc_2)) then
			while true do
				FUNC_LIST[82](loc_0, loc_1)
				reg_0 = rt_load_i32(memory_at_0, loc_0 + 8)
				break
			end
		else
			while true do
				reg_0 = loc_2
				break
			end
		end
		loc_2 = reg_0
		loc_1 = rt_add_i32(loc_2, loc_3)
		loc_0 = rt_load_i32(memory_at_0, loc_0 + 20)
		if loc_1 > rt_load_i32(memory_at_0, loc_0 + 8) then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 8, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[100] = --[[ lua_xmove ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	while true do
		if loc_0 ~= loc_1 then
			while true do
				if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 4) ~= 0 then
					while true do
						FUNC_LIST[51](loc_1, loc_1, rt_sub_i32(loc_1, 4294967232))
						break
					end
				end
				loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_2, 4))
				loc_7 = rt_load_i32(memory_at_0, loc_1 + 8)
				while true do
					if rt_le_i32(loc_2, 0) then
						break
					end
					if loc_2 >= 4 then
						while true do
							loc_11 = bit_and(loc_2, 2147483644)
							while true do
								loc_3 = rt_shl_i32(loc_5, 4)
								loc_4 = rt_add_i32(loc_3, loc_7)
								loc_8 = rt_add_i32(loc_3, loc_6)
								rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_8))
								rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_8 + 8))
								loc_4 = bit_or(loc_3, 16)
								loc_8 = rt_add_i32(loc_4, loc_7)
								loc_4 = rt_add_i32(loc_4, loc_6)
								rt_store_i64(memory_at_0, loc_8 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
								rt_store_i64(memory_at_0, loc_8, rt_load_i64(memory_at_0, loc_4))
								loc_4 = bit_or(loc_3, 32)
								loc_8 = rt_add_i32(loc_4, loc_7)
								loc_4 = rt_add_i32(loc_4, loc_6)
								rt_store_i64(memory_at_0, loc_8 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
								rt_store_i64(memory_at_0, loc_8, rt_load_i64(memory_at_0, loc_4))
								loc_3 = bit_or(loc_3, 48)
								loc_4 = rt_add_i32(loc_3, loc_7)
								loc_3 = rt_add_i32(loc_3, loc_6)
								rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
								rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_3))
								loc_5 = rt_add_i32(loc_5, 4)
								loc_9 = rt_add_i32(loc_9, 4)
								if loc_11 ~= loc_9 then
									continue
								end
								break
							end
							break
						end
					end
					loc_12 = bit_and(loc_2, 3)
					if loc_12 == 0 then
						break
					end
					while true do
						loc_3 = rt_shl_i32(loc_5, 4)
						loc_9 = rt_add_i32(loc_3, loc_7)
						loc_3 = rt_add_i32(loc_3, loc_6)
						rt_store_i64(memory_at_0, loc_9, rt_load_i64(memory_at_0, loc_3))
						rt_store_i64(memory_at_0, loc_9 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
						loc_5 = rt_add_i32(loc_5, 1)
						loc_10 = rt_add_i32(loc_10, 1)
						if loc_12 ~= loc_10 then
							continue
						end
						break
					end
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 8, loc_6)
				rt_store_i32(memory_at_0, loc_1 + 8, rt_add_i32(rt_shl_i32(loc_2, 4), loc_7))
				break
			end
		end
		break
	end
end
FUNC_LIST[101] = --[[ lua_xpush ]] function(loc_0, loc_1, loc_2)
	local reg_0
	local desired
	while true do
		if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 4) ~= 0 then
			while true do
				FUNC_LIST[51](loc_1, loc_1, rt_sub_i32(loc_1, 4294967232))
				break
			end
		end
		while true do
			if rt_gt_i32(loc_2, 0) then
				while true do
					loc_2 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_2, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_2 then 9344 else loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_2, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_2, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_2)
			break
		end
		loc_2 = reg_0
		loc_0 = rt_load_i32(memory_at_0, loc_1 + 8)
		rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_2))
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
		rt_store_i32(memory_at_0, loc_1 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 8), 16))
		break
	end
end
FUNC_LIST[102] = --[[ lua_newthread ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	while true do
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 16)
		if rt_load_i32(memory_at_0, loc_1 + 40) >= rt_load_i32(memory_at_0, loc_1 + 36) then
			while true do
				reg_0 = FUNC_LIST[42](loc_0, 1)
				break
			end
		end
		if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
			while true do
				FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
				break
			end
		end
		reg_0 = FUNC_LIST[375](loc_0)
		loc_1 = reg_0
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i32(memory_at_0, loc_2 + 12, 9)
		rt_store_i32(memory_at_0, loc_2, loc_1)
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
		loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1708)
		if loc_2 ~= 0 then
			while true do
				TABLE_LIST[0].data[loc_2](loc_0, loc_1)
				break
			end
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[103] = --[[ lua_mainthread ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1412)
		break
	end
	return reg_0
end
FUNC_LIST[104] = --[[ lua_absindex ]] function(loc_0, loc_1)
	local reg_0
	while true do
		if rt_sub_i32(loc_1, 1) >= 4294957296 then
			while true do
				reg_0 = rt_add_i32(rt_add_i32(rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_load_i32(memory_at_0, loc_0 + 12)), 4), loc_1), 1)
				break
			end
		else
			while true do
				reg_0 = loc_1
				break
			end
		end
		loc_1 = reg_0
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[105] = --[[ lua_gettop ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_load_i32(memory_at_0, loc_0 + 12)), 4)
		break
	end
	return reg_0
end
FUNC_LIST[106] = --[[ lua_settop ]] function(loc_0, loc_1)
	local loc_2 = 0
	local desired
	while true do
		while true do
			if rt_ge_i32(loc_1, 0) then
				while true do
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
					loc_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4))
					if loc_2 >= loc_1 then
						desired = 1
						break
					end
					while true do
						rt_store_i32(memory_at_0, loc_2 + 12, 0)
						loc_2 = rt_add_i32(loc_2, 16)
						if loc_1 > loc_2 then
							continue
						end
						break
					end
					if desired then
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = rt_add_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4)), 16)
			break
		end
		rt_store_i32(memory_at_0, loc_0 + 8, loc_1)
		break
	end
end
FUNC_LIST[107] = --[[ lua_remove ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
					loc_2 = (if loc_3 <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
					loc_2 = rt_add_i32(loc_3, rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			loc_2 = reg_0
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
			break
		end
		loc_1 = rt_add_i32(loc_2, 16)
		if loc_1 < loc_3 then
			while true do
				while true do
					rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
					rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
					loc_2 = loc_1
					loc_1 = rt_add_i32(loc_1, 16)
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
					if loc_1 < loc_3 then
						continue
					end
					break
				end
				break
			end
		end
		rt_store_i32(memory_at_0, loc_0 + 8, rt_sub_i32(loc_3, 16))
		break
	end
end
FUNC_LIST[108] = --[[ lua_insert ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
			while true do
				FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
				break
			end
		end
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
					loc_3 = (if loc_2 <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
					loc_3 = rt_add_i32(loc_2, rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			loc_3 = reg_0
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
			break
		end
		if loc_2 > loc_3 then
			while true do
				while true do
					loc_1 = rt_sub_i32(loc_2, 16)
					rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
					rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
					loc_2 = loc_1
					if loc_1 > loc_3 then
						continue
					end
					break
				end
				break
			end
		end
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_2))
		rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
		break
	end
end
FUNC_LIST[109] = --[[ lua_replace ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
			while true do
				FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
				break
			end
		end
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_2 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_2 then 9344 else loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_2 = reg_0
		while true do
			while true do
				while true do
					while true do
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 1, 0, }
							end)()
						end
						temp = br_map[1][rt_add_i32(loc_1, 10002)] or 2
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 2
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 4))
					loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
					loc_3 = rt_load_i32(memory_at_0, rt_sub_i32(loc_1, 16))
					rt_store_i32(memory_at_0, loc_2 + 12, loc_3)
					if rt_lt_i32(rt_load_i32(memory_at_0, rt_sub_i32(loc_1, 4)), 5) then
						desired = 1
						break
					end
					if bit_and(rt_load_i32_u8(memory_at_0, loc_2 + 1), 4) == 0 then
						desired = 1
						break
					end
					if bit_and(rt_load_i32_u8(memory_at_0, loc_3 + 1), 3) == 0 then
						desired = 1
						break
					end
					FUNC_LIST[49](loc_0, loc_2, loc_3)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 56, rt_load_i32(memory_at_0, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16)))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16)
			rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_3))
			rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
			if rt_gt_i32(loc_1, 4294957293) then
				break
			end
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
			if rt_lt_i32(rt_load_i32(memory_at_0, rt_sub_i32(loc_1, 4)), 5) then
				break
			end
			loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 4))
			if bit_and(rt_load_i32_u8(memory_at_0, loc_2 + 1), 4) == 0 then
				break
			end
			loc_1 = rt_load_i32(memory_at_0, rt_sub_i32(loc_1, 16))
			if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) == 0 then
				break
			end
			FUNC_LIST[49](loc_0, loc_2, loc_1)
			break
		end
		rt_store_i32(memory_at_0, loc_0 + 8, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
		break
	end
end
FUNC_LIST[110] = --[[ lua_pushvalue ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
			while true do
				FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
				break
			end
		end
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
					loc_1 = (if loc_2 <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
					loc_1 = rt_add_i32(loc_2, rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			loc_1 = reg_0
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
			break
		end
		rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
		break
	end
end
FUNC_LIST[111] = --[[ lua_type ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					if loc_1 < rt_load_i32(memory_at_0, loc_0 + 8) then
						desired = 1
						break
					end
					reg_0 = 4294967295
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					loc_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			loc_1 = reg_0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		if loc_1 == 9344 then
			while true do
				reg_0 = 4294967295
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = rt_load_i32(memory_at_0, loc_1 + 12)
		break
	end
	return reg_0
end
FUNC_LIST[112] = --[[ lua_typename ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		if loc_1 == 4294967295 then
			while true do
				reg_0 = 3864
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_1, 2), 9984))
		break
	end
	return reg_0
end
FUNC_LIST[113] = --[[ lua_iscfunction ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_0
		loc_0 = 0
		if rt_load_i32(memory_at_0, loc_1 + 12) == 7 then
			while true do
				reg_0 = (if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 3) ~= 0 then 1 else 0)
				break
			end
		else
			while true do
				reg_0 = loc_0
				break
			end
		end
		loc_0 = reg_0
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[114] = --[[ lua_isLfunction ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_0
		loc_0 = 0
		if rt_load_i32(memory_at_0, loc_1 + 12) == 7 then
			while true do
				reg_0 = (if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 3) == 0 then 1 else 0)
				break
			end
		else
			while true do
				reg_0 = loc_0
				break
			end
		end
		loc_0 = reg_0
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[115] = --[[ lua_isnumber ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_0
		loc_0 = 1
		if rt_load_i32(memory_at_0, loc_1 + 12) ~= 3 then
			while true do
				reg_0 = FUNC_LIST[586](loc_1, loc_2)
				reg_0 = (if reg_0 ~= 0 then 1 else 0)
				break
			end
		else
			while true do
				reg_0 = loc_0
				break
			end
		end
		loc_0 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[116] = --[[ lua_isstring ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		while true do
			while true do
				if rt_gt_i32(loc_1, 0) then
					while true do
						loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
						if loc_1 < rt_load_i32(memory_at_0, loc_0 + 8) then
							desired = 2
							break
						end
						reg_0 = 4294967295
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_ge_i32(loc_1, 4294957297) then
					while true do
						loc_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[96](loc_0, loc_1)
				loc_1 = reg_0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = 4294967295
			if loc_1 == 9344 then
				break
			end
			reg_0 = rt_load_i32(memory_at_0, loc_1 + 12)
			break
		end
		loc_1 = reg_0
		reg_0 = bit_or((if loc_1 == 5 then 1 else 0), (if loc_1 == 3 then 1 else 0))
		break
	end
	return reg_0
end
FUNC_LIST[117] = --[[ lua_isuserdata ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_0
		loc_1 = rt_load_i32(memory_at_0, loc_1 + 12)
		reg_0 = bit_or((if loc_1 == 8 then 1 else 0), (if loc_1 == 2 then 1 else 0))
		break
	end
	return reg_0
end
FUNC_LIST[118] = --[[ lua_rawequal ]] function(loc_0, loc_1, loc_2)
	local reg_0
	local desired
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_0
		while true do
			if rt_gt_i32(loc_2, 0) then
				while true do
					loc_2 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_2, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_2 then 9344 else loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_2, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_2, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_2)
			break
		end
		loc_2 = reg_0
		loc_0 = 0
		while true do
			if loc_1 == 9344 then
				break
			end
			if loc_2 == 9344 then
				break
			end
			reg_0 = FUNC_LIST[363](loc_1, loc_2)
			loc_0 = reg_0
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[119] = --[[ lua_equal ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_0
		while true do
			if rt_gt_i32(loc_2, 0) then
				while true do
					loc_2 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_2, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_2 then 9344 else loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_2, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_2, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_2)
			break
		end
		loc_2 = reg_0
		while true do
			if loc_1 == 9344 then
				break
			end
			if loc_2 == 9344 then
				break
			end
			if rt_load_i32(memory_at_0, loc_1 + 12) ~= rt_load_i32(memory_at_0, loc_2 + 12) then
				break
			end
			reg_0 = FUNC_LIST[594](loc_0, loc_1, loc_2)
			loc_3 = (if reg_0 ~= 0 then 1 else 0)
			break
		end
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[120] = --[[ lua_lessthan ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_0
		while true do
			if rt_gt_i32(loc_2, 0) then
				while true do
					loc_2 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_2, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_2 then 9344 else loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_2, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_2, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_2)
			break
		end
		loc_3 = reg_0
		loc_2 = 0
		while true do
			if loc_1 == 9344 then
				break
			end
			if loc_3 == 9344 then
				break
			end
			reg_0 = FUNC_LIST[591](loc_0, loc_1, loc_3)
			loc_2 = reg_0
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[121] = --[[ lua_tonumberx ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0.0
	local reg_0
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				while true do
					if rt_gt_i32(loc_1, 0) then
						while true do
							loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
							reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if rt_ge_i32(loc_1, 4294957297) then
						while true do
							reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[96](loc_0, loc_1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_1 = reg_0
				if rt_load_i32(memory_at_0, loc_1 + 12) ~= 3 then
					while true do
						reg_0 = FUNC_LIST[586](loc_1, loc_3)
						loc_1 = reg_0
						if loc_1 == 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_2 ~= 0 then
					while true do
						rt_store_i32(memory_at_0, loc_2, 1)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_4 = rt_load_f64(memory_at_0, loc_1)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_2 == 0 then
				break
			end
			rt_store_i32(memory_at_0, loc_2, 0)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[122] = --[[ lua_tointegerx ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0.0
	local reg_0
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				while true do
					while true do
						if rt_gt_i32(loc_1, 0) then
							while true do
								loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
								reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if rt_ge_i32(loc_1, 4294957297) then
							while true do
								reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						reg_0 = FUNC_LIST[96](loc_0, loc_1)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = reg_0
					if rt_load_i32(memory_at_0, loc_1 + 12) ~= 3 then
						while true do
							reg_0 = FUNC_LIST[586](loc_1, loc_3)
							loc_1 = reg_0
							if loc_1 == 0 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					while true do
						loc_4 = rt_load_f64(memory_at_0, loc_1)
						if math_abs(loc_4) < 2.147483648e9 then
							while true do
								reg_0 = rt_truncate_f64(loc_4)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						reg_0 = 2147483648
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = reg_0
					loc_0 = 1
					if loc_2 ~= 0 then
						desired = 2
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_0 = 0
				loc_1 = 0
				if loc_2 == 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_2, loc_0)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[123] = --[[ lua_tounsignedx ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0.0
	local reg_0
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				while true do
					while true do
						if rt_gt_i32(loc_1, 0) then
							while true do
								loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
								reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if rt_ge_i32(loc_1, 4294957297) then
							while true do
								reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						reg_0 = FUNC_LIST[96](loc_0, loc_1)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = reg_0
					if rt_load_i32(memory_at_0, loc_1 + 12) ~= 3 then
						while true do
							reg_0 = FUNC_LIST[586](loc_1, loc_3)
							loc_1 = reg_0
							if loc_1 == 0 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					while true do
						loc_4 = rt_load_f64(memory_at_0, loc_1)
						if math_abs(loc_4) < 9.223372036854776e18 then
							while true do
								reg_0 = rt_truncate_i64_f64(loc_4)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						reg_0 = rt_i64_from_u32(0, 2147483648)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = rt_wrap_i32_i64(reg_0)
					loc_0 = 1
					if loc_2 ~= 0 then
						desired = 2
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_0 = 0
				loc_1 = 0
				if loc_2 == 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_2, loc_0)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[124] = --[[ lua_toboolean ]] function(loc_0, loc_1)
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						if rt_gt_i32(loc_1, 0) then
							while true do
								loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
								reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if rt_ge_i32(loc_1, 4294957297) then
							while true do
								reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						reg_0 = FUNC_LIST[96](loc_0, loc_1)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = reg_0
					loc_0 = rt_load_i32(memory_at_0, loc_1 + 12)
					if not br_map[1] then
						br_map[1] = (function()
							return { [0] = 2, 0, }
						end)()
					end
					temp = br_map[1][loc_0] or 1
					if temp < 1 then
						break
					elseif temp > 1 then
						desired = 1
						break
					else
						desired = 2
						break
					end
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = (if rt_load_i32(memory_at_0, loc_1) ~= 0 then 1 else 0)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_0 = 1
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[125] = --[[ lua_tolstring ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					if rt_gt_i32(loc_1, 0) then
						while true do
							loc_3 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
							reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_3 then 9344 else loc_3)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if rt_ge_i32(loc_1, 4294957297) then
						while true do
							reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[96](loc_0, loc_1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = reg_0
				if rt_load_i32(memory_at_0, loc_3 + 12) == 5 then
					break
				end
				if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
					while true do
						FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[587](loc_0, loc_3)
				if reg_0 == 0 then
					while true do
						loc_0 = 0
						reg_0 = loc_0
						if loc_2 == 0 then
							desired = 1
							break
						end
						rt_store_i32(memory_at_0, loc_2, 0)
						reg_0 = 0
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_3 = rt_load_i32(memory_at_0, loc_0 + 16)
				if rt_load_i32(memory_at_0, loc_3 + 40) >= rt_load_i32(memory_at_0, loc_3 + 36) then
					while true do
						reg_0 = FUNC_LIST[42](loc_0, 1)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_gt_i32(loc_1, 0) then
					while true do
						loc_3 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
						loc_3 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_3 then 9344 else loc_3)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_ge_i32(loc_1, 4294957297) then
					while true do
						loc_3 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[96](loc_0, loc_1)
				loc_3 = reg_0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_2 ~= 0 then
				while true do
					rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3) + 16))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_3), 20)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_0 = reg_0
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[126] = --[[ lua_tostringatom ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_0
		if rt_load_i32(memory_at_0, loc_1 + 12) == 5 then
			while true do
				loc_1 = rt_load_i32(memory_at_0, loc_1)
				if loc_2 ~= 0 then
					while true do
						loc_3 = rt_load_i32_u16(memory_at_0, loc_1 + 4)
						if loc_3 == 32768 then
							while true do
								loc_0 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1712)
								reg_0 = loc_1
								if loc_0 ~= 0 then
									while true do
										reg_1 = TABLE_LIST[0].data[loc_0](rt_add_i32(loc_1, 20), rt_load_i32(memory_at_0, loc_1 + 16))
										break
									end
								else
									while true do
										reg_1 = 65535
										break
									end
								end
								loc_3 = reg_1
								rt_store_i32_n16(memory_at_0, reg_0 + 4, loc_3)
								break
							end
						end
						rt_store_i32(memory_at_0, loc_2, rt_extend_i32_n16(loc_3))
						break
					end
				end
				reg_0 = rt_add_i32(loc_1, 20)
				break
			end
		else
			while true do
				reg_0 = loc_3
				break
			end
		end
		loc_3 = reg_0
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[127] = --[[ lua_namecallatom ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 68)
		if loc_2 == 0 then
			while true do
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		if loc_1 ~= 0 then
			while true do
				loc_3 = rt_load_i32_u16(memory_at_0, loc_2 + 4)
				if loc_3 == 32768 then
					while true do
						loc_0 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1712)
						reg_0 = loc_2
						if loc_0 ~= 0 then
							while true do
								reg_1 = TABLE_LIST[0].data[loc_0](rt_add_i32(loc_2, 20), rt_load_i32(memory_at_0, loc_2 + 16))
								break
							end
							if desired then
								break
							end
						else
							while true do
								reg_1 = 65535
								break
							end
							if desired then
								break
							end
						end
						loc_3 = reg_1
						rt_store_i32_n16(memory_at_0, reg_0 + 4, loc_3)
						break
					end
					if desired then
						break
					end
				end
				rt_store_i32(memory_at_0, loc_1, rt_extend_i32_n16(loc_3))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = rt_add_i32(loc_2, 20)
		break
	end
	return reg_0
end
FUNC_LIST[128] = --[[ lua_tovector ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_0
		reg_0 = (if rt_load_i32(memory_at_0, loc_1 + 12) == 4 then loc_1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[129] = --[[ lua_objlen ]] function(loc_0, loc_1)
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_1 = reg_0
		loc_0 = 0
		while true do
			while true do
				while true do
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 0, 3, 4, 1, 4, 2, }
								end)()
							end
							temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 12), 5)] or 4
							if temp < 2 then
								if temp < 1 then
									break
								else
									desired = 4
									break
								end
							elseif temp > 2 then
								if temp < 4 then
									desired = 2
									break
								else
									desired = 1
									break
								end
							else
								desired = 3
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 16)
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 4)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 4)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[433](rt_load_i32(memory_at_0, loc_1))
			loc_0 = reg_0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[130] = --[[ lua_tocfunction ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_0
		loc_0 = 0
		while true do
			if rt_load_i32(memory_at_0, loc_1 + 12) ~= 7 then
				break
			end
			loc_1 = rt_load_i32(memory_at_0, loc_1)
			if rt_load_i32_u8(memory_at_0, loc_1 + 3) == 0 then
				break
			end
			loc_0 = rt_load_i32(memory_at_0, loc_1 + 16)
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[131] = --[[ lua_tolightuserdata ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_0
		loc_0 = 0
		if rt_load_i32(memory_at_0, loc_1 + 12) == 2 then
			while true do
				reg_0 = rt_load_i32(memory_at_0, loc_1)
				break
			end
		else
			while true do
				reg_0 = loc_0
				break
			end
		end
		loc_0 = reg_0
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[132] = --[[ lua_tolightuserdatatagged ]] function(loc_0, loc_1, loc_2)
	local reg_0
	local desired
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_0
		loc_0 = 0
		while true do
			if rt_load_i32(memory_at_0, loc_1 + 12) ~= 2 then
				break
			end
			if loc_2 ~= rt_load_i32(memory_at_0, loc_1 + 8) then
				break
			end
			loc_0 = rt_load_i32(memory_at_0, loc_1)
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[133] = --[[ lua_touserdata ]] function(loc_0, loc_1)
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_1 = reg_0
		loc_0 = 0
		while true do
			while true do
				while true do
					if not br_map[1] then
						br_map[1] = (function()
							return { [0] = 1, 2, 2, 2, 2, 2, 0, }
						end)()
					end
					temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 12), 2)] or 2
					if temp < 1 then
						break
					elseif temp > 1 then
						desired = 1
						break
					else
						desired = 2
						break
					end
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_1), 16)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_0 = rt_load_i32(memory_at_0, loc_1)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[134] = --[[ lua_touserdatatagged ]] function(loc_0, loc_1, loc_2)
	local reg_0
	local desired
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_0
		loc_0 = 0
		if rt_load_i32(memory_at_0, loc_1 + 12) == 8 then
			while true do
				loc_1 = rt_load_i32(memory_at_0, loc_1)
				reg_0 = (if rt_load_i32_u8(memory_at_0, loc_1 + 3) == loc_2 then rt_add_i32(loc_1, 16) else 0)
				break
			end
		else
			while true do
				reg_0 = loc_0
				break
			end
		end
		loc_0 = reg_0
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[135] = --[[ lua_userdatatag ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_0
		loc_0 = 4294967295
		if rt_load_i32(memory_at_0, loc_1 + 12) == 8 then
			while true do
				reg_0 = rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 3)
				break
			end
		else
			while true do
				reg_0 = loc_0
				break
			end
		end
		loc_0 = reg_0
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[136] = --[[ lua_lightuserdatatag ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_0
		loc_0 = 4294967295
		if rt_load_i32(memory_at_0, loc_1 + 12) == 2 then
			while true do
				reg_0 = rt_load_i32(memory_at_0, loc_1 + 8)
				break
			end
		else
			while true do
				reg_0 = loc_0
				break
			end
		end
		loc_0 = reg_0
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[137] = --[[ lua_tothread ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_0
		loc_0 = 0
		if rt_load_i32(memory_at_0, loc_1 + 12) == 9 then
			while true do
				reg_0 = rt_load_i32(memory_at_0, loc_1)
				break
			end
		else
			while true do
				reg_0 = loc_0
				break
			end
		end
		loc_0 = reg_0
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[138] = --[[ lua_tobuffer ]] function(loc_0, loc_1, loc_2)
	local reg_0
	local desired
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_0
		loc_0 = 0
		if rt_load_i32(memory_at_0, loc_1 + 12) == 10 then
			while true do
				loc_1 = rt_load_i32(memory_at_0, loc_1)
				if loc_2 ~= 0 then
					while true do
						rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_1 + 4))
						break
					end
				end
				reg_0 = rt_add_i32(loc_1, 8)
				break
			end
		else
			while true do
				reg_0 = loc_0
				break
			end
		end
		loc_0 = reg_0
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[139] = --[[ lua_topointer ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						while true do
							if rt_gt_i32(loc_1, 0) then
								while true do
									loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
									reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if rt_ge_i32(loc_1, 4294957297) then
								while true do
									reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							reg_0 = FUNC_LIST[96](loc_0, loc_1)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_1 = reg_0
						loc_2 = rt_load_i32(memory_at_0, loc_1 + 12)
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 2, 1, 1, 1, 1, 1, 0, }
							end)()
						end
						temp = br_map[1][rt_sub_i32(loc_2, 2)] or 1
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 2
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_1), 16)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_0 = 0
				reg_0 = loc_0
				if rt_lt_i32(loc_2, 5) then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = rt_load_i32(memory_at_0, loc_1)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_0 = reg_0
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[140] = --[[ lua_pushnil ]] function(loc_0)
	local loc_1 = 0
	while true do
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i32(memory_at_0, loc_1 + 12, 0)
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_1, 16))
		break
	end
end
FUNC_LIST[141] = --[[ lua_pushnumber ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i32(memory_at_0, loc_2 + 12, 3)
		rt_store_f64(memory_at_0, loc_2, loc_1)
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
		break
	end
end
FUNC_LIST[142] = --[[ lua_pushinteger ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i32(memory_at_0, loc_2 + 12, 3)
		rt_store_f64(memory_at_0, loc_2, rt_convert_f64_i32(loc_1))
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
		break
	end
end
FUNC_LIST[143] = --[[ lua_pushunsigned ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i32(memory_at_0, loc_2 + 12, 3)
		rt_store_f64(memory_at_0, loc_2, no_op(loc_1))
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
		break
	end
end
FUNC_LIST[144] = --[[ lua_pushvector ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	while true do
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i32(memory_at_0, loc_4 + 12, 4)
		rt_store_f32(memory_at_0, loc_4 + 8, loc_3)
		rt_store_f32(memory_at_0, loc_4 + 4, loc_2)
		rt_store_f32(memory_at_0, loc_4, loc_1)
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_4, 16))
		break
	end
end
FUNC_LIST[145] = --[[ lua_pushlstring ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 16)
		if rt_load_i32(memory_at_0, loc_3 + 40) >= rt_load_i32(memory_at_0, loc_3 + 36) then
			while true do
				reg_0 = FUNC_LIST[42](loc_0, 1)
				break
			end
		end
		if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
			while true do
				FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
				break
			end
		end
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
		reg_0 = FUNC_LIST[387](loc_0, loc_1, loc_2)
		loc_2 = reg_0
		rt_store_i32(memory_at_0, loc_3 + 12, 5)
		rt_store_i32(memory_at_0, loc_3, loc_2)
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
		break
	end
end
FUNC_LIST[146] = --[[ lua_pushstring ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		if loc_1 == 0 then
			while true do
				loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
				rt_store_i32(memory_at_0, loc_1 + 12, 0)
				rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_1, 16))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = FUNC_LIST[649](loc_1)
		loc_3 = reg_0
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
		if rt_load_i32(memory_at_0, loc_2 + 40) >= rt_load_i32(memory_at_0, loc_2 + 36) then
			while true do
				reg_0 = FUNC_LIST[42](loc_0, 1)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
			while true do
				FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
		reg_0 = FUNC_LIST[387](loc_0, loc_1, loc_3)
		loc_1 = reg_0
		rt_store_i32(memory_at_0, loc_2 + 12, 5)
		rt_store_i32(memory_at_0, loc_2, loc_1)
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
		break
	end
end
FUNC_LIST[147] = --[[ lua_pushvfstring ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 16)
		if rt_load_i32(memory_at_0, loc_3 + 40) >= rt_load_i32(memory_at_0, loc_3 + 36) then
			while true do
				reg_0 = FUNC_LIST[42](loc_0, 1)
				break
			end
		end
		if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
			while true do
				FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
				break
			end
		end
		reg_0 = FUNC_LIST[366](loc_0, loc_1, loc_2)
		break
	end
	return reg_0
end
FUNC_LIST[148] = --[[ lua_pushfstringL ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 16)
		if rt_load_i32(memory_at_0, loc_4 + 40) >= rt_load_i32(memory_at_0, loc_4 + 36) then
			while true do
				reg_0 = FUNC_LIST[42](loc_0, 1)
				break
			end
		end
		if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
			while true do
				FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
				break
			end
		end
		rt_store_i32(memory_at_0, loc_3 + 12, loc_2)
		reg_0 = FUNC_LIST[366](loc_0, loc_1, loc_2)
		loc_0 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[149] = --[[ lua_pushcclosurek ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local reg_1
	local reg_2
	while true do
		loc_5 = rt_load_i32(memory_at_0, loc_0 + 16)
		if rt_load_i32(memory_at_0, loc_5 + 40) >= rt_load_i32(memory_at_0, loc_5 + 36) then
			while true do
				reg_0 = FUNC_LIST[42](loc_0, 1)
				break
			end
		end
		if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
			while true do
				FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
				break
			end
		end
		loc_5 = rt_load_i32(memory_at_0, loc_0 + 20)
		reg_0 = loc_0
		reg_1 = loc_3
		if loc_5 == rt_load_i32(memory_at_0, loc_0 + 36) then
			while true do
				reg_2 = rt_add_i32(loc_0, 56)
				break
			end
		else
			while true do
				reg_2 = rt_add_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_5 + 4)), 12)
				break
			end
		end
		loc_5 = reg_2
		reg_0 = FUNC_LIST[16](reg_0, reg_1, rt_load_i32(memory_at_0, loc_5))
		loc_5 = reg_0
		rt_store_i32(memory_at_0, loc_5 + 24, loc_2)
		rt_store_i32(memory_at_0, loc_5 + 20, loc_4)
		rt_store_i32(memory_at_0, loc_5 + 16, loc_1)
		loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_3, 4))
		rt_store_i32(memory_at_0, loc_0 + 8, loc_4)
		if loc_3 ~= 0 then
			while true do
				loc_2 = rt_add_i32(loc_5, 32)
				loc_4 = loc_3
				if bit_and(loc_3, 1) ~= 0 then
					while true do
						loc_4 = rt_sub_i32(loc_3, 1)
						loc_1 = rt_shl_i32(loc_4, 4)
						loc_6 = rt_add_i32(loc_1, loc_2)
						loc_1 = rt_add_i32(loc_1, rt_load_i32(memory_at_0, loc_0 + 8))
						rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_1))
						rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
						break
					end
				end
				if loc_3 ~= 1 then
					while true do
						while true do
							loc_3 = rt_sub_i32(rt_shl_i32(loc_4, 4), 16)
							loc_1 = rt_add_i32(loc_3, loc_2)
							loc_3 = rt_add_i32(loc_3, rt_load_i32(memory_at_0, loc_0 + 8))
							rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_3))
							rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
							loc_4 = rt_sub_i32(loc_4, 2)
							loc_3 = rt_shl_i32(loc_4, 4)
							loc_1 = rt_add_i32(loc_3, loc_2)
							loc_3 = rt_add_i32(loc_3, rt_load_i32(memory_at_0, loc_0 + 8))
							rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_3))
							rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
							if loc_4 ~= 0 then
								continue
							end
							break
						end
						break
					end
				end
				reg_0 = rt_load_i32(memory_at_0, loc_0 + 8)
				break
			end
		else
			while true do
				reg_0 = loc_4
				break
			end
		end
		loc_4 = reg_0
		rt_store_i32(memory_at_0, loc_4 + 12, 7)
		rt_store_i32(memory_at_0, loc_4, loc_5)
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
		break
	end
end
FUNC_LIST[150] = --[[ lua_pushboolean ]] function(loc_0, loc_1)
	local loc_2 = 0
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i32(memory_at_0, loc_2 + 12, 1)
		rt_store_i32(memory_at_0, loc_2, (if loc_1 ~= 0 then 1 else 0))
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
		break
	end
end
FUNC_LIST[151] = --[[ lua_pushlightuserdatatagged ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i32(memory_at_0, loc_3 + 12, 2)
		rt_store_i32(memory_at_0, loc_3 + 8, loc_2)
		rt_store_i32(memory_at_0, loc_3, loc_1)
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
		break
	end
end
FUNC_LIST[152] = --[[ lua_pushthread ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
			while true do
				FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i32(memory_at_0, loc_1 + 12, 9)
		rt_store_i32(memory_at_0, loc_1, loc_0)
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
		reg_0 = (if loc_0 == rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1412) then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[153] = --[[ lua_gettable ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
			while true do
				FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
				break
			end
		end
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
					loc_1 = (if loc_2 <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
					loc_1 = rt_add_i32(loc_2, rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			loc_1 = reg_0
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
			break
		end
		loc_2 = rt_sub_i32(loc_2, 16)
		FUNC_LIST[588](loc_0, loc_1, loc_2, loc_2)
		reg_0 = rt_load_i32(memory_at_0, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), 4))
		break
	end
	return reg_0
end
FUNC_LIST[154] = --[[ lua_getfield ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
			while true do
				FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
				break
			end
		end
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_0
		reg_2 = FUNC_LIST[649](loc_2)
		reg_0 = FUNC_LIST[387](loc_0, loc_2, reg_2)
		loc_2 = reg_0
		rt_store_i32(memory_at_0, loc_3 + 12, 5)
		rt_store_i32(memory_at_0, loc_3, loc_2)
		FUNC_LIST[588](loc_0, loc_1, loc_3, rt_load_i32(memory_at_0, loc_0 + 8))
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_1, 16))
		loc_0 = rt_load_i32(memory_at_0, loc_1 + 12)
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[155] = --[[ lua_rawgetfield ]] function(loc_0, loc_1, loc_2)
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
			while true do
				FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
				break
			end
		end
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_0
		reg_2 = FUNC_LIST[649](loc_2)
		reg_0 = FUNC_LIST[387](loc_0, loc_2, reg_2)
		loc_2 = reg_0
		reg_0 = FUNC_LIST[426](rt_load_i32(memory_at_0, loc_1), loc_2)
		loc_1 = reg_0
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_1, 16))
		reg_0 = rt_load_i32(memory_at_0, loc_1 + 12)
		break
	end
	return reg_0
end
FUNC_LIST[156] = --[[ lua_rawget ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
			while true do
				FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
				break
			end
		end
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
					loc_1 = (if loc_2 <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
					loc_1 = rt_add_i32(loc_2, rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			loc_1 = reg_0
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
			break
		end
		reg_0 = FUNC_LIST[427](rt_load_i32(memory_at_0, loc_1), rt_sub_i32(loc_2, 16))
		loc_1 = reg_0
		loc_2 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16)
		rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
		reg_0 = rt_load_i32(memory_at_0, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), 4))
		break
	end
	return reg_0
end
FUNC_LIST[157] = --[[ lua_rawgeti ]] function(loc_0, loc_1, loc_2)
	local reg_0
	local desired
	while true do
		if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
			while true do
				FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
				break
			end
		end
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_0
		reg_0 = FUNC_LIST[425](rt_load_i32(memory_at_0, loc_1), loc_2)
		loc_1 = reg_0
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_1, 16))
		reg_0 = rt_load_i32(memory_at_0, loc_1 + 12)
		break
	end
	return reg_0
end
FUNC_LIST[158] = --[[ lua_createtable ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 16)
		if rt_load_i32(memory_at_0, loc_3 + 40) >= rt_load_i32(memory_at_0, loc_3 + 36) then
			while true do
				reg_0 = FUNC_LIST[42](loc_0, 1)
				break
			end
		end
		if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
			while true do
				FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
				break
			end
		end
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
		reg_0 = FUNC_LIST[423](loc_0, loc_1, loc_2)
		loc_2 = reg_0
		rt_store_i32(memory_at_0, loc_3 + 12, 6)
		rt_store_i32(memory_at_0, loc_3, loc_2)
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
		break
	end
end
FUNC_LIST[159] = --[[ lua_setreadonly ]] function(loc_0, loc_1, loc_2)
	local reg_0
	local desired
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_0
		rt_store_i32_n8(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 4, (if loc_2 ~= 0 then 1 else 0))
		break
	end
end
FUNC_LIST[160] = --[[ lua_getreadonly ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_0
		reg_0 = rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 4)
		break
	end
	return reg_0
end
FUNC_LIST[161] = --[[ lua_setsafeenv ]] function(loc_0, loc_1, loc_2)
	local reg_0
	local desired
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_0
		rt_store_i32_n8(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 5, (if loc_2 ~= 0 then 1 else 0))
		break
	end
end
FUNC_LIST[162] = --[[ lua_getmetatable ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
			while true do
				FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
				break
			end
		end
		while true do
			while true do
				while true do
					while true do
						while true do
							if rt_gt_i32(loc_1, 0) then
								while true do
									loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
									reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if rt_ge_i32(loc_1, 4294957297) then
								while true do
									reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							reg_0 = FUNC_LIST[96](loc_0, loc_1)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_1 = reg_0
						loc_2 = rt_load_i32(memory_at_0, loc_1 + 12)
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 0, 2, 1, }
							end)()
						end
						temp = br_map[1][rt_sub_i32(loc_2, 6)] or 2
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 2
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_1), 16)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_1), 8)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = rt_add_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 16), rt_shl_i32(loc_2, 2)), 1440)
			break
		end
		loc_1 = reg_0
		loc_1 = rt_load_i32(memory_at_0, loc_1)
		if loc_1 ~= 0 then
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
				rt_store_i32(memory_at_0, loc_2 + 12, 6)
				rt_store_i32(memory_at_0, loc_2, loc_1)
				rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
				break
			end
		end
		reg_0 = (if loc_1 ~= 0 then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[163] = --[[ lua_getfenv ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
			while true do
				FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
				break
			end
		end
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_0
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
		loc_3 = 12
		while true do
			while true do
				while true do
					if not br_map[1] then
						br_map[1] = (function()
							return { [0] = 1, 2, 0, }
						end)()
					end
					temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 12), 7)] or 2
					if temp < 1 then
						break
					elseif temp > 1 then
						desired = 1
						break
					else
						desired = 2
						break
					end
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = 56
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, rt_add_i32(loc_3, rt_load_i32(memory_at_0, loc_1))))
			loc_4 = 6
			break
		end
		rt_store_i32(memory_at_0, loc_2 + 12, loc_4)
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
		break
	end
end
FUNC_LIST[164] = --[[ lua_settable ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
					loc_1 = (if loc_2 <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
					loc_1 = rt_add_i32(loc_2, rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			loc_1 = reg_0
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
			break
		end
		FUNC_LIST[589](loc_0, loc_1, rt_sub_i32(loc_2, 32), rt_sub_i32(loc_2, 16))
		rt_store_i32(memory_at_0, loc_0 + 8, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), 32))
		break
	end
end
FUNC_LIST[165] = --[[ lua_setfield ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_0
		reg_2 = FUNC_LIST[649](loc_2)
		reg_0 = FUNC_LIST[387](loc_0, loc_2, reg_2)
		loc_2 = reg_0
		rt_store_i32(memory_at_0, loc_3 + 12, 5)
		rt_store_i32(memory_at_0, loc_3, loc_2)
		FUNC_LIST[589](loc_0, loc_1, loc_3, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
		rt_store_i32(memory_at_0, loc_0 + 8, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[166] = --[[ lua_rawsetfield ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	local desired
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_1 = reg_0
		loc_3 = rt_load_i32(memory_at_0, loc_1)
		if rt_load_i32_u8(memory_at_0, loc_3 + 4) == 0 then
			while true do
				loc_4 = rt_load_i32(memory_at_0, loc_0 + 8)
				reg_4 = FUNC_LIST[649](loc_2)
				reg_2 = FUNC_LIST[387](loc_0, loc_2, reg_4)
				reg_0 = FUNC_LIST[432](loc_0, loc_3, reg_2)
				loc_2 = reg_0
				loc_3 = rt_sub_i32(loc_4, 16)
				rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
				rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_3))
				while true do
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
					if rt_lt_i32(rt_load_i32(memory_at_0, rt_sub_i32(loc_2, 4)), 5) then
						break
					end
					loc_1 = rt_load_i32(memory_at_0, loc_1)
					if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 4) == 0 then
						break
					end
					loc_3 = rt_load_i32(memory_at_0, rt_sub_i32(loc_2, 16))
					if bit_and(rt_load_i32_u8(memory_at_0, loc_3 + 1), 3) == 0 then
						break
					end
					FUNC_LIST[50](loc_0, loc_1, loc_3)
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
					break
				end
				if desired then
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 8, rt_sub_i32(loc_2, 16))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[68](loc_0)
		error("out of code bounds")
	end
end
FUNC_LIST[167] = --[[ lua_rawset ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_1 = reg_0
		loc_2 = rt_load_i32(memory_at_0, loc_1)
		if rt_load_i32_u8(memory_at_0, loc_2 + 4) == 0 then
			while true do
				loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
				reg_0 = FUNC_LIST[428](loc_0, loc_2, rt_sub_i32(loc_3, 32))
				loc_2 = reg_0
				loc_3 = rt_sub_i32(loc_3, 16)
				rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
				rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_3))
				while true do
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
					if rt_lt_i32(rt_load_i32(memory_at_0, rt_sub_i32(loc_2, 4)), 5) then
						break
					end
					loc_1 = rt_load_i32(memory_at_0, loc_1)
					if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 4) == 0 then
						break
					end
					loc_3 = rt_load_i32(memory_at_0, rt_sub_i32(loc_2, 16))
					if bit_and(rt_load_i32_u8(memory_at_0, loc_3 + 1), 3) == 0 then
						break
					end
					FUNC_LIST[50](loc_0, loc_1, loc_3)
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
					break
				end
				if desired then
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 8, rt_sub_i32(loc_2, 32))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[68](loc_0)
		error("out of code bounds")
	end
end
FUNC_LIST[168] = --[[ lua_rawseti ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_1 = reg_0
		loc_3 = rt_load_i32(memory_at_0, loc_1)
		if rt_load_i32_u8(memory_at_0, loc_3 + 4) == 0 then
			while true do
				loc_4 = rt_load_i32(memory_at_0, loc_0 + 8)
				reg_0 = FUNC_LIST[431](loc_0, loc_3, loc_2)
				loc_2 = reg_0
				loc_3 = rt_sub_i32(loc_4, 16)
				rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_3))
				rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
				while true do
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
					if rt_lt_i32(rt_load_i32(memory_at_0, rt_sub_i32(loc_2, 4)), 5) then
						break
					end
					loc_1 = rt_load_i32(memory_at_0, loc_1)
					if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 4) == 0 then
						break
					end
					loc_3 = rt_load_i32(memory_at_0, rt_sub_i32(loc_2, 16))
					if bit_and(rt_load_i32_u8(memory_at_0, loc_3 + 1), 3) == 0 then
						break
					end
					FUNC_LIST[50](loc_0, loc_1, loc_3)
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
					break
				end
				if desired then
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 8, rt_sub_i32(loc_2, 16))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[68](loc_0)
		error("out of code bounds")
	end
end
FUNC_LIST[169] = --[[ lua_setmetatable ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
					loc_1 = (if loc_2 <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
					loc_1 = rt_add_i32(loc_2, rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			loc_1 = reg_0
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		if rt_load_i32(memory_at_0, rt_sub_i32(loc_2, 4)) ~= 0 then
			while true do
				reg_0 = rt_load_i32(memory_at_0, rt_sub_i32(loc_2, 16))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_2 = reg_0
		while true do
			while true do
				while true do
					while true do
						while true do
							loc_3 = rt_load_i32(memory_at_0, loc_1 + 12)
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 0, 2, 1, }
								end)()
							end
							temp = br_map[1][rt_sub_i32(loc_3, 6)] or 2
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 3
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_3 = rt_load_i32(memory_at_0, loc_1)
						if rt_load_i32_u8(memory_at_0, loc_3 + 4) ~= 0 then
							desired = 1
							break
						end
						rt_store_i32(memory_at_0, loc_3 + 16, loc_2)
						if loc_2 == 0 then
							desired = 2
							break
						end
						loc_1 = rt_load_i32(memory_at_0, loc_1)
						if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 4) == 0 then
							desired = 2
							break
						end
						if bit_and(rt_load_i32_u8(memory_at_0, loc_2 + 1), 3) == 0 then
							desired = 2
							break
						end
						FUNC_LIST[49](loc_0, loc_1, loc_2)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 8, loc_2)
					if loc_2 == 0 then
						desired = 2
						break
					end
					loc_1 = rt_load_i32(memory_at_0, loc_1)
					if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 4) == 0 then
						desired = 2
						break
					end
					if bit_and(rt_load_i32_u8(memory_at_0, loc_2 + 1), 3) == 0 then
						desired = 2
						break
					end
					FUNC_LIST[49](loc_0, loc_1, loc_2)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, rt_add_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 16), rt_shl_i32(loc_3, 2)), 1440), loc_2)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_0 + 8, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
			reg_0 = 1
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[68](loc_0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[170] = --[[ lua_setfenv ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_2 = 12
		while true do
			while true do
				while true do
					while true do
						if rt_gt_i32(loc_1, 0) then
							while true do
								loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
								reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if rt_ge_i32(loc_1, 4294957297) then
							while true do
								reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						reg_0 = FUNC_LIST[96](loc_0, loc_1)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = reg_0
					if not br_map[1] then
						br_map[1] = (function()
							return { [0] = 1, 2, 0, }
						end)()
					end
					temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 12), 7)] or 2
					if temp < 1 then
						break
					elseif temp > 1 then
						desired = 1
						break
					else
						desired = 2
						break
					end
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = 56
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = rt_add_i32(loc_2, rt_load_i32(memory_at_0, loc_1))
			loc_2 = rt_load_i32(memory_at_0, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
			rt_store_i32(memory_at_0, reg_0, loc_2)
			loc_3 = 1
			loc_1 = rt_load_i32(memory_at_0, loc_1)
			if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 4) == 0 then
				break
			end
			if bit_and(rt_load_i32_u8(memory_at_0, loc_2 + 1), 3) == 0 then
				break
			end
			FUNC_LIST[49](loc_0, loc_1, loc_2)
			break
		end
		rt_store_i32(memory_at_0, loc_0 + 8, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[171] = --[[ lua_call ]] function(loc_0, loc_1, loc_2)
	while true do
		FUNC_LIST[85](loc_0, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(bit_xor(loc_1, 4294967295), 4)), loc_2)
		while true do
			if loc_2 ~= 4294967295 then
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
			loc_0 = rt_load_i32(memory_at_0, loc_0 + 20)
			if loc_2 < rt_load_i32(memory_at_0, loc_0 + 8) then
				break
			end
			rt_store_i32(memory_at_0, loc_0 + 8, loc_2)
			break
		end
		break
	end
end
FUNC_LIST[172] = --[[ lua_pcall ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		while true do
			if loc_3 == 0 then
				while true do
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 28)
					reg_0 = 0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				if rt_gt_i32(loc_3, 0) then
					while true do
						loc_3 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_3, 4)), 16)
						reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_3 then 9344 else loc_3)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_3 >= 4294957297 then
					while true do
						reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_3, 4))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[96](loc_0, loc_3)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = reg_0
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 28)
			reg_0 = rt_sub_i32(loc_5, loc_3)
			break
		end
		loc_5 = reg_0
		loc_6 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i32(memory_at_0, loc_4 + 12, loc_2)
		loc_1 = rt_add_i32(rt_shl_i32(bit_xor(loc_1, 4294967295), 4), loc_6)
		rt_store_i32(memory_at_0, loc_4 + 8, loc_1)
		reg_0 = FUNC_LIST[93](loc_0, 16, rt_add_i32(loc_4, 8), rt_sub_i32(loc_1, loc_3), loc_5)
		loc_3 = reg_0
		while true do
			if loc_2 ~= 4294967295 then
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
			loc_0 = rt_load_i32(memory_at_0, loc_0 + 20)
			if loc_2 < rt_load_i32(memory_at_0, loc_0 + 8) then
				break
			end
			rt_store_i32(memory_at_0, loc_0 + 8, loc_2)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[173] = --[[ f_call(lua_State*, void*) ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[85](loc_0, rt_load_i32(memory_at_0, loc_1), rt_load_i32(memory_at_0, loc_1 + 4))
		break
	end
end
FUNC_LIST[174] = --[[ lua_status ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = rt_load_i32_u8(memory_at_0, loc_0 + 3)
		break
	end
	return reg_0
end
FUNC_LIST[175] = --[[ lua_costatus ]] function(loc_0, loc_1)
	local reg_0
	local desired
	local br_map = {}
	while true do
		if loc_0 == loc_1 then
			while true do
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			while true do
				while true do
					while true do
						loc_0 = rt_load_i32_u8(memory_at_0, loc_1 + 3)
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 2, 3, 1, 1, 1, 1, 0, }
							end)()
						end
						temp = br_map[1][loc_0] or 1
						if temp < 2 then
							if temp < 1 then
								break
							else
								desired = 3
								break
							end
						elseif temp > 2 then
							desired = 1
							break
						else
							desired = 2
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = 2
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = 4
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if rt_load_i32(memory_at_0, loc_1 + 20) ~= rt_load_i32(memory_at_0, loc_1 + 36) then
				while true do
					reg_0 = 2
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_0 = (if rt_load_i32(memory_at_0, loc_1 + 8) == rt_load_i32(memory_at_0, loc_1 + 12) then 3 else 1)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[176] = --[[ lua_getthreaddata ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = rt_load_i32(memory_at_0, loc_0 + 72)
		break
	end
	return reg_0
end
FUNC_LIST[177] = --[[ lua_setthreaddata ]] function(loc_0, loc_1)
	while true do
		rt_store_i32(memory_at_0, loc_0 + 72, loc_1)
		break
	end
end
FUNC_LIST[178] = --[[ lua_gc ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 16)
		loc_4 = 4294967295
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														if not br_map[1] then
															br_map[1] = (function()
																return { [0] = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, }
															end)()
														end
														temp = br_map[1][loc_1] or 11
														if temp < 5 then
															if temp < 2 then
																if temp < 1 then
																	break
																else
																	desired = 11
																	break
																end
															elseif temp > 2 then
																if temp < 4 then
																	desired = 9
																	break
																else
																	desired = 8
																	break
																end
															else
																desired = 10
																break
															end
														elseif temp > 5 then
															if temp < 8 then
																if temp < 7 then
																	desired = 6
																	break
																else
																	desired = 5
																	break
																end
															elseif temp > 8 then
																if temp < 11 then
																	desired = 3
																	break
																else
																	desired = 1
																	break
																end
															else
																desired = 4
																break
															end
														else
															desired = 7
															break
														end
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													rt_store_i32(memory_at_0, loc_3 + 36, 4294967295)
													reg_0 = 0
													desired = 0
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												rt_store_i32(memory_at_0, loc_3 + 36, rt_load_i32(memory_at_0, loc_3 + 40))
												reg_0 = 0
												desired = 0
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											FUNC_LIST[48](loc_0)
											reg_0 = 0
											desired = 0
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										reg_0 = rt_shr_u32(rt_load_i32(memory_at_0, loc_3 + 40), 10)
										desired = 0
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									reg_0 = bit_and(rt_load_i32(memory_at_0, loc_3 + 40), 1023)
									desired = 0
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = (if rt_load_i32(memory_at_0, loc_3 + 36) ~= 4294967295 then 1 else 0)
								desired = 0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_2 = rt_shl_i32(loc_2, 10)
							while true do
								loc_5 = rt_load_i32_u8(memory_at_0, loc_3 + 21)
								if loc_5 == 0 then
									while true do
										loc_1 = rt_load_i32(memory_at_0, loc_3 + 40)
										reg_0 = 0
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_1 = rt_load_i32(memory_at_0, loc_3 + 40)
								reg_0 = rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 36), loc_1)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_6 = reg_0
							loc_4 = 0
							loc_2 = rt_sub_i32(loc_1, loc_2)
							loc_1 = (if loc_1 >= loc_2 then loc_2 else 0)
							rt_store_i32(memory_at_0, loc_3 + 36, loc_1)
							loc_2 = rt_load_i32(memory_at_0, loc_3 + 40)
							if loc_1 > loc_2 then
								while true do
									loc_0 = (if loc_5 == 0 then 1 else 0)
									loc_1 = 0
									desired = 2
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_1 = 0
							while true do
								while true do
									reg_0 = FUNC_LIST[42](loc_0, 0)
									loc_2 = reg_0
									if rt_load_i32_u8(memory_at_0, loc_3 + 21) == 0 then
										desired = 6
										break
									end
									loc_1 = rt_add_i32(loc_1, loc_2)
									loc_2 = rt_load_i32(memory_at_0, loc_3 + 40)
									if loc_2 >= rt_load_i32(memory_at_0, loc_3 + 36) then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_0 = 0
								desired = 2
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = 1
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_0 = rt_load_i32(memory_at_0, loc_3 + 44)
						rt_store_i32(memory_at_0, loc_3 + 44, loc_2)
						reg_0 = loc_0
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_0 = rt_load_i32(memory_at_0, loc_3 + 48)
					rt_store_i32(memory_at_0, loc_3 + 48, loc_2)
					reg_0 = loc_0
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_0 = rt_load_i32(memory_at_0, loc_3 + 52)
				rt_store_i32(memory_at_0, loc_3 + 52, rt_shl_i32(loc_2, 10))
				loc_4 = rt_shr_i32(loc_0, 10)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_0 ~= 0 then
				break
			end
			loc_0 = rt_add_i32(loc_2, rt_add_i32(loc_1, loc_6))
			rt_store_i32(memory_at_0, loc_3 + 36, (if rt_gt_i32(loc_0, 0) then loc_0 else 0))
			reg_0 = 0
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[179] = --[[ lua_error ]] function(loc_0)
	while true do
		FUNC_LIST[79](loc_0, 2)
		error("out of code bounds")
	end
end
FUNC_LIST[180] = --[[ lua_next ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
			while true do
				FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
				break
			end
		end
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
					loc_1 = (if loc_2 <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
					loc_1 = rt_add_i32(loc_2, rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			loc_1 = reg_0
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
			break
		end
		reg_0 = FUNC_LIST[415](loc_0, rt_load_i32(memory_at_0, loc_1), rt_sub_i32(loc_2, 16))
		loc_1 = reg_0
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), (if loc_1 ~= 0 then 16 else 4294967280)))
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[181] = --[[ lua_rawiter ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
			while true do
				FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = loc_2
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_1 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_1 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_1 = reg_1
		loc_4 = rt_load_i32(memory_at_0, loc_1)
		loc_1 = rt_load_i32(memory_at_0, loc_4 + 8)
		if reg_0 < loc_1 then
			while true do
				loc_5 = rt_load_i32(memory_at_0, loc_4 + 20)
				while true do
					loc_3 = rt_add_i32(rt_shl_i32(loc_2, 4), loc_5)
					if rt_load_i32(memory_at_0, loc_3 + 12) ~= 0 then
						while true do
							loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
							rt_store_i32(memory_at_0, loc_1 + 12, 3)
							loc_2 = rt_add_i32(loc_2, 1)
							rt_store_f64(memory_at_0, loc_1, rt_convert_f64_i32(loc_2))
							rt_store_i64(memory_at_0, loc_1 + 16, rt_load_i64(memory_at_0, loc_3))
							rt_store_i64(memory_at_0, loc_1 + 24, rt_load_i64(memory_at_0, loc_3 + 8))
							rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_1, 32))
							reg_0 = loc_2
							desired = 0
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_2 = rt_add_i32(loc_2, 1)
					if loc_1 ~= loc_2 then
						continue
					end
					break
				end
				if desired then
					break
				end
				reg_0 = loc_1
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_2
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_2 = reg_0
		loc_3 = rt_sub_i32(loc_2, loc_1)
		loc_5 = rt_load_i32_u8(memory_at_0, loc_4 + 6)
		if rt_shr_u32(loc_3, loc_5) == 0 then
			while true do
				loc_4 = rt_load_i32(memory_at_0, loc_4 + 24)
				while true do
					loc_3 = rt_add_i32(rt_shl_i32(loc_3, 5), loc_4)
					if rt_load_i32(memory_at_0, loc_3 + 12) ~= 0 then
						while true do
							loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
							rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_3 + 16))
							rt_store_i32(memory_at_0, loc_1 + 8, rt_load_i32(memory_at_0, loc_3 + 24))
							rt_store_i32(memory_at_0, loc_1 + 12, bit_and(rt_load_i32(memory_at_0, loc_3 + 28), 15))
							rt_store_i64(memory_at_0, loc_1 + 16, rt_load_i64(memory_at_0, loc_3))
							rt_store_i64(memory_at_0, loc_1 + 24, rt_load_i64(memory_at_0, loc_3 + 8))
							rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_1, 32))
							reg_0 = rt_add_i32(loc_2, 1)
							desired = 0
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_2 = rt_add_i32(loc_2, 1)
					loc_3 = rt_sub_i32(loc_2, loc_1)
					if rt_shr_u32(loc_3, loc_5) == 0 then
						continue
					end
					break
				end
				if desired then
					break
				end
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = 4294967295
		break
	end
	return reg_0
end
FUNC_LIST[182] = --[[ lua_concat ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		if rt_ge_i32(loc_1, 2) then
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
				if rt_load_i32(memory_at_0, loc_2 + 40) >= rt_load_i32(memory_at_0, loc_2 + 36) then
					while true do
						reg_0 = FUNC_LIST[42](loc_0, 1)
						break
					end
					if desired then
						break
					end
				end
				if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
					while true do
						FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
						break
					end
					if desired then
						break
					end
				end
				FUNC_LIST[595](loc_0, loc_1, rt_sub_i32(rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_load_i32(memory_at_0, loc_0 + 12)), 4), 1))
				rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(rt_sub_i32(1, loc_1), 4)))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		if loc_1 == 0 then
			while true do
				if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
					while true do
						FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
						break
					end
					if desired then
						break
					end
				end
				loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
				reg_0 = FUNC_LIST[387](loc_0, 6597, 0)
				loc_2 = reg_0
				rt_store_i32(memory_at_0, loc_1 + 12, 5)
				rt_store_i32(memory_at_0, loc_1, loc_2)
				rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		break
	end
end
FUNC_LIST[183] = --[[ lua_newuserdatatagged ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 16)
		if rt_load_i32(memory_at_0, loc_3 + 40) >= rt_load_i32(memory_at_0, loc_3 + 36) then
			while true do
				reg_0 = FUNC_LIST[42](loc_0, 1)
				break
			end
		end
		if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
			while true do
				FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
				break
			end
		end
		reg_0 = FUNC_LIST[464](loc_0, loc_1, loc_2)
		loc_2 = reg_0
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i32(memory_at_0, loc_1 + 12, 8)
		rt_store_i32(memory_at_0, loc_1, loc_2)
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
		reg_0 = rt_add_i32(loc_2, 16)
		break
	end
	return reg_0
end
FUNC_LIST[184] = --[[ lua_newuserdatataggedwithmetatable ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 16)
		if rt_load_i32(memory_at_0, loc_3 + 40) >= rt_load_i32(memory_at_0, loc_3 + 36) then
			while true do
				reg_0 = FUNC_LIST[42](loc_0, 1)
				break
			end
		end
		if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
			while true do
				FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
				break
			end
		end
		reg_0 = FUNC_LIST[464](loc_0, loc_1, loc_2)
		loc_1 = reg_0
		rt_store_i32(memory_at_0, loc_1 + 8, rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 16), rt_shl_i32(loc_2, 2)), 2276)))
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i32(memory_at_0, loc_2 + 12, 8)
		rt_store_i32(memory_at_0, loc_2, loc_1)
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
		reg_0 = rt_add_i32(loc_1, 16)
		break
	end
	return reg_0
end
FUNC_LIST[185] = --[[ lua_newuserdatadtor ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 16)
		if rt_load_i32(memory_at_0, loc_3 + 40) >= rt_load_i32(memory_at_0, loc_3 + 36) then
			while true do
				reg_0 = FUNC_LIST[42](loc_0, 1)
				break
			end
		end
		if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
			while true do
				FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
				break
			end
		end
		loc_3 = rt_add_i32(loc_1, 4)
		reg_1 = FUNC_LIST[464](loc_0, (if loc_1 > loc_3 then 4294967295 else loc_3), 128)
		loc_3 = reg_1
		loc_4 = rt_add_i32(loc_3, 16)
		rt_store_i32(memory_at_0, rt_add_i32(loc_1, loc_4), loc_2)
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i32(memory_at_0, loc_1 + 12, 8)
		rt_store_i32(memory_at_0, loc_1, loc_3)
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[186] = --[[ lua_newbuffer ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
		if rt_load_i32(memory_at_0, loc_2 + 40) >= rt_load_i32(memory_at_0, loc_2 + 36) then
			while true do
				reg_0 = FUNC_LIST[42](loc_0, 1)
				break
			end
		end
		if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
			while true do
				FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
				break
			end
		end
		reg_0 = FUNC_LIST[24](loc_0, loc_1)
		loc_1 = reg_0
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i32(memory_at_0, loc_2 + 12, 10)
		rt_store_i32(memory_at_0, loc_2, loc_1)
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
		reg_0 = rt_add_i32(loc_1, 8)
		break
	end
	return reg_0
end
FUNC_LIST[187] = --[[ lua_getupvalue ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
			while true do
				FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
				break
			end
		end
		while true do
			while true do
				if rt_gt_i32(loc_1, 0) then
					while true do
						loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
						reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_ge_i32(loc_1, 4294957297) then
					while true do
						reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[96](loc_0, loc_1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = reg_0
			if rt_load_i32(memory_at_0, loc_1 + 12) ~= 7 then
				break
			end
			while true do
				loc_1 = rt_load_i32(memory_at_0, loc_1)
				if rt_load_i32_u8(memory_at_0, loc_1 + 3) ~= 0 then
					while true do
						if rt_le_i32(loc_2, 0) then
							desired = 1
							break
						end
						if rt_load_i32_u8(memory_at_0, loc_1 + 4) < loc_2 then
							desired = 1
							break
						end
						loc_1 = rt_add_i32(rt_add_i32(loc_1, rt_shl_i32(loc_2, 4)), 16)
						reg_0 = 6597
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_le_i32(loc_2, 0) then
					desired = 1
					break
				end
				loc_4 = rt_load_i32(memory_at_0, loc_1 + 16)
				if rt_load_i32_u8(memory_at_0, loc_4 + 3) < loc_2 then
					desired = 1
					break
				end
				loc_5 = rt_sub_i32(loc_2, 1)
				loc_3 = rt_add_i32(rt_shl_i32(loc_5, 4), loc_1)
				loc_1 = rt_add_i32(loc_3, 24)
				if rt_load_i32(memory_at_0, loc_3 + 36) == 12 then
					while true do
						reg_0 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 4)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_1 = reg_0
				loc_3 = 6597
				reg_0 = loc_3
				if rt_lt_i32(rt_load_i32(memory_at_0, loc_4 + 84), loc_2) then
					break
				end
				reg_0 = rt_add_i32(rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_4 + 44), rt_shl_i32(loc_5, 2))), 20)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = reg_0
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
			rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
			rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
			rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
			break
		end
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[188] = --[[ lua_setupvalue ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				if rt_gt_i32(loc_1, 0) then
					while true do
						loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
						reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_ge_i32(loc_1, 4294957297) then
					while true do
						reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[96](loc_0, loc_1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = reg_0
			if rt_load_i32(memory_at_0, loc_1 + 12) ~= 7 then
				break
			end
			while true do
				loc_3 = rt_load_i32(memory_at_0, loc_1)
				if rt_load_i32_u8(memory_at_0, loc_3 + 3) ~= 0 then
					while true do
						if rt_le_i32(loc_2, 0) then
							desired = 1
							break
						end
						if rt_load_i32_u8(memory_at_0, loc_3 + 4) < loc_2 then
							desired = 1
							break
						end
						loc_3 = rt_add_i32(rt_add_i32(loc_3, rt_shl_i32(loc_2, 4)), 16)
						reg_0 = 6597
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_le_i32(loc_2, 0) then
					desired = 1
					break
				end
				loc_5 = rt_load_i32(memory_at_0, loc_3 + 16)
				if rt_load_i32_u8(memory_at_0, loc_5 + 3) < loc_2 then
					desired = 1
					break
				end
				loc_6 = rt_sub_i32(loc_2, 1)
				loc_4 = rt_add_i32(rt_shl_i32(loc_6, 4), loc_3)
				loc_3 = rt_add_i32(loc_4, 24)
				if rt_load_i32(memory_at_0, loc_4 + 36) == 12 then
					while true do
						reg_0 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3) + 4)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_3
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_3 = reg_0
				loc_4 = 6597
				reg_0 = loc_4
				if rt_lt_i32(rt_load_i32(memory_at_0, loc_5 + 84), loc_2) then
					break
				end
				reg_0 = rt_add_i32(rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_5 + 44), rt_shl_i32(loc_6, 2))), 20)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = reg_0
			loc_2 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16)
			rt_store_i32(memory_at_0, loc_0 + 8, loc_2)
			rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
			rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_2))
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
			if rt_lt_i32(rt_load_i32(memory_at_0, loc_2 + 12), 5) then
				break
			end
			loc_1 = rt_load_i32(memory_at_0, loc_1)
			if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 4) == 0 then
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_2)
			if bit_and(rt_load_i32_u8(memory_at_0, loc_2 + 1), 3) == 0 then
				break
			end
			FUNC_LIST[49](loc_0, loc_1, loc_2)
			break
		end
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[189] = --[[ lua_encodepointer ]] function(loc_0, loc_1)
	local loc_2 = rt_i64_ZERO
	local reg_0
	while true do
		loc_2 = rt_extend_i64_u32(loc_1)
		loc_0 = rt_load_i32(memory_at_0, loc_0 + 16)
		reg_0 = rt_wrap_i32_i64(rt_bit_xor_i64(rt_add_i64(rt_mul_i64(loc_2, rt_load_i64(memory_at_0, loc_0 + 1672)), rt_load_i64(memory_at_0, loc_0 + 1688)), rt_add_i64(rt_load_i64(memory_at_0, loc_0 + 1680), rt_mul_i64(loc_2, rt_load_i64(memory_at_0, loc_0 + 1664)))))
		break
	end
	return reg_0
end
FUNC_LIST[190] = --[[ lua_ref ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_1 = reg_0
		if rt_load_i32(memory_at_0, loc_1 + 12) == 0 then
			while true do
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_3 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1632)
		loc_6 = loc_3
		loc_4 = rt_load_i32(memory_at_0, loc_2 + 1648)
		reg_0 = loc_0
		reg_1 = loc_6
		if loc_4 ~= 0 then
			while true do
				reg_2 = loc_4
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_2 = FUNC_LIST[433](loc_3)
				reg_2 = rt_add_i32(reg_2, 1)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_4 = reg_2
		reg_0 = FUNC_LIST[431](reg_0, reg_1, loc_4)
		loc_5 = reg_0
		if rt_load_i32(memory_at_0, loc_2 + 1648) ~= 0 then
			while true do
				reg_0 = loc_2
				while true do
					loc_7 = rt_load_f64(memory_at_0, loc_5)
					if math_abs(loc_7) < 2.147483648e9 then
						while true do
							reg_1 = rt_truncate_f64(loc_7)
							desired = 2
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					reg_1 = 2147483648
					break
				end
				if desired then
					break
				end
				rt_store_i32(memory_at_0, reg_0 + 1648, reg_1)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
		while true do
			if rt_lt_i32(rt_load_i32(memory_at_0, loc_1 + 12), 5) then
				break
			end
			if bit_and(rt_load_i32_u8(memory_at_0, loc_3 + 1), 4) == 0 then
				break
			end
			loc_1 = rt_load_i32(memory_at_0, loc_1)
			if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) == 0 then
				break
			end
			FUNC_LIST[50](loc_0, loc_3, loc_1)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[191] = --[[ lua_unref ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		if rt_gt_i32(loc_1, 0) then
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
				reg_0 = FUNC_LIST[431](loc_0, rt_load_i32(memory_at_0, loc_2 + 1632), loc_1)
				loc_0 = reg_0
				loc_3 = rt_load_i32(memory_at_0, loc_2 + 1648)
				rt_store_i32(memory_at_0, loc_0 + 12, 3)
				rt_store_f64(memory_at_0, loc_0, rt_convert_f64_i32(loc_3))
				rt_store_i32(memory_at_0, loc_2 + 1648, loc_1)
				break
			end
		end
		break
	end
end
FUNC_LIST[192] = --[[ lua_setuserdatatag ]] function(loc_0, loc_1, loc_2)
	local reg_0
	local desired
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_0
		rt_store_i32_n8(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 3, loc_2)
		break
	end
end
FUNC_LIST[193] = --[[ lua_setuserdatadtor ]] function(loc_0, loc_1, loc_2)
	while true do
		rt_store_i32(memory_at_0, rt_add_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 16), rt_shl_i32(loc_1, 2)), 1764), loc_2)
		break
	end
end
FUNC_LIST[194] = --[[ lua_getuserdatadtor ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 16), rt_shl_i32(loc_1, 2)), 1764))
		break
	end
	return reg_0
end
FUNC_LIST[195] = --[[ lua_setlightuserdataname ]] function(loc_0, loc_1, loc_2)
	local reg_0
	local reg_1
	local reg_2
	while true do
		loc_1 = rt_shl_i32(loc_1, 2)
		if rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_1, rt_load_i32(memory_at_0, loc_0 + 16)), 2788)) == 0 then
			while true do
				reg_2 = FUNC_LIST[649](loc_2)
				reg_0 = FUNC_LIST[387](loc_0, loc_2, reg_2)
				loc_2 = reg_0
				rt_store_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_1, rt_load_i32(memory_at_0, loc_0 + 16)), 2788), loc_2)
				loc_0 = rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_1, rt_load_i32(memory_at_0, loc_0 + 16)), 2788))
				rt_store_i32_n8(memory_at_0, loc_0 + 1, bit_or(rt_load_i32_u8(memory_at_0, loc_0 + 1), 8))
				break
			end
		end
		break
	end
end
FUNC_LIST[196] = --[[ lua_getlightuserdataname ]] function(loc_0, loc_1)
	local reg_0
	while true do
		loc_1 = rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 16), rt_shl_i32(loc_1, 2)), 2788))
		reg_0 = (if loc_1 ~= 0 then rt_add_i32(loc_1, 20) else 0)
		break
	end
	return reg_0
end
FUNC_LIST[197] = --[[ lua_clonefunction ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
		if rt_load_i32(memory_at_0, loc_2 + 40) >= rt_load_i32(memory_at_0, loc_2 + 36) then
			while true do
				reg_0 = FUNC_LIST[42](loc_0, 1)
				break
			end
		end
		if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
			while true do
				FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
				break
			end
		end
		reg_0 = loc_0
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_1 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_1 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_1
		loc_3 = rt_load_i32(memory_at_0, loc_1)
		reg_0 = FUNC_LIST[15](reg_0, rt_load_i32_u8(memory_at_0, loc_3 + 4), rt_load_i32(memory_at_0, loc_0 + 56), rt_load_i32(memory_at_0, loc_3 + 16))
		loc_4 = reg_0
		if rt_load_i32_u8(memory_at_0, loc_3 + 4) ~= 0 then
			while true do
				loc_5 = rt_add_i32(loc_4, 24)
				loc_6 = rt_add_i32(loc_3, 24)
				loc_1 = 0
				while true do
					loc_2 = rt_shl_i32(loc_1, 4)
					loc_7 = rt_add_i32(loc_2, loc_5)
					loc_2 = rt_add_i32(loc_2, loc_6)
					rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_2))
					rt_store_i64(memory_at_0, loc_7 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
					loc_1 = rt_add_i32(loc_1, 1)
					if loc_1 < rt_load_i32_u8(memory_at_0, loc_3 + 4) then
						continue
					end
					break
				end
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i32(memory_at_0, loc_1 + 12, 7)
		rt_store_i32(memory_at_0, loc_1, loc_4)
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
		break
	end
end
FUNC_LIST[198] = --[[ lua_cleartable ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					loc_1 = rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_1, 4)), 16)
					reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) <= loc_1 then 9344 else loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i32(loc_1, 4294957297) then
				while true do
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_1, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[96](loc_0, loc_1)
			break
		end
		loc_1 = reg_0
		loc_1 = rt_load_i32(memory_at_0, loc_1)
		if rt_load_i32_u8(memory_at_0, loc_1 + 4) ~= 0 then
			while true do
				FUNC_LIST[68](loc_0)
				error("out of code bounds")
			end
		end
		FUNC_LIST[435](loc_1)
		break
	end
end
FUNC_LIST[199] = --[[ lua_setmemcat ]] function(loc_0, loc_1)
	while true do
		rt_store_i32_n8(memory_at_0, loc_0 + 4, loc_1)
		break
	end
end
FUNC_LIST[200] = --[[ lua_totalbytes ]] function(loc_0, loc_1)
	local reg_0
	while true do
		loc_0 = rt_load_i32(memory_at_0, loc_0 + 16)
		reg_0 = rt_load_i32(memory_at_0, (if rt_lt_i32(loc_1, 0) then rt_add_i32(loc_0, 40) else rt_add_i32(rt_add_i32(rt_shl_i32(loc_1, 2), loc_0), 388)))
		break
	end
	return reg_0
end
FUNC_LIST[201] = --[[ lua_getallocf ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
		loc_0 = rt_load_i32(memory_at_0, loc_2 + 12)
		if loc_1 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_1, rt_load_i32(memory_at_0, loc_2 + 16))
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[202] = --[[ luaL_argerrorL ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 20)
			if loc_3 <= rt_load_i32(memory_at_0, loc_0 + 36) then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3 + 4))
			if loc_3 == 0 then
				break
			end
			if rt_load_i32_u8(memory_at_0, loc_3 + 3) == 0 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_3 + 24)
			if loc_3 == 0 then
				break
			end
			reg_0 = FUNC_LIST[695](loc_3, 2962)
			if reg_0 ~= 0 then
				while true do
					reg_0 = loc_3
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 68)
					if loc_3 == 0 then
						desired = 1
						break
					end
					reg_0 = rt_add_i32(loc_3, 20)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = reg_0
			rt_store_i32(memory_at_0, loc_4 + 24, loc_2)
			rt_store_i32(memory_at_0, loc_4 + 20, loc_3)
			rt_store_i32(memory_at_0, loc_4 + 16, loc_1)
			FUNC_LIST[203](loc_0, 5544, rt_add_i32(loc_4, 16))
			error("out of code bounds")
		end
		rt_store_i32(memory_at_0, loc_4 + 4, loc_2)
		rt_store_i32(memory_at_0, loc_4, loc_1)
		FUNC_LIST[203](loc_0, 5518, loc_4)
		error("out of code bounds")
	end
end
FUNC_LIST[203] = --[[ luaL_errorL ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		rt_store_i32(memory_at_0, loc_3 + 12, loc_2)
		FUNC_LIST[204](loc_0, 1)
		reg_0 = FUNC_LIST[147](loc_0, loc_1, rt_load_i32(memory_at_0, loc_3 + 12))
		FUNC_LIST[182](loc_0, 2)
		FUNC_LIST[179](loc_0)
		error("out of code bounds")
	end
end
FUNC_LIST[204] = --[[ luaL_where ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 304)
		GLOBAL_LIST[0].value = loc_2
		while true do
			while true do
				reg_0 = FUNC_LIST[58](loc_0, loc_1, 2947, rt_add_i32(loc_2, 16))
				if reg_0 == 0 then
					break
				end
				loc_1 = rt_load_i32(memory_at_0, loc_2 + 36)
				if rt_le_i32(loc_1, 0) then
					break
				end
				rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_2 + 28))
				rt_store_i32(memory_at_0, loc_2 + 4, loc_1)
				reg_0 = FUNC_LIST[148](loc_0, 6567, loc_2)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[145](loc_0, 6597, 0)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 304)
		break
	end
end
FUNC_LIST[205] = --[[ luaL_typeerrorL ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		loc_3 = rt_add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_3
		while true do
			loc_4 = rt_load_i32(memory_at_0, loc_0 + 20)
			if loc_4 <= rt_load_i32(memory_at_0, loc_0 + 36) then
				break
			end
			loc_4 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4 + 4))
			if loc_4 == 0 then
				break
			end
			if rt_load_i32_u8(memory_at_0, loc_4 + 3) == 0 then
				break
			end
			loc_4 = rt_load_i32(memory_at_0, loc_4 + 24)
			if loc_4 == 0 then
				break
			end
			loc_5 = loc_4
			reg_0 = FUNC_LIST[695](loc_4, 2962)
			if reg_0 ~= 0 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 68)
			loc_5 = (if loc_5 ~= 0 then rt_add_i32(loc_5, 20) else 0)
			break
		end
		while true do
			while true do
				reg_0 = FUNC_LIST[95](loc_0, loc_1)
				loc_4 = reg_0
				if loc_4 ~= 0 then
					while true do
						reg_0 = FUNC_LIST[463](loc_0, loc_4)
						loc_4 = reg_0
						if loc_5 ~= 0 then
							desired = 2
							break
						end
						rt_store_i32(memory_at_0, loc_3 + 40, loc_4)
						rt_store_i32(memory_at_0, loc_3 + 36, loc_2)
						rt_store_i32(memory_at_0, loc_3 + 32, loc_1)
						FUNC_LIST[203](loc_0, 5578, rt_add_i32(loc_3, 32))
						error("out of code bounds")
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_5 ~= 0 then
					desired = 1
					break
				end
				rt_store_i32(memory_at_0, loc_3 + 4, loc_2)
				rt_store_i32(memory_at_0, loc_3, loc_1)
				FUNC_LIST[203](loc_0, 5800, loc_3)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_3 + 60, loc_4)
			rt_store_i32(memory_at_0, loc_3 + 56, loc_2)
			rt_store_i32(memory_at_0, loc_3 + 52, loc_5)
			rt_store_i32(memory_at_0, loc_3 + 48, loc_1)
			FUNC_LIST[203](loc_0, 5621, rt_add_i32(loc_3, 48))
			error("out of code bounds")
		end
		rt_store_i32(memory_at_0, loc_3 + 24, loc_2)
		rt_store_i32(memory_at_0, loc_3 + 20, loc_5)
		rt_store_i32(memory_at_0, loc_3 + 16, loc_1)
		FUNC_LIST[203](loc_0, 5835, rt_add_i32(loc_3, 16))
		error("out of code bounds")
	end
end
FUNC_LIST[206] = --[[ luaL_checkoption ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		while true do
			while true do
				while true do
					if loc_2 ~= 0 then
						while true do
							reg_0 = FUNC_LIST[111](loc_0, loc_1)
							if rt_le_i32(reg_0, 0) then
								desired = 3
								break
							end
							reg_0 = FUNC_LIST[125](loc_0, loc_1, 0)
							loc_2 = reg_0
							if loc_2 ~= 0 then
								desired = 3
								break
							end
							FUNC_LIST[207](loc_0, loc_1, 5)
							error("out of code bounds")
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[125](loc_0, loc_1, 0)
					loc_2 = reg_0
					if loc_2 == 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = rt_load_i32(memory_at_0, loc_3)
				if loc_6 ~= 0 then
					while true do
						while true do
							reg_0 = FUNC_LIST[695](loc_6, loc_2)
							if reg_0 == 0 then
								desired = 1
								break
							end
							loc_5 = rt_add_i32(loc_5, 1)
							loc_6 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_5, 2), loc_3))
							if loc_6 ~= 0 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				rt_store_i32(memory_at_0, loc_4, loc_2)
				reg_2 = FUNC_LIST[148](loc_0, 6293, loc_4)
				FUNC_LIST[202](loc_0, loc_1, reg_2)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[207](loc_0, loc_1, 5)
			error("out of code bounds")
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
		reg_0 = loc_5
		break
	end
	return reg_0
end
FUNC_LIST[207] = --[[ tag_error(lua_State*, int, int) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	local reg_1
	local reg_2
	while true do
		reg_2 = FUNC_LIST[112](loc_0, loc_2)
		FUNC_LIST[205](loc_0, loc_1, reg_2)
		error("out of code bounds")
	end
end
FUNC_LIST[208] = --[[ luaL_optlstring ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			reg_0 = FUNC_LIST[111](loc_0, loc_1)
			if rt_le_i32(reg_0, 0) then
				while true do
					if loc_3 == 0 then
						desired = 1
						break
					end
					reg_0 = loc_3
					if loc_2 ~= 0 then
						while true do
							reg_1 = FUNC_LIST[649](loc_2)
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_1 = 0
							break
						end
						if desired then
							break
						end
					end
					loc_1 = reg_1
					rt_store_i32(memory_at_0, reg_0, loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[125](loc_0, loc_1, loc_3)
			loc_2 = reg_0
			if loc_2 ~= 0 then
				break
			end
			FUNC_LIST[207](loc_0, loc_1, 5)
			error("out of code bounds")
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[209] = --[[ luaL_checklstring ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[125](loc_0, loc_1, loc_2)
		loc_2 = reg_0
		if loc_2 == 0 then
			while true do
				FUNC_LIST[207](loc_0, loc_1, 5)
				error("out of code bounds")
			end
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[210] = --[[ luaL_newmetatable ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[154](loc_0, 4294957296, loc_1)
		reg_0 = FUNC_LIST[111](loc_0, 4294967295)
		if reg_0 ~= 0 then
			while true do
				reg_0 = loc_2
				break
			end
		else
			while true do
				FUNC_LIST[106](loc_0, 4294967294)
				FUNC_LIST[158](loc_0, 0, 0)
				FUNC_LIST[110](loc_0, 4294967295)
				FUNC_LIST[165](loc_0, 4294957296, loc_1)
				reg_0 = 1
				break
			end
		end
		loc_2 = reg_0
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[211] = --[[ luaL_checkudata ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		while true do
			reg_0 = FUNC_LIST[133](loc_0, loc_1)
			loc_3 = reg_0
			if loc_3 == 0 then
				break
			end
			reg_0 = FUNC_LIST[162](loc_0, loc_1)
			if reg_0 == 0 then
				break
			end
			reg_0 = FUNC_LIST[154](loc_0, 4294957296, loc_2)
			reg_0 = FUNC_LIST[118](loc_0, 4294967295, 4294967294)
			if reg_0 == 0 then
				break
			end
			FUNC_LIST[106](loc_0, 4294967293)
			reg_0 = loc_3
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[205](loc_0, loc_1, loc_2)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[212] = --[[ luaL_checkbuffer ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[138](loc_0, loc_1, loc_2)
		loc_2 = reg_0
		if loc_2 == 0 then
			while true do
				FUNC_LIST[207](loc_0, loc_1, 10)
				error("out of code bounds")
			end
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[213] = --[[ luaL_checkstack ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		reg_0 = FUNC_LIST[98](loc_0, loc_1)
		if reg_0 == 0 then
			while true do
				rt_store_i32(memory_at_0, loc_3, loc_2)
				FUNC_LIST[203](loc_0, 5498, loc_3)
				error("out of code bounds")
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[214] = --[[ luaL_checktype ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[111](loc_0, loc_1)
		if reg_0 ~= loc_2 then
			while true do
				FUNC_LIST[207](loc_0, loc_1, loc_2)
				error("out of code bounds")
			end
		end
		break
	end
end
FUNC_LIST[215] = --[[ luaL_checkany ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		reg_0 = FUNC_LIST[111](loc_0, loc_1)
		if reg_0 == 4294967295 then
			while true do
				rt_store_i32(memory_at_0, loc_2, loc_1)
				FUNC_LIST[203](loc_0, 4963, loc_2)
				error("out of code bounds")
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 16)
		break
	end
end
FUNC_LIST[216] = --[[ luaL_checknumber ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0.0
	local reg_0
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		reg_0 = FUNC_LIST[121](loc_0, loc_1, rt_add_i32(loc_2, 12))
		loc_3 = reg_0
		if rt_load_i32(memory_at_0, loc_2 + 12) == 0 then
			while true do
				FUNC_LIST[207](loc_0, loc_1, 3)
				error("out of code bounds")
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 16)
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[217] = --[[ luaL_optnumber ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		while true do
			reg_0 = FUNC_LIST[111](loc_0, loc_1)
			if rt_gt_i32(reg_0, 0) then
				while true do
					reg_0 = FUNC_LIST[121](loc_0, loc_1, rt_add_i32(loc_3, 12))
					loc_2 = reg_0
					if rt_load_i32(memory_at_0, loc_3 + 12) == 0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
			reg_0 = loc_2
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[207](loc_0, loc_1, 3)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[218] = --[[ luaL_checkboolean ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[111](loc_0, loc_1)
		if reg_0 ~= 1 then
			while true do
				FUNC_LIST[207](loc_0, loc_1, 1)
				error("out of code bounds")
			end
		end
		reg_0 = FUNC_LIST[124](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[219] = --[[ luaL_optboolean ]] function(loc_0, loc_1, loc_2)
	local reg_0
	local desired
	while true do
		while true do
			reg_0 = FUNC_LIST[111](loc_0, loc_1)
			if rt_gt_i32(reg_0, 0) then
				while true do
					reg_0 = FUNC_LIST[111](loc_0, loc_1)
					if reg_0 ~= 1 then
						desired = 1
						break
					end
					reg_0 = FUNC_LIST[124](loc_0, loc_1)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_2
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = reg_0
			reg_0 = loc_2
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[207](loc_0, loc_1, 1)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[220] = --[[ luaL_checkinteger ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		reg_0 = FUNC_LIST[122](loc_0, loc_1, rt_add_i32(loc_2, 12))
		loc_3 = reg_0
		if rt_load_i32(memory_at_0, loc_2 + 12) == 0 then
			while true do
				FUNC_LIST[207](loc_0, loc_1, 3)
				error("out of code bounds")
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 16)
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[221] = --[[ luaL_optinteger ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		while true do
			reg_0 = FUNC_LIST[111](loc_0, loc_1)
			if rt_gt_i32(reg_0, 0) then
				while true do
					reg_0 = FUNC_LIST[122](loc_0, loc_1, rt_add_i32(loc_3, 12))
					loc_2 = reg_0
					if rt_load_i32(memory_at_0, loc_3 + 12) == 0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
			reg_0 = loc_2
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[207](loc_0, loc_1, 3)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[222] = --[[ luaL_checkunsigned ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		reg_0 = FUNC_LIST[123](loc_0, loc_1, rt_add_i32(loc_2, 12))
		loc_3 = reg_0
		if rt_load_i32(memory_at_0, loc_2 + 12) == 0 then
			while true do
				FUNC_LIST[207](loc_0, loc_1, 3)
				error("out of code bounds")
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 16)
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[223] = --[[ luaL_optunsigned ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		while true do
			reg_0 = FUNC_LIST[111](loc_0, loc_1)
			if rt_gt_i32(reg_0, 0) then
				while true do
					reg_0 = FUNC_LIST[123](loc_0, loc_1, rt_add_i32(loc_3, 12))
					loc_2 = reg_0
					if rt_load_i32(memory_at_0, loc_3 + 12) == 0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
			reg_0 = loc_2
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[207](loc_0, loc_1, 3)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[224] = --[[ luaL_checkvector ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[128](loc_0, loc_1)
		loc_2 = reg_0
		if loc_2 == 0 then
			while true do
				FUNC_LIST[207](loc_0, loc_1, 4)
				error("out of code bounds")
			end
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[225] = --[[ luaL_optvector ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		while true do
			reg_0 = FUNC_LIST[111](loc_0, loc_1)
			if rt_le_i32(reg_0, 0) then
				break
			end
			reg_0 = FUNC_LIST[128](loc_0, loc_1)
			loc_2 = reg_0
			if loc_2 ~= 0 then
				break
			end
			FUNC_LIST[207](loc_0, loc_1, 4)
			error("out of code bounds")
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[226] = --[[ luaL_getmetafield ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[162](loc_0, loc_1)
		if reg_0 ~= 0 then
			while true do
				FUNC_LIST[146](loc_0, loc_2)
				reg_0 = FUNC_LIST[156](loc_0, 4294967294)
				reg_0 = FUNC_LIST[111](loc_0, 4294967295)
				if reg_0 == 0 then
					while true do
						FUNC_LIST[106](loc_0, 4294967293)
						reg_0 = 0
						desired = 0
						break
					end
					if desired then
						break
					end
				end
				FUNC_LIST[107](loc_0, 4294967294)
				reg_0 = 1
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_3
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_3 = reg_0
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[227] = --[[ luaL_callmeta ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		reg_0 = loc_0
		if rt_sub_i32(loc_1, 1) >= 4294957296 then
			while true do
				reg_1 = FUNC_LIST[105](loc_0)
				reg_1 = rt_add_i32(rt_add_i32(reg_1, loc_1), 1)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_1 = loc_1
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_1 = reg_1
		reg_0 = FUNC_LIST[162](reg_0, loc_1)
		if reg_0 ~= 0 then
			while true do
				FUNC_LIST[146](loc_0, loc_2)
				reg_0 = FUNC_LIST[156](loc_0, 4294967294)
				reg_0 = FUNC_LIST[111](loc_0, 4294967295)
				if reg_0 == 0 then
					while true do
						FUNC_LIST[106](loc_0, 4294967293)
						reg_0 = 0
						desired = 0
						break
					end
					if desired then
						break
					end
				end
				FUNC_LIST[107](loc_0, 4294967294)
				FUNC_LIST[110](loc_0, loc_1)
				FUNC_LIST[171](loc_0, 1, 1)
				reg_0 = 1
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_3
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_3 = reg_0
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[228] = --[[ luaL_register ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		while true do
			if loc_1 ~= 0 then
				while true do
					if rt_load_i32(memory_at_0, loc_2) ~= 0 then
						while true do
							loc_3 = loc_2
							while true do
								loc_5 = rt_add_i32(loc_5, 1)
								loc_6 = rt_load_i32(memory_at_0, loc_3 + 8)
								loc_3 = rt_add_i32(loc_3, 8)
								if loc_6 ~= 0 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							break
						end
					end
					reg_0 = FUNC_LIST[229](loc_0, 4294957296, 5196, 1)
					reg_0 = FUNC_LIST[154](loc_0, 4294967295, loc_1)
					reg_0 = FUNC_LIST[111](loc_0, 4294967295)
					if reg_0 ~= 6 then
						while true do
							FUNC_LIST[106](loc_0, 4294967294)
							reg_0 = FUNC_LIST[229](loc_0, 4294957294, loc_1, loc_5)
							if reg_0 ~= 0 then
								desired = 1
								break
							end
							FUNC_LIST[110](loc_0, 4294967295)
							FUNC_LIST[165](loc_0, 4294967293, loc_1)
							break
						end
						if desired then
							break
						end
					end
					FUNC_LIST[107](loc_0, 4294967294)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = rt_load_i32(memory_at_0, loc_2)
			if loc_3 ~= 0 then
				while true do
					while true do
						FUNC_LIST[149](loc_0, rt_load_i32(memory_at_0, loc_2 + 4), loc_3, 0, 0)
						FUNC_LIST[165](loc_0, 4294967294, rt_load_i32(memory_at_0, loc_2))
						loc_3 = rt_load_i32(memory_at_0, loc_2 + 8)
						loc_2 = rt_add_i32(loc_2, 8)
						if loc_3 ~= 0 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32(memory_at_0, loc_4, loc_1)
		FUNC_LIST[203](loc_0, 6377, loc_4)
		error("out of code bounds")
	end
end
FUNC_LIST[229] = --[[ luaL_findtable ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		FUNC_LIST[110](loc_0, loc_1)
		while true do
			reg_2 = FUNC_LIST[747](loc_2, 46)
			loc_1 = reg_2
			reg_0 = loc_0
			reg_1 = loc_2
			if loc_1 ~= 0 then
				while true do
					reg_2 = loc_1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			else
				while true do
					reg_2 = FUNC_LIST[649](loc_2)
					reg_2 = rt_add_i32(reg_2, loc_2)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			end
			loc_1 = reg_2
			loc_4 = rt_sub_i32(loc_1, loc_2)
			FUNC_LIST[145](reg_0, reg_1, loc_4)
			reg_0 = FUNC_LIST[156](loc_0, 4294967294)
			while true do
				reg_0 = FUNC_LIST[111](loc_0, 4294967295)
				if reg_0 == 0 then
					while true do
						FUNC_LIST[106](loc_0, 4294967294)
						FUNC_LIST[158](loc_0, 0, (if rt_load_i32_u8(memory_at_0, loc_1) == 46 then 1 else loc_3))
						FUNC_LIST[145](loc_0, loc_2, loc_4)
						FUNC_LIST[110](loc_0, 4294967294)
						FUNC_LIST[164](loc_0, 4294967292)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[111](loc_0, 4294967295)
				if reg_0 == 6 then
					break
				end
				FUNC_LIST[106](loc_0, 4294967293)
				reg_0 = loc_2
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			FUNC_LIST[107](loc_0, 4294967294)
			loc_2 = rt_add_i32(loc_1, 1)
			if rt_load_i32_u8(memory_at_0, loc_1) == 46 then
				continue
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[230] = --[[ luaL_typename ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[95](loc_0, loc_1)
		loc_1 = reg_0
		if loc_1 == 0 then
			while true do
				reg_0 = 3864
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = FUNC_LIST[463](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[231] = --[[ luaL_buffinit ]] function(loc_0, loc_1)
	while true do
		rt_store_i32(memory_at_0, loc_1 + 12, 0)
		rt_store_i32(memory_at_0, loc_1 + 8, loc_0)
		rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_1, 528))
		rt_store_i32(memory_at_0, loc_1, rt_add_i32(loc_1, 16))
		break
	end
end
FUNC_LIST[232] = --[[ luaL_buffinitsize ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_1 + 12, 0)
		rt_store_i32(memory_at_0, loc_1 + 8, loc_0)
		rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_1, 528))
		loc_0 = rt_add_i32(loc_1, 16)
		rt_store_i32(memory_at_0, loc_1, loc_0)
		if loc_2 >= 513 then
			while true do
				reg_0 = FUNC_LIST[233](loc_1, rt_sub_i32(loc_2, 512), 4294967295)
				break
			end
		else
			while true do
				reg_0 = loc_0
				break
			end
		end
		loc_0 = reg_0
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[233] = --[[ extendstrbuf(luaL_Strbuf*, unsigned long, int) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		loc_5 = rt_load_i32(memory_at_0, loc_0 + 8)
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 12)
		loc_6 = rt_add_i32(loc_0, 16)
		loc_3 = (if loc_3 ~= 0 then rt_add_i32(loc_3, 20) else loc_6)
		loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), loc_3)
		loc_1 = rt_add_i32(loc_1, loc_4)
		if loc_4 <= bit_xor(loc_1, 4294967295) then
			while true do
				loc_4 = rt_add_i32(loc_4, rt_shr_u32(loc_4, 1))
				loc_7 = (if loc_1 < loc_4 then loc_4 else loc_1)
				reg_0 = FUNC_LIST[385](loc_5, loc_7)
				loc_4 = reg_0
				reg_0 = FUNC_LIST[609](rt_add_i32(loc_4, 20), loc_3, rt_sub_i32(rt_load_i32(memory_at_0, loc_0), loc_3))
				loc_1 = reg_0
				if loc_3 == loc_6 then
					while true do
						FUNC_LIST[140](loc_5)
						FUNC_LIST[108](loc_5, loc_2)
						break
					end
					if desired then
						break
					end
				end
				loc_5 = rt_add_i32(rt_load_i32(memory_at_0, loc_5 + 8), rt_shl_i32(loc_2, 4))
				rt_store_i32(memory_at_0, loc_5 + 12, 5)
				rt_store_i32(memory_at_0, loc_5, loc_4)
				rt_store_i32(memory_at_0, loc_0 + 12, loc_4)
				rt_store_i32(memory_at_0, loc_0 + 4, rt_add_i32(loc_1, loc_7))
				loc_3 = rt_add_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0), loc_3), loc_1)
				rt_store_i32(memory_at_0, loc_0, loc_3)
				reg_0 = loc_3
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[203](loc_5, 4567, 0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[234] = --[[ luaL_prepbuffsize ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_0)
		loc_3 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), loc_2)
		if loc_1 > loc_3 then
			while true do
				reg_0 = FUNC_LIST[233](loc_0, rt_sub_i32(loc_1, loc_3), 4294967295)
				break
			end
		else
			while true do
				reg_0 = loc_2
				break
			end
		end
		loc_2 = reg_0
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[235] = --[[ luaL_addlstring ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_0)
		loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), loc_3)
		if loc_2 > loc_4 then
			while true do
				reg_0 = FUNC_LIST[233](loc_0, rt_sub_i32(loc_2, loc_4), 4294967295)
				reg_0 = rt_load_i32(memory_at_0, loc_0)
				break
			end
		else
			while true do
				reg_0 = loc_3
				break
			end
		end
		loc_3 = reg_0
		reg_0 = FUNC_LIST[609](loc_3, loc_1, loc_2)
		rt_store_i32(memory_at_0, loc_0, rt_add_i32(loc_2, rt_load_i32(memory_at_0, loc_0)))
		break
	end
end
FUNC_LIST[236] = --[[ luaL_addvalue ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 8)
		reg_0 = FUNC_LIST[125](loc_4, 4294967295, rt_add_i32(loc_1, 12))
		loc_5 = reg_0
		if loc_5 ~= 0 then
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_1 + 12)
				loc_3 = rt_load_i32(memory_at_0, loc_0)
				loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), loc_3)
				if loc_2 > loc_6 then
					while true do
						reg_0 = FUNC_LIST[233](loc_0, rt_sub_i32(loc_2, loc_6), 4294967294)
						loc_3 = rt_load_i32(memory_at_0, loc_0)
						reg_0 = rt_load_i32(memory_at_0, loc_1 + 12)
						break
					end
				else
					while true do
						reg_0 = loc_2
						break
					end
				end
				loc_2 = reg_0
				reg_0 = FUNC_LIST[609](loc_3, loc_5, loc_2)
				rt_store_i32(memory_at_0, loc_0, rt_add_i32(rt_load_i32(memory_at_0, loc_0), rt_load_i32(memory_at_0, loc_1 + 12)))
				FUNC_LIST[106](loc_4, 4294967294)
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		break
	end
end
FUNC_LIST[237] = --[[ luaL_addvalueany ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_3 = rt_add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
								reg_0 = FUNC_LIST[111](loc_2, loc_1)
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 5, 0, 1, 4, 2, 4, 3, }
									end)()
								end
								temp = br_map[1][rt_add_i32(reg_0, 1)] or 4
								if temp < 3 then
									if temp < 1 then
										break
									elseif temp > 1 then
										desired = 4
										break
									else
										desired = 5
										break
									end
								elseif temp > 3 then
									if temp < 5 then
										desired = 2
										break
									else
										desired = 1
										break
									end
								else
									desired = 3
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_1 = rt_load_i32(memory_at_0, loc_0)
							loc_2 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), loc_1)
							if loc_2 <= 2 then
								while true do
									reg_0 = FUNC_LIST[233](loc_0, rt_sub_i32(3, loc_2), 4294967295)
									reg_0 = rt_load_i32(memory_at_0, loc_0)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							else
								while true do
									reg_0 = loc_1
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_1 = reg_0
							rt_store_i32_n8(memory_at_0, loc_1 + 2, rt_load_i32_u8(memory_at_0, 2997))
							rt_store_i32_n16(memory_at_0, loc_1, rt_load_i32_u16(memory_at_0, 2995))
							rt_store_i32(memory_at_0, loc_0, rt_add_i32(rt_load_i32(memory_at_0, loc_0), 3))
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[124](loc_2, loc_1)
						loc_4 = reg_0
						loc_1 = rt_load_i32(memory_at_0, loc_0)
						loc_2 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), loc_1)
						if loc_4 ~= 0 then
							while true do
								if loc_2 <= 3 then
									while true do
										reg_0 = FUNC_LIST[233](loc_0, rt_sub_i32(4, loc_2), 4294967295)
										reg_0 = rt_load_i32(memory_at_0, loc_0)
										break
									end
									if desired then
										break
									end
								else
									while true do
										reg_0 = loc_1
										break
									end
									if desired then
										break
									end
								end
								loc_1 = reg_0
								rt_store_i32(memory_at_0, loc_1, 1702195828)
								rt_store_i32(memory_at_0, loc_0, rt_add_i32(rt_load_i32(memory_at_0, loc_0), 4))
								desired = 1
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_2 <= 4 then
							while true do
								reg_0 = FUNC_LIST[233](loc_0, rt_sub_i32(5, loc_2), 4294967295)
								reg_0 = rt_load_i32(memory_at_0, loc_0)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = loc_1
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_1 = reg_0
						rt_store_i32_n8(memory_at_0, loc_1 + 4, rt_load_i32_u8(memory_at_0, 3987))
						rt_store_i32(memory_at_0, loc_1, rt_load_i32(memory_at_0, 3983))
						rt_store_i32(memory_at_0, loc_0, rt_add_i32(rt_load_i32(memory_at_0, loc_0), 5))
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_1 = FUNC_LIST[121](loc_2, loc_1, 0)
					reg_0 = FUNC_LIST[361](rt_add_i32(loc_3, 16), reg_1)
					loc_1 = rt_sub_i32(reg_0, rt_add_i32(loc_3, 16))
					loc_2 = rt_load_i32(memory_at_0, loc_0)
					loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), loc_2)
					if loc_1 > loc_4 then
						while true do
							reg_0 = FUNC_LIST[233](loc_0, rt_sub_i32(loc_1, loc_4), 4294967295)
							reg_0 = rt_load_i32(memory_at_0, loc_0)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = reg_0
					reg_0 = FUNC_LIST[609](loc_2, rt_add_i32(loc_3, 16), loc_1)
					rt_store_i32(memory_at_0, loc_0, rt_add_i32(loc_1, rt_load_i32(memory_at_0, loc_0)))
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[125](loc_2, loc_1, rt_add_i32(loc_3, 16))
				loc_4 = reg_0
				loc_1 = rt_load_i32(memory_at_0, loc_3 + 16)
				loc_2 = rt_load_i32(memory_at_0, loc_0)
				loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), loc_2)
				if loc_1 > loc_5 then
					while true do
						reg_0 = FUNC_LIST[233](loc_0, rt_sub_i32(loc_1, loc_5), 4294967295)
						reg_0 = rt_load_i32(memory_at_0, loc_0)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = reg_0
				reg_0 = FUNC_LIST[609](loc_2, loc_4, loc_1)
				rt_store_i32(memory_at_0, loc_0, rt_add_i32(loc_1, rt_load_i32(memory_at_0, loc_0)))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[238](loc_2, loc_1, rt_add_i32(loc_3, 12))
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
			reg_0 = FUNC_LIST[125](loc_2, 4294967295, rt_add_i32(loc_3, 16))
			loc_4 = reg_0
			if loc_4 == 0 then
				break
			end
			loc_1 = rt_load_i32(memory_at_0, loc_3 + 16)
			loc_5 = rt_load_i32(memory_at_0, loc_0)
			loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), loc_5)
			if loc_1 > loc_6 then
				while true do
					reg_0 = FUNC_LIST[233](loc_0, rt_sub_i32(loc_1, loc_6), 4294967294)
					loc_5 = rt_load_i32(memory_at_0, loc_0)
					reg_0 = rt_load_i32(memory_at_0, loc_3 + 16)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = reg_0
			reg_0 = FUNC_LIST[609](loc_5, loc_4, loc_1)
			rt_store_i32(memory_at_0, loc_0, rt_add_i32(rt_load_i32(memory_at_0, loc_0), rt_load_i32(memory_at_0, loc_3 + 16)))
			FUNC_LIST[106](loc_2, 4294967294)
			break
		end
		GLOBAL_LIST[0].value = rt_sub_i32(loc_3, 4294967232)
		break
	end
end
FUNC_LIST[238] = --[[ luaL_tolstring ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = rt_i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local desired
	local br_map = {}
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 160)
		GLOBAL_LIST[0].value = loc_3
		while true do
			reg_0 = FUNC_LIST[227](loc_0, loc_1, 3246)
			if reg_0 ~= 0 then
				while true do
					reg_0 = FUNC_LIST[125](loc_0, 4294967295, loc_2)
					loc_1 = reg_0
					if loc_1 ~= 0 then
						desired = 1
						break
					end
					FUNC_LIST[203](loc_0, 3406, 0)
					error("out of code bounds")
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										reg_0 = FUNC_LIST[111](loc_0, loc_1)
										if not br_map[1] then
											br_map[1] = (function()
												return { [0] = 0, 1, 5, 2, 3, 4, }
											end)()
										end
										temp = br_map[1][reg_0] or 5
										if temp < 3 then
											if temp < 1 then
												break
											elseif temp > 1 then
												desired = 6
												break
											else
												desired = 7
												break
											end
										elseif temp > 3 then
											if temp < 5 then
												desired = 4
												break
											else
												desired = 3
												break
											end
										else
											desired = 5
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									FUNC_LIST[145](loc_0, 2995, 3)
									desired = 2
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_3 = FUNC_LIST[124](loc_0, loc_1)
								FUNC_LIST[146](loc_0, (if reg_3 ~= 0 then 3834 else 3983))
								desired = 2
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_3 = FUNC_LIST[121](loc_0, loc_1, 0)
							reg_2 = FUNC_LIST[361](rt_add_i32(loc_3, 16), reg_3)
							FUNC_LIST[145](loc_0, rt_add_i32(loc_3, 16), rt_sub_i32(reg_2, rt_add_i32(loc_3, 16)))
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_1 = FUNC_LIST[128](loc_0, loc_1)
						loc_1 = reg_1
						reg_0 = FUNC_LIST[361](rt_add_i32(loc_3, 16), no_op(rt_load_f32(memory_at_0, loc_1)))
						loc_4 = reg_0
						rt_store_i32_n16(memory_at_0, loc_4, 8236)
						reg_0 = FUNC_LIST[361](rt_add_i32(loc_4, 2), no_op(rt_load_f32(memory_at_0, loc_1 + 4)))
						loc_4 = reg_0
						rt_store_i32_n16(memory_at_0, loc_4, 8236)
						reg_2 = FUNC_LIST[361](rt_add_i32(loc_4, 2), no_op(rt_load_f32(memory_at_0, loc_1 + 8)))
						FUNC_LIST[145](loc_0, rt_add_i32(loc_3, 16), rt_sub_i32(reg_2, rt_add_i32(loc_3, 16)))
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[110](loc_0, loc_1)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_1 = FUNC_LIST[139](loc_0, loc_1)
				reg_0 = FUNC_LIST[189](loc_0, reg_1)
				loc_5 = rt_extend_i64_u32(reg_0)
				reg_0 = FUNC_LIST[95](loc_0, loc_1)
				loc_1 = reg_0
				if loc_1 ~= 0 then
					while true do
						reg_0 = FUNC_LIST[463](loc_0, loc_1)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = 3864
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_1 = reg_0
				rt_store_i64(memory_at_0, loc_3 + 8, loc_5)
				rt_store_i32(memory_at_0, loc_3, loc_1)
				reg_0 = FUNC_LIST[148](loc_0, 1310, loc_3)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[125](loc_0, 4294967295, loc_2)
			loc_1 = reg_0
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 160)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[239] = --[[ luaL_pushresult ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
		while true do
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 12)
			if loc_2 ~= 0 then
				while true do
					loc_3 = rt_load_i32(memory_at_0, loc_1 + 16)
					if rt_load_i32(memory_at_0, loc_3 + 40) >= rt_load_i32(memory_at_0, loc_3 + 36) then
						while true do
							reg_0 = FUNC_LIST[42](loc_1, 1)
							break
						end
						if desired then
							break
						end
					end
					loc_3 = rt_load_i32(memory_at_0, loc_1 + 8)
					loc_4 = rt_sub_i32(loc_3, 16)
					loc_5 = rt_load_i32(memory_at_0, loc_0)
					if loc_5 == rt_load_i32(memory_at_0, loc_0 + 4) then
						while true do
							reg_1 = FUNC_LIST[386](loc_1, loc_2)
							rt_store_i32(memory_at_0, loc_4, reg_1)
							desired = 1
							break
						end
						if desired then
							break
						end
					end
					loc_0 = rt_add_i32(loc_2, 20)
					reg_1 = FUNC_LIST[387](loc_1, loc_0, rt_sub_i32(loc_5, loc_0))
					rt_store_i32(memory_at_0, loc_4, reg_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = rt_add_i32(loc_0, 16)
			FUNC_LIST[145](loc_1, loc_2, rt_sub_i32(rt_load_i32(memory_at_0, loc_0), loc_2))
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32(memory_at_0, rt_sub_i32(loc_3, 4), 5)
		break
	end
end
FUNC_LIST[240] = --[[ luaL_pushresultsize ]] function(loc_0, loc_1)
	while true do
		rt_store_i32(memory_at_0, loc_0, rt_add_i32(loc_1, rt_load_i32(memory_at_0, loc_0)))
		FUNC_LIST[239](loc_0)
		break
	end
end
FUNC_LIST[241] = --[[ luaB_next(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		FUNC_LIST[214](loc_0, 1, 6)
		loc_1 = 2
		FUNC_LIST[106](loc_0, 2)
		reg_0 = FUNC_LIST[180](loc_0, 1)
		if reg_0 ~= 0 then
			while true do
				reg_0 = loc_1
				break
			end
		else
			while true do
				FUNC_LIST[140](loc_0)
				reg_0 = 1
				break
			end
		end
		loc_1 = reg_0
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[242] = --[[ luaB_inext(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[220](loc_0, 2)
		loc_1 = reg_0
		FUNC_LIST[214](loc_0, 1, 6)
		loc_1 = rt_add_i32(loc_1, 1)
		FUNC_LIST[142](loc_0, loc_1)
		reg_0 = FUNC_LIST[157](loc_0, 1, loc_1)
		reg_0 = FUNC_LIST[111](loc_0, 4294967295)
		reg_0 = rt_shl_i32((if reg_0 ~= 0 then 1 else 0), 1)
		break
	end
	return reg_0
end
FUNC_LIST[243] = --[[ luaopen_base ]] function(loc_0)
	local reg_0
	while true do
		FUNC_LIST[110](loc_0, 4294957294)
		FUNC_LIST[165](loc_0, 4294957294, 5189)
		FUNC_LIST[228](loc_0, 5189, 6704)
		FUNC_LIST[145](loc_0, 1588, 4)
		FUNC_LIST[165](loc_0, 4294957294, 5170)
		FUNC_LIST[149](loc_0, 17, 0, 0, 0)
		FUNC_LIST[149](loc_0, 18, 1945, 1, 0)
		FUNC_LIST[165](loc_0, 4294967294, 1945)
		FUNC_LIST[149](loc_0, 19, 0, 0, 0)
		FUNC_LIST[149](loc_0, 20, 1946, 1, 0)
		FUNC_LIST[165](loc_0, 4294967294, 1946)
		FUNC_LIST[149](loc_0, 21, 2956, 0, 22)
		FUNC_LIST[165](loc_0, 4294967294, 2956)
		FUNC_LIST[149](loc_0, 23, 2955, 0, 24)
		FUNC_LIST[165](loc_0, 4294967294, 2955)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[244] = --[[ luaB_ipairs(lua_State*) ]] function(loc_0)
	local reg_0
	while true do
		FUNC_LIST[214](loc_0, 1, 6)
		FUNC_LIST[110](loc_0, 4294957293)
		FUNC_LIST[110](loc_0, 1)
		FUNC_LIST[142](loc_0, 0)
		reg_0 = 3
		break
	end
	return reg_0
end
FUNC_LIST[245] = --[[ luaB_pairs(lua_State*) ]] function(loc_0)
	local reg_0
	while true do
		FUNC_LIST[214](loc_0, 1, 6)
		FUNC_LIST[110](loc_0, 4294957293)
		FUNC_LIST[110](loc_0, 1)
		FUNC_LIST[140](loc_0)
		reg_0 = 3
		break
	end
	return reg_0
end
FUNC_LIST[246] = --[[ luaB_pcally(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		FUNC_LIST[215](loc_0, 1)
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 12)
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 20)
		rt_store_i32(memory_at_0, loc_1 + 20, bit_or(rt_load_i32(memory_at_0, loc_1 + 20), 2))
		rt_store_i32_n16(memory_at_0, loc_0 + 50, rt_add_i32(rt_load_i32_u16(memory_at_0, loc_0 + 50), 1))
		reg_0 = FUNC_LIST[93](loc_0, 25, loc_2, rt_sub_i32(loc_2, rt_load_i32(memory_at_0, loc_0 + 28)), 0)
		loc_2 = reg_0
		rt_store_i32_n16(memory_at_0, loc_0 + 50, rt_sub_i32(rt_load_i32_u16(memory_at_0, loc_0 + 50), 1))
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 20)
		if loc_3 > rt_load_i32(memory_at_0, loc_1 + 8) then
			while true do
				rt_store_i32(memory_at_0, loc_1 + 8, loc_3)
				break
			end
		end
		while true do
			while true do
				if loc_2 ~= 0 then
					break
				end
				loc_1 = 4294967295
				if not br_map[1] then
					br_map[1] = (function()
						return { [0] = 1, 0, 0, 0, 0, 1, }
					end)()
				end
				temp = br_map[1][rt_sub_i32(rt_load_i32_u8(memory_at_0, loc_0 + 3), 1)] or 0
				if temp < 1 then
					break
				else
					desired = 1
					break
				end
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[99](loc_0, 1)
			FUNC_LIST[150](loc_0, (if loc_2 == 0 then 1 else 0))
			FUNC_LIST[108](loc_0, 1)
			reg_0 = FUNC_LIST[105](loc_0)
			loc_1 = reg_0
			break
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[247] = --[[ luaB_pcallcont(lua_State*, int) ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		FUNC_LIST[99](loc_0, 1)
		if loc_1 == 0 then
			while true do
				FUNC_LIST[150](loc_0, 1)
				FUNC_LIST[108](loc_0, 1)
				reg_0 = FUNC_LIST[105](loc_0)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[150](loc_0, 0)
		FUNC_LIST[108](loc_0, 4294967294)
		reg_0 = 2
		break
	end
	return reg_0
end
FUNC_LIST[248] = --[[ luaB_xpcally(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		FUNC_LIST[214](loc_0, 2, 7)
		FUNC_LIST[110](loc_0, 1)
		FUNC_LIST[110](loc_0, 2)
		FUNC_LIST[109](loc_0, 1)
		FUNC_LIST[109](loc_0, 2)
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 20)
		rt_store_i32(memory_at_0, loc_1 + 20, bit_or(rt_load_i32(memory_at_0, loc_1 + 20), 2))
		rt_store_i32_n16(memory_at_0, loc_0 + 50, rt_add_i32(rt_load_i32_u16(memory_at_0, loc_0 + 50), 1))
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 12)
		loc_2 = rt_add_i32(loc_1, 16)
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 28)
		reg_0 = FUNC_LIST[93](loc_0, 25, loc_2, rt_sub_i32(loc_2, loc_3), rt_sub_i32(loc_1, loc_3))
		loc_1 = reg_0
		rt_store_i32_n16(memory_at_0, loc_0 + 50, rt_sub_i32(rt_load_i32_u16(memory_at_0, loc_0 + 50), 1))
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 20)
		if loc_3 > rt_load_i32(memory_at_0, loc_2 + 8) then
			while true do
				rt_store_i32(memory_at_0, loc_2 + 8, loc_3)
				break
			end
		end
		while true do
			while true do
				if loc_1 ~= 0 then
					break
				end
				loc_2 = 4294967295
				if not br_map[1] then
					br_map[1] = (function()
						return { [0] = 1, 0, 0, 0, 0, 1, }
					end)()
				end
				temp = br_map[1][rt_sub_i32(rt_load_i32_u8(memory_at_0, loc_0 + 3), 1)] or 0
				if temp < 1 then
					break
				else
					desired = 1
					break
				end
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[99](loc_0, 1)
			FUNC_LIST[150](loc_0, (if loc_1 == 0 then 1 else 0))
			FUNC_LIST[109](loc_0, 1)
			reg_0 = FUNC_LIST[105](loc_0)
			loc_2 = reg_0
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[249] = --[[ luaB_xpcallcont(lua_State*, int) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		if loc_1 == 0 then
			while true do
				FUNC_LIST[99](loc_0, 1)
				FUNC_LIST[150](loc_0, 1)
				FUNC_LIST[109](loc_0, 1)
				reg_0 = FUNC_LIST[105](loc_0)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[99](loc_0, 3)
		FUNC_LIST[150](loc_0, 0)
		FUNC_LIST[110](loc_0, 1)
		FUNC_LIST[110](loc_0, 4294967293)
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
		loc_2 = rt_sub_i32(loc_1, 32)
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 28)
		reg_0 = FUNC_LIST[93](loc_0, 26, loc_2, rt_sub_i32(loc_2, loc_3), rt_sub_i32(rt_sub_i32(loc_1, loc_3), 48))
		reg_0 = 2
		break
	end
	return reg_0
end
FUNC_LIST[250] = --[[ luaB_pcallrun(lua_State*, void*) ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[85](loc_0, loc_1, 4294967295)
		break
	end
end
FUNC_LIST[251] = --[[ luaB_xpcallerr(lua_State*, void*) ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[85](loc_0, loc_1, 1)
		break
	end
end
FUNC_LIST[252] = --[[ luaB_assert(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	local reg_1
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		FUNC_LIST[215](loc_0, 1)
		reg_0 = FUNC_LIST[124](loc_0, 1)
		if reg_0 == 0 then
			while true do
				reg_1 = FUNC_LIST[208](loc_0, 2, 6538, 0)
				rt_store_i32(memory_at_0, loc_1, reg_1)
				FUNC_LIST[203](loc_0, 2299, loc_1)
				error("out of code bounds")
			end
		end
		reg_0 = FUNC_LIST[105](loc_0)
		loc_0 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[253] = --[[ luaB_error(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[221](loc_0, 2, 1)
		loc_1 = reg_0
		FUNC_LIST[106](loc_0, 1)
		while true do
			reg_0 = FUNC_LIST[116](loc_0, 1)
			if reg_0 == 0 then
				break
			end
			if rt_le_i32(loc_1, 0) then
				break
			end
			FUNC_LIST[204](loc_0, loc_1)
			FUNC_LIST[110](loc_0, 1)
			FUNC_LIST[182](loc_0, 2)
			break
		end
		FUNC_LIST[179](loc_0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[254] = --[[ luaB_gcinfo(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[178](loc_0, 3, 0)
		FUNC_LIST[142](loc_0, reg_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[255] = --[[ luaB_getfenv(lua_State*) ]] function(loc_0)
	local reg_0
	local desired
	while true do
		FUNC_LIST[256](loc_0, 1)
		while true do
			reg_0 = FUNC_LIST[113](loc_0, 4294967295)
			if reg_0 ~= 0 then
				while true do
					FUNC_LIST[110](loc_0, 4294957294)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[163](loc_0, 4294967295)
			break
		end
		FUNC_LIST[161](loc_0, 4294967295, 0)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[256] = --[[ getfunc(lua_State*, int) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 304)
		GLOBAL_LIST[0].value = loc_2
		while true do
			while true do
				while true do
					while true do
						reg_0 = FUNC_LIST[111](loc_0, 1)
						if reg_0 == 7 then
							while true do
								FUNC_LIST[110](loc_0, 1)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						while true do
							if loc_1 ~= 0 then
								while true do
									reg_0 = FUNC_LIST[221](loc_0, 1, 1)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							reg_0 = FUNC_LIST[220](loc_0, 1)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_1 = reg_0
						if rt_lt_i32(loc_1, 0) then
							desired = 3
							break
						end
						reg_0 = FUNC_LIST[58](loc_0, loc_1, 3603, rt_add_i32(loc_2, 16))
						if reg_0 == 0 then
							desired = 2
							break
						end
						reg_0 = FUNC_LIST[111](loc_0, 4294967295)
						if reg_0 == 0 then
							desired = 1
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					GLOBAL_LIST[0].value = rt_add_i32(loc_2, 304)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[202](loc_0, 1, 3758)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[202](loc_0, 1, 3004)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32(memory_at_0, loc_2, loc_1)
		FUNC_LIST[203](loc_0, 4984, loc_2)
		error("out of code bounds")
	end
end
FUNC_LIST[257] = --[[ luaB_getmetatable(lua_State*) ]] function(loc_0)
	local reg_0
	local desired
	while true do
		FUNC_LIST[215](loc_0, 1)
		reg_0 = FUNC_LIST[162](loc_0, 1)
		if reg_0 == 0 then
			while true do
				FUNC_LIST[140](loc_0)
				reg_0 = 1
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = FUNC_LIST[226](loc_0, 1, 4268)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[258] = --[[ luaB_newproxy(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[111](loc_0, 1)
		if rt_add_i32(reg_0, 1) < 3 then
			while true do
				reg_0 = FUNC_LIST[124](loc_0, 1)
				loc_1 = reg_0
				reg_0 = FUNC_LIST[183](loc_0, 0, 129)
				if loc_1 ~= 0 then
					while true do
						FUNC_LIST[158](loc_0, 0, 0)
						reg_0 = FUNC_LIST[169](loc_0, 4294967294)
						break
					end
					if desired then
						break
					end
				end
				reg_0 = 1
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[205](loc_0, 1, 2886)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[259] = --[[ luaB_print(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		loc_2 = rt_load_i32(memory_at_0, 29136)
		while true do
			reg_0 = FUNC_LIST[105](loc_0)
			loc_5 = reg_0
			if rt_le_i32(loc_5, 0) then
				break
			end
			reg_0 = FUNC_LIST[238](loc_0, 1, rt_add_i32(loc_1, 12))
			reg_0 = FUNC_LIST[633](reg_0, 1, rt_load_i32(memory_at_0, loc_1 + 12), loc_2)
			FUNC_LIST[106](loc_0, 4294967294)
			if loc_5 == 1 then
				break
			end
			loc_3 = 2
			while true do
				reg_0 = FUNC_LIST[238](loc_0, loc_3, rt_add_i32(loc_1, 12))
				loc_4 = reg_0
				reg_0 = FUNC_LIST[626](9, loc_2)
				reg_0 = FUNC_LIST[633](loc_4, 1, rt_load_i32(memory_at_0, loc_1 + 12), loc_2)
				FUNC_LIST[106](loc_0, 4294967294)
				loc_4 = (if loc_3 == loc_5 then 1 else 0)
				loc_3 = rt_add_i32(loc_3, 1)
				if loc_4 == 0 then
					continue
				end
				break
			end
			break
		end
		reg_0 = FUNC_LIST[626](10, loc_2)
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[260] = --[[ luaB_rawequal(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		FUNC_LIST[215](loc_0, 1)
		FUNC_LIST[215](loc_0, 2)
		reg_1 = FUNC_LIST[118](loc_0, 1, 2)
		FUNC_LIST[150](loc_0, reg_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[261] = --[[ luaB_rawget(lua_State*) ]] function(loc_0)
	local reg_0
	while true do
		FUNC_LIST[214](loc_0, 1, 6)
		FUNC_LIST[215](loc_0, 2)
		FUNC_LIST[106](loc_0, 2)
		reg_0 = FUNC_LIST[156](loc_0, 1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[262] = --[[ luaB_rawset(lua_State*) ]] function(loc_0)
	local reg_0
	while true do
		FUNC_LIST[214](loc_0, 1, 6)
		FUNC_LIST[215](loc_0, 2)
		FUNC_LIST[215](loc_0, 3)
		FUNC_LIST[106](loc_0, 3)
		FUNC_LIST[167](loc_0, 1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[263] = --[[ luaB_rawlen(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		reg_0 = FUNC_LIST[111](loc_0, 1)
		if rt_sub_i32(reg_0, 5) >= 2 then
			while true do
				FUNC_LIST[202](loc_0, 1, 4855)
				error("out of code bounds")
			end
		end
		reg_1 = FUNC_LIST[129](loc_0, 1)
		FUNC_LIST[142](loc_0, reg_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[264] = --[[ luaB_select(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		reg_0 = FUNC_LIST[105](loc_0)
		loc_1 = reg_0
		while true do
			reg_0 = FUNC_LIST[111](loc_0, 1)
			if reg_0 ~= 5 then
				break
			end
			reg_0 = FUNC_LIST[125](loc_0, 1, 0)
			if rt_load_i32_u8(memory_at_0, reg_0) ~= 35 then
				break
			end
			FUNC_LIST[142](loc_0, rt_sub_i32(loc_1, 1))
			reg_0 = 1
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_1 = FUNC_LIST[220](loc_0, 1)
		loc_2 = reg_1
		loc_2 = (if rt_lt_i32(loc_2, 0) then rt_add_i32(loc_1, loc_2) else (if rt_gt_i32(loc_1, loc_2) then loc_2 else loc_1))
		if rt_gt_i32(loc_2, 0) then
			while true do
				reg_0 = rt_sub_i32(loc_1, loc_2)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[202](loc_0, 1, 4611)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[265] = --[[ luaB_setfenv(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	local desired
	while true do
		FUNC_LIST[214](loc_0, 2, 6)
		FUNC_LIST[256](loc_0, 0)
		FUNC_LIST[110](loc_0, 2)
		FUNC_LIST[161](loc_0, 4294967295, 0)
		while true do
			while true do
				reg_0 = FUNC_LIST[115](loc_0, 1)
				if reg_0 == 0 then
					break
				end
				reg_0 = FUNC_LIST[121](loc_0, 1, 0)
				if reg_0 ~= 0e0 then
					break
				end
				reg_0 = FUNC_LIST[152](loc_0)
				FUNC_LIST[108](loc_0, 4294967294)
				reg_0 = FUNC_LIST[170](loc_0, 4294967294)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[113](loc_0, 4294967294)
			if reg_0 == 0 then
				while true do
					loc_1 = 1
					reg_0 = FUNC_LIST[170](loc_0, 4294967294)
					if reg_0 ~= 0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[203](loc_0, 1762, 0)
			error("out of code bounds")
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[266] = --[[ luaB_setmetatable(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		reg_0 = FUNC_LIST[111](loc_0, 2)
		loc_1 = reg_0
		FUNC_LIST[214](loc_0, 1, 6)
		while true do
			while true do
				if not br_map[1] then
					br_map[1] = (function()
						return { [0] = 1, 0, 0, 0, 0, 0, 1, }
					end)()
				end
				temp = br_map[1][loc_1] or 0
				if temp < 1 then
					break
				else
					desired = 1
					break
				end
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[205](loc_0, 2, 4425)
			error("out of code bounds")
		end
		reg_0 = FUNC_LIST[226](loc_0, 1, 4268)
		if reg_0 ~= 0 then
			while true do
				FUNC_LIST[203](loc_0, 4312, 0)
				error("out of code bounds")
			end
		end
		FUNC_LIST[106](loc_0, 2)
		reg_0 = FUNC_LIST[169](loc_0, 1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[267] = --[[ luaB_tonumber(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0.0
	local loc_5 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		while true do
			while true do
				reg_0 = FUNC_LIST[221](loc_0, 2, 10)
				loc_2 = reg_0
				if loc_2 == 10 then
					while true do
						rt_store_i32(memory_at_0, loc_1 + 12, 0)
						reg_0 = FUNC_LIST[121](loc_0, 1, rt_add_i32(loc_1, 12))
						loc_4 = reg_0
						if rt_load_i32(memory_at_0, loc_1 + 12) == 0 then
							while true do
								FUNC_LIST[215](loc_0, 1)
								desired = 2
								break
							end
							if desired then
								break
							end
						end
						FUNC_LIST[141](loc_0, loc_4)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[209](loc_0, 1, 0)
				loc_3 = reg_0
				if rt_sub_i32(loc_2, 2) < 35 then
					while true do
						reg_0 = FUNC_LIST[778](loc_3, rt_add_i32(loc_1, 8), loc_2)
						loc_5 = reg_0
						loc_2 = rt_load_i32(memory_at_0, loc_1 + 8)
						if loc_2 == loc_3 then
							desired = 2
							break
						end
						while true do
							loc_3 = rt_load_i32_u8(memory_at_0, loc_2)
							loc_2 = rt_add_i32(loc_2, 1)
							reg_0 = FUNC_LIST[724](loc_3)
							if reg_0 ~= 0 then
								continue
							end
							break
						end
						if desired then
							break
						end
						if loc_3 ~= 0 then
							desired = 2
							break
						end
						FUNC_LIST[141](loc_0, rt_convert_f64_u64(loc_5))
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[202](loc_0, 2, 4689)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[140](loc_0)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[268] = --[[ luaB_tostring(lua_State*) ]] function(loc_0)
	local reg_0
	while true do
		FUNC_LIST[215](loc_0, 1)
		reg_0 = FUNC_LIST[238](loc_0, 1, 0)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[269] = --[[ luaB_type(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	local reg_2
	while true do
		FUNC_LIST[215](loc_0, 1)
		reg_2 = FUNC_LIST[111](loc_0, 1)
		reg_1 = FUNC_LIST[112](loc_0, reg_2)
		FUNC_LIST[146](loc_0, reg_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[270] = --[[ luaB_typeof(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		FUNC_LIST[215](loc_0, 1)
		reg_1 = FUNC_LIST[230](loc_0, 1)
		FUNC_LIST[146](loc_0, reg_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[271] = --[[ luaopen_debug ]] function(loc_0)
	local reg_0
	while true do
		FUNC_LIST[228](loc_0, 3149, 6864)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[272] = --[[ db_info(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	local br_map = {}
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 320)
		GLOBAL_LIST[0].value = loc_1
		loc_2 = 1
		while true do
			while true do
				while true do
					while true do
						reg_0 = FUNC_LIST[111](loc_0, 1)
						if reg_0 == 9 then
							while true do
								loc_5 = 1
								reg_1 = FUNC_LIST[137](loc_0, 1)
								loc_3 = reg_1
								if loc_0 == loc_3 then
									while true do
										reg_0 = 0
										break
									end
									if desired then
										break
									end
								else
									while true do
										FUNC_LIST[99](loc_3, 1)
										reg_0 = FUNC_LIST[105](loc_3)
										break
									end
									if desired then
										break
									end
								end
								loc_8 = reg_0
								loc_2 = 2
								reg_0 = FUNC_LIST[115](loc_0, 2)
								if reg_0 == 0 then
									desired = 1
									break
								end
								loc_7 = (if loc_0 ~= loc_3 then 1 else 0)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_3 = loc_0
						reg_0 = FUNC_LIST[115](loc_0, 1)
						if reg_0 == 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[122](loc_0, loc_2, 0)
					loc_9 = reg_0
					if rt_ge_i32(loc_9, 0) then
						desired = 2
						break
					end
					FUNC_LIST[202](loc_0, loc_2, 3810)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[111](loc_0, 1)
				if reg_0 ~= 7 then
					desired = 1
					break
				end
				reg_1 = FUNC_LIST[105](loc_0)
				loc_9 = rt_sub_i32(0, reg_1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_10 = bit_or(loc_5, 2)
				reg_2 = FUNC_LIST[209](loc_0, loc_10, 0)
				loc_4 = reg_2
				reg_0 = FUNC_LIST[58](loc_3, loc_9, loc_4, rt_add_i32(loc_1, 32))
				if reg_0 == 0 then
					break
				end
				rt_store_i32_n16(memory_at_0, loc_1 + 24, 0)
				rt_store_i64(memory_at_0, loc_1 + 16, rt_i64_ZERO)
				rt_store_i64(memory_at_0, loc_1 + 8, rt_i64_ZERO)
				rt_store_i64(memory_at_0, loc_1, rt_i64_ZERO)
				loc_2 = rt_load_i32_u8(memory_at_0, loc_4)
				if loc_2 == 0 then
					break
				end
				while true do
					loc_5 = loc_4
					loc_4 = rt_sub_i32(rt_extend_i32_n8(loc_2), 97)
					if loc_4 <= 25 then
						while true do
							loc_4 = rt_add_i32(loc_1, loc_4)
							if rt_load_i32_u8(memory_at_0, loc_4) == 1 then
								while true do
									if loc_7 ~= 0 then
										while true do
											FUNC_LIST[106](loc_3, loc_8)
											break
										end
										if desired then
											break
										end
									end
									FUNC_LIST[202](loc_0, loc_10, 2720)
									error("out of code bounds")
								end
								if desired then
									break
								end
							end
							rt_store_i32_n8(memory_at_0, loc_4, 1)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_4 = rt_add_i32(loc_5, 1)
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													if not br_map[1] then
														br_map[1] = (function()
															return { [0] = 3, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 0, 4, 1, 4, 4, 4, 4, 5, }
														end)()
													end
													temp = br_map[1][rt_sub_i32(bit_and(loc_2, 255), 97)] or 4
													if temp < 3 then
														if temp < 1 then
															break
														elseif temp > 1 then
															desired = 9
															break
														else
															desired = 10
															break
														end
													elseif temp > 3 then
														if temp < 5 then
															desired = 7
															break
														else
															desired = 6
															break
														end
													else
														desired = 8
														break
													end
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												FUNC_LIST[142](loc_0, rt_load_i32(memory_at_0, loc_1 + 52))
												desired = 5
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_2 = rt_load_i32(memory_at_0, loc_1 + 32)
											FUNC_LIST[146](loc_0, (if loc_2 ~= 0 then loc_2 else 6597))
											desired = 5
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										if loc_7 == 0 then
											while true do
												FUNC_LIST[110](loc_0, bit_xor(loc_6, 4294967295))
												desired = 5
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										FUNC_LIST[100](loc_3, loc_0, 1)
										reg_0 = 1
										desired = 4
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									FUNC_LIST[142](loc_0, rt_load_i32_u8(memory_at_0, loc_1 + 57))
									FUNC_LIST[150](loc_0, rt_load_i32_i8(memory_at_0, loc_1 + 58))
									reg_0 = 2
									desired = 4
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if bit_and(loc_7, rt_load_i32_u8(memory_at_0, 35132)) ~= 0 then
									while true do
										FUNC_LIST[106](loc_3, loc_8)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								FUNC_LIST[202](loc_0, loc_10, 2737)
								error("out of code bounds")
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[146](loc_0, rt_load_i32(memory_at_0, loc_1 + 44))
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					loc_2 = reg_0
					loc_6 = rt_add_i32(loc_2, loc_6)
					loc_2 = rt_load_i32_u8(memory_at_0, loc_5 + 1)
					if loc_2 ~= 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			GLOBAL_LIST[0].value = rt_add_i32(loc_1, 320)
			reg_0 = loc_6
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[202](loc_0, loc_2, 4828)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[273] = --[[ db_traceback(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 848)
		GLOBAL_LIST[0].value = loc_1
		loc_4 = loc_0
		reg_1 = FUNC_LIST[111](loc_0, 1)
		reg_0 = loc_0
		if reg_1 == 9 then
			while true do
				reg_1 = FUNC_LIST[137](loc_0, 1)
				loc_4 = reg_1
				reg_1 = 1
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_1 = loc_2
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_2 = reg_1
		reg_0 = FUNC_LIST[208](reg_0, rt_add_i32(loc_2, 1), 0, 0)
		loc_3 = reg_0
		loc_2 = bit_or(loc_2, 2)
		reg_0 = FUNC_LIST[221](loc_0, loc_2, (if loc_0 == loc_4 then 1 else 0))
		loc_5 = reg_0
		if rt_ge_i32(loc_5, 0) then
			while true do
				FUNC_LIST[231](loc_0, rt_add_i32(loc_1, 320))
				if loc_3 ~= 0 then
					while true do
						reg_2 = FUNC_LIST[649](loc_3)
						FUNC_LIST[235](rt_add_i32(loc_1, 320), loc_3, reg_2)
						FUNC_LIST[235](rt_add_i32(loc_1, 320), 6594, 1)
						break
					end
					if desired then
						break
					end
				end
				reg_0 = FUNC_LIST[58](loc_4, loc_5, 2776, rt_add_i32(loc_1, 32))
				if reg_0 ~= 0 then
					while true do
						loc_6 = rt_add_i32(loc_1, 32)
						while true do
							while true do
								loc_0 = rt_load_i32(memory_at_0, loc_1 + 36)
								if rt_load_i32_u8(memory_at_0, loc_0) == 67 then
									while true do
										if rt_load_i32_u8(memory_at_0, loc_0 + 1) == 0 then
											desired = 4
											break
										end
										break
									end
									if desired then
										if desired == 4 then
											desired = nil
										end
										break
									end
								end
								if rt_load_i32(memory_at_0, loc_1 + 40) ~= 0 then
									while true do
										loc_0 = rt_load_i32(memory_at_0, loc_1 + 44)
										reg_2 = FUNC_LIST[649](loc_0)
										FUNC_LIST[235](rt_add_i32(loc_1, 320), loc_0, reg_2)
										break
									end
									if desired then
										if desired == 4 then
											desired = nil
										end
										break
									end
								end
								loc_0 = rt_load_i32(memory_at_0, loc_1 + 52)
								if rt_gt_i32(loc_0, 0) then
									while true do
										loc_2 = loc_6
										while true do
											loc_2 = rt_sub_i32(loc_2, 1)
											loc_3 = rt_div_u32(loc_0, 10)
											rt_store_i32_n8(memory_at_0, loc_2, bit_or(rt_sub_i32(loc_0, rt_mul_i32(loc_3, 10)), 48))
											loc_7 = (if loc_0 < 10 then 1 else 0)
											loc_0 = loc_3
											if loc_7 == 0 then
												continue
											end
											break
										end
										if desired then
											break
										end
										loc_0 = rt_load_i32(memory_at_0, loc_1 + 320)
										reg_0 = loc_1
										if loc_0 >= rt_load_i32(memory_at_0, loc_1 + 324) then
											while true do
												reg_1 = FUNC_LIST[234](rt_add_i32(loc_1, 320), 1)
												reg_1 = rt_load_i32(memory_at_0, loc_1 + 320)
												break
											end
											if desired then
												break
											end
										else
											while true do
												reg_1 = loc_0
												break
											end
											if desired then
												break
											end
										end
										loc_0 = reg_1
										rt_store_i32(memory_at_0, reg_0 + 320, rt_add_i32(loc_0, 1))
										rt_store_i32_n8(memory_at_0, loc_0, 58)
										FUNC_LIST[235](rt_add_i32(loc_1, 320), loc_2, rt_sub_i32(loc_6, loc_2))
										break
									end
									if desired then
										if desired == 4 then
											desired = nil
										end
										break
									end
								end
								if rt_load_i32(memory_at_0, loc_1 + 32) ~= 0 then
									while true do
										FUNC_LIST[235](rt_add_i32(loc_1, 320), 6556, 10)
										loc_0 = rt_load_i32(memory_at_0, loc_1 + 32)
										reg_2 = FUNC_LIST[649](loc_0)
										FUNC_LIST[235](rt_add_i32(loc_1, 320), loc_0, reg_2)
										break
									end
									if desired then
										if desired == 4 then
											desired = nil
										end
										break
									end
								end
								loc_0 = rt_load_i32(memory_at_0, loc_1 + 320)
								reg_0 = loc_1
								if loc_0 >= rt_load_i32(memory_at_0, loc_1 + 324) then
									while true do
										reg_1 = FUNC_LIST[234](rt_add_i32(loc_1, 320), 1)
										reg_1 = rt_load_i32(memory_at_0, loc_1 + 320)
										break
									end
									if desired then
										if desired == 4 then
											desired = nil
										end
										break
									end
								else
									while true do
										reg_1 = loc_0
										break
									end
									if desired then
										if desired == 4 then
											desired = nil
										end
										break
									end
								end
								loc_0 = reg_1
								rt_store_i32(memory_at_0, reg_0 + 320, rt_add_i32(loc_0, 1))
								rt_store_i32_n8(memory_at_0, loc_0, 10)
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
									continue
								end
								break
							end
							loc_5 = rt_add_i32(loc_5, 1)
							reg_0 = FUNC_LIST[58](loc_4, loc_5, 2776, rt_add_i32(loc_1, 32))
							if reg_0 ~= 0 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						break
					end
				end
				FUNC_LIST[239](rt_add_i32(loc_1, 320))
				GLOBAL_LIST[0].value = rt_add_i32(loc_1, 848)
				reg_0 = 1
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[202](loc_0, loc_2, 3810)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[274] = --[[ luaopen_bit32 ]] function(loc_0)
	local reg_0
	while true do
		FUNC_LIST[228](loc_0, 5357, 6896)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[275] = --[[ b_arshift(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		reg_0 = loc_0
		while true do
			reg_1 = FUNC_LIST[222](loc_0, 1)
			loc_2 = reg_1
			reg_2 = FUNC_LIST[220](loc_0, 2)
			loc_1 = reg_2
			if bit_and((if rt_lt_i32(loc_2, 0) then 1 else 0), (if rt_ge_i32(loc_1, 0) then 1 else 0)) == 0 then
				while true do
					loc_3 = rt_sub_i32(0, loc_1)
					reg_1 = (if loc_3 >= 4294967265 then rt_shr_u32(loc_2, loc_1) else 0)
					if rt_gt_i32(loc_1, 0) then
						desired = 1
						break
					end
					reg_1 = (if loc_3 <= 31 then rt_shl_i32(loc_2, loc_3) else 0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_1 = (if loc_1 > 31 then 4294967295 else bit_or(bit_xor(rt_shr_u32(4294967295, loc_1), 4294967295), rt_shr_u32(loc_2, loc_1)))
			break
		end
		loc_1 = reg_1
		FUNC_LIST[143](reg_0, loc_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[276] = --[[ b_and(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	while true do
		loc_1 = 1
		loc_2 = 4294967295
		reg_0 = FUNC_LIST[105](loc_0)
		loc_3 = reg_0
		if rt_gt_i32(loc_3, 0) then
			while true do
				while true do
					reg_0 = FUNC_LIST[222](loc_0, loc_1)
					loc_2 = bit_and(reg_0, loc_2)
					loc_4 = (if loc_1 ~= loc_3 then 1 else 0)
					loc_1 = rt_add_i32(loc_1, 1)
					if loc_4 ~= 0 then
						continue
					end
					break
				end
				break
			end
		end
		FUNC_LIST[143](loc_0, loc_2)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[277] = --[[ b_not(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[222](loc_0, 1)
		FUNC_LIST[143](loc_0, bit_xor(reg_1, 4294967295))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[278] = --[[ b_or(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	while true do
		loc_1 = 1
		reg_0 = FUNC_LIST[105](loc_0)
		loc_3 = reg_0
		if rt_gt_i32(loc_3, 0) then
			while true do
				while true do
					reg_0 = FUNC_LIST[222](loc_0, loc_1)
					loc_2 = bit_or(reg_0, loc_2)
					loc_4 = (if loc_1 ~= loc_3 then 1 else 0)
					loc_1 = rt_add_i32(loc_1, 1)
					if loc_4 ~= 0 then
						continue
					end
					break
				end
				break
			end
		end
		FUNC_LIST[143](loc_0, loc_2)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[279] = --[[ b_xor(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	while true do
		loc_1 = 1
		reg_0 = FUNC_LIST[105](loc_0)
		loc_3 = reg_0
		if rt_gt_i32(loc_3, 0) then
			while true do
				while true do
					reg_0 = FUNC_LIST[222](loc_0, loc_1)
					loc_2 = bit_xor(reg_0, loc_2)
					loc_4 = (if loc_1 ~= loc_3 then 1 else 0)
					loc_1 = rt_add_i32(loc_1, 1)
					if loc_4 ~= 0 then
						continue
					end
					break
				end
				break
			end
		end
		FUNC_LIST[143](loc_0, loc_2)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[280] = --[[ b_test(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	while true do
		loc_1 = 1
		reg_1 = FUNC_LIST[105](loc_0)
		loc_3 = reg_1
		reg_0 = loc_0
		if rt_gt_i32(loc_3, 0) then
			while true do
				loc_2 = 4294967295
				while true do
					reg_1 = FUNC_LIST[222](loc_0, loc_1)
					loc_2 = bit_and(reg_1, loc_2)
					loc_4 = (if loc_1 ~= loc_3 then 1 else 0)
					loc_1 = rt_add_i32(loc_1, 1)
					if loc_4 ~= 0 then
						continue
					end
					break
				end
				reg_1 = (if loc_2 ~= 0 then 1 else 0)
				break
			end
		else
			while true do
				reg_1 = loc_1
				break
			end
		end
		loc_1 = reg_1
		FUNC_LIST[150](reg_0, loc_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[281] = --[[ b_extract(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[222](loc_0, 1)
		loc_3 = reg_0
		reg_0 = FUNC_LIST[220](loc_0, 2)
		loc_1 = reg_0
		reg_0 = FUNC_LIST[221](loc_0, 3, 1)
		loc_2 = reg_0
		while true do
			while true do
				if rt_ge_i32(loc_1, 0) then
					while true do
						if rt_le_i32(loc_2, 0) then
							desired = 2
							break
						end
						if rt_add_i32(loc_1, loc_2) >= 33 then
							desired = 1
							break
						end
						FUNC_LIST[143](loc_0, bit_and(bit_xor(rt_shl_i32(4294967294, rt_sub_i32(loc_2, 1)), 4294967295), rt_shr_u32(loc_3, loc_1)))
						reg_0 = 1
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[202](loc_0, 2, 3785)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[202](loc_0, 3, 3735)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[203](loc_0, 1904, 0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[282] = --[[ b_lrot(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	local reg_1
	while true do
		reg_0 = FUNC_LIST[220](loc_0, 2)
		loc_1 = reg_0
		reg_1 = FUNC_LIST[222](loc_0, 1)
		loc_2 = reg_1
		FUNC_LIST[143](loc_0, (if bit_and(loc_1, 31) ~= 0 then rt_rotl_i32(loc_2, loc_1) else loc_2))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[283] = --[[ b_lshift(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		reg_0 = FUNC_LIST[222](loc_0, 1)
		loc_2 = reg_0
		reg_0 = loc_0
		while true do
			reg_1 = FUNC_LIST[220](loc_0, 2)
			loc_1 = reg_1
			if rt_lt_i32(loc_1, 0) then
				while true do
					reg_1 = 0
					if loc_1 < 4294967265 then
						desired = 1
						break
					end
					reg_1 = rt_shr_u32(loc_2, rt_sub_i32(0, loc_1))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_1 = (if loc_1 <= 31 then rt_shl_i32(loc_2, loc_1) else 0)
			break
		end
		FUNC_LIST[143](reg_0, reg_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[284] = --[[ b_replace(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[222](loc_0, 1)
		loc_3 = reg_0
		reg_0 = FUNC_LIST[222](loc_0, 2)
		loc_4 = reg_0
		reg_0 = FUNC_LIST[220](loc_0, 3)
		loc_2 = reg_0
		reg_0 = FUNC_LIST[221](loc_0, 4, 1)
		loc_1 = reg_0
		while true do
			while true do
				if rt_ge_i32(loc_2, 0) then
					while true do
						if rt_le_i32(loc_1, 0) then
							desired = 2
							break
						end
						if rt_add_i32(loc_1, loc_2) >= 33 then
							desired = 1
							break
						end
						loc_1 = bit_xor(rt_shl_i32(4294967294, rt_sub_i32(loc_1, 1)), 4294967295)
						FUNC_LIST[143](loc_0, bit_or(bit_and(bit_xor(rt_shl_i32(loc_1, loc_2), 4294967295), loc_3), rt_shl_i32(bit_and(loc_1, loc_4), loc_2)))
						reg_0 = 1
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[202](loc_0, 3, 3785)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[202](loc_0, 4, 3735)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[203](loc_0, 1904, 0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[285] = --[[ b_rrot(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	local reg_1
	while true do
		reg_0 = FUNC_LIST[220](loc_0, 2)
		loc_1 = reg_0
		reg_1 = FUNC_LIST[222](loc_0, 1)
		loc_2 = reg_1
		loc_1 = rt_sub_i32(0, loc_1)
		FUNC_LIST[143](loc_0, (if bit_and(loc_1, 31) ~= 0 then rt_rotl_i32(loc_2, loc_1) else loc_2))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[286] = --[[ b_rshift(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local reg_1
	while true do
		reg_0 = FUNC_LIST[222](loc_0, 1)
		loc_3 = reg_0
		reg_1 = FUNC_LIST[220](loc_0, 2)
		loc_1 = reg_1
		loc_2 = rt_sub_i32(0, loc_1)
		reg_0 = loc_0
		if rt_gt_i32(loc_1, 0) then
			while true do
				reg_1 = (if loc_2 >= 4294967265 then rt_shr_u32(loc_3, loc_1) else 0)
				break
			end
		else
			while true do
				reg_1 = (if loc_2 <= 31 then rt_shl_i32(loc_3, loc_2) else 0)
				break
			end
		end
		loc_1 = reg_1
		FUNC_LIST[143](reg_0, loc_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[287] = --[[ b_countlz(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[222](loc_0, 1)
		loc_3 = reg_0
		while true do
			while true do
				while true do
					while true do
						loc_1 = rt_shl_i32(loc_3, loc_2)
						if bit_and(loc_1, 2147483648) ~= 0 then
							while true do
								loc_1 = loc_2
								desired = 1
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						if bit_and(loc_1, 1073741824) ~= 0 then
							desired = 2
							break
						end
						if bit_and(loc_1, 536870912) ~= 0 then
							desired = 3
							break
						end
						if bit_and(loc_1, 268435456) == 0 then
							while true do
								loc_1 = 32
								loc_2 = rt_add_i32(loc_2, 4)
								if loc_2 ~= 32 then
									desired = 4
									break
								end
								desired = 1
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = bit_or(loc_2, 3)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_1 = bit_or(loc_2, 2)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = bit_or(loc_2, 1)
			break
		end
		FUNC_LIST[143](loc_0, loc_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[288] = --[[ b_countrz(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[222](loc_0, 1)
		loc_3 = reg_0
		while true do
			while true do
				while true do
					while true do
						loc_1 = rt_shr_u32(loc_3, loc_2)
						if bit_and(loc_1, 1) ~= 0 then
							while true do
								loc_1 = loc_2
								desired = 1
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						if bit_and(loc_1, 2) ~= 0 then
							desired = 2
							break
						end
						if bit_and(loc_1, 4) ~= 0 then
							desired = 3
							break
						end
						if bit_and(loc_1, 8) == 0 then
							while true do
								loc_1 = 32
								loc_2 = rt_add_i32(loc_2, 4)
								if loc_2 ~= 32 then
									desired = 4
									break
								end
								desired = 1
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = bit_or(loc_2, 3)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_1 = bit_or(loc_2, 2)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = bit_or(loc_2, 1)
			break
		end
		FUNC_LIST[143](loc_0, loc_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[289] = --[[ b_swap(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[222](loc_0, 1)
		loc_1 = reg_1
		FUNC_LIST[143](loc_0, bit_or(bit_or(rt_shl_i32(loc_1, 24), rt_shl_i32(bit_and(loc_1, 65280), 8)), bit_or(bit_and(rt_shr_u32(loc_1, 8), 65280), rt_shr_u32(loc_1, 24))))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[290] = --[[ luaopen_buffer ]] function(loc_0)
	local reg_0
	while true do
		FUNC_LIST[228](loc_0, 2442, 7024)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[291] = --[[ buffer_create(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[220](loc_0, 1)
		loc_1 = reg_0
		if rt_lt_i32(loc_1, 0) then
			while true do
				FUNC_LIST[202](loc_0, 1, 3680)
				error("out of code bounds")
			end
		end
		reg_0 = FUNC_LIST[186](loc_0, loc_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[292] = --[[ buffer_fromstring(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		rt_store_i32(memory_at_0, loc_1 + 12, 0)
		reg_0 = FUNC_LIST[209](loc_0, 1, rt_add_i32(loc_1, 12))
		loc_2 = reg_0
		reg_0 = FUNC_LIST[186](loc_0, rt_load_i32(memory_at_0, loc_1 + 12))
		reg_0 = FUNC_LIST[609](reg_0, loc_2, rt_load_i32(memory_at_0, loc_1 + 12))
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[293] = --[[ buffer_tostring(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	local reg_1
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		rt_store_i32(memory_at_0, loc_1 + 12, 0)
		reg_1 = FUNC_LIST[212](loc_0, 1, rt_add_i32(loc_1, 12))
		FUNC_LIST[145](loc_0, reg_1, rt_load_i32(memory_at_0, loc_1 + 12))
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[294] = --[[ int buffer_readinteger<signed char>(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		rt_store_i32(memory_at_0, loc_1 + 12, 0)
		reg_0 = FUNC_LIST[212](loc_0, 1, rt_add_i32(loc_1, 12))
		loc_2 = reg_0
		reg_0 = FUNC_LIST[220](loc_0, 2)
		loc_3 = reg_0
		if loc_3 >= rt_load_i32(memory_at_0, loc_1 + 12) then
			while true do
				FUNC_LIST[203](loc_0, 2032, 0)
				error("out of code bounds")
			end
		end
		FUNC_LIST[141](loc_0, rt_convert_f64_i32(rt_load_i32_i8(memory_at_0, rt_add_i32(loc_2, loc_3))))
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[295] = --[[ int buffer_readinteger<unsigned char>(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		rt_store_i32(memory_at_0, loc_1 + 12, 0)
		reg_0 = FUNC_LIST[212](loc_0, 1, rt_add_i32(loc_1, 12))
		loc_2 = reg_0
		reg_0 = FUNC_LIST[220](loc_0, 2)
		loc_3 = reg_0
		if loc_3 >= rt_load_i32(memory_at_0, loc_1 + 12) then
			while true do
				FUNC_LIST[203](loc_0, 2032, 0)
				error("out of code bounds")
			end
		end
		FUNC_LIST[141](loc_0, no_op(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, loc_3))))
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[296] = --[[ int buffer_readinteger<short>(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		rt_store_i32(memory_at_0, loc_1 + 12, 0)
		reg_0 = FUNC_LIST[212](loc_0, 1, rt_add_i32(loc_1, 12))
		loc_2 = reg_0
		reg_0 = FUNC_LIST[220](loc_0, 2)
		loc_3 = reg_0
		if rt_gt_u64(rt_add_i64(rt_extend_i64_u32(loc_3), rt_i64_from_u32(2, 0)), rt_load_i64_u32(memory_at_0, loc_1 + 12)) then
			while true do
				FUNC_LIST[203](loc_0, 2032, 0)
				error("out of code bounds")
			end
		end
		FUNC_LIST[141](loc_0, rt_convert_f64_i32(rt_load_i32_i16(memory_at_0, rt_add_i32(loc_2, loc_3))))
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[297] = --[[ int buffer_readinteger<unsigned short>(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		rt_store_i32(memory_at_0, loc_1 + 12, 0)
		reg_0 = FUNC_LIST[212](loc_0, 1, rt_add_i32(loc_1, 12))
		loc_2 = reg_0
		reg_0 = FUNC_LIST[220](loc_0, 2)
		loc_3 = reg_0
		if rt_gt_u64(rt_add_i64(rt_extend_i64_u32(loc_3), rt_i64_from_u32(2, 0)), rt_load_i64_u32(memory_at_0, loc_1 + 12)) then
			while true do
				FUNC_LIST[203](loc_0, 2032, 0)
				error("out of code bounds")
			end
		end
		FUNC_LIST[141](loc_0, no_op(rt_load_i32_u16(memory_at_0, rt_add_i32(loc_2, loc_3))))
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[298] = --[[ int buffer_readinteger<int>(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		rt_store_i32(memory_at_0, loc_1 + 12, 0)
		reg_0 = FUNC_LIST[212](loc_0, 1, rt_add_i32(loc_1, 12))
		loc_2 = reg_0
		reg_0 = FUNC_LIST[220](loc_0, 2)
		loc_3 = reg_0
		if rt_gt_u64(rt_add_i64(rt_extend_i64_u32(loc_3), rt_i64_from_u32(4, 0)), rt_load_i64_u32(memory_at_0, loc_1 + 12)) then
			while true do
				FUNC_LIST[203](loc_0, 2032, 0)
				error("out of code bounds")
			end
		end
		FUNC_LIST[141](loc_0, rt_convert_f64_i32(rt_load_i32(memory_at_0, rt_add_i32(loc_2, loc_3))))
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[299] = --[[ int buffer_readinteger<unsigned int>(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		rt_store_i32(memory_at_0, loc_1 + 12, 0)
		reg_0 = FUNC_LIST[212](loc_0, 1, rt_add_i32(loc_1, 12))
		loc_2 = reg_0
		reg_0 = FUNC_LIST[220](loc_0, 2)
		loc_3 = reg_0
		if rt_gt_u64(rt_add_i64(rt_extend_i64_u32(loc_3), rt_i64_from_u32(4, 0)), rt_load_i64_u32(memory_at_0, loc_1 + 12)) then
			while true do
				FUNC_LIST[203](loc_0, 2032, 0)
				error("out of code bounds")
			end
		end
		FUNC_LIST[141](loc_0, no_op(rt_load_i32(memory_at_0, rt_add_i32(loc_2, loc_3))))
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[300] = --[[ int buffer_readfp<float, unsigned int>(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		rt_store_i32(memory_at_0, loc_1 + 12, 0)
		reg_0 = FUNC_LIST[212](loc_0, 1, rt_add_i32(loc_1, 12))
		loc_2 = reg_0
		reg_0 = FUNC_LIST[220](loc_0, 2)
		loc_3 = reg_0
		if rt_gt_u64(rt_add_i64(rt_extend_i64_u32(loc_3), rt_i64_from_u32(4, 0)), rt_load_i64_u32(memory_at_0, loc_1 + 12)) then
			while true do
				FUNC_LIST[203](loc_0, 2032, 0)
				error("out of code bounds")
			end
		end
		FUNC_LIST[141](loc_0, no_op(rt_load_f32(memory_at_0, rt_add_i32(loc_2, loc_3))))
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[301] = --[[ int buffer_readfp<double, unsigned long long>(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		rt_store_i32(memory_at_0, loc_1 + 12, 0)
		reg_0 = FUNC_LIST[212](loc_0, 1, rt_add_i32(loc_1, 12))
		loc_2 = reg_0
		reg_0 = FUNC_LIST[220](loc_0, 2)
		loc_3 = reg_0
		if rt_gt_u64(rt_add_i64(rt_extend_i64_u32(loc_3), rt_i64_from_u32(8, 0)), rt_load_i64_u32(memory_at_0, loc_1 + 12)) then
			while true do
				FUNC_LIST[203](loc_0, 2032, 0)
				error("out of code bounds")
			end
		end
		FUNC_LIST[141](loc_0, rt_load_f64(memory_at_0, rt_add_i32(loc_2, loc_3)))
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[302] = --[[ int buffer_writeinteger<signed char>(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		rt_store_i32(memory_at_0, loc_1 + 12, 0)
		reg_0 = FUNC_LIST[212](loc_0, 1, rt_add_i32(loc_1, 12))
		loc_3 = reg_0
		reg_0 = FUNC_LIST[220](loc_0, 2)
		loc_2 = reg_0
		reg_0 = FUNC_LIST[222](loc_0, 3)
		loc_4 = reg_0
		if loc_2 >= rt_load_i32(memory_at_0, loc_1 + 12) then
			while true do
				FUNC_LIST[203](loc_0, 2032, 0)
				error("out of code bounds")
			end
		end
		rt_store_i32_n8(memory_at_0, rt_add_i32(loc_2, loc_3), loc_4)
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[303] = --[[ int buffer_writeinteger<short>(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		rt_store_i32(memory_at_0, loc_1 + 12, 0)
		reg_0 = FUNC_LIST[212](loc_0, 1, rt_add_i32(loc_1, 12))
		loc_3 = reg_0
		reg_0 = FUNC_LIST[220](loc_0, 2)
		loc_2 = reg_0
		reg_0 = FUNC_LIST[222](loc_0, 3)
		loc_4 = reg_0
		if rt_lt_u64(rt_load_i64_u32(memory_at_0, loc_1 + 12), rt_add_i64(rt_extend_i64_u32(loc_2), rt_i64_from_u32(2, 0))) then
			while true do
				FUNC_LIST[203](loc_0, 2032, 0)
				error("out of code bounds")
			end
		end
		rt_store_i32_n16(memory_at_0, rt_add_i32(loc_2, loc_3), loc_4)
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[304] = --[[ int buffer_writeinteger<int>(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		rt_store_i32(memory_at_0, loc_1 + 12, 0)
		reg_0 = FUNC_LIST[212](loc_0, 1, rt_add_i32(loc_1, 12))
		loc_3 = reg_0
		reg_0 = FUNC_LIST[220](loc_0, 2)
		loc_2 = reg_0
		reg_0 = FUNC_LIST[222](loc_0, 3)
		loc_4 = reg_0
		if rt_lt_u64(rt_load_i64_u32(memory_at_0, loc_1 + 12), rt_add_i64(rt_extend_i64_u32(loc_2), rt_i64_from_u32(4, 0))) then
			while true do
				FUNC_LIST[203](loc_0, 2032, 0)
				error("out of code bounds")
			end
		end
		rt_store_i32(memory_at_0, rt_add_i32(loc_2, loc_3), loc_4)
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[305] = --[[ int buffer_writefp<float, unsigned int>(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0.0
	local reg_0
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		rt_store_i32(memory_at_0, loc_1 + 12, 0)
		reg_0 = FUNC_LIST[212](loc_0, 1, rt_add_i32(loc_1, 12))
		loc_3 = reg_0
		reg_0 = FUNC_LIST[220](loc_0, 2)
		loc_2 = reg_0
		reg_0 = FUNC_LIST[216](loc_0, 3)
		loc_4 = reg_0
		if rt_lt_u64(rt_load_i64_u32(memory_at_0, loc_1 + 12), rt_add_i64(rt_extend_i64_u32(loc_2), rt_i64_from_u32(4, 0))) then
			while true do
				FUNC_LIST[203](loc_0, 2032, 0)
				error("out of code bounds")
			end
		end
		rt_store_f32(memory_at_0, rt_add_i32(loc_2, loc_3), no_op(loc_4))
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[306] = --[[ int buffer_writefp<double, unsigned long long>(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0.0
	local reg_0
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		rt_store_i32(memory_at_0, loc_1 + 12, 0)
		reg_0 = FUNC_LIST[212](loc_0, 1, rt_add_i32(loc_1, 12))
		loc_3 = reg_0
		reg_0 = FUNC_LIST[220](loc_0, 2)
		loc_2 = reg_0
		reg_0 = FUNC_LIST[216](loc_0, 3)
		loc_4 = reg_0
		if rt_lt_u64(rt_load_i64_u32(memory_at_0, loc_1 + 12), rt_add_i64(rt_extend_i64_u32(loc_2), rt_i64_from_u32(8, 0))) then
			while true do
				FUNC_LIST[203](loc_0, 2032, 0)
				error("out of code bounds")
			end
		end
		rt_store_f64(memory_at_0, rt_add_i32(loc_2, loc_3), loc_4)
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[307] = --[[ buffer_readstring(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		rt_store_i32(memory_at_0, loc_1 + 12, 0)
		reg_0 = FUNC_LIST[212](loc_0, 1, rt_add_i32(loc_1, 12))
		loc_4 = reg_0
		reg_0 = FUNC_LIST[220](loc_0, 2)
		loc_2 = reg_0
		while true do
			reg_0 = FUNC_LIST[220](loc_0, 3)
			loc_3 = reg_0
			if rt_ge_i32(loc_3, 0) then
				while true do
					if rt_lt_u64(rt_load_i64_u32(memory_at_0, loc_1 + 12), rt_add_i64(rt_extend_i64_u32(loc_3), rt_extend_i64_u32(loc_2))) then
						desired = 1
						break
					end
					FUNC_LIST[145](loc_0, rt_add_i32(loc_2, loc_4), loc_3)
					GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
					reg_0 = 1
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[202](loc_0, 3, 3680)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[203](loc_0, 2032, 0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[308] = --[[ buffer_writestring(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		rt_store_i32(memory_at_0, loc_1 + 12, 0)
		reg_0 = FUNC_LIST[212](loc_0, 1, rt_add_i32(loc_1, 12))
		loc_4 = reg_0
		reg_0 = FUNC_LIST[220](loc_0, 2)
		loc_3 = reg_0
		rt_store_i32(memory_at_0, loc_1 + 8, 0)
		reg_0 = FUNC_LIST[209](loc_0, 3, rt_add_i32(loc_1, 8))
		loc_5 = reg_0
		while true do
			while true do
				reg_0 = FUNC_LIST[221](loc_0, 4, rt_load_i32(memory_at_0, loc_1 + 8))
				loc_2 = reg_0
				if rt_ge_i32(loc_2, 0) then
					while true do
						if rt_load_i32(memory_at_0, loc_1 + 8) < loc_2 then
							desired = 2
							break
						end
						if rt_lt_u64(rt_load_i64_u32(memory_at_0, loc_1 + 12), rt_add_i64(rt_extend_i64_u32(loc_2), rt_extend_i64_u32(loc_3))) then
							desired = 1
							break
						end
						reg_0 = FUNC_LIST[609](rt_add_i32(loc_3, loc_4), loc_5, loc_2)
						GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
						reg_0 = 0
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[202](loc_0, 4, 1665)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[203](loc_0, 1503, 0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[203](loc_0, 2032, 0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[309] = --[[ buffer_len(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		rt_store_i32(memory_at_0, loc_1 + 12, 0)
		reg_0 = FUNC_LIST[212](loc_0, 1, rt_add_i32(loc_1, 12))
		FUNC_LIST[141](loc_0, no_op(rt_load_i32(memory_at_0, loc_1 + 12)))
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[310] = --[[ buffer_copy(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		rt_store_i32(memory_at_0, loc_1 + 12, 0)
		reg_0 = FUNC_LIST[212](loc_0, 1, rt_add_i32(loc_1, 12))
		loc_5 = reg_0
		reg_0 = FUNC_LIST[220](loc_0, 2)
		loc_3 = reg_0
		rt_store_i32(memory_at_0, loc_1 + 8, 0)
		reg_0 = FUNC_LIST[212](loc_0, 3, rt_add_i32(loc_1, 8))
		loc_6 = reg_0
		reg_0 = FUNC_LIST[221](loc_0, 4, 0)
		loc_2 = reg_0
		reg_0 = FUNC_LIST[221](loc_0, 5, rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 8), loc_2))
		loc_4 = reg_0
		if rt_ge_i32(loc_4, 0) then
			while true do
				while true do
					loc_7 = rt_extend_i64_u32(loc_4)
					if rt_lt_u64(rt_load_i64_u32(memory_at_0, loc_1 + 8), rt_add_i64(loc_7, rt_extend_i64_u32(loc_2))) then
						break
					end
					if rt_lt_u64(rt_load_i64_u32(memory_at_0, loc_1 + 12), rt_add_i64(rt_extend_i64_u32(loc_3), loc_7)) then
						break
					end
					reg_0 = FUNC_LIST[610](rt_add_i32(loc_3, loc_5), rt_add_i32(loc_2, loc_6), loc_4)
					GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
					reg_0 = 0
					desired = 0
					break
				end
				if desired then
					break
				end
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[203](loc_0, 2032, 0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[311] = --[[ buffer_fill(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		rt_store_i32(memory_at_0, loc_1 + 12, 0)
		reg_0 = FUNC_LIST[212](loc_0, 1, rt_add_i32(loc_1, 12))
		loc_4 = reg_0
		reg_0 = FUNC_LIST[220](loc_0, 2)
		loc_2 = reg_0
		reg_0 = FUNC_LIST[222](loc_0, 3)
		loc_5 = reg_0
		while true do
			reg_0 = FUNC_LIST[221](loc_0, 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 12), loc_2))
			loc_3 = reg_0
			if rt_ge_i32(loc_3, 0) then
				while true do
					if rt_lt_u64(rt_load_i64_u32(memory_at_0, loc_1 + 12), rt_add_i64(rt_extend_i64_u32(loc_3), rt_extend_i64_u32(loc_2))) then
						desired = 1
						break
					end
					reg_0 = FUNC_LIST[611](rt_add_i32(loc_2, loc_4), loc_5, loc_3)
					GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
					reg_0 = 0
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[203](loc_0, 2032, 0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[203](loc_0, 2032, 0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[312] = --[[ luaL_openlibs ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	while true do
		loc_1 = 7232
		loc_2 = 86
		while true do
			FUNC_LIST[149](loc_0, loc_2, 0, 0, 0)
			FUNC_LIST[146](loc_0, rt_load_i32(memory_at_0, loc_1))
			FUNC_LIST[171](loc_0, 1, 0)
			loc_2 = rt_load_i32(memory_at_0, loc_1 + 12)
			loc_1 = rt_add_i32(loc_1, 8)
			if loc_2 ~= 0 then
				continue
			end
			break
		end
		break
	end
end
FUNC_LIST[313] = --[[ luaL_sandbox ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		FUNC_LIST[140](loc_0)
		reg_0 = FUNC_LIST[180](loc_0, 4294957294)
		if reg_0 ~= 0 then
			while true do
				while true do
					reg_0 = FUNC_LIST[111](loc_0, 4294967295)
					if reg_0 == 6 then
						while true do
							FUNC_LIST[159](loc_0, 4294967295, 1)
							break
						end
					end
					FUNC_LIST[106](loc_0, 4294967294)
					reg_0 = FUNC_LIST[180](loc_0, 4294957294)
					if reg_0 ~= 0 then
						continue
					end
					break
				end
				break
			end
		end
		FUNC_LIST[145](loc_0, 6597, 0)
		reg_1 = FUNC_LIST[162](loc_0, 4294967295)
		reg_0 = loc_0
		if reg_1 ~= 0 then
			while true do
				FUNC_LIST[159](loc_0, 4294967295, 1)
				reg_1 = 4294967293
				break
			end
		else
			while true do
				reg_1 = 4294967294
				break
			end
		end
		FUNC_LIST[106](reg_0, reg_1)
		FUNC_LIST[159](loc_0, 4294957294, 1)
		FUNC_LIST[161](loc_0, 4294957294, 1)
		break
	end
end
FUNC_LIST[314] = --[[ luaL_sandboxthread ]] function(loc_0)
	local reg_0
	while true do
		FUNC_LIST[158](loc_0, 0, 0)
		FUNC_LIST[158](loc_0, 0, 0)
		FUNC_LIST[110](loc_0, 4294957294)
		FUNC_LIST[165](loc_0, 4294967294, 1355)
		FUNC_LIST[159](loc_0, 4294967295, 1)
		reg_0 = FUNC_LIST[169](loc_0, 4294967294)
		FUNC_LIST[109](loc_0, 4294957294)
		FUNC_LIST[161](loc_0, 4294957294, 1)
		break
	end
end
FUNC_LIST[315] = --[[ luaL_newstate ]] function()
	local reg_0
	while true do
		reg_0 = FUNC_LIST[380](87, 0)
		break
	end
	return reg_0
end
FUNC_LIST[316] = --[[ l_alloc(void*, void*, unsigned long, unsigned long) ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	local desired
	while true do
		if loc_3 == 0 then
			while true do
				FUNC_LIST[654](loc_1)
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = FUNC_LIST[655](loc_1, loc_3)
		break
	end
	return reg_0
end
FUNC_LIST[317] = --[[ luaopen_math ]] function(loc_0)
	local loc_1 = rt_i64_ZERO
	local loc_2 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[715](0)
		loc_1 = reg_0
		reg_0 = FUNC_LIST[714]()
		loc_2 = reg_0
		rt_store_i64(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1656, rt_add_i64(rt_mul_i64(rt_bit_xor_i64(rt_extend_i64_i32(loc_2), rt_bit_xor_i64(rt_extend_i64_u32(loc_0), loc_1)), rt_i64_from_u32(1284865837, 1481765933)), rt_i64_from_u32(1766926814, 966600340)))
		FUNC_LIST[228](loc_0, 3114, 7328)
		FUNC_LIST[141](loc_0, 3.141592653589793e0)
		FUNC_LIST[165](loc_0, 4294967294, 3096)
		FUNC_LIST[141](loc_0, math.huge)
		FUNC_LIST[165](loc_0, 4294967294, 4488)
		if rt_load_i32_u8(memory_at_0, 35144) == 1 then
			while true do
				FUNC_LIST[149](loc_0, 98, 2635, 0, 0)
				FUNC_LIST[165](loc_0, 4294967294, 2635)
				break
			end
		end
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[318] = --[[ math_map(lua_State*) ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0.0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	while true do
		reg_0 = FUNC_LIST[216](loc_0, 1)
		loc_2 = reg_0
		reg_0 = FUNC_LIST[216](loc_0, 2)
		loc_1 = reg_0
		reg_0 = FUNC_LIST[216](loc_0, 3)
		loc_3 = reg_0
		reg_1 = FUNC_LIST[216](loc_0, 4)
		loc_4 = reg_1
		reg_3 = FUNC_LIST[216](loc_0, 5)
		FUNC_LIST[141](loc_0, (loc_4 + (((loc_2 - loc_1) * (reg_3 - loc_4)) / (loc_3 - loc_1))))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[319] = --[[ math_abs(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[216](loc_0, 1)
		FUNC_LIST[141](loc_0, math_abs(reg_1))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[320] = --[[ math_acos(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[216](loc_0, 1)
		reg_1 = FUNC_LIST[697](reg_1)
		FUNC_LIST[141](loc_0, reg_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[321] = --[[ math_asin(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[216](loc_0, 1)
		reg_1 = FUNC_LIST[700](reg_1)
		FUNC_LIST[141](loc_0, reg_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[322] = --[[ math_atan2(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	local reg_2
	while true do
		reg_1 = FUNC_LIST[216](loc_0, 1)
		reg_2 = FUNC_LIST[216](loc_0, 2)
		reg_1 = FUNC_LIST[703](reg_1, reg_2)
		FUNC_LIST[141](loc_0, reg_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[323] = --[[ math_atan(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[216](loc_0, 1)
		reg_1 = FUNC_LIST[702](reg_1)
		FUNC_LIST[141](loc_0, reg_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[324] = --[[ math_ceil(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[216](loc_0, 1)
		FUNC_LIST[141](loc_0, math_ceil(reg_1))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[325] = --[[ math_cosh(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[216](loc_0, 1)
		reg_1 = FUNC_LIST[710](reg_1)
		FUNC_LIST[141](loc_0, reg_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[326] = --[[ math_cos(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[216](loc_0, 1)
		reg_1 = FUNC_LIST[704](reg_1)
		FUNC_LIST[141](loc_0, reg_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[327] = --[[ math_deg(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[216](loc_0, 1)
		FUNC_LIST[141](loc_0, (reg_1 / 1.7453292519943295e-2))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[328] = --[[ math_exp(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[216](loc_0, 1)
		reg_1 = FUNC_LIST[615](reg_1)
		FUNC_LIST[141](loc_0, reg_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[329] = --[[ math_floor(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[216](loc_0, 1)
		FUNC_LIST[141](loc_0, math_floor(reg_1))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[330] = --[[ math_fmod(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	local reg_2
	while true do
		reg_1 = FUNC_LIST[216](loc_0, 1)
		reg_2 = FUNC_LIST[216](loc_0, 2)
		reg_1 = FUNC_LIST[620](reg_1, reg_2)
		FUNC_LIST[141](loc_0, reg_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[331] = --[[ math_frexp(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	local reg_1
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		reg_1 = FUNC_LIST[216](loc_0, 1)
		reg_1 = FUNC_LIST[717](reg_1, rt_add_i32(loc_1, 12))
		FUNC_LIST[141](loc_0, reg_1)
		FUNC_LIST[142](loc_0, rt_load_i32(memory_at_0, loc_1 + 12))
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = 2
		break
	end
	return reg_0
end
FUNC_LIST[332] = --[[ math_ldexp(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	local reg_2
	while true do
		reg_1 = FUNC_LIST[216](loc_0, 1)
		reg_2 = FUNC_LIST[220](loc_0, 2)
		reg_1 = FUNC_LIST[634](reg_1, reg_2)
		FUNC_LIST[141](loc_0, reg_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[333] = --[[ math_log10(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[216](loc_0, 1)
		reg_1 = FUNC_LIST[640](reg_1)
		FUNC_LIST[141](loc_0, reg_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[334] = --[[ math_log(lua_State*) ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		reg_0 = FUNC_LIST[216](loc_0, 1)
		loc_1 = reg_0
		reg_0 = loc_0
		while true do
			reg_1 = FUNC_LIST[111](loc_0, 2)
			if rt_le_i32(reg_1, 0) then
				while true do
					reg_1 = FUNC_LIST[638](loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_1 = FUNC_LIST[216](loc_0, 2)
			loc_2 = reg_1
			if loc_2 == 2e0 then
				while true do
					reg_1 = FUNC_LIST[641](loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_2 == 1e1 then
				while true do
					reg_1 = FUNC_LIST[640](loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_1 = FUNC_LIST[638](loc_1)
			reg_2 = FUNC_LIST[638](loc_2)
			reg_1 = (reg_1 / reg_2)
			break
		end
		loc_1 = reg_1
		FUNC_LIST[141](reg_0, loc_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[335] = --[[ math_max(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local reg_0
	while true do
		loc_1 = 2
		reg_0 = FUNC_LIST[105](loc_0)
		loc_2 = reg_0
		reg_0 = FUNC_LIST[216](loc_0, 1)
		loc_4 = reg_0
		if rt_ge_i32(loc_2, 2) then
			while true do
				while true do
					reg_0 = FUNC_LIST[216](loc_0, loc_1)
					loc_5 = reg_0
					loc_4 = (if loc_4 < loc_5 then loc_5 else loc_4)
					loc_3 = (if loc_1 ~= loc_2 then 1 else 0)
					loc_1 = rt_add_i32(loc_1, 1)
					if loc_3 ~= 0 then
						continue
					end
					break
				end
				break
			end
		end
		FUNC_LIST[141](loc_0, loc_4)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[336] = --[[ math_min(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local reg_0
	while true do
		loc_1 = 2
		reg_0 = FUNC_LIST[105](loc_0)
		loc_2 = reg_0
		reg_0 = FUNC_LIST[216](loc_0, 1)
		loc_4 = reg_0
		if rt_ge_i32(loc_2, 2) then
			while true do
				while true do
					reg_0 = FUNC_LIST[216](loc_0, loc_1)
					loc_5 = reg_0
					loc_4 = (if loc_4 > loc_5 then loc_5 else loc_4)
					loc_3 = (if loc_1 ~= loc_2 then 1 else 0)
					loc_1 = rt_add_i32(loc_1, 1)
					if loc_3 ~= 0 then
						continue
					end
					break
				end
				break
			end
		end
		FUNC_LIST[141](loc_0, loc_4)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[337] = --[[ math_modf(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0.0
	local reg_0
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		reg_0 = FUNC_LIST[216](loc_0, 1)
		reg_0 = FUNC_LIST[734](reg_0, rt_add_i32(loc_1, 8))
		loc_2 = reg_0
		FUNC_LIST[141](loc_0, rt_load_f64(memory_at_0, loc_1 + 8))
		FUNC_LIST[141](loc_0, loc_2)
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = 2
		break
	end
	return reg_0
end
FUNC_LIST[338] = --[[ math_pow(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	local reg_2
	while true do
		reg_1 = FUNC_LIST[216](loc_0, 1)
		reg_2 = FUNC_LIST[216](loc_0, 2)
		reg_1 = FUNC_LIST[642](reg_1, reg_2)
		FUNC_LIST[141](loc_0, reg_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[339] = --[[ math_rad(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[216](loc_0, 1)
		FUNC_LIST[141](loc_0, (reg_1 * 1.7453292519943295e-2))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[340] = --[[ math_random(lua_State*) ]] function(loc_0)
	local loc_1 = rt_i64_ZERO
	local loc_2 = rt_i64_ZERO
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 16)
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									reg_0 = FUNC_LIST[105](loc_0)
									if not br_map[1] then
										br_map[1] = (function()
											return { [0] = 3, 0, 1, }
										end)()
									end
									temp = br_map[1][reg_0] or 2
									if temp < 2 then
										if temp < 1 then
											break
										else
											desired = 6
											break
										end
									elseif temp > 2 then
										desired = 4
										break
									else
										desired = 5
										break
									end
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = FUNC_LIST[220](loc_0, 1)
								loc_4 = reg_0
								if rt_le_i32(loc_4, 0) then
									desired = 3
									break
								end
								loc_1 = rt_load_i64(memory_at_0, loc_3 + 1656)
								rt_store_i64(memory_at_0, loc_3 + 1656, rt_add_i64(rt_mul_i64(loc_1, rt_i64_from_u32(1284865837, 1481765933)), rt_i64_from_u32(105, 0)))
								FUNC_LIST[142](loc_0, rt_add_i32(rt_wrap_i32_i64(rt_shr_u64(rt_mul_i64(rt_extend_i64_u32(rt_rotr_i32(rt_wrap_i32_i64(rt_bit_xor_i64(rt_shr_u64(loc_1, rt_i64_from_u32(45, 0)), rt_shr_u64(loc_1, rt_i64_from_u32(27, 0)))), rt_wrap_i32_i64(rt_shr_u64(loc_1, rt_i64_from_u32(59, 0))))), rt_extend_i64_u32(loc_4)), rt_i64_from_u32(32, 0))), 1))
								reg_0 = 1
								desired = 0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[220](loc_0, 1)
							loc_4 = reg_0
							reg_1 = FUNC_LIST[220](loc_0, 2)
							loc_5 = reg_1
							if rt_gt_i32(loc_4, loc_5) then
								desired = 2
								break
							end
							loc_5 = rt_sub_i32(loc_5, loc_4)
							if loc_5 == 4294967295 then
								desired = 1
								break
							end
							loc_1 = rt_load_i64(memory_at_0, loc_3 + 1656)
							rt_store_i64(memory_at_0, loc_3 + 1656, rt_add_i64(rt_mul_i64(loc_1, rt_i64_from_u32(1284865837, 1481765933)), rt_i64_from_u32(105, 0)))
							FUNC_LIST[142](loc_0, rt_add_i32(rt_wrap_i32_i64(rt_shr_u64(rt_mul_i64(rt_extend_i64_u32(rt_rotr_i32(rt_wrap_i32_i64(rt_bit_xor_i64(rt_shr_u64(loc_1, rt_i64_from_u32(45, 0)), rt_shr_u64(loc_1, rt_i64_from_u32(27, 0)))), rt_wrap_i32_i64(rt_shr_u64(loc_1, rt_i64_from_u32(59, 0))))), rt_extend_i64_u32(rt_add_i32(loc_5, 1))), rt_i64_from_u32(32, 0))), loc_4))
							reg_0 = 1
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[203](loc_0, 1861, 0)
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = rt_load_i64(memory_at_0, loc_3 + 1656)
					rt_store_i64(memory_at_0, loc_3 + 1656, rt_add_i64(rt_mul_i64(loc_1, rt_i64_from_u32(26193385, 1751095458)), rt_i64_from_u32(1766926814, 966600340)))
					loc_2 = rt_add_i64(rt_mul_i64(loc_1, rt_i64_from_u32(1284865837, 1481765933)), rt_i64_from_u32(105, 0))
					reg_1 = FUNC_LIST[634](rt_convert_f64_u64(rt_bit_or_i64(rt_extend_i64_u32(rt_rotr_i32(rt_wrap_i32_i64(rt_bit_xor_i64(rt_shr_u64(loc_1, rt_i64_from_u32(45, 0)), rt_shr_u64(loc_1, rt_i64_from_u32(27, 0)))), rt_wrap_i32_i64(rt_shr_u64(loc_1, rt_i64_from_u32(59, 0))))), rt_shl_i64(rt_extend_i64_u32(rt_rotr_i32(rt_wrap_i32_i64(rt_bit_xor_i64(rt_shr_u64(loc_2, rt_i64_from_u32(45, 0)), rt_shr_u64(loc_2, rt_i64_from_u32(27, 0)))), rt_wrap_i32_i64(rt_shr_u64(loc_2, rt_i64_from_u32(59, 0))))), rt_i64_from_u32(32, 0)))), 4294967232)
					FUNC_LIST[141](loc_0, reg_1)
					reg_0 = 1
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[202](loc_0, 1, 1094)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[202](loc_0, 2, 1094)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[202](loc_0, 2, 4545)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[341] = --[[ math_randomseed(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[220](loc_0, 1)
		loc_1 = reg_0
		rt_store_i64(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1656, rt_add_i64(rt_mul_i64(rt_extend_i64_i32(loc_1), rt_i64_from_u32(1284865837, 1481765933)), rt_i64_from_u32(1766926814, 966600340)))
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[342] = --[[ math_sinh(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[216](loc_0, 1)
		reg_1 = FUNC_LIST[738](reg_1)
		FUNC_LIST[141](loc_0, reg_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[343] = --[[ math_sin(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[216](loc_0, 1)
		reg_1 = FUNC_LIST[737](reg_1)
		FUNC_LIST[141](loc_0, reg_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[344] = --[[ math_sqrt(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[216](loc_0, 1)
		FUNC_LIST[141](loc_0, math_sqrt(reg_1))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[345] = --[[ math_tanh(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[216](loc_0, 1)
		reg_1 = FUNC_LIST[782](reg_1)
		FUNC_LIST[141](loc_0, reg_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[346] = --[[ math_tan(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[216](loc_0, 1)
		reg_1 = FUNC_LIST[780](reg_1)
		FUNC_LIST[141](loc_0, reg_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[347] = --[[ math_noise(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0.0
	local loc_9 = 0.0
	local loc_10 = 0.0
	local loc_11 = 0.0
	local loc_12 = 0.0
	local loc_13 = 0.0
	local loc_14 = 0.0
	local loc_15 = 0.0
	local loc_16 = 0.0
	local loc_17 = 0.0
	local loc_18 = 0.0
	local loc_19 = 0.0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	local reg_5
	local reg_6
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		reg_0 = FUNC_LIST[121](loc_0, 1, rt_add_i32(loc_3, 12))
		loc_17 = reg_0
		reg_0 = FUNC_LIST[121](loc_0, 2, rt_add_i32(loc_3, 8))
		loc_18 = reg_0
		reg_0 = FUNC_LIST[121](loc_0, 3, rt_add_i32(loc_3, 4))
		loc_19 = reg_0
		while true do
			while true do
				if rt_load_i32(memory_at_0, loc_3 + 12) ~= 0 then
					while true do
						if rt_load_i32(memory_at_0, loc_3 + 8) == 0 then
							while true do
								reg_0 = FUNC_LIST[111](loc_0, 2)
								if rt_gt_i32(reg_0, 0) then
									desired = 2
									break
								end
								break
							end
							if desired then
								break
							end
						end
						if rt_load_i32(memory_at_0, loc_3 + 4) == 0 then
							while true do
								reg_0 = FUNC_LIST[111](loc_0, 3)
								if rt_gt_i32(reg_0, 0) then
									desired = 1
									break
								end
								break
							end
							if desired then
								break
							end
						end
						loc_9 = no_op(loc_18)
						loc_8 = math_floor(loc_9)
						while true do
							loc_12 = no_op(loc_17)
							loc_10 = math_floor(loc_12)
							if math_abs(loc_10) < 2.1474836e9 then
								while true do
									reg_0 = rt_truncate_i32_f32(loc_10)
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							reg_0 = 2147483648
							break
						end
						if desired then
							break
						end
						loc_1 = reg_0
						loc_4 = bit_and(loc_1, 255)
						loc_1 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_4, 7600))
						while true do
							if math_abs(loc_8) < 2.1474836e9 then
								while true do
									reg_0 = rt_truncate_i32_f32(loc_8)
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							reg_0 = 2147483648
							break
						end
						if desired then
							break
						end
						loc_2 = reg_0
						loc_8 = (loc_9 - loc_8)
						loc_5 = bit_and(rt_add_i32(loc_1, loc_2), 255)
						loc_6 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_5, 7600))
						while true do
							loc_11 = no_op(loc_19)
							loc_9 = math_floor(loc_11)
							if math_abs(loc_9) < 2.1474836e9 then
								while true do
									reg_0 = rt_truncate_i32_f32(loc_9)
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							reg_0 = 2147483648
							break
						end
						if desired then
							break
						end
						loc_1 = reg_0
						loc_9 = (loc_11 - loc_9)
						loc_15 = ((loc_8 * (loc_8 * loc_8)) * ((loc_8 * ((loc_8 * 6e0) + -1.5e1)) + 1e1))
						loc_10 = (loc_12 - loc_10)
						loc_12 = ((loc_10 * (loc_10 * loc_10)) * ((loc_10 * ((loc_10 * 6e0) + -1.5e1)) + 1e1))
						loc_4 = bit_and(rt_add_i32(loc_2, rt_load_i32_u8(memory_at_0, rt_add_i32(loc_4, 7601))), 255)
						loc_7 = bit_and(rt_add_i32(loc_1, rt_load_i32_u8(memory_at_0, rt_add_i32(loc_4, 7601))), 255)
						loc_2 = rt_mul_i32(bit_and(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_7, 7601)), 15), 12)
						loc_11 = (loc_9 + -1e0)
						loc_13 = (loc_10 + -1e0)
						loc_14 = (loc_8 + -1e0)
						loc_5 = bit_and(rt_add_i32(loc_1, rt_load_i32_u8(memory_at_0, rt_add_i32(loc_5, 7601))), 255)
						reg_4 = ((rt_load_f32(memory_at_0, rt_add_i32(loc_2, 7880)) * loc_11) + ((rt_load_f32(memory_at_0, rt_add_i32(loc_2, 7872)) * loc_13) + (loc_14 * rt_load_f32(memory_at_0, rt_add_i32(loc_2, 7876)))))
						loc_2 = rt_mul_i32(bit_and(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_5, 7601)), 15), 12)
						loc_16 = ((rt_load_f32(memory_at_0, rt_add_i32(loc_2, 7880)) * loc_11) + ((rt_load_f32(memory_at_0, rt_add_i32(loc_2, 7872)) * loc_10) + (loc_14 * rt_load_f32(memory_at_0, rt_add_i32(loc_2, 7876)))))
						loc_4 = bit_and(rt_add_i32(loc_1, rt_load_i32_u8(memory_at_0, rt_add_i32(loc_4, 7600))), 255)
						loc_2 = rt_mul_i32(bit_and(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_4, 7601)), 15), 12)
						reg_5 = ((rt_load_f32(memory_at_0, rt_add_i32(loc_2, 7880)) * loc_11) + ((rt_load_f32(memory_at_0, rt_add_i32(loc_2, 7872)) * loc_13) + (loc_8 * rt_load_f32(memory_at_0, rt_add_i32(loc_2, 7876)))))
						loc_2 = bit_and(rt_add_i32(loc_1, loc_6), 255)
						loc_1 = rt_mul_i32(bit_and(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, 7601)), 15), 12)
						loc_11 = ((rt_load_f32(memory_at_0, rt_add_i32(loc_1, 7880)) * loc_11) + ((rt_load_f32(memory_at_0, rt_add_i32(loc_1, 7872)) * loc_10) + (loc_8 * rt_load_f32(memory_at_0, rt_add_i32(loc_1, 7876)))))
						loc_11 = ((loc_12 * (reg_5 - loc_11)) + loc_11)
						loc_1 = rt_mul_i32(bit_and(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_7, 7600)), 15), 12)
						reg_5 = ((rt_load_f32(memory_at_0, rt_add_i32(loc_1, 7880)) * loc_9) + ((rt_load_f32(memory_at_0, rt_add_i32(loc_1, 7872)) * loc_13) + (loc_14 * rt_load_f32(memory_at_0, rt_add_i32(loc_1, 7876)))))
						loc_1 = rt_mul_i32(bit_and(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_5, 7600)), 15), 12)
						reg_2 = ((loc_15 * (((loc_12 * (reg_4 - loc_16)) + loc_16) - loc_11)) + loc_11)
						loc_11 = ((rt_load_f32(memory_at_0, rt_add_i32(loc_1, 7880)) * loc_9) + ((rt_load_f32(memory_at_0, rt_add_i32(loc_1, 7872)) * loc_10) + (loc_14 * rt_load_f32(memory_at_0, rt_add_i32(loc_1, 7876)))))
						loc_1 = rt_mul_i32(bit_and(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_4, 7600)), 15), 12)
						reg_6 = ((rt_load_f32(memory_at_0, rt_add_i32(loc_1, 7880)) * loc_9) + ((rt_load_f32(memory_at_0, rt_add_i32(loc_1, 7872)) * loc_13) + (loc_8 * rt_load_f32(memory_at_0, rt_add_i32(loc_1, 7876)))))
						loc_1 = rt_mul_i32(bit_and(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, 7600)), 15), 12)
						loc_8 = ((rt_load_f32(memory_at_0, rt_add_i32(loc_1, 7880)) * loc_9) + ((rt_load_f32(memory_at_0, rt_add_i32(loc_1, 7872)) * loc_10) + (loc_8 * rt_load_f32(memory_at_0, rt_add_i32(loc_1, 7876)))))
						loc_8 = ((loc_12 * (reg_6 - loc_8)) + loc_8)
						loc_8 = ((loc_15 * (((loc_12 * (reg_5 - loc_11)) + loc_11) - loc_8)) + loc_8)
						FUNC_LIST[141](loc_0, no_op(((((loc_9 * (loc_9 * loc_9)) * ((loc_9 * ((loc_9 * 6e0) + -1.5e1)) + 1e1)) * (reg_2 - loc_8)) + loc_8)))
						GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
						reg_0 = 1
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[205](loc_0, 1, 2480)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[205](loc_0, 2, 2480)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[205](loc_0, 3, 2480)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[348] = --[[ math_clamp(lua_State*) ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = 0.0
	local reg_0
	local reg_1
	while true do
		reg_0 = FUNC_LIST[216](loc_0, 1)
		loc_1 = reg_0
		reg_0 = FUNC_LIST[216](loc_0, 2)
		loc_2 = reg_0
		reg_1 = FUNC_LIST[216](loc_0, 3)
		loc_3 = reg_1
		if (if loc_2 <= loc_3 then 1 else 0) == 0 then
			while true do
				FUNC_LIST[202](loc_0, 3, 2785)
				error("out of code bounds")
			end
		end
		loc_1 = (if loc_1 < loc_2 then loc_2 else loc_1)
		FUNC_LIST[141](loc_0, (if loc_1 > loc_3 then loc_3 else loc_1))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[349] = --[[ math_sign(lua_State*) ]] function(loc_0)
	local loc_1 = 0.0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	while true do
		reg_4 = FUNC_LIST[216](loc_0, 1)
		loc_1 = reg_4
		FUNC_LIST[141](loc_0, (if loc_1 > 0e0 then 1e0 else (if loc_1 < 0e0 then -1e0 else 0e0)))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[350] = --[[ math_round(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[216](loc_0, 1)
		reg_1 = FUNC_LIST[736](reg_1)
		FUNC_LIST[141](loc_0, reg_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[351] = --[[ luaM_toobig(lua_State*) ]] function(loc_0)
	while true do
		FUNC_LIST[60](loc_0, 3531, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[352] = --[[ luaM_new_(lua_State*, unsigned long, unsigned char) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 16)
		while true do
			while true do
				while true do
					if rt_sub_i32(loc_1, 1) > 1023 then
						break
					end
					loc_5 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_1, 35316))
					if rt_lt_i32(loc_5, 0) then
						break
					end
					while true do
						while true do
							loc_6 = rt_add_i32(loc_4, 56)
							loc_7 = rt_add_i32(loc_6, rt_shl_i32(bit_and(loc_5, 255), 2))
							loc_3 = rt_load_i32(memory_at_0, loc_7)
							if loc_3 ~= 0 then
								while true do
									reg_0 = loc_3
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							else
								while true do
									reg_0 = FUNC_LIST[353](loc_0, loc_6, 0, bit_and(loc_5, 255), 1)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_3 = reg_0
							loc_5 = rt_load_i32(memory_at_0, loc_3 + 28)
							if rt_ge_i32(loc_5, 0) then
								while true do
									loc_6 = rt_sub_i32(loc_5, rt_load_i32(memory_at_0, loc_3 + 20))
									rt_store_i32(memory_at_0, loc_3 + 28, loc_6)
									rt_store_i32(memory_at_0, loc_3 + 32, rt_add_i32(rt_load_i32(memory_at_0, loc_3 + 32), 1))
									loc_5 = rt_add_i32(rt_add_i32(loc_3, loc_5), 40)
									rt_store_i32(memory_at_0, loc_5, loc_3)
									if rt_load_i32(memory_at_0, loc_3 + 24) ~= 0 then
										desired = 4
										break
									end
									if rt_lt_i32(loc_6, 0) then
										desired = 5
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_5 = rt_load_i32(memory_at_0, loc_3 + 24)
							rt_store_i32(memory_at_0, loc_3 + 24, rt_load_i32(memory_at_0, loc_5))
							rt_store_i32(memory_at_0, loc_3 + 32, rt_add_i32(rt_load_i32(memory_at_0, loc_3 + 32), 1))
							rt_store_i32(memory_at_0, loc_5, loc_3)
							if rt_load_i32(memory_at_0, loc_3 + 24) ~= 0 then
								desired = 4
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_6 = rt_load_i32(memory_at_0, loc_3 + 4)
						rt_store_i32(memory_at_0, loc_7, loc_6)
						if loc_6 ~= 0 then
							while true do
								rt_store_i32(memory_at_0, loc_6, 0)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						rt_store_i32(memory_at_0, loc_3 + 4, 0)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_3 = rt_add_i32(loc_5, 8)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, loc_4 + 12)](rt_load_i32(memory_at_0, loc_4 + 16), 0, 0, loc_1)
				loc_3 = reg_0
				if loc_1 == 0 then
					break
				end
				if loc_3 == 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_4 + 40, rt_add_i32(loc_1, rt_load_i32(memory_at_0, loc_4 + 40)))
			loc_2 = rt_add_i32(rt_shl_i32(loc_2, 2), loc_4)
			rt_store_i32(memory_at_0, loc_2 + 388, rt_add_i32(loc_1, rt_load_i32(memory_at_0, loc_2 + 388)))
			loc_4 = rt_load_i32(memory_at_0, loc_4 + 1732)
			if loc_4 ~= 0 then
				while true do
					TABLE_LIST[0].data[loc_4](loc_0, 0, loc_1)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = loc_3
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[79](loc_0, 4)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[353] = --[[ newclasspage(lua_State*, lua_Page**, lua_Page**, unsigned char, bool) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		loc_5 = rt_load_i32(memory_at_0, loc_0 + 16)
		loc_7 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_3, 2), 35156))
		loc_6 = (if rt_gt_i32(loc_7, 512) then 32744 else 16360)
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, loc_5 + 12)](rt_load_i32(memory_at_0, loc_5 + 16), 0, 0, loc_6)
		loc_5 = reg_0
		if loc_5 ~= 0 then
			while true do
				rt_store_i64(memory_at_0, loc_5, rt_i64_ZERO)
				rt_store_i32(memory_at_0, loc_5 + 32, 0)
				rt_store_i32(memory_at_0, loc_5 + 24, 0)
				rt_store_i32(memory_at_0, loc_5 + 16, loc_6)
				rt_store_i64(memory_at_0, loc_5 + 8, rt_i64_ZERO)
				loc_0 = rt_add_i32((if loc_4 ~= 0 then 8 else 0), loc_7)
				rt_store_i32(memory_at_0, loc_5 + 20, loc_0)
				rt_store_i32(memory_at_0, loc_5 + 28, rt_mul_i32(loc_0, rt_sub_i32(rt_div_u32(rt_sub_i32(loc_6, 40), loc_0), 1)))
				if loc_2 ~= 0 then
					while true do
						loc_6 = rt_load_i32(memory_at_0, loc_2)
						rt_store_i32(memory_at_0, loc_5 + 12, loc_6)
						if loc_6 ~= 0 then
							while true do
								rt_store_i32(memory_at_0, loc_6 + 8, loc_5)
								break
							end
							if desired then
								break
							end
						end
						rt_store_i32(memory_at_0, loc_2, loc_5)
						break
					end
					if desired then
						break
					end
				end
				rt_store_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_3, 2), loc_1), loc_5)
				reg_0 = loc_5
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[79](loc_0, 4)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[354] = --[[ luaM_newgco_(lua_State*, unsigned long, unsigned char) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		loc_5 = rt_load_i32(memory_at_0, loc_0 + 16)
		while true do
			while true do
				while true do
					if rt_sub_i32(loc_1, 1) > 1023 then
						break
					end
					loc_4 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_1, 35316))
					if rt_lt_i32(loc_4, 0) then
						break
					end
					while true do
						loc_6 = rt_add_i32(loc_5, 216)
						loc_7 = rt_add_i32(loc_6, rt_shl_i32(bit_and(loc_4, 255), 2))
						loc_3 = rt_load_i32(memory_at_0, loc_7)
						if loc_3 ~= 0 then
							while true do
								reg_0 = loc_3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = FUNC_LIST[353](loc_0, loc_6, rt_add_i32(loc_5, 380), bit_and(loc_4, 255), 0)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_3 = reg_0
						loc_4 = rt_load_i32(memory_at_0, loc_3 + 28)
						if rt_ge_i32(loc_4, 0) then
							while true do
								loc_6 = rt_sub_i32(loc_4, rt_load_i32(memory_at_0, loc_3 + 20))
								rt_store_i32(memory_at_0, loc_3 + 28, loc_6)
								rt_store_i32(memory_at_0, loc_3 + 32, rt_add_i32(rt_load_i32(memory_at_0, loc_3 + 32), 1))
								loc_4 = rt_add_i32(rt_add_i32(loc_3, loc_4), 40)
								if rt_load_i32(memory_at_0, loc_3 + 24) ~= 0 then
									desired = 2
									break
								end
								if rt_lt_i32(loc_6, 0) then
									desired = 4
									break
								end
								desired = 2
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_4 = rt_load_i32(memory_at_0, loc_3 + 24)
						loc_6 = rt_load_i32(memory_at_0, loc_4 + 4)
						rt_store_i32(memory_at_0, loc_3 + 24, loc_6)
						rt_store_i32(memory_at_0, loc_3 + 32, rt_add_i32(rt_load_i32(memory_at_0, loc_3 + 32), 1))
						if loc_6 ~= 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_6 = rt_load_i32(memory_at_0, loc_3 + 4)
					rt_store_i32(memory_at_0, loc_7, loc_6)
					if loc_6 ~= 0 then
						while true do
							rt_store_i32(memory_at_0, loc_6, 0)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					rt_store_i32(memory_at_0, loc_3 + 4, 0)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_4 = rt_add_i32(loc_1, 40)
				reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, loc_5 + 12)](rt_load_i32(memory_at_0, loc_5 + 16), 0, 0, loc_4)
				loc_3 = reg_0
				if loc_3 == 0 then
					desired = 1
					break
				end
				rt_store_i64(memory_at_0, loc_3, rt_i64_ZERO)
				rt_store_i32(memory_at_0, loc_3 + 24, 0)
				rt_store_i32(memory_at_0, loc_3 + 20, loc_1)
				rt_store_i32(memory_at_0, loc_3 + 16, loc_4)
				rt_store_i64(memory_at_0, loc_3 + 8, rt_i64_ZERO)
				loc_4 = rt_load_i32(memory_at_0, loc_5 + 380)
				rt_store_i32(memory_at_0, loc_3 + 12, loc_4)
				if loc_4 ~= 0 then
					while true do
						rt_store_i32(memory_at_0, loc_4 + 8, loc_3)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				rt_store_i32(memory_at_0, loc_5 + 380, loc_3)
				rt_store_i32(memory_at_0, loc_3 + 32, 1)
				rt_store_i32(memory_at_0, loc_3 + 28, rt_sub_i32(0, loc_1))
				loc_4 = rt_add_i32(loc_3, 40)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_5 + 40, rt_add_i32(loc_1, rt_load_i32(memory_at_0, loc_5 + 40)))
			loc_3 = rt_add_i32(rt_shl_i32(loc_2, 2), loc_5)
			rt_store_i32(memory_at_0, loc_3 + 388, rt_add_i32(loc_1, rt_load_i32(memory_at_0, loc_3 + 388)))
			loc_5 = rt_load_i32(memory_at_0, loc_5 + 1732)
			if loc_5 ~= 0 then
				while true do
					TABLE_LIST[0].data[loc_5](loc_0, 0, loc_1)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = loc_4
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[79](loc_0, 4)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[355] = --[[ luaM_free_(lua_State*, void*, unsigned long, unsigned char) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		loc_6 = rt_load_i32(memory_at_0, loc_0 + 16)
		while true do
			while true do
				if rt_sub_i32(loc_2, 1) > 1023 then
					break
				end
				loc_7 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_2, 35316))
				if rt_lt_i32(loc_7, 0) then
					break
				end
				while true do
					loc_4 = rt_sub_i32(loc_1, 8)
					loc_1 = rt_load_i32(memory_at_0, loc_4)
					loc_5 = rt_load_i32(memory_at_0, loc_1 + 24)
					if loc_5 ~= 0 then
						break
					end
					loc_5 = 0
					if rt_ge_i32(rt_load_i32(memory_at_0, loc_1 + 28), 0) then
						break
					end
					loc_8 = rt_add_i32(rt_shl_i32(loc_7, 2), loc_6)
					loc_5 = rt_load_i32(memory_at_0, rt_add_i32(loc_8, 56))
					rt_store_i32(memory_at_0, loc_1 + 4, loc_5)
					if loc_5 ~= 0 then
						while true do
							rt_store_i32(memory_at_0, loc_5, loc_1)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					rt_store_i32(memory_at_0, loc_8 + 56, loc_1)
					loc_5 = rt_load_i32(memory_at_0, loc_1 + 24)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_4, loc_5)
				rt_store_i32(memory_at_0, loc_1 + 24, loc_4)
				loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 32), 1)
				rt_store_i32(memory_at_0, loc_1 + 32, loc_4)
				if loc_4 ~= 0 then
					desired = 1
					break
				end
				loc_4 = rt_load_i32(memory_at_0, loc_1)
				loc_5 = rt_load_i32(memory_at_0, loc_1 + 4)
				if loc_5 ~= 0 then
					while true do
						rt_store_i32(memory_at_0, loc_5, loc_4)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				while true do
					if loc_4 ~= 0 then
						while true do
							rt_store_i32(memory_at_0, loc_4 + 4, loc_5)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_4 = rt_add_i32(rt_add_i32(loc_6, 56), rt_shl_i32(loc_7, 2))
					if loc_1 ~= rt_load_i32(memory_at_0, loc_4) then
						break
					end
					rt_store_i32(memory_at_0, loc_4, loc_5)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_0 = rt_load_i32(memory_at_0, loc_0 + 16)
				reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, loc_0 + 12)](rt_load_i32(memory_at_0, loc_0 + 16), loc_1, rt_load_i32(memory_at_0, loc_1 + 16), 0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, loc_6 + 12)](rt_load_i32(memory_at_0, loc_6 + 16), loc_1, loc_2, 0)
			break
		end
		rt_store_i32(memory_at_0, loc_6 + 40, rt_sub_i32(rt_load_i32(memory_at_0, loc_6 + 40), loc_2))
		loc_6 = rt_add_i32(rt_shl_i32(loc_3, 2), loc_6)
		rt_store_i32(memory_at_0, loc_6 + 388, rt_sub_i32(rt_load_i32(memory_at_0, loc_6 + 388), loc_2))
		break
	end
end
FUNC_LIST[356] = --[[ luaM_freegco_(lua_State*, GCObject*, unsigned long, unsigned char, lua_Page*) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		loc_6 = rt_load_i32(memory_at_0, loc_0 + 16)
		while true do
			while true do
				while true do
					if rt_sub_i32(loc_2, 1) > 1023 then
						break
					end
					loc_8 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_2, 35316))
					if rt_lt_i32(loc_8, 0) then
						break
					end
					rt_store_i32_n8(memory_at_0, loc_1, 0)
					loc_7 = rt_load_i32(memory_at_0, loc_0 + 16)
					while true do
						loc_5 = rt_load_i32(memory_at_0, loc_4 + 24)
						if loc_5 ~= 0 then
							break
						end
						loc_5 = 0
						if rt_ge_i32(rt_load_i32(memory_at_0, loc_4 + 28), 0) then
							break
						end
						loc_9 = rt_add_i32(rt_shl_i32(loc_8, 2), loc_7)
						loc_5 = rt_load_i32(memory_at_0, rt_add_i32(loc_9, 216))
						rt_store_i32(memory_at_0, loc_4 + 4, loc_5)
						if loc_5 ~= 0 then
							while true do
								rt_store_i32(memory_at_0, loc_5, loc_4)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						rt_store_i32(memory_at_0, loc_9 + 216, loc_4)
						loc_5 = rt_load_i32(memory_at_0, loc_4 + 24)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_1 + 4, loc_5)
					rt_store_i32(memory_at_0, loc_4 + 24, loc_1)
					loc_1 = rt_sub_i32(rt_load_i32(memory_at_0, loc_4 + 32), 1)
					rt_store_i32(memory_at_0, loc_4 + 32, loc_1)
					if loc_1 ~= 0 then
						desired = 1
						break
					end
					loc_1 = rt_load_i32(memory_at_0, loc_4)
					loc_5 = rt_load_i32(memory_at_0, loc_4 + 4)
					if loc_5 ~= 0 then
						while true do
							rt_store_i32(memory_at_0, loc_5, loc_1)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					while true do
						if loc_1 ~= 0 then
							while true do
								rt_store_i32(memory_at_0, loc_1 + 4, loc_5)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_1 = rt_add_i32(rt_add_i32(loc_7, 216), rt_shl_i32(loc_8, 2))
						if loc_4 ~= rt_load_i32(memory_at_0, loc_1) then
							break
						end
						rt_store_i32(memory_at_0, loc_1, loc_5)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = rt_load_i32(memory_at_0, loc_4 + 8)
					loc_0 = rt_load_i32(memory_at_0, loc_0 + 16)
					loc_5 = rt_load_i32(memory_at_0, loc_4 + 12)
					if loc_5 ~= 0 then
						while true do
							rt_store_i32(memory_at_0, loc_5 + 8, loc_1)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_1 ~= 0 then
						while true do
							rt_store_i32(memory_at_0, loc_1 + 12, loc_5)
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_4 ~= rt_load_i32(memory_at_0, loc_7 + 380) then
						desired = 2
						break
					end
					rt_store_i32(memory_at_0, loc_7 + 380, loc_5)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_0 = rt_load_i32(memory_at_0, loc_4 + 8)
				loc_1 = rt_load_i32(memory_at_0, loc_4 + 12)
				if loc_1 ~= 0 then
					while true do
						rt_store_i32(memory_at_0, loc_1 + 8, loc_0)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				while true do
					if loc_0 ~= 0 then
						while true do
							rt_store_i32(memory_at_0, loc_0 + 12, loc_1)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_0 = loc_6
					if loc_4 ~= rt_load_i32(memory_at_0, loc_0 + 380) then
						desired = 2
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 380, loc_1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_0 = loc_6
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, loc_0 + 12)](rt_load_i32(memory_at_0, loc_0 + 16), loc_4, rt_load_i32(memory_at_0, loc_4 + 16), 0)
			break
		end
		rt_store_i32(memory_at_0, loc_6 + 40, rt_sub_i32(rt_load_i32(memory_at_0, loc_6 + 40), loc_2))
		loc_4 = rt_add_i32(rt_shl_i32(loc_3, 2), loc_6)
		rt_store_i32(memory_at_0, loc_4 + 388, rt_sub_i32(rt_load_i32(memory_at_0, loc_4 + 388), loc_2))
		break
	end
end
FUNC_LIST[357] = --[[ luaM_realloc_(lua_State*, void*, unsigned long, unsigned long, unsigned char) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_9 = 4294967295
		loc_6 = 4294967295
		loc_7 = rt_load_i32(memory_at_0, loc_0 + 16)
		while true do
			while true do
				while true do
					if rt_sub_i32(loc_3, 1) <= 1023 then
						while true do
							reg_0 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_3, 35316))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_6
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_6 = reg_0
					reg_0 = loc_6
					if rt_sub_i32(loc_2, 1) <= 1023 then
						while true do
							reg_1 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_2, 35316))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_1 = loc_9
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_9 = reg_1
					if rt_ge_i32(bit_and(reg_0, loc_9), 0) then
						while true do
							while true do
								if rt_ge_i32(loc_6, 0) then
									while true do
										while true do
											while true do
												loc_10 = rt_add_i32(loc_7, 56)
												loc_8 = rt_add_i32(loc_10, rt_shl_i32(loc_6, 2))
												loc_5 = rt_load_i32(memory_at_0, loc_8)
												if loc_5 ~= 0 then
													while true do
														reg_0 = loc_5
														break
													end
													if desired then
														if desired == 8 then
															desired = nil
														end
														break
													end
												else
													while true do
														reg_0 = FUNC_LIST[353](loc_0, loc_10, 0, bit_and(loc_6, 255), 1)
														break
													end
													if desired then
														if desired == 8 then
															desired = nil
														end
														break
													end
												end
												loc_5 = reg_0
												loc_6 = rt_load_i32(memory_at_0, loc_5 + 28)
												if rt_ge_i32(loc_6, 0) then
													while true do
														loc_10 = rt_sub_i32(loc_6, rt_load_i32(memory_at_0, loc_5 + 20))
														rt_store_i32(memory_at_0, loc_5 + 28, loc_10)
														rt_store_i32(memory_at_0, loc_5 + 32, rt_add_i32(rt_load_i32(memory_at_0, loc_5 + 32), 1))
														loc_6 = rt_add_i32(rt_add_i32(loc_5, loc_6), 40)
														rt_store_i32(memory_at_0, loc_6, loc_5)
														if rt_load_i32(memory_at_0, loc_5 + 24) ~= 0 then
															desired = 7
															break
														end
														if rt_lt_i32(loc_10, 0) then
															desired = 8
															break
														end
														desired = 7
														break
													end
													if desired then
														if desired == 8 then
															desired = nil
														end
														break
													end
												end
												loc_6 = rt_load_i32(memory_at_0, loc_5 + 24)
												rt_store_i32(memory_at_0, loc_5 + 24, rt_load_i32(memory_at_0, loc_6))
												rt_store_i32(memory_at_0, loc_5 + 32, rt_add_i32(rt_load_i32(memory_at_0, loc_5 + 32), 1))
												rt_store_i32(memory_at_0, loc_6, loc_5)
												if rt_load_i32(memory_at_0, loc_5 + 24) ~= 0 then
													desired = 7
													break
												end
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
											loc_10 = rt_load_i32(memory_at_0, loc_5 + 4)
											rt_store_i32(memory_at_0, loc_8, loc_10)
											if loc_10 ~= 0 then
												while true do
													rt_store_i32(memory_at_0, loc_10, 0)
													break
												end
												if desired then
													if desired == 7 then
														desired = nil
													end
													break
												end
											end
											rt_store_i32(memory_at_0, loc_5 + 4, 0)
											break
										end
										if desired then
											break
										end
										loc_5 = (if loc_3 ~= 0 then 1 else 0)
										loc_6 = rt_add_i32(loc_6, 8)
										desired = 5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_5 = (if loc_3 ~= 0 then 1 else 0)
								reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, loc_7 + 12)](rt_load_i32(memory_at_0, loc_7 + 16), 0, 0, loc_3)
								loc_6 = reg_0
								if loc_3 == 0 then
									break
								end
								if loc_6 == 0 then
									desired = 1
									break
								end
								break
							end
							if desired then
								break
							end
							while true do
								if loc_2 == 0 then
									break
								end
								if loc_5 == 0 then
									break
								end
								reg_0 = FUNC_LIST[609](loc_6, loc_1, (if loc_2 < loc_3 then loc_2 else loc_3))
								break
							end
							if desired then
								break
							end
							if rt_lt_i32(loc_9, 0) then
								desired = 3
								break
							end
							loc_10 = rt_load_i32(memory_at_0, loc_0 + 16)
							while true do
								loc_1 = rt_sub_i32(loc_1, 8)
								loc_5 = rt_load_i32(memory_at_0, loc_1)
								loc_8 = rt_load_i32(memory_at_0, loc_5 + 24)
								if loc_8 ~= 0 then
									break
								end
								loc_8 = 0
								if rt_ge_i32(rt_load_i32(memory_at_0, loc_5 + 28), 0) then
									break
								end
								loc_11 = rt_add_i32(rt_shl_i32(loc_9, 2), loc_10)
								loc_8 = rt_load_i32(memory_at_0, rt_add_i32(loc_11, 56))
								rt_store_i32(memory_at_0, loc_5 + 4, loc_8)
								if loc_8 ~= 0 then
									while true do
										rt_store_i32(memory_at_0, loc_8, loc_5)
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								rt_store_i32(memory_at_0, loc_11 + 56, loc_5)
								loc_8 = rt_load_i32(memory_at_0, loc_5 + 24)
								break
							end
							if desired then
								break
							end
							rt_store_i32(memory_at_0, loc_1, loc_8)
							rt_store_i32(memory_at_0, loc_5 + 24, loc_1)
							loc_1 = rt_sub_i32(rt_load_i32(memory_at_0, loc_5 + 32), 1)
							rt_store_i32(memory_at_0, loc_5 + 32, loc_1)
							if loc_1 ~= 0 then
								desired = 2
								break
							end
							loc_1 = rt_load_i32(memory_at_0, loc_5)
							loc_8 = rt_load_i32(memory_at_0, loc_5 + 4)
							if loc_8 ~= 0 then
								while true do
									rt_store_i32(memory_at_0, loc_8, loc_1)
									break
								end
								if desired then
									break
								end
							end
							while true do
								if loc_1 ~= 0 then
									while true do
										rt_store_i32(memory_at_0, loc_1 + 4, loc_8)
										desired = 5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_9 = rt_add_i32(rt_add_i32(loc_10, 56), rt_shl_i32(loc_9, 2))
								if loc_5 ~= rt_load_i32(memory_at_0, loc_9) then
									break
								end
								rt_store_i32(memory_at_0, loc_9, loc_8)
								break
							end
							if desired then
								break
							end
							loc_9 = rt_load_i32(memory_at_0, loc_0 + 16)
							reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, loc_9 + 12)](rt_load_i32(memory_at_0, loc_9 + 16), loc_5, rt_load_i32(memory_at_0, loc_5 + 16), 0)
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, loc_7 + 12)](rt_load_i32(memory_at_0, loc_7 + 16), loc_1, loc_2, loc_3)
					loc_6 = reg_0
					if loc_3 == 0 then
						desired = 2
						break
					end
					if loc_6 ~= 0 then
						desired = 2
						break
					end
					FUNC_LIST[79](loc_0, 4)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, loc_7 + 12)](rt_load_i32(memory_at_0, loc_7 + 16), loc_1, loc_2, 0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = rt_sub_i32(loc_3, loc_2)
			rt_store_i32(memory_at_0, loc_7 + 40, rt_add_i32(loc_5, rt_load_i32(memory_at_0, loc_7 + 40)))
			loc_9 = rt_add_i32(rt_shl_i32(loc_4, 2), loc_7)
			rt_store_i32(memory_at_0, loc_9 + 388, rt_add_i32(rt_load_i32(memory_at_0, loc_9 + 388), loc_5))
			loc_7 = rt_load_i32(memory_at_0, loc_7 + 1732)
			if loc_7 ~= 0 then
				while true do
					TABLE_LIST[0].data[loc_7](loc_0, loc_2, loc_3)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = loc_6
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[79](loc_0, 4)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[358] = --[[ luaM_getpagewalkinfo(lua_Page*, char**, char**, int*, int*) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	while true do
		loc_5 = rt_load_i32(memory_at_0, loc_0 + 16)
		loc_6 = rt_load_i32(memory_at_0, loc_0 + 20)
		loc_7 = rt_add_i32(loc_0, 40)
		rt_store_i32(memory_at_0, loc_1, rt_add_i32(loc_6, rt_add_i32(loc_7, rt_load_i32(memory_at_0, loc_0 + 28))))
		loc_1 = rt_sub_i32(loc_5, 40)
		rt_store_i32(memory_at_0, loc_2, rt_add_i32(rt_sub_i32(loc_1, (loc_1 % loc_6)), loc_7))
		rt_store_i32(memory_at_0, loc_3, rt_load_i32(memory_at_0, loc_0 + 32))
		rt_store_i32(memory_at_0, loc_4, rt_load_i32(memory_at_0, loc_0 + 20))
		break
	end
end
FUNC_LIST[359] = --[[ luaM_getnextpage(lua_Page*) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = rt_load_i32(memory_at_0, loc_0 + 12)
		break
	end
	return reg_0
end
FUNC_LIST[360] = --[[ luaM_visitgco(lua_State*, void*, bool (*)(void*, lua_Page*, GCObject*)) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		loc_5 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 380)
		if loc_5 ~= 0 then
			while true do
				while true do
					loc_3 = loc_5
					loc_5 = rt_load_i32(memory_at_0, loc_3 + 12)
					while true do
						loc_7 = rt_load_i32(memory_at_0, loc_3 + 20)
						loc_6 = rt_add_i32(loc_3, 40)
						loc_0 = rt_add_i32(loc_7, rt_add_i32(loc_6, rt_load_i32(memory_at_0, loc_3 + 28)))
						loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 16), 40)
						loc_6 = rt_add_i32(rt_sub_i32(loc_4, (loc_4 % loc_7)), loc_6)
						if loc_0 == loc_6 then
							break
						end
						loc_4 = rt_load_i32(memory_at_0, loc_3 + 32)
						while true do
							while true do
								if rt_load_i32_u8(memory_at_0, loc_0) == 0 then
									break
								end
								reg_0 = TABLE_LIST[0].data[loc_2](loc_1, loc_3, loc_0)
								if reg_0 == 0 then
									break
								end
								loc_4 = rt_sub_i32(loc_4, 1)
								if loc_4 == 0 then
									desired = 3
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							loc_0 = rt_add_i32(loc_0, loc_7)
							if loc_6 ~= loc_0 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					if loc_5 ~= 0 then
						continue
					end
					break
				end
				break
			end
		end
		break
	end
end
FUNC_LIST[361] = --[[ luai_num2str(char*, double) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = rt_i64_ZERO
	local loc_10 = rt_i64_ZERO
	local loc_11 = rt_i64_ZERO
	local loc_12 = rt_i64_ZERO
	local loc_13 = rt_i64_ZERO
	local loc_14 = rt_i64_ZERO
	local loc_15 = rt_i64_ZERO
	local loc_16 = rt_i64_ZERO
	local loc_17 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 176)
		GLOBAL_LIST[0].value = loc_5
		loc_10 = rt_reinterpret_i64_f64(loc_1)
		loc_9 = rt_bit_and_i64(loc_10, rt_i64_from_u32(4294967295, 1048575))
		loc_6 = rt_wrap_i32_i64(rt_shr_u64(loc_10, rt_i64_from_u32(63, 0)))
		while true do
			loc_2 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_10, rt_i64_from_u32(52, 0))), 2047)
			if loc_2 == 2047 then
				while true do
					if rt_eq_i64(loc_9, rt_i64_ZERO) then
						while true do
							loc_3 = rt_add_i32(rt_add_i32(loc_0, loc_6), 3)
							rt_store_i32(memory_at_0, loc_0, rt_load_i32(memory_at_0, rt_add_i32(bit_xor(loc_6, 1), 3595)))
							desired = 1
							break
						end
						if desired then
							break
						end
					end
					loc_3 = rt_add_i32(loc_0, 3)
					rt_store_i32(memory_at_0, loc_0, 7233902)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i32_n8(memory_at_0, loc_0, 45)
			loc_4 = rt_add_i32(loc_0, loc_6)
			while true do
				if rt_ne_i64(loc_9, rt_i64_ZERO) then
					break
				end
				if loc_2 ~= 0 then
					break
				end
				rt_store_i32_n8(memory_at_0, loc_4, 48)
				loc_3 = rt_add_i32(loc_4, 1)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_10 = (if loc_2 ~= 0 then rt_bit_or_i64(loc_9, rt_i64_from_u32(0, 1048576)) else loc_9)
			loc_8 = rt_add_i32(loc_5, 148)
			while true do
				while true do
					while true do
						loc_2 = (if loc_2 ~= 0 then rt_sub_i32(loc_2, 1075) else 4294966222)
						loc_3 = rt_sub_i32(0, loc_2)
						if loc_3 > 52 then
							break
						end
						loc_9 = rt_extend_i64_u32(loc_3)
						if rt_ne_i64(rt_bit_and_i64(rt_bit_xor_i64(rt_shl_i64(rt_i64_from_u32(4294967295, 4294967295), loc_9), rt_i64_from_u32(4294967295, 4294967295)), loc_10), rt_i64_ZERO) then
							break
						end
						reg_0 = rt_shr_u64(loc_10, loc_9)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_0 = bit_and((if loc_2 ~= 4294966222 then 1 else 0), (if rt_eq_i64(loc_10, rt_i64_from_u32(0, 1048576)) then 1 else 0))
					loc_7 = rt_shr_i32(rt_add_i32(rt_mul_i32(loc_2, 315652), (if loc_0 ~= 0 then 4294836288 else 0)), 20)
					loc_3 = rt_sub_i32(292, loc_7)
					loc_6 = bit_and(loc_3, 15)
					loc_9 = rt_load_i64(memory_at_0, rt_add_i32(rt_shl_i32(loc_6, 3), 9008))
					loc_3 = rt_mul_i32(rt_shr_u32(loc_3, 4), 24)
					FUNC_LIST[672](rt_add_i32(loc_5, 96), loc_9, rt_i64_ZERO, rt_load_i64(memory_at_0, rt_add_i32(loc_3, 8064)), rt_i64_ZERO)
					FUNC_LIST[672](rt_add_i32(loc_5, 112), loc_9, rt_i64_ZERO, rt_load_i64(memory_at_0, rt_add_i32(loc_3, 8072)), rt_i64_ZERO)
					loc_13 = rt_load_i64(memory_at_0, loc_5 + 120)
					loc_9 = rt_add_i64(loc_13, rt_load_i64(memory_at_0, loc_5 + 96))
					loc_12 = rt_shr_u64(rt_load_i64(memory_at_0, rt_add_i32(loc_3, 8080)), rt_extend_i64_u32(rt_shl_i32(loc_6, 2)))
					loc_15 = rt_shr_u64(loc_12, rt_i64_from_u32(3, 0))
					loc_16 = rt_bit_and_i64(loc_15, rt_i64_ONE)
					loc_12 = rt_add_i64(rt_sub_i64(rt_shl_i64(loc_9, loc_16), rt_bit_and_i64(loc_12, rt_i64_from_u32(7, 0))), rt_i64_from_u32(4, 0))
					loc_11 = rt_shl_i64(loc_10, rt_i64_from_u32(2, 0))
					loc_14 = rt_extend_i64_u32(rt_add_i32(rt_add_i32(rt_shr_i32(rt_mul_i32(loc_7, 4291484002), 20), loc_2), 1))
					loc_17 = rt_shl_i64(rt_sub_i64(rt_bit_or_i64(loc_11, rt_extend_i64_u32(loc_0)), rt_i64_from_u32(2, 0)), loc_14)
					FUNC_LIST[672](rt_add_i32(loc_5, 32), loc_12, rt_i64_ZERO, loc_17, rt_i64_ZERO)
					loc_9 = rt_add_i64(rt_bit_and_i64(loc_15, rt_shr_u64(loc_9, rt_i64_from_u32(63, 0))), rt_shl_i64(rt_add_i64(rt_load_i64(memory_at_0, loc_5 + 104), rt_extend_i64_u32((if rt_lt_u64(loc_9, loc_13) then 1 else 0))), loc_16))
					FUNC_LIST[672](rt_add_i32(loc_5, 80), loc_9, rt_i64_ZERO, loc_17, rt_i64_ZERO)
					loc_13 = rt_shl_i64(loc_11, loc_14)
					FUNC_LIST[672](rt_add_i32(loc_5, 16), loc_12, rt_i64_ZERO, loc_13, rt_i64_ZERO)
					FUNC_LIST[672](rt_sub_i32(loc_5, 4294967232), loc_9, rt_i64_ZERO, loc_13, rt_i64_ZERO)
					loc_11 = rt_shl_i64(rt_bit_or_i64(loc_11, rt_i64_from_u32(2, 0)), loc_14)
					FUNC_LIST[672](loc_5, loc_12, rt_i64_ZERO, loc_11, rt_i64_ZERO)
					FUNC_LIST[672](rt_add_i32(loc_5, 48), loc_9, rt_i64_ZERO, loc_11, rt_i64_ZERO)
					loc_9 = rt_load_i64(memory_at_0, loc_5 + 48)
					loc_12 = rt_add_i64(loc_9, rt_load_i64(memory_at_0, loc_5 + 8))
					loc_12 = rt_bit_or_i64(rt_add_i64(rt_load_i64(memory_at_0, loc_5 + 56), rt_extend_i64_u32((if rt_lt_u64(loc_12, loc_9) then 1 else 0))), rt_extend_i64_u32((if rt_gt_u64(loc_12, rt_i64_ONE) then 1 else 0)))
					loc_9 = rt_load_i64(memory_at_0, loc_5 + 80)
					loc_11 = rt_add_i64(loc_9, rt_load_i64(memory_at_0, loc_5 + 40))
					loc_11 = rt_bit_or_i64(rt_add_i64(rt_load_i64(memory_at_0, loc_5 + 88), rt_extend_i64_u32((if rt_lt_u64(loc_11, loc_9) then 1 else 0))), rt_extend_i64_u32((if rt_gt_u64(loc_11, rt_i64_ONE) then 1 else 0)))
					loc_9 = rt_bit_and_i64(loc_10, rt_i64_ONE)
					while true do
						loc_10 = rt_load_i64(memory_at_0, loc_5 + 64)
						loc_14 = rt_add_i64(loc_10, rt_load_i64(memory_at_0, loc_5 + 24))
						loc_10 = rt_add_i64(rt_load_i64(memory_at_0, loc_5 + 72), rt_extend_i64_u32((if rt_lt_u64(loc_14, loc_10) then 1 else 0)))
						if rt_le_u64(loc_10, rt_i64_from_u32(39, 0)) then
							while true do
								loc_11 = rt_add_i64(loc_9, loc_11)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_11 = rt_add_i64(loc_9, loc_11)
						loc_15 = rt_div_u64(loc_10, rt_i64_from_u32(40, 0))
						loc_13 = rt_mul_i64(loc_15, rt_i64_from_u32(40, 0))
						loc_2 = (if rt_le_u64(rt_add_i64(rt_bit_or_i64(loc_9, loc_13), rt_i64_from_u32(40, 0)), loc_12) then 1 else 0)
						if bit_xor((if rt_gt_u64(loc_11, loc_13) then 1 else 0), loc_2) ~= 0 then
							break
						end
						loc_7 = rt_add_i32(loc_7, 1)
						reg_0 = rt_add_i64(rt_extend_i64_u32(loc_2), loc_15)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_13 = rt_shr_u64(loc_10, rt_i64_from_u32(2, 0))
					reg_1 = (if rt_le_u64(rt_sub_i64(rt_bit_or_i64(loc_10, rt_i64_from_u32(3, 0)), rt_bit_and_i64(loc_13, rt_i64_ONE)), rt_bit_or_i64(rt_extend_i64_u32((if rt_gt_u64(loc_14, rt_i64_ONE) then 1 else 0)), loc_10)) then 1 else 0)
					loc_10 = rt_bit_and_i64(loc_10, rt_i64_from_u32(4294967292, 4294967295))
					loc_2 = (if rt_ge_u64(loc_12, rt_add_i64(rt_bit_or_i64(loc_9, loc_10), rt_i64_from_u32(4, 0))) then 1 else 0)
					reg_0 = rt_add_i64(loc_13, rt_extend_i64_u32((if bit_xor((if rt_lt_u64(loc_10, loc_11) then 1 else 0), loc_2) ~= 0 then reg_1 else loc_2)))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_10 = reg_0
				if rt_lt_u64(loc_10, rt_i64_from_u32(10000, 0)) then
					while true do
						loc_9 = loc_10
						loc_2 = loc_8
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_3 = loc_8
				while true do
					loc_2 = rt_sub_i32(loc_3, 4)
					loc_9 = rt_div_u64(loc_10, rt_i64_from_u32(10000, 0))
					loc_0 = rt_wrap_i32_i64(rt_sub_i64(loc_10, rt_mul_i64(loc_9, rt_i64_from_u32(10000, 0))))
					loc_6 = rt_div_u32(bit_and(loc_0, 65535), 100)
					rt_store_i32_n16(memory_at_0, loc_2, rt_load_i32_u16(memory_at_0, rt_add_i32(rt_shl_i32(loc_6, 1), 9136)))
					rt_store_i32_n16(memory_at_0, rt_sub_i32(loc_3, 2), rt_load_i32_u16(memory_at_0, rt_add_i32(rt_shl_i32(bit_and(rt_sub_i32(loc_0, rt_mul_i32(loc_6, 100)), 65535), 1), 9136)))
					loc_0 = (if rt_gt_u64(loc_10, rt_i64_from_u32(99999999, 0)) then 1 else 0)
					loc_3 = loc_2
					loc_10 = loc_9
					if loc_0 ~= 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = rt_wrap_i32_i64(loc_9)
			while true do
				if rt_lt_u64(loc_9, rt_i64_from_u32(10, 0)) then
					while true do
						loc_0 = loc_3
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				while true do
					loc_2 = rt_sub_i32(loc_2, 2)
					loc_0 = rt_div_u32(loc_3, 100)
					rt_store_i32_n16(memory_at_0, loc_2, rt_load_i32_u16(memory_at_0, rt_add_i32(rt_shl_i32(rt_sub_i32(loc_3, rt_mul_i32(loc_0, 100)), 1), 9136)))
					loc_6 = (if loc_3 > 999 then 1 else 0)
					loc_3 = loc_0
					if loc_6 ~= 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_0 ~= 0 then
				while true do
					loc_2 = rt_sub_i32(loc_2, 1)
					rt_store_i32_n8(memory_at_0, loc_2, bit_or(loc_0, 48))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = rt_sub_i32(loc_8, loc_2)
			loc_6 = rt_add_i32(loc_7, loc_3)
			if rt_add_i32(loc_6, 5) <= 26 then
				while true do
					if rt_le_i32(loc_6, 0) then
						while true do
							rt_store_i32(memory_at_0, loc_4 + 2, 808464432)
							rt_store_i32_n16(memory_at_0, loc_4, 11824)
							rt_store_i32_n8(memory_at_0, loc_4 + 6, 48)
							loc_0 = rt_sub_i32(rt_add_i32(loc_4, 2), loc_6)
							rt_store_i32_n8(memory_at_0, loc_0 + 16, rt_load_i32_u8(memory_at_0, loc_2 + 16))
							rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
							rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_2))
							loc_2 = rt_add_i32(loc_0, loc_3)
							while true do
								loc_3 = loc_2
								loc_2 = rt_sub_i32(loc_3, 1)
								if rt_load_i32_u8(memory_at_0, loc_2) == 48 then
									continue
								end
								break
							end
							if desired then
								break
							end
							desired = 1
							break
						end
						if desired then
							break
						end
					end
					if loc_7 == 0 then
						while true do
							rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_2))
							rt_store_i32_n8(memory_at_0, loc_4 + 16, rt_load_i32_u8(memory_at_0, loc_2 + 16))
							rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
							loc_3 = rt_add_i32(loc_4, loc_6)
							desired = 1
							break
						end
						if desired then
							break
						end
					end
					if rt_lt_i32(loc_7, 0) then
						while true do
							rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_2))
							rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
							loc_0 = rt_add_i32(loc_4, loc_6)
							rt_store_i32_n8(memory_at_0, loc_0, 46)
							loc_2 = rt_add_i32(loc_2, loc_6)
							rt_store_i64(memory_at_0, loc_0 + 1, rt_load_i64(memory_at_0, loc_2))
							rt_store_i64(memory_at_0, loc_0 + 9, rt_load_i64(memory_at_0, loc_2 + 8))
							loc_2 = rt_add_i32(rt_add_i32(loc_3, loc_4), 1)
							while true do
								loc_3 = loc_2
								loc_2 = rt_sub_i32(loc_3, 1)
								if rt_load_i32_u8(memory_at_0, loc_2) == 48 then
									continue
								end
								break
							end
							if desired then
								break
							end
							desired = 1
							break
						end
						if desired then
							break
						end
					end
					rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_2))
					rt_store_i32_n8(memory_at_0, loc_4 + 16, rt_load_i32_u8(memory_at_0, loc_2 + 16))
					rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
					rt_store_i64(memory_at_0, rt_add_i32(loc_3, loc_4), rt_i64_from_u32(808464432, 808464432))
					loc_3 = rt_add_i32(loc_4, loc_6)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_0 = rt_load_i32_u8(memory_at_0, loc_2)
			loc_7 = rt_add_i32(loc_4, 1)
			rt_store_i32_n8(memory_at_0, loc_7, 46)
			rt_store_i32_n8(memory_at_0, loc_4, loc_0)
			rt_store_i64(memory_at_0, loc_4 + 2, rt_load_i64(memory_at_0, loc_2 + 1))
			rt_store_i64(memory_at_0, loc_4 + 10, rt_load_i64(memory_at_0, loc_2 + 9))
			loc_2 = rt_add_i32(loc_3, loc_7)
			while true do
				loc_3 = loc_2
				loc_2 = rt_sub_i32(loc_3, 1)
				loc_0 = rt_load_i32_u8(memory_at_0, loc_2)
				if loc_0 == 48 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = (if loc_0 == 46 then loc_2 else loc_3)
			rt_store_i32_n8(memory_at_0, loc_2 + 1, (if rt_le_i32(loc_6, 0) then 45 else 43))
			rt_store_i32_n8(memory_at_0, loc_2, 101)
			loc_3 = rt_sub_i32(loc_6, 1)
			reg_0 = loc_3
			loc_3 = rt_shr_i32(loc_3, 31)
			loc_3 = rt_sub_i32(bit_xor(reg_0, loc_3), loc_3)
			if loc_3 < 100 then
				while true do
					reg_0 = rt_add_i32(loc_2, 2)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					loc_0 = rt_div_u32(loc_3, 100)
					rt_store_i32_n8(memory_at_0, loc_2 + 2, rt_add_i32(loc_0, 48))
					loc_3 = rt_sub_i32(loc_3, rt_mul_i32(loc_0, 100))
					reg_0 = rt_add_i32(loc_2, 3)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = reg_0
			rt_store_i32_n16(memory_at_0, loc_2, rt_load_i32_u16(memory_at_0, rt_add_i32(rt_shl_i32(loc_3, 1), 9136)))
			loc_3 = rt_add_i32(loc_2, 2)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 176)
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[362] = --[[ luaO_log2(unsigned int) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_1 = 4294967295
		while true do
			if loc_0 < 256 then
				while true do
					loc_2 = loc_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				loc_1 = rt_add_i32(loc_1, 8)
				loc_3 = (if loc_0 > 65535 then 1 else 0)
				loc_2 = rt_shr_u32(loc_0, 8)
				loc_0 = loc_2
				if loc_3 ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		reg_0 = rt_add_i32(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, 9360)), loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[363] = --[[ luaO_rawequalObj(lua_TValue const*, lua_TValue const*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 12)
		if loc_3 ~= rt_load_i32(memory_at_0, loc_1 + 12) then
			while true do
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_2 = 1
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 5, 2, 3, 0, 1, }
									end)()
								end
								temp = br_map[1][loc_3] or 4
								if temp < 3 then
									if temp < 1 then
										break
									elseif temp > 1 then
										desired = 4
										break
									else
										desired = 5
										break
									end
								elseif temp > 3 then
									if temp < 5 then
										desired = 2
										break
									else
										desired = 1
										break
									end
								else
									desired = 3
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = (if rt_load_f64(memory_at_0, loc_0) == rt_load_f64(memory_at_0, loc_1) then 1 else 0)
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if rt_load_f32(memory_at_0, loc_0) ~= rt_load_f32(memory_at_0, loc_1) then
							while true do
								reg_0 = 0
								desired = 0
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_2 = 0
						if rt_load_f32(memory_at_0, loc_0 + 4) ~= rt_load_f32(memory_at_0, loc_1 + 4) then
							desired = 1
							break
						end
						reg_0 = (if rt_load_f32(memory_at_0, loc_0 + 8) == rt_load_f32(memory_at_0, loc_1 + 8) then 1 else 0)
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = (if rt_load_i32(memory_at_0, loc_0) == rt_load_i32(memory_at_0, loc_1) then 1 else 0)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = 0
				if rt_load_i32(memory_at_0, loc_0) ~= rt_load_i32(memory_at_0, loc_1) then
					desired = 1
					break
				end
				reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) == rt_load_i32(memory_at_0, loc_1 + 8) then 1 else 0)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = (if rt_load_i32(memory_at_0, loc_0) == rt_load_i32(memory_at_0, loc_1) then 1 else 0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[364] = --[[ luaO_rawequalKey(TKey const*, lua_TValue const*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_3 = bit_and(rt_load_i32(memory_at_0, loc_0 + 12), 15)
		if loc_3 ~= rt_load_i32(memory_at_0, loc_1 + 12) then
			while true do
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_2 = 1
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 5, 2, 3, 0, 1, }
									end)()
								end
								temp = br_map[1][loc_3] or 4
								if temp < 3 then
									if temp < 1 then
										break
									elseif temp > 1 then
										desired = 4
										break
									else
										desired = 5
										break
									end
								elseif temp > 3 then
									if temp < 5 then
										desired = 2
										break
									else
										desired = 1
										break
									end
								else
									desired = 3
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = (if rt_load_f64(memory_at_0, loc_0) == rt_load_f64(memory_at_0, loc_1) then 1 else 0)
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if rt_load_f32(memory_at_0, loc_0) ~= rt_load_f32(memory_at_0, loc_1) then
							while true do
								reg_0 = 0
								desired = 0
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_2 = 0
						if rt_load_f32(memory_at_0, loc_0 + 4) ~= rt_load_f32(memory_at_0, loc_1 + 4) then
							desired = 1
							break
						end
						reg_0 = (if rt_load_f32(memory_at_0, loc_0 + 8) == rt_load_f32(memory_at_0, loc_1 + 8) then 1 else 0)
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = (if rt_load_i32(memory_at_0, loc_0) == rt_load_i32(memory_at_0, loc_1) then 1 else 0)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = 0
				if rt_load_i32(memory_at_0, loc_0) ~= rt_load_i32(memory_at_0, loc_1) then
					desired = 1
					break
				end
				reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 8) == rt_load_i32(memory_at_0, loc_1 + 8) then 1 else 0)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = (if rt_load_i32(memory_at_0, loc_0) == rt_load_i32(memory_at_0, loc_1) then 1 else 0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[365] = --[[ luaO_str2d(char const*, double*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	local reg_2
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		reg_1 = FUNC_LIST[765](loc_0, rt_add_i32(loc_3, 12))
		rt_store_f64(memory_at_0, loc_1, reg_1)
		while true do
			loc_2 = rt_load_i32(memory_at_0, loc_3 + 12)
			reg_0 = 0
			if loc_2 == loc_0 then
				break
			end
			loc_4 = rt_load_i32_u8(memory_at_0, loc_2)
			reg_0 = 1
			if bit_or(loc_4, 32) == 120 then
				while true do
					reg_2 = FUNC_LIST[757](loc_0, rt_add_i32(loc_3, 12), 16)
					rt_store_f64(memory_at_0, loc_1, no_op(reg_2))
					loc_2 = rt_load_i32(memory_at_0, loc_3 + 12)
					reg_1 = rt_load_i32_u8(memory_at_0, loc_2)
					break
				end
			else
				while true do
					reg_1 = loc_4
					break
				end
			end
			loc_4 = reg_1
			if loc_4 == 0 then
				break
			end
			while true do
				loc_0 = rt_load_i32_u8(memory_at_0, loc_2)
				loc_2 = rt_add_i32(loc_2, 1)
				reg_0 = FUNC_LIST[724](loc_0)
				if reg_0 ~= 0 then
					continue
				end
				break
			end
			reg_0 = (if loc_0 == 0 then 1 else 0)
			break
		end
		loc_2 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[366] = --[[ luaO_pushvfstring(lua_State*, char const*, void*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local reg_1
	local reg_2
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 512)
		GLOBAL_LIST[0].value = loc_3
		reg_0 = FUNC_LIST[740](loc_3, 512, loc_1, loc_2)
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
		reg_2 = FUNC_LIST[649](loc_3)
		reg_0 = FUNC_LIST[387](loc_0, loc_3, reg_2)
		loc_1 = reg_0
		rt_store_i32(memory_at_0, loc_2 + 12, 5)
		rt_store_i32(memory_at_0, loc_2, loc_1)
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
		reg_0 = loc_0
		if rt_le_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 24), loc_2), 16) then
			while true do
				FUNC_LIST[82](loc_0, 1)
				reg_1 = rt_load_i32(memory_at_0, loc_0 + 8)
				break
			end
		else
			while true do
				reg_1 = loc_2
				break
			end
		end
		loc_2 = reg_1
		rt_store_i32(memory_at_0, reg_0 + 8, rt_add_i32(loc_2, 16))
		loc_0 = rt_load_i32(memory_at_0, loc_2)
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 512)
		reg_0 = rt_add_i32(loc_0, 20)
		break
	end
	return reg_0
end
FUNC_LIST[367] = --[[ luaO_pushfstring(lua_State*, char const*, ...) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local reg_1
	local reg_2
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 528)
		GLOBAL_LIST[0].value = loc_3
		rt_store_i32(memory_at_0, loc_3 + 12, loc_2)
		reg_0 = FUNC_LIST[740](rt_add_i32(loc_3, 16), 512, loc_1, loc_2)
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
		reg_2 = FUNC_LIST[649](rt_add_i32(loc_3, 16))
		reg_0 = FUNC_LIST[387](loc_0, rt_add_i32(loc_3, 16), reg_2)
		loc_1 = reg_0
		rt_store_i32(memory_at_0, loc_2 + 12, 5)
		rt_store_i32(memory_at_0, loc_2, loc_1)
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
		reg_0 = loc_0
		if rt_le_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 24), loc_2), 16) then
			while true do
				FUNC_LIST[82](loc_0, 1)
				reg_1 = rt_load_i32(memory_at_0, loc_0 + 8)
				break
			end
		else
			while true do
				reg_1 = loc_2
				break
			end
		end
		loc_2 = reg_1
		rt_store_i32(memory_at_0, reg_0 + 8, rt_add_i32(loc_2, 16))
		loc_0 = rt_load_i32(memory_at_0, loc_2)
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 528)
		reg_0 = rt_add_i32(loc_0, 20)
		break
	end
	return reg_0
end
FUNC_LIST[368] = --[[ luaO_chunkid(char*, unsigned long, char const*, unsigned long) ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					if not br_map[1] then
						br_map[1] = (function()
							return { [0] = 0, 2, 2, 1, }
						end)()
					end
					temp = br_map[1][rt_sub_i32(rt_load_i32_u8(memory_at_0, loc_2), 61)] or 2
					if temp < 1 then
						break
					elseif temp > 1 then
						desired = 1
						break
					else
						desired = 2
						break
					end
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = rt_add_i32(loc_2, 1)
				if loc_1 >= loc_3 then
					while true do
						reg_0 = loc_2
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_1 = rt_sub_i32(loc_1, 1)
				reg_0 = FUNC_LIST[609](loc_0, loc_2, loc_1)
				loc_0 = reg_0
				rt_store_i32_n8(memory_at_0, rt_add_i32(loc_0, loc_1), 0)
				reg_0 = loc_0
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_1 >= loc_3 then
				while true do
					reg_0 = rt_add_i32(loc_2, 1)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i32_n8(memory_at_0, loc_0 + 2, rt_load_i32_u8(memory_at_0, 5451))
			rt_store_i32_n16(memory_at_0, loc_0, rt_load_i32_u16(memory_at_0, 5449))
			reg_0 = FUNC_LIST[609](rt_add_i32(loc_0, 3), rt_add_i32(rt_sub_i32(rt_add_i32(loc_2, loc_3), loc_1), 4), rt_sub_i32(loc_1, 4))
			rt_store_i32_n8(memory_at_0, rt_sub_i32(rt_add_i32(loc_0, loc_1), 1), 0)
			reg_0 = loc_0
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = FUNC_LIST[750](loc_2, 6575)
		loc_3 = reg_0
		rt_store_i32_n16(memory_at_0, loc_0 + 8, rt_load_i32_u16(memory_at_0, 6536))
		rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, 6528))
		while true do
			loc_1 = rt_sub_i32(loc_1, 15)
			loc_1 = (if loc_1 > loc_3 then loc_3 else loc_1)
			if rt_load_i32_u8(memory_at_0, rt_add_i32(loc_1, loc_2)) ~= 0 then
				while true do
					reg_0 = FUNC_LIST[761](loc_0, loc_2, loc_1)
					loc_2 = reg_0
					reg_0 = FUNC_LIST[649](loc_2)
					rt_store_i32(memory_at_0, rt_add_i32(reg_0, loc_2), 3026478)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[745](loc_0, loc_2)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = FUNC_LIST[649](loc_0)
		loc_2 = rt_add_i32(reg_0, loc_0)
		rt_store_i32_n16(memory_at_0, loc_2, rt_load_i32_u16(memory_at_0, 5110))
		rt_store_i32_n8(memory_at_0, loc_2 + 2, rt_load_i32_u8(memory_at_0, 5112))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[369] = --[[ luaopen_os ]] function(loc_0)
	local reg_0
	while true do
		FUNC_LIST[228](loc_0, 2005, 9616)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[370] = --[[ os_clock(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[374]()
		FUNC_LIST[141](loc_0, reg_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[371] = --[[ os_date(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0.0
	local loc_7 = rt_i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 784)
		GLOBAL_LIST[0].value = loc_1
		reg_0 = FUNC_LIST[208](loc_0, 1, 5038, 0)
		loc_2 = reg_0
		reg_0 = loc_1
		while true do
			reg_1 = FUNC_LIST[111](loc_0, 2)
			if rt_le_i32(reg_1, 0) then
				while true do
					reg_1 = FUNC_LIST[715](0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_1 = FUNC_LIST[216](loc_0, 2)
			loc_6 = reg_1
			if math_abs(loc_6) < 9.223372036854776e18 then
				while true do
					reg_1 = rt_truncate_i64_f64(loc_6)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_1 = rt_i64_from_u32(0, 2147483648)
			break
		end
		loc_7 = reg_1
		rt_store_i64(memory_at_0, reg_0 + 776, loc_7)
		while true do
			while true do
				while true do
					while true do
						if rt_load_i32_u8(memory_at_0, loc_2) == 33 then
							while true do
								loc_2 = rt_add_i32(loc_2, 1)
								reg_0 = FUNC_LIST[731](rt_add_i32(loc_1, 776), rt_add_i32(loc_1, 732))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if rt_lt_i64(loc_7, rt_i64_ZERO) then
							desired = 3
							break
						end
						reg_0 = FUNC_LIST[729](rt_add_i32(loc_1, 776), rt_add_i32(loc_1, 732))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_3 = reg_0
					if loc_3 ~= 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[140](loc_0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if rt_load_i32_u8(memory_at_0, loc_2) ~= 42 then
					break
				end
				if rt_load_i32_u8(memory_at_0, loc_2 + 1) ~= 116 then
					break
				end
				if rt_load_i32_u8(memory_at_0, loc_2 + 2) ~= 0 then
					break
				end
				FUNC_LIST[158](loc_0, 0, 9)
				FUNC_LIST[142](loc_0, rt_load_i32(memory_at_0, loc_3))
				FUNC_LIST[165](loc_0, 4294967294, 5034)
				FUNC_LIST[142](loc_0, rt_load_i32(memory_at_0, loc_3 + 4))
				FUNC_LIST[165](loc_0, 4294967294, 2822)
				FUNC_LIST[142](loc_0, rt_load_i32(memory_at_0, loc_3 + 8))
				FUNC_LIST[165](loc_0, 4294967294, 2302)
				FUNC_LIST[142](loc_0, rt_load_i32(memory_at_0, loc_3 + 12))
				FUNC_LIST[165](loc_0, 4294967294, 1252)
				FUNC_LIST[142](loc_0, rt_add_i32(rt_load_i32(memory_at_0, loc_3 + 16), 1))
				FUNC_LIST[165](loc_0, 4294967294, 3108)
				FUNC_LIST[142](loc_0, rt_add_i32(rt_load_i32(memory_at_0, loc_3 + 20), 1900))
				FUNC_LIST[165](loc_0, 4294967294, 2492)
				FUNC_LIST[142](loc_0, rt_add_i32(rt_load_i32(memory_at_0, loc_3 + 24), 1))
				FUNC_LIST[165](loc_0, 4294967294, 1251)
				FUNC_LIST[142](loc_0, rt_add_i32(rt_load_i32(memory_at_0, loc_3 + 28), 1))
				FUNC_LIST[165](loc_0, 4294967294, 1246)
				loc_2 = rt_load_i32(memory_at_0, loc_3 + 32)
				if rt_lt_i32(loc_2, 0) then
					desired = 1
					break
				end
				FUNC_LIST[150](loc_0, loc_2)
				FUNC_LIST[165](loc_0, 4294967294, 1604)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32_n8(memory_at_0, loc_1 + 731, 0)
			rt_store_i32_n8(memory_at_0, loc_1 + 729, 37)
			FUNC_LIST[231](loc_0, rt_add_i32(loc_1, 200))
			while true do
				while true do
					while true do
						loc_5 = rt_load_i32_u8(memory_at_0, loc_2)
						if loc_5 ~= 37 then
							while true do
								if loc_5 ~= 0 then
									desired = 4
									break
								end
								FUNC_LIST[239](rt_add_i32(loc_1, 200))
								desired = 1
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_4 = rt_load_i32_u8(memory_at_0, loc_2 + 1)
						if loc_4 ~= 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = rt_load_i32(memory_at_0, loc_1 + 200)
					reg_0 = loc_1
					if loc_4 >= rt_load_i32(memory_at_0, loc_1 + 204) then
						while true do
							reg_1 = FUNC_LIST[234](rt_add_i32(loc_1, 200), 1)
							loc_5 = rt_load_i32_u8(memory_at_0, loc_2)
							reg_1 = rt_load_i32(memory_at_0, loc_1 + 200)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_1 = loc_4
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_4 = reg_1
					rt_store_i32(memory_at_0, reg_0 + 200, rt_add_i32(loc_4, 1))
					rt_store_i32_n8(memory_at_0, loc_4, loc_5)
					loc_2 = rt_add_i32(loc_2, 1)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				reg_0 = FUNC_LIST[728](6504, rt_extend_i32_n8(loc_4), 24)
				if reg_0 ~= 0 then
					while true do
						rt_store_i32_n8(memory_at_0, loc_1 + 730, loc_4)
						reg_2 = FUNC_LIST[758](loc_1, 200, rt_add_i32(loc_1, 729), loc_3)
						FUNC_LIST[235](rt_add_i32(loc_1, 200), loc_1, reg_2)
						loc_2 = rt_add_i32(loc_2, 2)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[202](loc_0, 1, 2367)
			error("out of code bounds")
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 784)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[372] = --[[ os_difftime(lua_State*) ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		reg_0 = FUNC_LIST[216](loc_0, 1)
		loc_1 = reg_0
		while true do
			reg_0 = FUNC_LIST[217](loc_0, 2, 0e0)
			loc_2 = reg_0
			if math_abs(loc_2) < 9.223372036854776e18 then
				while true do
					reg_0 = rt_truncate_i64_f64(loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = rt_i64_from_u32(0, 2147483648)
			break
		end
		loc_3 = reg_0
		reg_0 = loc_0
		while true do
			if math_abs(loc_1) < 9.223372036854776e18 then
				while true do
					reg_1 = rt_truncate_i64_f64(loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_1 = rt_i64_from_u32(0, 2147483648)
			break
		end
		reg_1 = FUNC_LIST[713](reg_1, loc_3)
		FUNC_LIST[141](reg_0, reg_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[373] = --[[ os_time(lua_State*) ]] function(loc_0)
	local loc_1 = rt_i64_ZERO
	local loc_2 = rt_i64_ZERO
	local loc_3 = rt_i64_ZERO
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_5
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								reg_0 = FUNC_LIST[111](loc_0, 1)
								if rt_gt_i32(reg_0, 0) then
									while true do
										FUNC_LIST[214](loc_0, 1, 6)
										FUNC_LIST[106](loc_0, 1)
										reg_0 = FUNC_LIST[155](loc_0, 4294967295, 5034)
										reg_0 = FUNC_LIST[115](loc_0, 4294967295)
										if reg_0 ~= 0 then
											while true do
												reg_0 = FUNC_LIST[122](loc_0, 4294967295, 0)
												reg_0 = rt_extend_i64_i32(reg_0)
												break
											end
											if desired then
												break
											end
										else
											while true do
												reg_0 = loc_2
												break
											end
											if desired then
												break
											end
										end
										loc_2 = reg_0
										FUNC_LIST[106](loc_0, 4294967294)
										reg_0 = FUNC_LIST[155](loc_0, 4294967295, 2822)
										reg_0 = FUNC_LIST[115](loc_0, 4294967295)
										if reg_0 ~= 0 then
											while true do
												reg_0 = FUNC_LIST[122](loc_0, 4294967295, 0)
												reg_0 = rt_mul_i64(rt_extend_i64_i32(reg_0), rt_i64_from_u32(60, 0))
												break
											end
											if desired then
												break
											end
										else
											while true do
												reg_0 = loc_1
												break
											end
											if desired then
												break
											end
										end
										loc_1 = reg_0
										FUNC_LIST[106](loc_0, 4294967294)
										reg_0 = FUNC_LIST[155](loc_0, 4294967295, 2302)
										reg_0 = FUNC_LIST[115](loc_0, 4294967295)
										if reg_0 ~= 0 then
											while true do
												reg_0 = FUNC_LIST[122](loc_0, 4294967295, 0)
												reg_0 = rt_mul_i64(rt_extend_i64_i32(reg_0), rt_i64_from_u32(3600, 0))
												break
											end
											if desired then
												break
											end
										else
											while true do
												reg_0 = rt_i64_from_u32(43200, 0)
												break
											end
											if desired then
												break
											end
										end
										loc_3 = reg_0
										FUNC_LIST[106](loc_0, 4294967294)
										reg_0 = FUNC_LIST[155](loc_0, 4294967295, 1252)
										reg_0 = FUNC_LIST[115](loc_0, 4294967295)
										if reg_0 == 0 then
											desired = 5
											break
										end
										reg_0 = FUNC_LIST[122](loc_0, 4294967295, 0)
										loc_7 = reg_0
										FUNC_LIST[106](loc_0, 4294967294)
										reg_0 = FUNC_LIST[155](loc_0, 4294967295, 3108)
										reg_0 = FUNC_LIST[115](loc_0, 4294967295)
										if reg_0 == 0 then
											desired = 4
											break
										end
										reg_0 = FUNC_LIST[122](loc_0, 4294967295, 0)
										loc_4 = reg_0
										FUNC_LIST[106](loc_0, 4294967294)
										reg_0 = FUNC_LIST[155](loc_0, 4294967295, 2492)
										reg_0 = FUNC_LIST[115](loc_0, 4294967295)
										if reg_0 == 0 then
											desired = 3
											break
										end
										loc_6 = rt_sub_i32(loc_4, 1)
										reg_0 = FUNC_LIST[122](loc_0, 4294967295, 0)
										loc_8 = reg_0
										FUNC_LIST[106](loc_0, 4294967294)
										reg_0 = FUNC_LIST[155](loc_0, 4294967295, 1604)
										reg_0 = FUNC_LIST[111](loc_0, 4294967295)
										if reg_0 ~= 0 then
											while true do
												reg_0 = FUNC_LIST[124](loc_0, 4294967295)
												break
											end
											if desired then
												break
											end
										end
										FUNC_LIST[106](loc_0, 4294967294)
										loc_6 = rt_add_i32(rt_div_i32(loc_6, 4294967284), (if rt_lt_i32(rt_rem_i32(loc_6, 12), 2) then 1 else 0))
										reg_0 = rt_add_i32(loc_7, rt_div_i32(rt_sub_i32(rt_mul_i32(rt_add_i32(loc_4, rt_mul_i32(loc_6, 12)), 153), 457), 5))
										loc_4 = rt_add_i32(rt_sub_i32(loc_8, loc_6), 4800)
										loc_4 = rt_add_i32(rt_add_i32(rt_add_i32(rt_add_i32(reg_0, rt_mul_i32(loc_4, 365)), rt_div_i32(loc_4, 4)), rt_div_i32(loc_4, 4294967196)), rt_div_i32(loc_4, 400))
										if rt_lt_i32(loc_4, 2472633) then
											desired = 6
											break
										end
										loc_1 = rt_add_i64(rt_add_i64(loc_3, rt_add_i64(loc_1, loc_2)), rt_mul_i64(rt_extend_i64_u32(rt_sub_i32(loc_4, 32045)), rt_i64_from_u32(86400, 0)))
										if rt_lt_i64(loc_1, rt_i64_from_u32(413405696, 49)) then
											desired = 6
											break
										end
										loc_1 = rt_sub_i64(loc_1, rt_i64_from_u32(413405696, 49))
										desired = 2
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								reg_0 = FUNC_LIST[715](0)
								loc_1 = reg_0
								if rt_ne_i64(loc_1, rt_i64_from_u32(4294967295, 4294967295)) then
									desired = 2
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[140](loc_0)
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						rt_store_i32(memory_at_0, loc_5, 1252)
						FUNC_LIST[203](loc_0, 4438, loc_5)
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_5 + 16, 3108)
					FUNC_LIST[203](loc_0, 4438, rt_add_i32(loc_5, 16))
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_5 + 32, 2492)
				FUNC_LIST[203](loc_0, 4438, rt_add_i32(loc_5, 32))
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[141](loc_0, rt_convert_f64_i64(loc_1))
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 48)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[374] = --[[ lua_clock ]] function()
	local loc_0 = 0
	local reg_0
	while true do
		if rt_load_i32_u8(memory_at_0, 36360) == 0 then
			while true do
				rt_store_i32_n8(memory_at_0, 36360, 1)
				rt_store_i64(memory_at_0, 36352, rt_i64_from_u32(2696277389, 1051772663))
				break
			end
		end
		reg_0 = FUNC_LIST[714]()
		loc_0 = reg_0
		reg_0 = (rt_load_f64(memory_at_0, 36352) * rt_convert_f64_i32(loc_0))
		break
	end
	return reg_0
end
FUNC_LIST[375] = --[[ luaE_newthread(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[354](loc_0, 76, rt_load_i32_u8(memory_at_0, loc_0 + 4))
		loc_1 = reg_0
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 16)
		loc_2 = rt_load_i32_u8(memory_at_0, loc_3 + 20)
		rt_store_i32_n8(memory_at_0, loc_1, 9)
		rt_store_i32_n8(memory_at_0, loc_1 + 1, bit_and(loc_2, 3))
		loc_2 = rt_load_i32_u8(memory_at_0, loc_0 + 4)
		rt_store_i32(memory_at_0, loc_1 + 28, 0)
		rt_store_i32(memory_at_0, loc_1 + 16, loc_3)
		rt_store_i32_n8(memory_at_0, loc_1 + 2, loc_2)
		rt_store_i64(memory_at_0, loc_1 + 68, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_1 + 20, 0)
		rt_store_i64(memory_at_0, loc_1 + 36, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_1 + 3, 0)
		rt_store_i64(memory_at_0, loc_1 + 44, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_1 + 52, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_1 + 60, 0)
		rt_store_i32_n8(memory_at_0, loc_1 + 4, rt_load_i32_u8(memory_at_0, loc_0 + 4))
		FUNC_LIST[376](loc_1, loc_0)
		rt_store_i32(memory_at_0, loc_1 + 56, rt_load_i32(memory_at_0, loc_0 + 56))
		rt_store_i32_n8(memory_at_0, loc_1 + 6, rt_load_i32_u8(memory_at_0, loc_0 + 6))
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[376] = --[[ stack_init(lua_State*, lua_State*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[352](loc_1, 192, rt_load_i32_u8(memory_at_0, loc_0 + 2))
		loc_2 = reg_0
		rt_store_i32(memory_at_0, loc_0 + 44, 8)
		rt_store_i32(memory_at_0, loc_0 + 20, loc_2)
		rt_store_i32(memory_at_0, loc_0 + 36, loc_2)
		rt_store_i32(memory_at_0, loc_0 + 32, rt_add_i32(loc_2, 168))
		reg_0 = FUNC_LIST[352](loc_1, 720, rt_load_i32_u8(memory_at_0, loc_0 + 2))
		loc_2 = reg_0
		rt_store_i32(memory_at_0, loc_0 + 40, 45)
		rt_store_i32(memory_at_0, loc_0 + 28, loc_2)
		rt_store_i32(memory_at_0, loc_2 + 716, 0)
		rt_store_i32(memory_at_0, loc_2 + 700, 0)
		rt_store_i32(memory_at_0, loc_2 + 684, 0)
		rt_store_i32(memory_at_0, loc_2 + 668, 0)
		rt_store_i32(memory_at_0, loc_2 + 652, 0)
		rt_store_i32(memory_at_0, loc_2 + 636, 0)
		rt_store_i32(memory_at_0, loc_2 + 620, 0)
		rt_store_i32(memory_at_0, loc_2 + 604, 0)
		rt_store_i32(memory_at_0, loc_2 + 588, 0)
		rt_store_i32(memory_at_0, loc_2 + 572, 0)
		rt_store_i32(memory_at_0, loc_2 + 556, 0)
		rt_store_i32(memory_at_0, loc_2 + 540, 0)
		rt_store_i32(memory_at_0, loc_2 + 524, 0)
		rt_store_i32(memory_at_0, loc_2 + 508, 0)
		rt_store_i32(memory_at_0, loc_2 + 492, 0)
		rt_store_i32(memory_at_0, loc_2 + 476, 0)
		rt_store_i32(memory_at_0, loc_2 + 460, 0)
		rt_store_i32(memory_at_0, loc_2 + 444, 0)
		rt_store_i32(memory_at_0, loc_2 + 428, 0)
		rt_store_i32(memory_at_0, loc_2 + 412, 0)
		rt_store_i32(memory_at_0, loc_2 + 396, 0)
		rt_store_i32(memory_at_0, loc_2 + 380, 0)
		rt_store_i32(memory_at_0, loc_2 + 364, 0)
		rt_store_i32(memory_at_0, loc_2 + 348, 0)
		rt_store_i32(memory_at_0, loc_2 + 332, 0)
		rt_store_i32(memory_at_0, loc_2 + 316, 0)
		rt_store_i32(memory_at_0, loc_2 + 300, 0)
		rt_store_i32(memory_at_0, loc_2 + 284, 0)
		rt_store_i32(memory_at_0, loc_2 + 268, 0)
		rt_store_i32(memory_at_0, loc_2 + 252, 0)
		rt_store_i32(memory_at_0, loc_2 + 236, 0)
		rt_store_i32(memory_at_0, loc_2 + 220, 0)
		rt_store_i32(memory_at_0, loc_2 + 204, 0)
		rt_store_i32(memory_at_0, loc_2 + 188, 0)
		rt_store_i32(memory_at_0, loc_2 + 172, 0)
		rt_store_i32(memory_at_0, loc_2 + 156, 0)
		rt_store_i32(memory_at_0, loc_2 + 140, 0)
		rt_store_i32(memory_at_0, loc_2 + 124, 0)
		rt_store_i32(memory_at_0, loc_2 + 108, 0)
		rt_store_i32(memory_at_0, loc_2 + 92, 0)
		rt_store_i32(memory_at_0, loc_2 + 76, 0)
		rt_store_i32(memory_at_0, loc_2 + 60, 0)
		rt_store_i32(memory_at_0, loc_2 + 44, 0)
		rt_store_i32(memory_at_0, loc_2 + 28, 0)
		rt_store_i32(memory_at_0, loc_0 + 24, rt_add_i32(loc_2, 640))
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 20)
		rt_store_i32(memory_at_0, loc_1 + 4, loc_2)
		loc_3 = rt_add_i32(loc_2, 16)
		rt_store_i32(memory_at_0, loc_0 + 8, loc_3)
		rt_store_i32(memory_at_0, loc_2 + 12, 0)
		rt_store_i32(memory_at_0, loc_1, loc_3)
		rt_store_i32(memory_at_0, loc_0 + 12, loc_3)
		rt_store_i32(memory_at_0, loc_1 + 8, rt_add_i32(loc_2, 336))
		break
	end
end
FUNC_LIST[377] = --[[ luaE_freethread(lua_State*, lua_State*, lua_Page*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	while true do
		loc_3 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1708)
		if loc_3 ~= 0 then
			while true do
				TABLE_LIST[0].data[loc_3](0, loc_1)
				break
			end
		end
		FUNC_LIST[355](loc_0, rt_load_i32(memory_at_0, loc_1 + 36), rt_mul_i32(rt_load_i32(memory_at_0, loc_1 + 44), 24), rt_load_i32_u8(memory_at_0, loc_1 + 2))
		FUNC_LIST[355](loc_0, rt_load_i32(memory_at_0, loc_1 + 28), rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 40), 4), rt_load_i32_u8(memory_at_0, loc_1 + 2))
		FUNC_LIST[356](loc_0, loc_1, 76, rt_load_i32_u8(memory_at_0, loc_1 + 2), loc_2)
		break
	end
end
FUNC_LIST[378] = --[[ lua_resetthread ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		FUNC_LIST[19](loc_0, rt_load_i32(memory_at_0, loc_0 + 28))
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 36)
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 28)
		rt_store_i32(memory_at_0, loc_1 + 4, loc_3)
		rt_store_i32(memory_at_0, loc_1 + 8, rt_add_i32(loc_3, 336))
		loc_4 = rt_add_i32(loc_3, 16)
		rt_store_i32(memory_at_0, loc_1, loc_4)
		rt_store_i32(memory_at_0, loc_3 + 12, 0)
		rt_store_i32(memory_at_0, loc_0 + 20, loc_1)
		reg_0 = loc_0
		if rt_load_i32(memory_at_0, loc_0 + 44) ~= 8 then
			while true do
				FUNC_LIST[81](loc_0, 8)
				reg_1 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20))
				break
			end
		else
			while true do
				reg_1 = loc_4
				break
			end
		end
		loc_4 = reg_1
		rt_store_i32(memory_at_0, reg_0 + 12, loc_4)
		rt_store_i32_n8(memory_at_0, loc_0 + 3, 0)
		rt_store_i32(memory_at_0, loc_0 + 8, loc_4)
		rt_store_i32(memory_at_0, loc_0 + 48, 0)
		loc_2 = 45
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 40) ~= 45 then
				while true do
					FUNC_LIST[80](loc_0, 40)
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 40)
					if rt_le_i32(loc_2, 0) then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_5 = bit_and(loc_2, 7)
			loc_4 = rt_load_i32(memory_at_0, loc_0 + 28)
			loc_3 = 0
			loc_1 = 0
			if loc_2 >= 8 then
				while true do
					loc_6 = bit_and(loc_2, 2147483640)
					loc_2 = 0
					while true do
						loc_0 = rt_add_i32(rt_shl_i32(loc_1, 4), loc_4)
						rt_store_i32(memory_at_0, loc_0 + 12, 0)
						rt_store_i32(memory_at_0, loc_0 + 28, 0)
						rt_store_i32(memory_at_0, loc_0 + 44, 0)
						rt_store_i32(memory_at_0, loc_0 + 60, 0)
						rt_store_i32(memory_at_0, loc_0 + 76, 0)
						rt_store_i32(memory_at_0, loc_0 + 92, 0)
						rt_store_i32(memory_at_0, loc_0 + 108, 0)
						rt_store_i32(memory_at_0, loc_0 + 124, 0)
						loc_1 = rt_add_i32(loc_1, 8)
						loc_2 = rt_add_i32(loc_2, 8)
						if loc_6 ~= loc_2 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_5 == 0 then
				break
			end
			while true do
				rt_store_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_1, 4), loc_4) + 12, 0)
				loc_1 = rt_add_i32(loc_1, 1)
				loc_3 = rt_add_i32(loc_3, 1)
				if loc_5 ~= loc_3 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[379] = --[[ lua_isthreadreset ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 20) ~= rt_load_i32(memory_at_0, loc_0 + 36) then
				break
			end
			if rt_load_i32(memory_at_0, loc_0 + 12) ~= rt_load_i32(memory_at_0, loc_0 + 8) then
				break
			end
			loc_1 = (if rt_load_i32_u8(memory_at_0, loc_0 + 3) == 0 then 1 else 0)
			break
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[380] = --[[ lua_newstate ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		reg_0 = TABLE_LIST[0].data[loc_0](loc_1, 0, 0, 3560)
		loc_2 = reg_0
		if loc_2 ~= 0 then
			while true do
				rt_store_i32_n8(memory_at_0, loc_2 + 100, 9)
				rt_store_i32_n16(memory_at_0, loc_2, 2313)
				rt_store_i32(memory_at_0, loc_2 + 28, 0)
				rt_store_i32_n8(memory_at_0, loc_2 + 2, 0)
				rt_store_i64(memory_at_0, loc_2 + 68, rt_i64_ZERO)
				rt_store_i32(memory_at_0, loc_2 + 20, 0)
				rt_store_i64(memory_at_0, loc_2 + 36, rt_i64_ZERO)
				rt_store_i32(memory_at_0, loc_2 + 3, 0)
				rt_store_i32(memory_at_0, loc_2 + 96, loc_1)
				rt_store_i32(memory_at_0, loc_2 + 92, loc_0)
				rt_store_i32(memory_at_0, loc_2 + 116, 0)
				rt_store_i32(memory_at_0, loc_2 + 16, rt_add_i32(loc_2, 80))
				rt_store_i64(memory_at_0, loc_2 + 44, rt_i64_ZERO)
				rt_store_i64(memory_at_0, loc_2 + 52, rt_i64_ZERO)
				rt_store_i32(memory_at_0, loc_2 + 60, 0)
				loc_1 = rt_add_i32(loc_2, 1496)
				rt_store_i32(memory_at_0, loc_2 + 1508, loc_1)
				rt_store_i32(memory_at_0, loc_2 + 1504, loc_1)
				rt_store_i32(memory_at_0, loc_2 + 1492, loc_2)
				rt_store_i64(memory_at_0, rt_add_i32(loc_2, 1736), rt_i64_ZERO)
				rt_store_i64(memory_at_0, loc_2 + 1728, rt_i64_ZERO)
				rt_store_i64(memory_at_0, loc_2 + 1744, rt_i64_ONE)
				rt_store_i32(memory_at_0, loc_2 + 88, 0)
				rt_store_i64(memory_at_0, loc_2 + 80, rt_i64_ZERO)
				rt_store_i32(memory_at_0, loc_2 + 1708, 0)
				rt_store_i32(memory_at_0, loc_2 + 1724, 0)
				rt_store_i32(memory_at_0, loc_2 + 112, 0)
				rt_store_i64(memory_at_0, loc_2 + 104, rt_i64_ZERO)
				rt_store_i32_n8(memory_at_0, loc_2 + 101, 0)
				rt_store_i64(memory_at_0, loc_2 + 1752, rt_i64_ZERO)
				rt_store_i64(memory_at_0, rt_add_i32(loc_2, 1760), rt_i64_ZERO)
				rt_store_i64(memory_at_0, rt_add_i32(loc_2, 1768), rt_i64_ZERO)
				rt_store_i64(memory_at_0, loc_2 + 120, rt_i64_from_u32(3560, 200))
				rt_store_i64(memory_at_0, loc_2 + 128, rt_i64_from_u32(200, 1024))
				rt_store_i64(memory_at_0, loc_2 + 1520, rt_i64_ZERO)
				rt_store_i64(memory_at_0, rt_add_i32(loc_2, 1528), rt_i64_ZERO)
				rt_store_i64(memory_at_0, rt_add_i32(loc_2, 1536), rt_i64_ZERO)
				rt_store_i64(memory_at_0, rt_add_i32(loc_2, 1544), rt_i64_ZERO)
				rt_store_i64(memory_at_0, rt_add_i32(loc_2, 1552), rt_i64_ZERO)
				rt_store_i32(memory_at_0, rt_add_i32(loc_2, 1560), 0)
				reg_0 = FUNC_LIST[611](rt_add_i32(loc_2, 136), 0, 1356)
				reg_0 = FUNC_LIST[611](rt_add_i32(loc_2, 1844), 0, 1536)
				rt_store_i64(memory_at_0, loc_2 + 1776, rt_i64_ZERO)
				rt_store_i32(memory_at_0, loc_2 + 468, 3560)
				rt_store_i64(memory_at_0, rt_add_i32(loc_2, 1784), rt_i64_ZERO)
				rt_store_i64(memory_at_0, rt_add_i32(loc_2, 1792), rt_i64_ZERO)
				rt_store_i64(memory_at_0, rt_add_i32(loc_2, 1800), rt_i64_ZERO)
				rt_store_i64(memory_at_0, rt_add_i32(loc_2, 1808), rt_i64_ZERO)
				rt_store_i64(memory_at_0, loc_2 + 1816, rt_i64_ZERO)
				rt_store_i64(memory_at_0, rt_add_i32(loc_2, 1824), rt_i64_ZERO)
				rt_store_i64(memory_at_0, rt_add_i32(loc_2, 1832), rt_i64_ZERO)
				rt_store_i32(memory_at_0, rt_add_i32(loc_2, 1840), 0)
				reg_0 = FUNC_LIST[611](rt_add_i32(loc_2, 3384), 0, 176)
				reg_0 = FUNC_LIST[78](loc_2, 135, 0)
				if reg_0 == 0 then
					while true do
						reg_0 = loc_2
						desired = 0
						break
					end
					if desired then
						break
					end
				end
				FUNC_LIST[382](loc_2)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[381] = --[[ f_luaopen(lua_State*, void*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 16)
		FUNC_LIST[376](loc_0, loc_0)
		reg_1 = FUNC_LIST[423](loc_0, 0, 2)
		rt_store_i32(memory_at_0, loc_0 + 56, reg_1)
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
		reg_0 = FUNC_LIST[423](loc_0, 0, 2)
		loc_4 = reg_0
		rt_store_i32(memory_at_0, loc_2 + 1644, 6)
		rt_store_i32(memory_at_0, loc_2 + 1632, loc_4)
		FUNC_LIST[384](loc_0, 32)
		FUNC_LIST[459](loc_0)
		reg_0 = FUNC_LIST[387](loc_0, 1121, 17)
		loc_2 = reg_0
		rt_store_i32_n8(memory_at_0, loc_2 + 1, bit_or(rt_load_i32_u8(memory_at_0, loc_2 + 1), 8))
		reg_0 = FUNC_LIST[387](loc_0, 3507, 23)
		loc_0 = reg_0
		rt_store_i32_n8(memory_at_0, loc_0 + 1, bit_or(rt_load_i32_u8(memory_at_0, loc_0 + 1), 8))
		rt_store_i32(memory_at_0, loc_3 + 36, rt_shl_i32(rt_load_i32(memory_at_0, loc_3 + 40), 2))
		break
	end
end
FUNC_LIST[382] = --[[ close_state(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
		FUNC_LIST[19](loc_0, rt_load_i32(memory_at_0, loc_0 + 28))
		FUNC_LIST[39](loc_0)
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 16)
		FUNC_LIST[355](loc_0, rt_load_i32(memory_at_0, loc_1), rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 8), 2), 0)
		FUNC_LIST[355](loc_0, rt_load_i32(memory_at_0, loc_0 + 36), rt_mul_i32(rt_load_i32(memory_at_0, loc_0 + 44), 24), rt_load_i32_u8(memory_at_0, loc_0 + 2))
		FUNC_LIST[355](loc_0, rt_load_i32(memory_at_0, loc_0 + 28), rt_shl_i32(rt_load_i32(memory_at_0, loc_0 + 40), 4), rt_load_i32_u8(memory_at_0, loc_0 + 2))
		loc_1 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1740)
		if loc_1 ~= 0 then
			while true do
				TABLE_LIST[0].data[loc_1](loc_0)
				break
			end
		end
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, loc_2 + 12)](rt_load_i32(memory_at_0, loc_2 + 16), loc_0, 3560, 0)
		break
	end
end
FUNC_LIST[383] = --[[ lua_close ]] function(loc_0)
	while true do
		loc_0 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1412)
		FUNC_LIST[19](loc_0, rt_load_i32(memory_at_0, loc_0 + 28))
		FUNC_LIST[382](loc_0)
		break
	end
end
FUNC_LIST[384] = --[[ luaS_resize(lua_State*, int) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		if loc_1 <= 1073741823 then
			while true do
				loc_2 = rt_shl_i32(loc_1, 2)
				reg_0 = FUNC_LIST[352](loc_0, loc_2, 0)
				loc_4 = reg_0
				loc_3 = rt_load_i32(memory_at_0, loc_0 + 16)
				if loc_1 ~= 0 then
					while true do
						reg_0 = FUNC_LIST[611](loc_4, 0, loc_2)
						break
					end
					if desired then
						break
					end
				end
				loc_6 = rt_load_i32(memory_at_0, loc_3 + 8)
				if rt_gt_i32(loc_6, 0) then
					while true do
						loc_7 = rt_sub_i32(loc_1, 1)
						while true do
							loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_3), rt_shl_i32(loc_5, 2)))
							if loc_2 ~= 0 then
								while true do
									while true do
										loc_8 = rt_load_i32(memory_at_0, loc_2 + 8)
										loc_9 = rt_add_i32(rt_shl_i32(bit_and(loc_7, rt_load_i32(memory_at_0, loc_2 + 12)), 2), loc_4)
										rt_store_i32(memory_at_0, loc_2 + 8, rt_load_i32(memory_at_0, loc_9))
										rt_store_i32(memory_at_0, loc_9, loc_2)
										loc_2 = loc_8
										if loc_2 ~= 0 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 3 then
										desired = nil
										continue
									end
									break
								end
							end
							loc_5 = rt_add_i32(loc_5, 1)
							if loc_6 ~= loc_5 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						break
					end
				end
				FUNC_LIST[355](loc_0, rt_load_i32(memory_at_0, loc_3), rt_shl_i32(loc_6, 2), 0)
				rt_store_i32(memory_at_0, loc_3, loc_4)
				rt_store_i32(memory_at_0, loc_3 + 8, loc_1)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[351](loc_0)
		error("out of code bounds")
	end
end
FUNC_LIST[385] = --[[ luaS_bufstart(lua_State*, unsigned long) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	while true do
		if loc_1 >= 1073741825 then
			while true do
				FUNC_LIST[351](loc_0)
				error("out of code bounds")
			end
		end
		reg_0 = FUNC_LIST[354](loc_0, rt_add_i32(loc_1, 21), rt_load_i32_u8(memory_at_0, loc_0 + 4))
		loc_2 = reg_0
		loc_3 = rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 20)
		rt_store_i32_n8(memory_at_0, loc_2, 5)
		rt_store_i32_n8(memory_at_0, loc_2 + 1, bit_and(loc_3, 3))
		loc_0 = rt_load_i32_u8(memory_at_0, loc_0 + 4)
		rt_store_i32(memory_at_0, loc_2 + 16, loc_1)
		rt_store_i32_n16(memory_at_0, loc_2 + 4, 32768)
		rt_store_i32_n8(memory_at_0, loc_2 + 2, loc_0)
		rt_store_i64(memory_at_0, loc_2 + 8, rt_i64_ZERO)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[386] = --[[ luaS_buffinish(lua_State*, TString*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		loc_8 = rt_add_i32(loc_1, 20)
		while true do
			while true do
				loc_5 = rt_load_i32(memory_at_0, loc_1 + 16)
				if loc_5 > 31 then
					while true do
						loc_2 = loc_8
						loc_6 = loc_5
						loc_3 = loc_5
						while true do
							loc_3 = rt_add_i32(loc_3, rt_load_i32(memory_at_0, loc_2 + 8))
							loc_4 = rt_sub_i32(bit_xor(loc_3, rt_add_i32(loc_4, rt_load_i32(memory_at_0, loc_2))), rt_rotl_i32(loc_3, 18))
							loc_7 = rt_sub_i32(bit_xor(loc_4, rt_add_i32(loc_7, rt_load_i32(memory_at_0, loc_2 + 4))), rt_rotl_i32(loc_4, 21))
							loc_3 = rt_sub_i32(bit_xor(loc_7, loc_3), rt_rotl_i32(loc_7, 7))
							loc_2 = rt_add_i32(loc_2, 12)
							loc_6 = rt_sub_i32(loc_6, 12)
							if loc_6 > 31 then
								continue
							end
							break
						end
						if desired then
							break
						end
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = loc_8
				loc_6 = loc_5
				loc_3 = loc_5
				if loc_3 ~= 0 then
					break
				end
				loc_3 = 0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if bit_and(loc_6, 1) == 0 then
					while true do
						loc_4 = loc_6
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_4 = rt_sub_i32(loc_6, 1)
				loc_3 = bit_xor(loc_3, rt_add_i32(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_4, loc_2)), rt_add_i32(rt_shl_i32(loc_3, 5), rt_shr_u32(loc_3, 2))))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_6 == 1 then
				break
			end
			while true do
				loc_3 = bit_xor(loc_3, rt_add_i32(rt_load_i32_u8(memory_at_0, rt_sub_i32(rt_add_i32(loc_2, loc_4), 1)), rt_add_i32(rt_shl_i32(loc_3, 5), rt_shr_u32(loc_3, 2))))
				loc_4 = rt_sub_i32(loc_4, 2)
				loc_3 = bit_xor(rt_add_i32(rt_add_i32(rt_shl_i32(loc_3, 5), rt_shr_u32(loc_3, 2)), rt_load_i32_u8(memory_at_0, rt_add_i32(loc_4, loc_2))), loc_3)
				if loc_4 ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			loc_4 = rt_load_i32(memory_at_0, loc_0 + 16)
			loc_7 = rt_shl_i32(bit_and(loc_3, rt_sub_i32(rt_load_i32(memory_at_0, loc_4 + 8), 1)), 2)
			loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_4), loc_7))
			if loc_2 ~= 0 then
				while true do
					while true do
						while true do
							if loc_5 ~= rt_load_i32(memory_at_0, loc_2 + 16) then
								break
							end
							reg_0 = FUNC_LIST[685](rt_add_i32(loc_2, 20), loc_8, loc_5)
							if reg_0 ~= 0 then
								break
							end
							loc_3 = rt_load_i32_u8(memory_at_0, loc_2 + 1)
							if bit_xor(bit_and(rt_load_i32_u8(memory_at_0, loc_4 + 20), 3), bit_and(loc_3, 11)) ~= 3 then
								desired = 1
								break
							end
							rt_store_i32_n8(memory_at_0, loc_2 + 1, bit_xor(loc_3, 3))
							reg_0 = loc_2
							desired = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
						loc_2 = rt_load_i32(memory_at_0, loc_2 + 8)
						if loc_2 ~= 0 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i32(memory_at_0, loc_1 + 12, loc_3)
			rt_store_i32_n8(memory_at_0, rt_add_i32(loc_5, loc_8), 0)
			rt_store_i32_n16(memory_at_0, loc_1 + 4, 32768)
			loc_2 = rt_add_i32(loc_7, rt_load_i32(memory_at_0, loc_4))
			rt_store_i32(memory_at_0, loc_1 + 8, rt_load_i32(memory_at_0, loc_2))
			rt_store_i32(memory_at_0, loc_2, loc_1)
			loc_3 = rt_add_i32(rt_load_i32(memory_at_0, loc_4 + 4), 1)
			rt_store_i32(memory_at_0, loc_4 + 4, loc_3)
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_4 + 8)
				if loc_2 >= loc_3 then
					break
				end
				if rt_gt_i32(loc_2, 1073741823) then
					break
				end
				FUNC_LIST[384](loc_0, rt_shl_i32(loc_2, 1))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = loc_1
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[387] = --[[ luaS_newlstr(lua_State*, char const*, unsigned long) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				if loc_2 > 31 then
					while true do
						loc_3 = loc_1
						loc_6 = loc_2
						loc_4 = loc_2
						while true do
							loc_4 = rt_add_i32(loc_4, rt_load_i32(memory_at_0, loc_3 + 8))
							loc_5 = rt_sub_i32(bit_xor(loc_4, rt_add_i32(loc_5, rt_load_i32(memory_at_0, loc_3))), rt_rotl_i32(loc_4, 18))
							loc_7 = rt_sub_i32(bit_xor(loc_5, rt_add_i32(loc_7, rt_load_i32(memory_at_0, loc_3 + 4))), rt_rotl_i32(loc_5, 21))
							loc_4 = rt_sub_i32(bit_xor(loc_7, loc_4), rt_rotl_i32(loc_7, 7))
							loc_3 = rt_add_i32(loc_3, 12)
							loc_6 = rt_sub_i32(loc_6, 12)
							if loc_6 > 31 then
								continue
							end
							break
						end
						if desired then
							break
						end
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_3 = loc_1
				loc_6 = loc_2
				loc_4 = loc_2
				if loc_4 ~= 0 then
					break
				end
				loc_4 = 0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if bit_and(loc_6, 1) == 0 then
					while true do
						loc_5 = loc_6
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_5 = rt_sub_i32(loc_6, 1)
				loc_4 = bit_xor(loc_4, rt_add_i32(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_5, loc_3)), rt_add_i32(rt_shl_i32(loc_4, 5), rt_shr_u32(loc_4, 2))))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_6 == 1 then
				break
			end
			while true do
				loc_4 = bit_xor(loc_4, rt_add_i32(rt_load_i32_u8(memory_at_0, rt_sub_i32(rt_add_i32(loc_3, loc_5), 1)), rt_add_i32(rt_shl_i32(loc_4, 5), rt_shr_u32(loc_4, 2))))
				loc_5 = rt_sub_i32(loc_5, 2)
				loc_4 = bit_xor(rt_add_i32(rt_add_i32(rt_shl_i32(loc_4, 5), rt_shr_u32(loc_4, 2)), rt_load_i32_u8(memory_at_0, rt_add_i32(loc_5, loc_3))), loc_4)
				if loc_5 ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			while true do
				loc_5 = rt_load_i32(memory_at_0, loc_0 + 16)
				loc_3 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_5), rt_shl_i32(bit_and(loc_4, rt_sub_i32(rt_load_i32(memory_at_0, loc_5 + 8), 1)), 2)))
				if loc_3 ~= 0 then
					while true do
						while true do
							while true do
								if loc_2 ~= rt_load_i32(memory_at_0, loc_3 + 16) then
									break
								end
								reg_0 = FUNC_LIST[685](loc_1, rt_add_i32(loc_3, 20), loc_2)
								if reg_0 ~= 0 then
									break
								end
								loc_4 = rt_load_i32_u8(memory_at_0, loc_3 + 1)
								if bit_xor(bit_and(rt_load_i32_u8(memory_at_0, loc_5 + 20), 3), bit_and(loc_4, 11)) ~= 3 then
									desired = 2
									break
								end
								rt_store_i32_n8(memory_at_0, loc_3 + 1, bit_xor(loc_4, 3))
								reg_0 = loc_3
								desired = 0
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							loc_3 = rt_load_i32(memory_at_0, loc_3 + 8)
							if loc_3 ~= 0 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_2 >= 1073741825 then
					desired = 1
					break
				end
				reg_0 = FUNC_LIST[354](loc_0, rt_add_i32(loc_2, 21), rt_load_i32_u8(memory_at_0, loc_0 + 4))
				loc_3 = reg_0
				loc_5 = rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 20)
				rt_store_i32_n8(memory_at_0, loc_3, 5)
				rt_store_i32_n8(memory_at_0, loc_3 + 1, bit_and(loc_5, 3))
				loc_5 = rt_load_i32_u8(memory_at_0, loc_0 + 4)
				rt_store_i32(memory_at_0, loc_3 + 16, loc_2)
				rt_store_i32(memory_at_0, loc_3 + 12, loc_4)
				rt_store_i32_n16(memory_at_0, loc_3 + 4, 32768)
				rt_store_i32_n8(memory_at_0, loc_3 + 2, loc_5)
				reg_0 = FUNC_LIST[609](rt_add_i32(loc_3, 20), loc_1, loc_2)
				rt_store_i32_n8(memory_at_0, rt_add_i32(reg_0, loc_2), 0)
				loc_5 = rt_load_i32(memory_at_0, loc_0 + 16)
				loc_7 = rt_load_i32(memory_at_0, loc_5 + 8)
				loc_4 = rt_add_i32(rt_load_i32(memory_at_0, loc_5), rt_shl_i32(bit_and(loc_4, rt_sub_i32(loc_7, 1)), 2))
				rt_store_i32(memory_at_0, loc_3 + 8, rt_load_i32(memory_at_0, loc_4))
				rt_store_i32(memory_at_0, loc_4, loc_3)
				loc_4 = rt_add_i32(rt_load_i32(memory_at_0, loc_5 + 4), 1)
				rt_store_i32(memory_at_0, loc_5 + 4, loc_4)
				if rt_gt_i32(loc_7, 1073741823) then
					break
				end
				if loc_4 <= loc_7 then
					break
				end
				FUNC_LIST[384](loc_0, rt_shl_i32(loc_7, 1))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = loc_3
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[351](loc_0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[388] = --[[ luaS_free(lua_State*, TString*, lua_Page*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 16)
			loc_4 = rt_add_i32(rt_load_i32(memory_at_0, loc_3), rt_shl_i32(bit_and(rt_load_i32(memory_at_0, loc_1 + 12), rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 8), 1)), 2))
			loc_3 = rt_load_i32(memory_at_0, loc_4)
			if loc_3 == 0 then
				break
			end
			if loc_1 ~= loc_3 then
				while true do
					while true do
						loc_4 = loc_3
						loc_3 = rt_load_i32(memory_at_0, loc_4 + 8)
						if loc_3 == 0 then
							desired = 1
							break
						end
						if loc_1 ~= loc_3 then
							continue
						end
						break
					end
					if desired then
						break
					end
					reg_0 = rt_add_i32(loc_4, 8)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_4
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = reg_0
			rt_store_i32(memory_at_0, loc_4, rt_load_i32(memory_at_0, loc_3 + 8))
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 16)
			rt_store_i32(memory_at_0, loc_3 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 4), 1))
			break
		end
		FUNC_LIST[356](loc_0, loc_1, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 16), 21), rt_load_i32_u8(memory_at_0, loc_1 + 2), loc_2)
		break
	end
end
FUNC_LIST[389] = --[[ luaopen_string ]] function(loc_0)
	local reg_0
	while true do
		FUNC_LIST[228](loc_0, 3433, 9664)
		FUNC_LIST[158](loc_0, 0, 1)
		FUNC_LIST[145](loc_0, 6597, 0)
		FUNC_LIST[110](loc_0, 4294967294)
		reg_0 = FUNC_LIST[169](loc_0, 4294967294)
		FUNC_LIST[106](loc_0, 4294967294)
		FUNC_LIST[110](loc_0, 4294967294)
		FUNC_LIST[165](loc_0, 4294967294, 1355)
		FUNC_LIST[106](loc_0, 4294967294)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[390] = --[[ str_byte(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		reg_0 = FUNC_LIST[209](loc_0, 1, rt_add_i32(loc_4, 12))
		loc_6 = reg_0
		while true do
			reg_2 = FUNC_LIST[221](loc_0, 2, 1)
			loc_1 = reg_2
			loc_1 = rt_add_i32(loc_1, bit_and(rt_add_i32(rt_load_i32(memory_at_0, loc_4 + 12), 1), rt_shr_i32(loc_1, 31)))
			reg_0 = FUNC_LIST[221](loc_0, 3, (if rt_gt_i32(loc_1, 0) then loc_1 else 0))
			loc_2 = reg_0
			reg_0 = loc_2
			reg_1 = rt_shr_i32(loc_2, 31)
			loc_2 = rt_load_i32(memory_at_0, loc_4 + 12)
			loc_3 = rt_add_i32(reg_0, bit_and(reg_1, rt_add_i32(loc_2, 1)))
			loc_3 = (if rt_gt_i32(loc_3, 0) then loc_3 else 0)
			loc_2 = (if loc_2 > loc_3 then loc_3 else loc_2)
			loc_1 = (if rt_le_i32(loc_1, 1) then 1 else loc_1)
			if loc_2 >= loc_1 then
				while true do
					if loc_2 == 2147483647 then
						desired = 1
						break
					end
					loc_2 = rt_sub_i32(loc_2, loc_1)
					loc_5 = rt_add_i32(loc_2, 1)
					FUNC_LIST[213](loc_0, loc_5, 3159)
					loc_2 = rt_add_i32(loc_2, 1)
					loc_3 = rt_sub_i32(rt_add_i32(loc_1, loc_6), 1)
					loc_1 = 0
					while true do
						FUNC_LIST[142](loc_0, rt_load_i32_u8(memory_at_0, rt_add_i32(loc_1, loc_3)))
						loc_1 = rt_add_i32(loc_1, 1)
						if loc_2 ~= loc_1 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
			reg_0 = loc_5
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[203](loc_0, 3159, 0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[391] = --[[ str_char(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 528)
		GLOBAL_LIST[0].value = loc_2
		reg_2 = FUNC_LIST[105](loc_0)
		loc_3 = reg_2
		reg_0 = FUNC_LIST[232](loc_0, loc_2, loc_3)
		loc_4 = reg_0
		while true do
			if rt_gt_i32(loc_3, 0) then
				while true do
					loc_1 = 1
					while true do
						reg_0 = FUNC_LIST[220](loc_0, loc_1)
						loc_5 = reg_0
						if loc_5 >= 256 then
							desired = 1
							break
						end
						rt_store_i32_n8(memory_at_0, loc_4, loc_5)
						loc_4 = rt_add_i32(loc_4, 1)
						loc_5 = (if loc_1 == loc_3 then 1 else 0)
						loc_1 = rt_add_i32(loc_1, 1)
						if loc_5 == 0 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[240](loc_2, loc_3)
			GLOBAL_LIST[0].value = rt_add_i32(loc_2, 528)
			reg_0 = 1
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[202](loc_0, loc_1, 3887)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[392] = --[[ str_find(lua_State*) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[393](loc_0, 1)
		break
	end
	return reg_0
end
FUNC_LIST[393] = --[[ str_find_aux(lua_State*, int) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 288)
		GLOBAL_LIST[0].value = loc_3
		loc_8 = 1
		reg_0 = FUNC_LIST[209](loc_0, 1, rt_add_i32(loc_3, 284))
		loc_7 = reg_0
		reg_0 = FUNC_LIST[209](loc_0, 2, rt_add_i32(loc_3, 280))
		loc_4 = reg_0
		while true do
			while true do
				reg_0 = FUNC_LIST[221](loc_0, 3, 1)
				loc_2 = reg_0
				loc_5 = rt_add_i32(rt_load_i32(memory_at_0, loc_3 + 284), 1)
				loc_2 = rt_add_i32(loc_2, bit_and(loc_5, rt_shr_i32(loc_2, 31)))
				if rt_gt_i32(loc_2, 0) then
					while true do
						loc_8 = loc_2
						if rt_gt_i32(loc_2, loc_5) then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				while true do
					if loc_1 == 0 then
						while true do
							loc_6 = rt_load_i32(memory_at_0, loc_3 + 280)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[124](loc_0, 4)
					loc_2 = reg_0
					loc_6 = rt_load_i32(memory_at_0, loc_3 + 280)
					if loc_2 == 0 then
						while true do
							loc_2 = 0
							while true do
								loc_5 = rt_add_i32(loc_2, loc_4)
								reg_0 = FUNC_LIST[764](loc_5, 5453)
								if reg_0 ~= 0 then
									desired = 3
									break
								end
								reg_1 = FUNC_LIST[649](loc_5)
								loc_2 = rt_add_i32(rt_add_i32(reg_1, loc_2), 1)
								if loc_6 >= loc_2 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = rt_sub_i32(rt_add_i32(loc_7, loc_8), 1)
					while true do
						if loc_6 == 0 then
							while true do
								loc_6 = loc_2
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_5 = rt_add_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 284), loc_8), 1)
						if loc_5 < loc_6 then
							desired = 2
							break
						end
						loc_8 = rt_sub_i32(loc_6, 1)
						loc_5 = rt_sub_i32(loc_5, loc_8)
						if loc_5 == 0 then
							desired = 2
							break
						end
						loc_9 = rt_add_i32(loc_4, 1)
						loc_1 = rt_load_i32_i8(memory_at_0, loc_4)
						while true do
							reg_0 = FUNC_LIST[728](loc_2, loc_1, loc_5)
							loc_6 = reg_0
							if loc_6 == 0 then
								desired = 2
								break
							end
							loc_4 = rt_add_i32(loc_6, 1)
							reg_0 = FUNC_LIST[685](loc_4, loc_9, loc_8)
							if reg_0 == 0 then
								desired = 4
								break
							end
							loc_5 = rt_add_i32(loc_2, loc_5)
							loc_2 = loc_4
							loc_5 = rt_sub_i32(loc_5, loc_2)
							if loc_5 ~= 0 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = rt_sub_i32(loc_6, loc_7)
					FUNC_LIST[142](loc_0, rt_add_i32(loc_2, 1))
					FUNC_LIST[142](loc_0, rt_add_i32(rt_load_i32(memory_at_0, loc_3 + 280), loc_2))
					loc_4 = 2
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = rt_add_i32(loc_7, loc_8)
				loc_5 = rt_load_i32_u8(memory_at_0, loc_4)
				if loc_5 == 94 then
					while true do
						loc_6 = rt_sub_i32(loc_6, 1)
						rt_store_i32(memory_at_0, loc_3 + 280, loc_6)
						reg_0 = rt_add_i32(loc_4, 1)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_4
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_4 = reg_0
				loc_2 = rt_sub_i32(loc_2, 1)
				rt_store_i32(memory_at_0, loc_3 + 16, loc_0)
				rt_store_i32(memory_at_0, loc_3, 200)
				rt_store_i32(memory_at_0, loc_3 + 12, rt_add_i32(loc_4, loc_6))
				rt_store_i32(memory_at_0, loc_3 + 4, loc_7)
				rt_store_i32(memory_at_0, loc_3 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_3 + 284), loc_7))
				loc_6 = (if loc_5 == 94 then 1 else 0)
				while true do
					rt_store_i32(memory_at_0, loc_3 + 20, 0)
					reg_0 = FUNC_LIST[398](loc_3, loc_2, loc_4)
					loc_5 = reg_0
					if loc_5 ~= 0 then
						while true do
							if loc_1 ~= 0 then
								while true do
									FUNC_LIST[142](loc_0, rt_add_i32(rt_sub_i32(loc_2, loc_7), 1))
									FUNC_LIST[142](loc_0, rt_sub_i32(loc_5, loc_7))
									loc_5 = rt_load_i32(memory_at_0, loc_3 + 20)
									FUNC_LIST[213](rt_load_i32(memory_at_0, loc_3 + 16), loc_5, 2008)
									if rt_gt_i32(loc_5, 0) then
										while true do
											loc_2 = 0
											while true do
												FUNC_LIST[399](loc_3, loc_2, 0, 0)
												loc_2 = rt_add_i32(loc_2, 1)
												if loc_5 ~= loc_2 then
													continue
												end
												break
											end
											if desired then
												break
											end
											break
										end
										if desired then
											break
										end
									end
									loc_4 = rt_add_i32(loc_5, 2)
									desired = 1
									break
								end
								if desired then
									break
								end
							end
							loc_4 = rt_load_i32(memory_at_0, loc_3 + 20)
							loc_0 = (if loc_4 <= 1 then 1 else loc_4)
							FUNC_LIST[213](rt_load_i32(memory_at_0, loc_3 + 16), loc_0, 2008)
							if rt_le_i32(loc_0, 0) then
								desired = 1
								break
							end
							loc_4 = 0
							while true do
								FUNC_LIST[399](loc_3, loc_4, loc_2, loc_5)
								loc_4 = rt_add_i32(loc_4, 1)
								if loc_0 ~= loc_4 then
									continue
								end
								break
							end
							if desired then
								break
							end
							loc_4 = loc_0
							desired = 1
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					if loc_6 ~= 0 then
						desired = 2
						break
					end
					loc_5 = (if rt_load_i32(memory_at_0, loc_3 + 8) > loc_2 then 1 else 0)
					loc_2 = rt_add_i32(loc_2, 1)
					if loc_5 ~= 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[140](loc_0)
			loc_4 = 1
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 288)
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[394] = --[[ str_format(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0.0
	local loc_11 = rt_i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local desired
	local br_map = {}
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 1216)
		GLOBAL_LIST[0].value = loc_1
		reg_0 = FUNC_LIST[105](loc_0)
		loc_7 = reg_0
		reg_0 = FUNC_LIST[209](loc_0, 1, rt_add_i32(loc_1, 1208))
		loc_4 = reg_0
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 1208)
		FUNC_LIST[231](loc_0, rt_add_i32(loc_1, 680))
		while true do
			while true do
				while true do
					while true do
						if rt_gt_i32(loc_2, 0) then
							while true do
								loc_8 = rt_add_i32(loc_2, loc_4)
								loc_9 = bit_or(rt_add_i32(loc_1, 640), 1)
								loc_5 = 1
								while true do
									loc_3 = loc_5
									while true do
										loc_2 = rt_load_i32_u8(memory_at_0, loc_4)
										if loc_2 ~= 37 then
											while true do
												loc_5 = rt_load_i32(memory_at_0, loc_1 + 680)
												if loc_5 >= rt_load_i32(memory_at_0, loc_1 + 684) then
													while true do
														reg_0 = FUNC_LIST[234](rt_add_i32(loc_1, 680), 1)
														loc_5 = rt_load_i32(memory_at_0, loc_1 + 680)
														reg_0 = rt_load_i32_u8(memory_at_0, loc_4)
														break
													end
													if desired then
														break
													end
												else
													while true do
														reg_0 = loc_2
														break
													end
													if desired then
														break
													end
												end
												loc_2 = reg_0
												rt_store_i32(memory_at_0, loc_1 + 680, rt_add_i32(loc_5, 1))
												rt_store_i32_n8(memory_at_0, loc_5, loc_2)
												loc_4 = rt_add_i32(loc_4, 1)
												loc_5 = loc_3
												desired = 7
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
										end
										loc_6 = rt_add_i32(loc_4, 1)
										while true do
											while true do
												while true do
													loc_2 = rt_load_i32_u8(memory_at_0, loc_4 + 1)
													if not br_map[1] then
														br_map[1] = (function()
															return { [0] = 0, 2, 2, 2, 2, 1, }
														end)()
													end
													temp = br_map[1][rt_sub_i32(loc_2, 37)] or 2
													if temp < 1 then
														break
													elseif temp > 1 then
														desired = 8
														break
													else
														desired = 9
														break
													end
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
												loc_5 = 37
												loc_2 = rt_load_i32(memory_at_0, loc_1 + 680)
												reg_0 = loc_1
												if loc_2 >= rt_load_i32(memory_at_0, loc_1 + 684) then
													while true do
														reg_1 = FUNC_LIST[234](rt_add_i32(loc_1, 680), 1)
														loc_5 = rt_load_i32_u8(memory_at_0, loc_6)
														reg_1 = rt_load_i32(memory_at_0, loc_1 + 680)
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
														end
														break
													end
												else
													while true do
														reg_1 = loc_2
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
														end
														break
													end
												end
												loc_2 = reg_1
												rt_store_i32(memory_at_0, reg_0 + 680, rt_add_i32(loc_2, 1))
												rt_store_i32_n8(memory_at_0, loc_2, loc_5)
												loc_4 = rt_add_i32(loc_4, 2)
												loc_5 = loc_3
												desired = 7
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
											loc_5 = rt_add_i32(loc_3, 1)
											if rt_ge_i32(loc_3, loc_7) then
												desired = 4
												break
											end
											FUNC_LIST[237](rt_add_i32(loc_1, 680), loc_5)
											loc_4 = rt_add_i32(loc_4, 2)
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
										loc_5 = rt_add_i32(loc_3, 1)
										if rt_ge_i32(loc_3, loc_7) then
											desired = 3
											break
										end
										loc_4 = loc_6
										while true do
											if loc_2 == 0 then
												while true do
													loc_3 = loc_4
													reg_0 = 0
													desired = 8
													break
												end
												if desired then
													if desired == 8 then
														desired = nil
													end
													break
												end
											end
											while true do
												while true do
													if bit_and(loc_2, 255) > 63 then
														while true do
															loc_3 = loc_4
															desired = 9
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
																continue
															end
															break
														end
													end
													if rt_eq_i64(rt_bit_and_i64(rt_shl_i64(rt_i64_ONE, rt_extend_i64_u32(loc_2)), rt_i64_from_u32(1, 75785)), rt_i64_ZERO) then
														while true do
															loc_3 = loc_4
															desired = 9
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
																continue
															end
															break
														end
													end
													loc_2 = rt_load_i32_u8(memory_at_0, loc_4 + 1)
													loc_3 = rt_add_i32(loc_4, 1)
													loc_4 = loc_3
													if loc_2 ~= 0 then
														continue
													end
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
												loc_2 = 0
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
											reg_0 = (if rt_sub_i32(bit_and(loc_2, 255), 48) < 10 then 1 else 0)
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
										loc_4 = reg_0
										if rt_sub_i32(loc_3, loc_6) >= 6 then
											desired = 2
											break
										end
										loc_4 = rt_add_i32(loc_3, loc_4)
										loc_2 = rt_add_i32(loc_4, (if rt_sub_i32(rt_load_i32_u8(memory_at_0, loc_4), 48) < 10 then 1 else 0))
										loc_4 = rt_load_i32_u8(memory_at_0, loc_2)
										if loc_4 == 46 then
											while true do
												loc_4 = (if rt_sub_i32(rt_load_i32_u8(memory_at_0, loc_2 + 1), 48) < 10 then 1 else 0)
												loc_2 = rt_add_i32((if loc_4 ~= 0 then rt_add_i32(loc_2, 2) else rt_add_i32(loc_2, 1)), (if rt_sub_i32(rt_load_i32_u8(memory_at_0, rt_add_i32((if loc_4 ~= 0 then 2 else 1), loc_2)), 48) < 10 then 1 else 0))
												reg_0 = rt_load_i32_u8(memory_at_0, loc_2)
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
										else
											while true do
												reg_0 = loc_4
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
										end
										loc_4 = reg_0
										if rt_sub_i32(bit_and(loc_4, 255), 48) <= 9 then
											desired = 1
											break
										end
										rt_store_i32_n8(memory_at_0, loc_1 + 640, 37)
										loc_3 = rt_add_i32(rt_sub_i32(loc_2, loc_6), 1)
										reg_0 = FUNC_LIST[762](loc_9, loc_6, loc_3)
										rt_store_i32_n8(memory_at_0, rt_add_i32(reg_0, loc_3), 0)
										loc_4 = rt_add_i32(loc_2, 1)
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		while true do
																			while true do
																				loc_2 = rt_load_i32_u8(memory_at_0, loc_2)
																				if not br_map[2] then
																					br_map[2] = (function()
																						return { [0] = 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 6, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 2, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 1, 7, 7, 7, 6, 1, 6, 6, 6, 6, 6, 2, 6, 3, 6, 4, 6, 2, 6, 6, 2, }
																					end)()
																				end
																				temp = br_map[2][rt_sub_i32(loc_2, 42)] or 6
																				if temp < 4 then
																					if temp < 2 then
																						if temp < 1 then
																							break
																						else
																							desired = 16
																							break
																						end
																					elseif temp > 2 then
																						desired = 14
																						break
																					else
																						desired = 15
																						break
																					end
																				elseif temp > 4 then
																					if temp < 6 then
																						desired = 12
																						break
																					elseif temp > 6 then
																						desired = 10
																						break
																					else
																						desired = 11
																						break
																					end
																				else
																					desired = 13
																					break
																				end
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																				end
																				break
																			end
																			reg_0 = loc_1
																			while true do
																				reg_1 = FUNC_LIST[216](loc_0, loc_5)
																				loc_10 = reg_1
																				if math_abs(loc_10) < 2.147483648e9 then
																					while true do
																						reg_1 = rt_truncate_f64(loc_10)
																						desired = 17
																						break
																					end
																					if desired then
																						if desired == 17 then
																							desired = nil
																						end
																						break
																					end
																				end
																				reg_1 = 2147483648
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																				end
																				break
																			end
																			loc_2 = reg_1
																			rt_store_i32(memory_at_0, reg_0 + 16, loc_2)
																			reg_0 = FUNC_LIST[739](rt_add_i32(loc_1, 128), 512, rt_add_i32(loc_1, 640), rt_add_i32(loc_1, 16))
																			desired = 9
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																		loc_3 = rt_add_i32(loc_3, rt_add_i32(loc_1, 640))
																		rt_store_i32_n16(memory_at_0, loc_3, 27756)
																		rt_store_i32_n8(memory_at_0, loc_3 + 3, 0)
																		rt_store_i32_n8(memory_at_0, loc_3 + 2, loc_2)
																		reg_0 = loc_1
																		while true do
																			reg_1 = FUNC_LIST[216](loc_0, loc_5)
																			loc_10 = reg_1
																			if math_abs(loc_10) < 9.223372036854776e18 then
																				while true do
																					reg_1 = rt_truncate_i64_f64(loc_10)
																					desired = 16
																					break
																				end
																				if desired then
																					if desired == 16 then
																						desired = nil
																					end
																					break
																				end
																			end
																			reg_1 = rt_i64_from_u32(0, 2147483648)
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																		loc_11 = reg_1
																		rt_store_i64(memory_at_0, reg_0 + 32, loc_11)
																		reg_0 = FUNC_LIST[739](rt_add_i32(loc_1, 128), 512, rt_add_i32(loc_1, 640), rt_add_i32(loc_1, 32))
																		desired = 9
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																		end
																		break
																	end
																	reg_0 = FUNC_LIST[216](loc_0, loc_5)
																	loc_10 = reg_0
																	loc_3 = rt_add_i32(loc_3, rt_add_i32(loc_1, 640))
																	rt_store_i32_n16(memory_at_0, loc_3, 27756)
																	rt_store_i32_n8(memory_at_0, loc_3 + 3, 0)
																	rt_store_i32_n8(memory_at_0, loc_3 + 2, loc_2)
																	while true do
																		if bit_and((if loc_10 < 1.8446744073709552e19 then 1 else 0), (if loc_10 >= 0e0 then 1 else 0)) ~= 0 then
																			while true do
																				reg_0 = rt_truncate_u64_f64(loc_10)
																				desired = 15
																				break
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																				end
																				break
																			end
																		end
																		reg_0 = rt_i64_ZERO
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																		end
																		break
																	end
																	loc_11 = reg_0
																	loc_2 = (if loc_10 < 0e0 then 1 else 0)
																	reg_0 = loc_1
																	while true do
																		if math_abs(loc_10) < 9.223372036854776e18 then
																			while true do
																				reg_1 = rt_truncate_i64_f64(loc_10)
																				desired = 15
																				break
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																				end
																				break
																			end
																		end
																		reg_1 = rt_i64_from_u32(0, 2147483648)
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																		end
																		break
																	end
																	rt_store_i64(memory_at_0, reg_0 + 48, (if loc_2 ~= 0 then reg_1 else loc_11))
																	reg_0 = FUNC_LIST[739](rt_add_i32(loc_1, 128), 512, rt_add_i32(loc_1, 640), rt_add_i32(loc_1, 48))
																	desired = 9
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																reg_0 = FUNC_LIST[209](loc_0, loc_5, rt_add_i32(loc_1, 1212))
																loc_2 = reg_0
																reg_0 = FUNC_LIST[234](rt_add_i32(loc_1, 680), rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 1212), 2))
																loc_3 = rt_load_i32(memory_at_0, loc_1 + 680)
																reg_0 = loc_1
																if loc_3 >= rt_load_i32(memory_at_0, loc_1 + 684) then
																	while true do
																		reg_1 = FUNC_LIST[234](rt_add_i32(loc_1, 680), 1)
																		reg_1 = rt_load_i32(memory_at_0, loc_1 + 680)
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																else
																	while true do
																		reg_1 = loc_3
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																end
																loc_3 = reg_1
																rt_store_i32(memory_at_0, reg_0 + 680, rt_add_i32(loc_3, 1))
																rt_store_i32_n8(memory_at_0, loc_3, 34)
																loc_3 = rt_load_i32(memory_at_0, loc_1 + 1212)
																rt_store_i32(memory_at_0, loc_1 + 1212, rt_sub_i32(loc_3, 1))
																if loc_3 ~= 0 then
																	while true do
																		while true do
																			while true do
																				while true do
																					while true do
																						while true do
																							while true do
																								while true do
																									loc_3 = rt_load_i32_u8(memory_at_0, loc_2)
																									if not br_map[3] then
																										br_map[3] = (function()
																											return { [0] = 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, }
																										end)()
																									end
																									temp = br_map[3][loc_3] or 0
																									if temp < 2 then
																										if temp < 1 then
																											break
																										else
																											desired = 20
																											break
																										end
																									elseif temp > 2 then
																										if temp < 4 then
																											desired = 18
																											break
																										else
																											desired = 17
																											break
																										end
																									else
																										desired = 19
																										break
																									end
																								end
																								if desired then
																									if desired == 20 then
																										desired = nil
																									end
																									break
																								end
																								if loc_3 ~= 92 then
																									desired = 17
																									break
																								end
																								break
																							end
																							if desired then
																								if desired == 19 then
																									desired = nil
																								end
																								break
																							end
																							loc_3 = rt_load_i32(memory_at_0, loc_1 + 680)
																							reg_0 = loc_1
																							if loc_3 >= rt_load_i32(memory_at_0, loc_1 + 684) then
																								while true do
																									reg_1 = FUNC_LIST[234](rt_add_i32(loc_1, 680), 1)
																									reg_1 = rt_load_i32(memory_at_0, loc_1 + 680)
																									break
																								end
																								if desired then
																									if desired == 19 then
																										desired = nil
																									end
																									break
																								end
																							else
																								while true do
																									reg_1 = loc_3
																									break
																								end
																								if desired then
																									if desired == 19 then
																										desired = nil
																									end
																									break
																								end
																							end
																							loc_3 = reg_1
																							rt_store_i32(memory_at_0, reg_0 + 680, rt_add_i32(loc_3, 1))
																							rt_store_i32_n8(memory_at_0, loc_3, 92)
																							loc_3 = rt_load_i32(memory_at_0, loc_1 + 680)
																							if loc_3 >= rt_load_i32(memory_at_0, loc_1 + 684) then
																								while true do
																									reg_0 = FUNC_LIST[234](rt_add_i32(loc_1, 680), 1)
																									reg_0 = rt_load_i32(memory_at_0, loc_1 + 680)
																									break
																								end
																								if desired then
																									if desired == 19 then
																										desired = nil
																									end
																									break
																								end
																							else
																								while true do
																									reg_0 = loc_3
																									break
																								end
																								if desired then
																									if desired == 19 then
																										desired = nil
																									end
																									break
																								end
																							end
																							loc_3 = reg_0
																							loc_6 = rt_load_i32_u8(memory_at_0, loc_2)
																							rt_store_i32(memory_at_0, loc_1 + 680, rt_add_i32(loc_3, 1))
																							rt_store_i32_n8(memory_at_0, loc_3, loc_6)
																							desired = 16
																							break
																						end
																						if desired then
																							if desired == 18 then
																								desired = nil
																							end
																							break
																						end
																						FUNC_LIST[235](rt_add_i32(loc_1, 680), 2503, 2)
																						desired = 16
																						break
																					end
																					if desired then
																						if desired == 17 then
																							desired = nil
																						end
																						break
																					end
																					FUNC_LIST[235](rt_add_i32(loc_1, 680), 5444, 4)
																					desired = 16
																					break
																				end
																				if desired then
																					if desired == 16 then
																						desired = nil
																					end
																					break
																				end
																				loc_6 = rt_load_i32(memory_at_0, loc_1 + 680)
																				if loc_6 >= rt_load_i32(memory_at_0, loc_1 + 684) then
																					while true do
																						reg_0 = FUNC_LIST[234](rt_add_i32(loc_1, 680), 1)
																						loc_6 = rt_load_i32(memory_at_0, loc_1 + 680)
																						reg_0 = rt_load_i32_u8(memory_at_0, loc_2)
																						break
																					end
																					if desired then
																						if desired == 16 then
																							desired = nil
																						end
																						break
																					end
																				else
																					while true do
																						reg_0 = loc_3
																						break
																					end
																					if desired then
																						if desired == 16 then
																							desired = nil
																						end
																						break
																					end
																				end
																				loc_3 = reg_0
																				rt_store_i32(memory_at_0, loc_1 + 680, rt_add_i32(loc_6, 1))
																				rt_store_i32_n8(memory_at_0, loc_6, loc_3)
																				break
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																					continue
																				end
																				break
																			end
																			loc_3 = rt_load_i32(memory_at_0, loc_1 + 1212)
																			rt_store_i32(memory_at_0, loc_1 + 1212, rt_sub_i32(loc_3, 1))
																			loc_2 = rt_add_i32(loc_2, 1)
																			if loc_3 ~= 0 then
																				continue
																			end
																			break
																		end
																		if desired then
																			break
																		end
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																end
																loc_2 = rt_load_i32(memory_at_0, loc_1 + 680)
																reg_0 = loc_1
																if loc_2 >= rt_load_i32(memory_at_0, loc_1 + 684) then
																	while true do
																		reg_1 = FUNC_LIST[234](rt_add_i32(loc_1, 680), 1)
																		reg_1 = rt_load_i32(memory_at_0, loc_1 + 680)
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																else
																	while true do
																		reg_1 = loc_2
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																end
																loc_2 = reg_1
																rt_store_i32(memory_at_0, reg_0 + 680, rt_add_i32(loc_2, 1))
																rt_store_i32_n8(memory_at_0, loc_2, 34)
																desired = 7
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
															reg_0 = FUNC_LIST[209](loc_0, loc_5, rt_add_i32(loc_1, 1212))
															loc_3 = reg_0
															loc_2 = rt_load_i32(memory_at_0, loc_1 + 1212)
															if rt_load_i32_u8(memory_at_0, loc_1 + 642) == 0 then
																desired = 8
																break
															end
															reg_0 = FUNC_LIST[747](rt_add_i32(loc_1, 640), 46)
															if bit_and((if reg_0 == 0 then 1 else 0), (if loc_2 > 99 then 1 else 0)) ~= 0 then
																desired = 8
																break
															end
															rt_store_i32(memory_at_0, loc_1 + 80, loc_3)
															reg_0 = FUNC_LIST[739](rt_add_i32(loc_1, 128), 512, rt_add_i32(loc_1, 640), rt_add_i32(loc_1, 80))
															desired = 9
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
														FUNC_LIST[203](loc_0, 2901, 0)
														error("out of code bounds")
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													rt_store_i32(memory_at_0, loc_1, rt_extend_i32_n8(loc_2))
													FUNC_LIST[203](loc_0, 6206, loc_1)
													error("out of code bounds")
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
												reg_1 = FUNC_LIST[216](loc_0, loc_5)
												rt_store_f64(memory_at_0, loc_1 + 64, reg_1)
												reg_0 = FUNC_LIST[739](rt_add_i32(loc_1, 128), 512, rt_add_i32(loc_1, 640), rt_sub_i32(loc_1, 4294967232))
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
											reg_2 = FUNC_LIST[649](rt_add_i32(loc_1, 128))
											FUNC_LIST[235](rt_add_i32(loc_1, 680), rt_add_i32(loc_1, 128), reg_2)
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
										FUNC_LIST[235](rt_add_i32(loc_1, 680), loc_3, loc_2)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
									if loc_4 < loc_8 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[239](rt_add_i32(loc_1, 680))
						GLOBAL_LIST[0].value = rt_add_i32(loc_1, 1216)
						reg_0 = 1
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_1 + 112, loc_5)
					FUNC_LIST[203](loc_0, 4963, rt_add_i32(loc_1, 112))
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_1 + 96, loc_5)
				FUNC_LIST[203](loc_0, 4963, rt_add_i32(loc_1, 96))
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[203](loc_0, 5466, 0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[203](loc_0, 5755, 0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[395] = --[[ gmatch(lua_State*) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[209](loc_0, 1, 0)
		reg_0 = FUNC_LIST[209](loc_0, 2, 0)
		FUNC_LIST[106](loc_0, 2)
		FUNC_LIST[142](loc_0, 0)
		FUNC_LIST[149](loc_0, 136, 0, 3, 0)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[396] = --[[ gmatch_aux(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 288)
		GLOBAL_LIST[0].value = loc_1
		reg_0 = FUNC_LIST[125](loc_0, 4294957293, rt_add_i32(loc_1, 4))
		loc_6 = reg_0
		reg_0 = FUNC_LIST[125](loc_0, 4294957292, loc_1)
		loc_3 = reg_0
		rt_store_i32(memory_at_0, loc_1 + 24, loc_0)
		rt_store_i32(memory_at_0, loc_1 + 12, loc_6)
		rt_store_i32(memory_at_0, loc_1 + 8, 200)
		rt_store_i32(memory_at_0, loc_1 + 20, rt_add_i32(rt_load_i32(memory_at_0, loc_1), loc_3))
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
		rt_store_i32(memory_at_0, loc_1 + 16, rt_add_i32(loc_2, loc_6))
		while true do
			reg_1 = FUNC_LIST[122](loc_0, 4294957291, 0)
			loc_5 = reg_1
			if rt_lt_i32(loc_2, loc_5) then
				break
			end
			loc_2 = rt_add_i32(loc_5, loc_6)
			while true do
				rt_store_i32(memory_at_0, loc_1 + 28, 0)
				reg_0 = FUNC_LIST[398](rt_add_i32(loc_1, 8), loc_2, loc_3)
				loc_5 = reg_0
				if loc_5 ~= 0 then
					while true do
						FUNC_LIST[142](loc_0, rt_add_i32(rt_sub_i32(loc_5, loc_6), (if loc_2 == loc_5 then 1 else 0)))
						FUNC_LIST[109](loc_0, 4294957291)
						loc_4 = rt_load_i32(memory_at_0, loc_1 + 28)
						loc_0 = (if loc_2 ~= 0 then (if loc_4 ~= 0 then loc_4 else 1) else loc_4)
						FUNC_LIST[213](rt_load_i32(memory_at_0, loc_1 + 24), loc_0, 2008)
						if rt_le_i32(loc_0, 0) then
							desired = 1
							break
						end
						loc_3 = 0
						while true do
							FUNC_LIST[399](rt_add_i32(loc_1, 8), loc_3, loc_2, loc_5)
							loc_3 = rt_add_i32(loc_3, 1)
							if loc_0 ~= loc_3 then
								continue
							end
							break
						end
						if desired then
							break
						end
						loc_4 = loc_0
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				loc_2 = rt_add_i32(loc_2, 1)
				if loc_2 <= rt_load_i32(memory_at_0, loc_1 + 16) then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 288)
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[397] = --[[ str_gsub(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 848)
		GLOBAL_LIST[0].value = loc_1
		reg_0 = FUNC_LIST[209](loc_0, 1, rt_add_i32(loc_1, 840))
		loc_4 = reg_0
		reg_0 = FUNC_LIST[209](loc_0, 2, rt_add_i32(loc_1, 836))
		loc_7 = reg_0
		reg_0 = FUNC_LIST[111](loc_0, 3)
		loc_2 = reg_0
		reg_0 = FUNC_LIST[221](loc_0, 4, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 840), 1))
		loc_11 = reg_0
		loc_6 = rt_load_i32_u8(memory_at_0, loc_7)
		while true do
			while true do
				if bit_and((if loc_2 ~= 3 then 1 else 0), (if rt_sub_i32(loc_2, 5) >= 3 then 1 else 0)) == 0 then
					while true do
						FUNC_LIST[231](loc_0, rt_add_i32(loc_1, 28))
						loc_5 = rt_load_i32(memory_at_0, loc_1 + 836)
						loc_12 = (if bit_and(loc_6, 255) ~= 94 then 1 else 0)
						if loc_12 ~= 0 then
							while true do
								reg_0 = loc_7
								break
							end
							if desired then
								break
							end
						else
							while true do
								loc_5 = rt_sub_i32(loc_5, 1)
								rt_store_i32(memory_at_0, loc_1 + 836, loc_5)
								reg_0 = rt_add_i32(loc_7, 1)
								break
							end
							if desired then
								break
							end
						end
						loc_7 = reg_0
						rt_store_i32(memory_at_0, loc_1 + 572, loc_0)
						rt_store_i32(memory_at_0, loc_1 + 556, 200)
						rt_store_i32(memory_at_0, loc_1 + 568, rt_add_i32(loc_5, loc_7))
						rt_store_i32(memory_at_0, loc_1 + 560, loc_4)
						rt_store_i32(memory_at_0, loc_1 + 564, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 840), loc_4))
						loc_13 = rt_sub_i32(loc_2, 6)
						while true do
							while true do
								if rt_ge_i32(loc_8, loc_11) then
									while true do
										loc_5 = loc_4
										desired = 5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								rt_store_i32(memory_at_0, loc_1 + 576, 0)
								while true do
									reg_0 = FUNC_LIST[398](rt_add_i32(loc_1, 556), loc_4, loc_7)
									loc_5 = reg_0
									if loc_5 ~= 0 then
										while true do
											loc_3 = rt_load_i32(memory_at_0, loc_1 + 572)
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		if not br_map[1] then
																			br_map[1] = (function()
																				return { [0] = 1, 0, }
																			end)()
																		end
																		temp = br_map[1][loc_13] or 3
																		if temp < 1 then
																			break
																		elseif temp > 1 then
																			desired = 11
																			break
																		else
																			desired = 13
																			break
																		end
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																	FUNC_LIST[110](loc_3, 3)
																	loc_2 = rt_load_i32(memory_at_0, loc_1 + 576)
																	loc_6 = (if loc_4 ~= 0 then (if loc_2 ~= 0 then loc_2 else 1) else loc_2)
																	FUNC_LIST[213](rt_load_i32(memory_at_0, loc_1 + 572), loc_6, 2008)
																	loc_2 = 0
																	if rt_gt_i32(loc_6, 0) then
																		while true do
																			while true do
																				FUNC_LIST[399](rt_add_i32(loc_1, 556), loc_2, loc_4, loc_5)
																				loc_2 = rt_add_i32(loc_2, 1)
																				if loc_6 ~= loc_2 then
																					continue
																				end
																				break
																			end
																			if desired then
																				break
																			end
																			break
																		end
																		if desired then
																			if desired == 13 then
																				desired = nil
																			end
																			break
																		end
																	end
																	FUNC_LIST[171](loc_3, loc_6, 1)
																	desired = 12
																	break
																end
																if desired then
																	if desired == 12 then
																		desired = nil
																	end
																	break
																end
																while true do
																	if rt_le_i32(rt_load_i32(memory_at_0, loc_1 + 576), 0) then
																		while true do
																			FUNC_LIST[145](loc_3, loc_4, rt_sub_i32(loc_5, loc_4))
																			desired = 13
																			break
																		end
																		if desired then
																			if desired == 13 then
																				desired = nil
																			end
																			break
																		end
																	end
																	while true do
																		while true do
																			while true do
																				loc_2 = rt_load_i32(memory_at_0, loc_1 + 584)
																				if not br_map[2] then
																					br_map[2] = (function()
																						return { [0] = 1, 0, }
																					end)()
																				end
																				temp = br_map[2][rt_add_i32(loc_2, 2)] or 2
																				if temp < 1 then
																					break
																				elseif temp > 1 then
																					desired = 14
																					break
																				else
																					desired = 15
																					break
																				end
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																				end
																				break
																			end
																			FUNC_LIST[203](loc_3, 4019, 0)
																			error("out of code bounds")
																		end
																		if desired then
																			if desired == 14 then
																				desired = nil
																			end
																			break
																		end
																		FUNC_LIST[142](loc_3, rt_add_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 580), rt_load_i32(memory_at_0, loc_1 + 560)), 1))
																		desired = 13
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																	FUNC_LIST[145](loc_3, rt_load_i32(memory_at_0, loc_1 + 580), loc_2)
																	break
																end
																if desired then
																	if desired == 12 then
																		desired = nil
																	end
																	break
																end
																reg_0 = FUNC_LIST[153](loc_3, 3)
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																end
																break
															end
															reg_0 = FUNC_LIST[124](loc_3, 4294967295)
															if reg_0 ~= 0 then
																desired = 10
																break
															end
															FUNC_LIST[106](loc_3, 4294967294)
															FUNC_LIST[145](loc_3, loc_4, rt_sub_i32(loc_5, loc_4))
															desired = 9
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
															end
															break
														end
														reg_0 = FUNC_LIST[125](loc_3, 3, rt_add_i32(loc_1, 844))
														loc_10 = reg_0
														reg_0 = FUNC_LIST[234](rt_add_i32(loc_1, 28), rt_load_i32(memory_at_0, loc_1 + 844))
														if rt_load_i32(memory_at_0, loc_1 + 844) == 0 then
															desired = 8
															break
														end
														loc_14 = rt_sub_i32(loc_5, loc_4)
														loc_2 = 0
														while true do
															while true do
																loc_9 = rt_add_i32(loc_2, loc_10)
																loc_6 = rt_load_i32_u8(memory_at_0, loc_9)
																if loc_6 ~= 37 then
																	while true do
																		loc_3 = rt_load_i32(memory_at_0, loc_1 + 28)
																		reg_0 = loc_1
																		if loc_3 >= rt_load_i32(memory_at_0, loc_1 + 32) then
																			while true do
																				reg_1 = FUNC_LIST[234](rt_add_i32(loc_1, 28), 1)
																				loc_6 = rt_load_i32_u8(memory_at_0, loc_9)
																				reg_1 = rt_load_i32(memory_at_0, loc_1 + 28)
																				break
																			end
																			if desired then
																				break
																			end
																		else
																			while true do
																				reg_1 = loc_3
																				break
																			end
																			if desired then
																				break
																			end
																		end
																		loc_3 = reg_1
																		rt_store_i32(memory_at_0, reg_0 + 28, rt_add_i32(loc_3, 1))
																		rt_store_i32_n8(memory_at_0, loc_3, loc_6)
																		desired = 12
																		break
																	end
																	if desired then
																		if desired == 12 then
																			desired = nil
																		end
																		break
																	end
																end
																loc_2 = rt_add_i32(loc_2, 1)
																loc_3 = rt_add_i32(loc_2, loc_10)
																loc_6 = rt_load_i32_u8(memory_at_0, loc_3)
																if rt_sub_i32(loc_6, 48) >= 10 then
																	while true do
																		if loc_6 ~= 37 then
																			desired = 2
																			break
																		end
																		loc_9 = 37
																		loc_6 = rt_load_i32(memory_at_0, loc_1 + 28)
																		reg_0 = loc_1
																		if loc_6 >= rt_load_i32(memory_at_0, loc_1 + 32) then
																			while true do
																				reg_1 = FUNC_LIST[234](rt_add_i32(loc_1, 28), 1)
																				loc_9 = rt_load_i32_u8(memory_at_0, loc_3)
																				reg_1 = rt_load_i32(memory_at_0, loc_1 + 28)
																				break
																			end
																			if desired then
																				break
																			end
																		else
																			while true do
																				reg_1 = loc_6
																				break
																			end
																			if desired then
																				break
																			end
																		end
																		loc_6 = reg_1
																		rt_store_i32(memory_at_0, reg_0 + 28, rt_add_i32(loc_6, 1))
																		rt_store_i32_n8(memory_at_0, loc_6, loc_9)
																		desired = 12
																		break
																	end
																	if desired then
																		if desired == 12 then
																			desired = nil
																		end
																		break
																	end
																end
																if loc_6 == 48 then
																	while true do
																		FUNC_LIST[235](rt_add_i32(loc_1, 28), loc_4, loc_14)
																		desired = 12
																		break
																	end
																	if desired then
																		if desired == 12 then
																			desired = nil
																		end
																		break
																	end
																end
																FUNC_LIST[399](rt_add_i32(loc_1, 556), rt_sub_i32(rt_extend_i32_n8(loc_6), 49), loc_4, loc_5)
																FUNC_LIST[236](rt_add_i32(loc_1, 28))
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																	continue
																end
																break
															end
															loc_2 = rt_add_i32(loc_2, 1)
															if loc_2 < rt_load_i32(memory_at_0, loc_1 + 844) then
																continue
															end
															break
														end
														if desired then
															if desired == 10 then
																desired = nil
															end
															break
														end
														desired = 8
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
														end
														break
													end
													reg_0 = FUNC_LIST[116](loc_3, 4294967295)
													if reg_0 == 0 then
														desired = 1
														break
													end
													break
												end
												if desired then
													if desired == 8 then
														desired = nil
													end
													break
												end
												FUNC_LIST[236](rt_add_i32(loc_1, 28))
												break
											end
											if desired then
												break
											end
											loc_8 = rt_add_i32(loc_8, 1)
											if loc_4 < loc_5 then
												desired = 6
												break
											end
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									if loc_4 >= rt_load_i32(memory_at_0, loc_1 + 564) then
										while true do
											loc_5 = loc_4
											desired = 5
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									loc_2 = rt_load_i32(memory_at_0, loc_1 + 28)
									if loc_2 >= rt_load_i32(memory_at_0, loc_1 + 32) then
										while true do
											reg_0 = FUNC_LIST[234](rt_add_i32(loc_1, 28), 1)
											reg_0 = rt_load_i32(memory_at_0, loc_1 + 28)
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									else
										while true do
											reg_0 = loc_2
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									loc_2 = reg_0
									loc_5 = rt_load_i32_u8(memory_at_0, loc_4)
									rt_store_i32(memory_at_0, loc_1 + 28, rt_add_i32(loc_2, 1))
									rt_store_i32_n8(memory_at_0, loc_2, loc_5)
									loc_5 = rt_add_i32(loc_4, 1)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								loc_4 = loc_5
								if loc_12 ~= 0 then
									desired = 4
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							break
						end
						if desired then
							break
						end
						FUNC_LIST[235](rt_add_i32(loc_1, 28), loc_5, rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 564), loc_5))
						FUNC_LIST[239](rt_add_i32(loc_1, 28))
						FUNC_LIST[142](loc_0, loc_8)
						GLOBAL_LIST[0].value = rt_add_i32(loc_1, 848)
						reg_0 = 2
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[205](loc_0, 3, 4368)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_1, 37)
			FUNC_LIST[203](rt_load_i32(memory_at_0, loc_1 + 572), 3304, loc_1)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_1 = FUNC_LIST[230](loc_3, 4294967295)
		rt_store_i32(memory_at_0, loc_1 + 16, reg_1)
		FUNC_LIST[203](loc_3, 5715, rt_add_i32(loc_1, 16))
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[398] = --[[ match(MatchState*, char const*, char const*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_15 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_15
		loc_4 = rt_load_i32(memory_at_0, loc_0)
		rt_store_i32(memory_at_0, loc_0, rt_sub_i32(loc_4, 1))
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 16)
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									if loc_4 ~= 0 then
										while true do
											loc_4 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3 + 16) + 1700)
											if loc_4 ~= 0 then
												while true do
													rt_store_i32_n16(memory_at_0, loc_3 + 48, rt_add_i32(rt_load_i32_u16(memory_at_0, loc_3 + 48), 1))
													TABLE_LIST[0].data[loc_4](loc_3, 4294967295)
													rt_store_i32_n16(memory_at_0, loc_3 + 48, rt_sub_i32(rt_load_i32_u16(memory_at_0, loc_3 + 48), 1))
													break
												end
												if desired then
													break
												end
											end
											loc_13 = rt_add_i32(loc_0, 24)
											loc_16 = rt_add_i32(loc_0, 28)
											while true do
												loc_17 = rt_add_i32(loc_1, 1)
												loc_19 = rt_sub_i32(loc_1, 1)
												while true do
													loc_9 = rt_load_i32(memory_at_0, loc_0 + 12)
													while true do
														while true do
															while true do
																while true do
																	if loc_2 == loc_9 then
																		while true do
																			loc_6 = loc_1
																			desired = 11
																			break
																		end
																		if desired then
																			if desired == 14 then
																				desired = nil
																				continue
																			end
																			break
																		end
																	end
																	loc_4 = rt_add_i32(loc_2, 1)
																	loc_3 = rt_load_i32_u8(memory_at_0, loc_2)
																	if loc_3 ~= 37 then
																		while true do
																			while true do
																				while true do
																					while true do
																						while true do
																							if not br_map[1] then
																								br_map[1] = (function()
																									return { [0] = 3, 7, 7, 7, 1, 2, }
																								end)()
																							end
																							temp = br_map[1][rt_sub_i32(loc_3, 36)] or 0
																							if temp < 2 then
																								if temp < 1 then
																									break
																								else
																									desired = 18
																									break
																								end
																							elseif temp > 2 then
																								if temp < 7 then
																									desired = 16
																									break
																								else
																									desired = 12
																									break
																								end
																							else
																								desired = 17
																								break
																							end
																						end
																						if desired then
																							if desired == 18 then
																								desired = nil
																							end
																							break
																						end
																						if loc_3 ~= 91 then
																							desired = 12
																							break
																						end
																						loc_3 = (if rt_load_i32_u8(memory_at_0, loc_2 + 1) == 94 then rt_add_i32(loc_2, 2) else loc_4)
																						while true do
																							if loc_3 == loc_9 then
																								desired = 1
																								break
																							end
																							loc_4 = rt_add_i32(loc_3, 1)
																							loc_5 = bit_and((if rt_load_i32_u8(memory_at_0, loc_3) == 37 then 1 else 0), (if loc_9 > loc_4 then 1 else 0))
																							loc_8 = rt_add_i32((if loc_5 ~= 0 then 2 else 1), loc_3)
																							loc_4 = (if loc_5 ~= 0 then rt_add_i32(loc_3, 2) else loc_4)
																							loc_3 = loc_4
																							if rt_load_i32_u8(memory_at_0, loc_8) ~= 93 then
																								continue
																							end
																							break
																						end
																						if desired then
																							if desired == 18 then
																								desired = nil
																							end
																							break
																						end
																						loc_4 = rt_add_i32(loc_4, 1)
																						desired = 12
																						break
																					end
																					if desired then
																						if desired == 17 then
																							desired = nil
																						end
																						break
																					end
																					loc_3 = rt_load_i32(memory_at_0, loc_0 + 20)
																					if rt_load_i32_u8(memory_at_0, loc_4) == 41 then
																						while true do
																							if rt_ge_i32(loc_3, 32) then
																								desired = 2
																								break
																							end
																							loc_4 = rt_add_i32(rt_shl_i32(loc_3, 3), loc_13)
																							rt_store_i32(memory_at_0, loc_4 + 4, 4294967294)
																							rt_store_i32(memory_at_0, loc_4, loc_1)
																							rt_store_i32(memory_at_0, loc_0 + 20, rt_add_i32(loc_3, 1))
																							reg_0 = FUNC_LIST[398](loc_0, loc_1, rt_add_i32(loc_2, 2))
																							loc_6 = reg_0
																							if loc_6 ~= 0 then
																								desired = 11
																								break
																							end
																							rt_store_i32(memory_at_0, loc_0 + 20, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 20), 1))
																							loc_6 = 0
																							desired = 11
																							break
																						end
																						if desired then
																							if desired == 17 then
																								desired = nil
																							end
																							break
																						end
																					end
																					if rt_ge_i32(loc_3, 32) then
																						desired = 2
																						break
																					end
																					loc_5 = rt_add_i32(rt_shl_i32(loc_3, 3), loc_13)
																					rt_store_i32(memory_at_0, loc_5 + 4, 4294967295)
																					rt_store_i32(memory_at_0, loc_5, loc_1)
																					rt_store_i32(memory_at_0, loc_0 + 20, rt_add_i32(loc_3, 1))
																					reg_0 = FUNC_LIST[398](loc_0, loc_1, loc_4)
																					loc_6 = reg_0
																					if loc_6 ~= 0 then
																						desired = 11
																						break
																					end
																					rt_store_i32(memory_at_0, loc_0 + 20, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 20), 1))
																					loc_6 = 0
																					desired = 11
																					break
																				end
																				if desired then
																					if desired == 16 then
																						desired = nil
																					end
																					break
																				end
																				loc_3 = rt_load_i32(memory_at_0, loc_0 + 20)
																				while true do
																					if rt_le_i32(loc_3, 0) then
																						desired = 7
																						break
																					end
																					loc_3 = rt_sub_i32(loc_3, 1)
																					if rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_3, 3), loc_16)) ~= 4294967295 then
																						continue
																					end
																					break
																				end
																				if desired then
																					if desired == 16 then
																						desired = nil
																					end
																					break
																				end
																				loc_3 = rt_add_i32(rt_shl_i32(loc_3, 3), loc_13)
																				rt_store_i32(memory_at_0, loc_3 + 4, rt_sub_i32(loc_1, rt_load_i32(memory_at_0, loc_3)))
																				reg_0 = FUNC_LIST[398](loc_0, loc_1, loc_4)
																				loc_6 = reg_0
																				if loc_6 ~= 0 then
																					desired = 11
																					break
																				end
																				rt_store_i32(memory_at_0, loc_3 + 4, 4294967295)
																				loc_6 = 0
																				desired = 11
																				break
																			end
																			if desired then
																				break
																			end
																			if loc_4 ~= loc_9 then
																				desired = 12
																				break
																			end
																			loc_6 = (if rt_load_i32(memory_at_0, loc_0 + 8) == loc_1 then loc_1 else 0)
																			desired = 11
																			break
																		end
																		if desired then
																			if desired == 14 then
																				desired = nil
																				continue
																			end
																			break
																		end
																	end
																	while true do
																		loc_3 = rt_load_i32_u8(memory_at_0, loc_4)
																		if loc_3 ~= 102 then
																			while true do
																				while true do
																					if not br_map[2] then
																						br_map[2] = (function()
																							return { [0] = 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, }
																						end)()
																					end
																					temp = br_map[2][rt_sub_i32(loc_3, 48)] or 4
																					if temp < 2 then
																						break
																					elseif temp > 2 then
																						desired = 13
																						break
																					else
																						desired = 15
																						break
																					end
																				end
																				if desired then
																					break
																				end
																				loc_3 = rt_add_i32(loc_2, 2)
																				if loc_3 >= rt_sub_i32(loc_9, 1) then
																					desired = 6
																					break
																				end
																				loc_6 = 0
																				loc_7 = rt_load_i32_u8(memory_at_0, loc_1)
																				if loc_7 ~= rt_load_i32_u8(memory_at_0, loc_2 + 2) then
																					desired = 11
																					break
																				end
																				loc_4 = 1
																				loc_3 = rt_add_i32(loc_1, 1)
																				loc_8 = rt_load_i32(memory_at_0, loc_0 + 8)
																				if loc_3 >= loc_8 then
																					desired = 11
																					break
																				end
																				loc_9 = rt_load_i32_u8(memory_at_0, loc_2 + 3)
																				while true do
																					while true do
																						loc_5 = rt_load_i32_u8(memory_at_0, loc_1 + 1)
																						if loc_5 == bit_and(loc_9, 255) then
																							while true do
																								loc_4 = rt_sub_i32(loc_4, 1)
																								if loc_4 ~= 0 then
																									desired = 18
																									break
																								end
																								loc_2 = rt_add_i32(loc_2, 4)
																								loc_1 = rt_add_i32(loc_1, 2)
																								desired = 9
																								break
																							end
																							if desired then
																								if desired == 18 then
																									desired = nil
																								end
																								break
																							end
																						end
																						loc_4 = rt_add_i32((if loc_5 == loc_7 then 1 else 0), loc_4)
																						break
																					end
																					if desired then
																						if desired == 17 then
																							desired = nil
																							continue
																						end
																						break
																					end
																					loc_1 = loc_3
																					loc_3 = rt_add_i32(loc_3, 1)
																					if loc_8 ~= loc_3 then
																						continue
																					end
																					break
																				end
																				if desired then
																					break
																				end
																				desired = 11
																				break
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																				end
																				break
																			end
																		end
																		if rt_load_i32_u8(memory_at_0, loc_2 + 2) ~= 91 then
																			desired = 5
																			break
																		end
																		loc_11 = rt_add_i32(loc_2, 2)
																		loc_14 = rt_add_i32(loc_2, 3)
																		loc_7 = rt_load_i32_u8(memory_at_0, loc_2 + 3)
																		loc_18 = (if loc_7 == 94 then 1 else 0)
																		loc_3 = (if loc_18 ~= 0 then rt_add_i32(loc_2, 4) else loc_14)
																		while true do
																			if loc_3 == loc_9 then
																				desired = 1
																				break
																			end
																			loc_4 = rt_add_i32(loc_3, 1)
																			loc_5 = bit_and((if rt_load_i32_u8(memory_at_0, loc_3) == 37 then 1 else 0), (if loc_9 > loc_4 then 1 else 0))
																			loc_8 = rt_add_i32((if loc_5 ~= 0 then 2 else 1), loc_3)
																			loc_5 = (if loc_5 ~= 0 then rt_add_i32(loc_3, 2) else loc_4)
																			loc_3 = loc_5
																			if rt_load_i32_u8(memory_at_0, loc_8) ~= 93 then
																				continue
																			end
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																		loc_6 = 0
																		loc_10 = 0
																		if loc_1 ~= rt_load_i32(memory_at_0, loc_0 + 4) then
																			while true do
																				reg_0 = rt_load_i32_u8(memory_at_0, loc_19)
																				break
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																				end
																				break
																			end
																		else
																			while true do
																				reg_0 = loc_10
																				break
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																				end
																				break
																			end
																		end
																		loc_10 = reg_0
																		loc_4 = (if loc_7 == 94 then loc_14 else loc_11)
																		loc_11 = rt_add_i32(loc_4, 1)
																		if loc_5 <= loc_11 then
																			desired = 11
																			break
																		end
																		loc_2 = rt_add_i32(loc_5, 1)
																		loc_12 = (if loc_7 ~= 94 then 1 else 0)
																		loc_14 = loc_11
																		loc_3 = loc_4
																		while true do
																			while true do
																				loc_8 = rt_load_i32_u8(memory_at_0, loc_3 + 2)
																				while true do
																					while true do
																						loc_7 = rt_load_i32_u8(memory_at_0, loc_3 + 1)
																						if loc_7 == 37 then
																							while true do
																								reg_0 = FUNC_LIST[412](loc_10, loc_8)
																								if reg_0 == 0 then
																									desired = 19
																									break
																								end
																								reg_0 = loc_12
																								desired = 16
																								break
																							end
																							if desired then
																								if desired == 19 then
																									desired = nil
																								end
																								break
																							end
																						end
																						while true do
																							if loc_8 ~= 45 then
																								break
																							end
																							loc_3 = rt_add_i32(loc_3, 3)
																							if loc_5 <= loc_3 then
																								break
																							end
																							if loc_7 > loc_10 then
																								desired = 18
																								break
																							end
																							if loc_10 > rt_load_i32_u8(memory_at_0, loc_3) then
																								desired = 18
																								break
																							end
																							reg_0 = loc_12
																							desired = 16
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																						loc_3 = loc_14
																						if loc_7 ~= loc_10 then
																							desired = 18
																							break
																						end
																						reg_0 = loc_12
																						desired = 16
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																					loc_3 = rt_add_i32(loc_3, 2)
																					break
																				end
																				if desired then
																					if desired == 17 then
																						desired = nil
																						continue
																					end
																					break
																				end
																				loc_14 = rt_add_i32(loc_3, 1)
																				if loc_5 > loc_14 then
																					continue
																				end
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																				end
																				break
																			end
																			reg_0 = loc_18
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																		loc_3 = reg_0
																		if loc_3 ~= 0 then
																			desired = 11
																			break
																		end
																		loc_7 = rt_load_i32_u8(memory_at_0, loc_1)
																		while true do
																			while true do
																				loc_3 = rt_load_i32_u8(memory_at_0, loc_4 + 2)
																				while true do
																					loc_8 = rt_load_i32_u8(memory_at_0, loc_4 + 1)
																					if loc_8 == 37 then
																						while true do
																							reg_0 = FUNC_LIST[412](loc_7, loc_3)
																							if reg_0 ~= 0 then
																								desired = 16
																								break
																							end
																							loc_4 = rt_add_i32(loc_4, 2)
																							desired = 18
																							break
																						end
																						if desired then
																							if desired == 18 then
																								desired = nil
																							end
																							break
																						end
																					end
																					while true do
																						if loc_3 ~= 45 then
																							break
																						end
																						loc_4 = rt_add_i32(loc_4, 3)
																						if loc_5 <= loc_4 then
																							break
																						end
																						if loc_7 < loc_8 then
																							desired = 18
																							break
																						end
																						if loc_7 > rt_load_i32_u8(memory_at_0, loc_4) then
																							desired = 18
																							break
																						end
																						desired = 16
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																					loc_4 = loc_11
																					if loc_7 == loc_8 then
																						desired = 16
																						break
																					end
																					break
																				end
																				if desired then
																					if desired == 17 then
																						desired = nil
																						continue
																					end
																					break
																				end
																				loc_11 = rt_add_i32(loc_4, 1)
																				if loc_5 > loc_11 then
																					continue
																				end
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																				end
																				break
																			end
																			loc_12 = loc_18
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																		if loc_12 ~= 0 then
																			desired = 14
																			break
																		end
																		desired = 11
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																			continue
																		end
																		break
																	end
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																if loc_3 < 49 then
																	desired = 4
																	break
																end
																loc_4 = rt_sub_i32(loc_3, 49)
																if rt_ge_i32(loc_4, rt_load_i32(memory_at_0, loc_0 + 20)) then
																	desired = 4
																	break
																end
																loc_5 = rt_shl_i32(loc_4, 3)
																loc_4 = rt_load_i32(memory_at_0, rt_add_i32(loc_5, loc_16))
																if loc_4 == 4294967295 then
																	desired = 4
																	break
																end
																loc_6 = 0
																if loc_4 > rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), loc_1) then
																	desired = 11
																	break
																end
																reg_0 = FUNC_LIST[685](rt_load_i32(memory_at_0, rt_add_i32(loc_5, loc_13)), loc_1, loc_4)
																if reg_0 ~= 0 then
																	desired = 11
																	break
																end
																if loc_1 == 0 then
																	desired = 11
																	break
																end
																loc_2 = rt_add_i32(loc_2, 2)
																loc_1 = rt_add_i32(loc_1, loc_4)
																desired = 9
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
															if loc_9 == rt_add_i32(loc_2, 1) then
																desired = 3
																break
															end
															loc_4 = rt_add_i32(loc_2, 2)
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
														loc_3 = rt_load_i32_u8(memory_at_0, loc_4)
														reg_0 = FUNC_LIST[413](loc_0, loc_1, loc_2, loc_4)
														if reg_0 == 0 then
															while true do
																loc_6 = 0
																loc_3 = rt_sub_i32(loc_3, 42)
																if loc_3 > 21 then
																	desired = 11
																	break
																end
																if bit_and(rt_shl_i32(1, loc_3), 2097161) == 0 then
																	desired = 11
																	break
																end
																loc_2 = rt_add_i32(loc_4, 1)
																desired = 10
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																end
																break
															end
														end
														if loc_3 ~= 63 then
															while true do
																while true do
																	while true do
																		while true do
																			while true do
																				while true do
																					if not br_map[3] then
																						br_map[3] = (function()
																							return { [0] = 2, 1, 4, 0, }
																						end)()
																					end
																					temp = br_map[3][rt_sub_i32(loc_3, 42)] or 4
																					if temp < 2 then
																						if temp < 1 then
																							break
																						else
																							desired = 16
																							break
																						end
																					elseif temp > 2 then
																						desired = 13
																						break
																					else
																						desired = 15
																						break
																					end
																				end
																				if desired then
																					if desired == 16 then
																						desired = nil
																					end
																					break
																				end
																				loc_3 = rt_add_i32(loc_4, 1)
																				desired = 14
																				break
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																				end
																				break
																			end
																			loc_1 = rt_add_i32(loc_1, 1)
																			break
																		end
																		if desired then
																			if desired == 14 then
																				desired = nil
																			end
																			break
																		end
																		loc_5 = 0
																		while true do
																			loc_3 = loc_5
																			loc_5 = rt_add_i32(loc_3, 1)
																			reg_0 = FUNC_LIST[413](loc_0, rt_add_i32(loc_1, loc_3), loc_2, loc_4)
																			if reg_0 ~= 0 then
																				continue
																			end
																			break
																		end
																		if desired then
																			if desired == 14 then
																				desired = nil
																			end
																			break
																		end
																		loc_5 = rt_add_i32(loc_4, 1)
																		while true do
																			loc_6 = 0
																			if rt_lt_i32(loc_3, 0) then
																				desired = 11
																				break
																			end
																			loc_4 = rt_add_i32(loc_1, loc_3)
																			loc_3 = rt_sub_i32(loc_3, 1)
																			reg_0 = FUNC_LIST[398](loc_0, loc_4, loc_5)
																			loc_6 = reg_0
																			if loc_6 == 0 then
																				continue
																			end
																			break
																		end
																		if desired then
																			if desired == 14 then
																				desired = nil
																			end
																			break
																		end
																		desired = 11
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																	while true do
																		reg_0 = FUNC_LIST[398](loc_0, loc_1, loc_3)
																		loc_6 = reg_0
																		if loc_6 ~= 0 then
																			desired = 11
																			break
																		end
																		reg_0 = FUNC_LIST[413](loc_0, loc_1, loc_2, loc_4)
																		if reg_0 ~= 0 then
																			while true do
																				loc_1 = rt_add_i32(loc_1, 1)
																				desired = 14
																				break
																			end
																			if desired then
																				if desired == 14 then
																					desired = nil
																					continue
																				end
																				break
																			end
																		end
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																	loc_6 = 0
																	desired = 11
																	break
																end
																if desired then
																	break
																end
																loc_2 = loc_4
																loc_1 = loc_17
																desired = 9
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																end
																break
															end
														end
														loc_2 = rt_add_i32(loc_4, 1)
														reg_0 = FUNC_LIST[398](loc_0, loc_17, loc_2)
														loc_6 = reg_0
														if loc_6 == 0 then
															desired = 10
															break
														end
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
															continue
														end
														break
													end
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
														continue
													end
													break
												end
												break
											end
											if desired then
												break
											end
											rt_store_i32(memory_at_0, loc_0, rt_add_i32(rt_load_i32(memory_at_0, loc_0), 1))
											GLOBAL_LIST[0].value = rt_add_i32(loc_15, 16)
											reg_0 = loc_6
											desired = 0
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									FUNC_LIST[203](loc_3, 1324, 0)
									error("out of code bounds")
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								FUNC_LIST[203](rt_load_i32(memory_at_0, loc_0 + 16), 3995, 0)
								error("out of code bounds")
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[203](rt_load_i32(memory_at_0, loc_0 + 16), 5999, 0)
							error("out of code bounds")
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[203](rt_load_i32(memory_at_0, loc_0 + 16), 2685, 0)
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = rt_load_i32(memory_at_0, loc_0 + 16)
					rt_store_i32(memory_at_0, loc_15, rt_sub_i32(loc_3, 48))
					FUNC_LIST[203](loc_4, 4936, loc_15)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[203](rt_load_i32(memory_at_0, loc_0 + 16), 6078, 0)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[203](rt_load_i32(memory_at_0, loc_0 + 16), 2008, 0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[203](rt_load_i32(memory_at_0, loc_0 + 16), 6046, 0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[399] = --[[ push_onecapture(MatchState*, int, char const*, char const*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local desired
	local br_map = {}
	while true do
		if rt_ge_i32(loc_1, rt_load_i32(memory_at_0, loc_0 + 20)) then
			while true do
				loc_0 = rt_load_i32(memory_at_0, loc_0 + 16)
				if loc_1 == 0 then
					while true do
						FUNC_LIST[145](loc_0, loc_2, rt_sub_i32(loc_3, loc_2))
						desired = 0
						break
					end
					if desired then
						break
					end
				end
				FUNC_LIST[203](loc_0, 1363, 0)
				error("out of code bounds")
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_1 = rt_add_i32(rt_shl_i32(loc_1, 3), loc_0)
		loc_4 = loc_1
		loc_3 = rt_add_i32(loc_4, 24)
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
		while true do
			while true do
				while true do
					loc_1 = rt_load_i32(memory_at_0, loc_1 + 28)
					if not br_map[1] then
						br_map[1] = (function()
							return { [0] = 1, 0, }
						end)()
					end
					temp = br_map[1][rt_add_i32(loc_1, 2)] or 2
					if temp < 1 then
						break
					elseif temp > 1 then
						desired = 1
						break
					else
						desired = 2
						break
					end
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[203](loc_2, 4019, 0)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[142](loc_2, rt_add_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_4 + 24), rt_load_i32(memory_at_0, loc_0 + 4)), 1))
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[145](loc_2, rt_load_i32(memory_at_0, loc_4 + 24), loc_1)
		break
	end
end
FUNC_LIST[400] = --[[ str_len(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		reg_0 = FUNC_LIST[209](loc_0, 1, rt_add_i32(loc_1, 12))
		FUNC_LIST[142](loc_0, rt_load_i32(memory_at_0, loc_1 + 12))
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[401] = --[[ str_lower(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 544)
		GLOBAL_LIST[0].value = loc_1
		reg_0 = FUNC_LIST[209](loc_0, 1, rt_add_i32(loc_1, 540))
		loc_4 = reg_0
		reg_0 = FUNC_LIST[232](loc_0, rt_add_i32(loc_1, 12), rt_load_i32(memory_at_0, loc_1 + 540))
		loc_0 = reg_0
		while true do
			if rt_load_i32(memory_at_0, loc_1 + 540) == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				reg_1 = FUNC_LIST[783](rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, loc_4)))
				rt_store_i32_n8(memory_at_0, loc_0, reg_1)
				loc_0 = rt_add_i32(loc_0, 1)
				loc_2 = rt_add_i32(loc_2, 1)
				loc_3 = rt_load_i32(memory_at_0, loc_1 + 540)
				if loc_2 < loc_3 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		FUNC_LIST[240](rt_add_i32(loc_1, 12), loc_3)
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 544)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[402] = --[[ str_match(lua_State*) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[393](loc_0, 0)
		break
	end
	return reg_0
end
FUNC_LIST[403] = --[[ str_rep(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 544)
		GLOBAL_LIST[0].value = loc_1
		reg_0 = FUNC_LIST[209](loc_0, 1, rt_add_i32(loc_1, 540))
		loc_2 = reg_0
		while true do
			while true do
				reg_0 = FUNC_LIST[220](loc_0, 2)
				loc_4 = reg_0
				if rt_le_i32(loc_4, 0) then
					while true do
						FUNC_LIST[145](loc_0, 6597, 0)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_3 = rt_load_i32(memory_at_0, loc_1 + 540)
				if loc_3 > rt_div_u32(1073741824, loc_4) then
					desired = 1
					break
				end
				reg_0 = FUNC_LIST[232](loc_0, rt_add_i32(loc_1, 12), rt_mul_i32(loc_3, loc_4))
				loc_0 = rt_load_i32(memory_at_0, loc_1 + 540)
				reg_0 = FUNC_LIST[609](reg_0, loc_2, loc_0)
				loc_5 = reg_0
				loc_2 = rt_load_i32(memory_at_0, loc_1 + 540)
				loc_3 = rt_add_i32(loc_5, loc_2)
				loc_2 = rt_sub_i32(rt_mul_i32(loc_0, loc_4), loc_2)
				if loc_0 < loc_2 then
					while true do
						while true do
							loc_2 = rt_sub_i32(loc_2, loc_0)
							reg_0 = FUNC_LIST[609](loc_3, loc_5, loc_0)
							loc_3 = rt_add_i32(reg_0, loc_0)
							loc_6 = rt_shl_i32(loc_0, 1)
							loc_0 = loc_6
							if loc_2 > loc_6 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[609](loc_3, loc_5, loc_2)
				FUNC_LIST[240](rt_add_i32(loc_1, 12), rt_mul_i32(loc_4, rt_load_i32(memory_at_0, loc_1 + 540)))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			GLOBAL_LIST[0].value = rt_add_i32(loc_1, 544)
			reg_0 = 1
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[203](loc_0, 4584, 0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[404] = --[[ str_reverse(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 544)
		GLOBAL_LIST[0].value = loc_1
		reg_0 = FUNC_LIST[209](loc_0, 1, rt_add_i32(loc_1, 540))
		loc_4 = reg_0
		reg_0 = FUNC_LIST[232](loc_0, rt_add_i32(loc_1, 12), rt_load_i32(memory_at_0, loc_1 + 540))
		loc_0 = reg_0
		loc_2 = rt_load_i32(memory_at_0, loc_1 + 540)
		loc_3 = rt_sub_i32(loc_2, 1)
		rt_store_i32(memory_at_0, loc_1 + 540, loc_3)
		if loc_2 ~= 0 then
			while true do
				while true do
					rt_store_i32_n8(memory_at_0, loc_0, rt_load_i32_u8(memory_at_0, rt_add_i32(loc_3, loc_4)))
					loc_2 = rt_load_i32(memory_at_0, loc_1 + 540)
					loc_3 = rt_sub_i32(loc_2, 1)
					rt_store_i32(memory_at_0, loc_1 + 540, loc_3)
					loc_0 = rt_add_i32(loc_0, 1)
					if loc_2 ~= 0 then
						continue
					end
					break
				end
				break
			end
		end
		FUNC_LIST[240](rt_add_i32(loc_1, 12), rt_sub_i32(loc_0, rt_load_i32(memory_at_0, loc_1 + 12)))
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 544)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[405] = --[[ str_sub(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		reg_0 = FUNC_LIST[209](loc_0, 1, rt_add_i32(loc_3, 12))
		loc_5 = reg_0
		reg_0 = FUNC_LIST[220](loc_0, 2)
		loc_1 = reg_0
		loc_6 = rt_load_i32(memory_at_0, loc_3 + 12)
		while true do
			reg_0 = FUNC_LIST[221](loc_0, 3, 4294967295)
			loc_2 = reg_0
			reg_0 = loc_2
			reg_1 = rt_shr_i32(loc_2, 31)
			loc_2 = rt_load_i32(memory_at_0, loc_3 + 12)
			loc_4 = rt_add_i32(reg_0, bit_and(reg_1, rt_add_i32(loc_2, 1)))
			loc_4 = (if rt_gt_i32(loc_4, 0) then loc_4 else 0)
			loc_2 = (if rt_gt_i32(loc_2, loc_4) then loc_4 else loc_2)
			loc_1 = rt_add_i32(bit_and(rt_add_i32(loc_6, 1), rt_shr_i32(loc_1, 31)), loc_1)
			loc_1 = (if rt_le_i32(loc_1, 1) then 1 else loc_1)
			if rt_ge_i32(loc_2, loc_1) then
				while true do
					FUNC_LIST[145](loc_0, rt_sub_i32(rt_add_i32(loc_1, loc_5), 1), rt_add_i32(rt_sub_i32(loc_2, loc_1), 1))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[145](loc_0, 6597, 0)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[406] = --[[ str_upper(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 544)
		GLOBAL_LIST[0].value = loc_1
		reg_0 = FUNC_LIST[209](loc_0, 1, rt_add_i32(loc_1, 540))
		loc_4 = reg_0
		reg_0 = FUNC_LIST[232](loc_0, rt_add_i32(loc_1, 12), rt_load_i32(memory_at_0, loc_1 + 540))
		loc_0 = reg_0
		while true do
			if rt_load_i32(memory_at_0, loc_1 + 540) == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				reg_1 = FUNC_LIST[784](rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, loc_4)))
				rt_store_i32_n8(memory_at_0, loc_0, reg_1)
				loc_0 = rt_add_i32(loc_0, 1)
				loc_2 = rt_add_i32(loc_2, 1)
				loc_3 = rt_load_i32(memory_at_0, loc_1 + 540)
				if loc_2 < loc_3 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		FUNC_LIST[240](rt_add_i32(loc_1, 12), loc_3)
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 544)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[407] = --[[ str_split(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_6 = 1
		reg_0 = FUNC_LIST[209](loc_0, 1, rt_add_i32(loc_4, 12))
		loc_2 = reg_0
		reg_0 = FUNC_LIST[208](loc_0, 2, 5464, rt_add_i32(loc_4, 8))
		loc_8 = reg_0
		loc_5 = rt_load_i32(memory_at_0, loc_4 + 12)
		FUNC_LIST[158](loc_0, 0, 0)
		loc_1 = rt_load_i32(memory_at_0, loc_4 + 8)
		loc_3 = rt_add_i32((if loc_1 == 0 then 1 else 0), loc_2)
		loc_5 = rt_add_i32(loc_2, loc_5)
		if loc_3 <= rt_sub_i32(loc_5, loc_1) then
			while true do
				while true do
					while true do
						reg_0 = FUNC_LIST[685](loc_3, loc_8, loc_1)
						if reg_0 ~= 0 then
							break
						end
						loc_7 = rt_add_i32(loc_7, 1)
						FUNC_LIST[142](loc_0, loc_7)
						FUNC_LIST[145](loc_0, loc_2, rt_sub_i32(loc_3, loc_2))
						FUNC_LIST[164](loc_0, 4294967293)
						loc_1 = rt_load_i32(memory_at_0, loc_4 + 8)
						loc_2 = rt_add_i32(loc_1, loc_3)
						if loc_1 == 0 then
							while true do
								loc_1 = 0
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_3 = rt_sub_i32(rt_add_i32(loc_1, loc_3), 1)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_3 = rt_add_i32(loc_3, 1)
					if loc_3 <= rt_sub_i32(loc_5, loc_1) then
						continue
					end
					break
				end
				reg_0 = rt_add_i32(loc_7, 1)
				break
			end
		else
			while true do
				reg_0 = loc_6
				break
			end
		end
		loc_6 = reg_0
		if loc_1 ~= 0 then
			while true do
				FUNC_LIST[142](loc_0, loc_6)
				FUNC_LIST[145](loc_0, loc_2, rt_sub_i32(loc_5, loc_2))
				FUNC_LIST[164](loc_0, 4294967293)
				break
			end
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[408] = --[[ str_pack(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = rt_i64_ZERO
	local loc_15 = rt_i64_ZERO
	local loc_16 = 0.0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 608)
		GLOBAL_LIST[0].value = loc_2
		reg_0 = FUNC_LIST[209](loc_0, 1, 0)
		loc_1 = reg_0
		rt_store_i64(memory_at_0, loc_2 + 72, rt_i64_from_u32(1, 1))
		rt_store_i32(memory_at_0, loc_2 + 68, loc_0)
		rt_store_i32(memory_at_0, loc_2 + 64, loc_1)
		FUNC_LIST[140](loc_0)
		FUNC_LIST[231](loc_0, rt_add_i32(loc_2, 80))
		while true do
			while true do
				while true do
					while true do
						while true do
							if rt_load_i32_u8(memory_at_0, loc_1) ~= 0 then
								while true do
									loc_6 = 1
									while true do
										reg_0 = FUNC_LIST[409](rt_add_i32(loc_2, 68), loc_11, rt_sub_i32(loc_2, 4294967232), rt_add_i32(loc_2, 60), rt_add_i32(loc_2, 56))
										loc_5 = reg_0
										loc_3 = rt_load_i32(memory_at_0, loc_2 + 56)
										loc_7 = rt_add_i32(loc_11, loc_3)
										loc_4 = rt_load_i32(memory_at_0, loc_2 + 60)
										if rt_gt_i32(loc_3, 0) then
											while true do
												while true do
													loc_1 = rt_load_i32(memory_at_0, loc_2 + 80)
													reg_0 = loc_2
													if loc_1 >= rt_load_i32(memory_at_0, loc_2 + 84) then
														while true do
															reg_1 = FUNC_LIST[234](rt_add_i32(loc_2, 80), 1)
															reg_1 = rt_load_i32(memory_at_0, loc_2 + 80)
															break
														end
														if desired then
															if desired == 9 then
																desired = nil
																continue
															end
															break
														end
													else
														while true do
															reg_1 = loc_1
															break
														end
														if desired then
															if desired == 9 then
																desired = nil
																continue
															end
															break
														end
													end
													loc_1 = reg_1
													rt_store_i32(memory_at_0, reg_0 + 80, rt_add_i32(loc_1, 1))
													rt_store_i32_n8(memory_at_0, loc_1, 0)
													loc_1 = (if rt_gt_i32(loc_3, 1) then 1 else 0)
													loc_3 = rt_sub_i32(loc_3, 1)
													if loc_1 ~= 0 then
														continue
													end
													break
												end
												if desired then
													break
												end
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
													continue
												end
												break
											end
										end
										loc_11 = rt_add_i32(loc_4, loc_7)
										loc_8 = rt_add_i32(loc_6, 1)
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		if not br_map[1] then
																			br_map[1] = (function()
																				return { [0] = 1, 2, 3, 4, 5, 6, 7, 7, }
																			end)()
																		end
																		temp = br_map[1][rt_sub_i32(loc_5, 1)] or 0
																		if temp < 4 then
																			if temp < 2 then
																				if temp < 1 then
																					break
																				else
																					desired = 14
																					break
																				end
																			elseif temp > 2 then
																				desired = 12
																				break
																			else
																				desired = 13
																				break
																			end
																		elseif temp > 4 then
																			if temp < 6 then
																				desired = 10
																				break
																			elseif temp > 6 then
																				desired = 8
																				break
																			else
																				desired = 9
																				break
																			end
																		else
																			desired = 11
																			break
																		end
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																		end
																		break
																	end
																	while true do
																		reg_0 = FUNC_LIST[216](loc_0, loc_8)
																		loc_16 = reg_0
																		if math_abs(loc_16) < 9.223372036854776e18 then
																			while true do
																				reg_0 = rt_truncate_i64_f64(loc_16)
																				desired = 15
																				break
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																				end
																				break
																			end
																		end
																		reg_0 = rt_i64_from_u32(0, 2147483648)
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																		end
																		break
																	end
																	loc_15 = reg_0
																	if rt_le_i32(loc_4, 7) then
																		while true do
																			loc_14 = rt_shl_i64(rt_i64_ONE, rt_extend_i64_u32(rt_sub_i32(rt_shl_i32(loc_4, 3), 1)))
																			if rt_lt_i64(loc_15, rt_sub_i64(rt_i64_ZERO, loc_14)) then
																				desired = 5
																				break
																			end
																			if rt_le_i64(loc_14, loc_15) then
																				desired = 5
																				break
																			end
																			break
																		end
																		if desired then
																			if desired == 14 then
																				desired = nil
																			end
																			break
																		end
																	end
																	loc_3 = rt_sub_i32(loc_4, 1)
																	loc_5 = rt_load_i32(memory_at_0, loc_2 + 72)
																	rt_store_i64_n8(memory_at_0, rt_add_i32(rt_add_i32(loc_2, 16), (if loc_5 ~= 0 then 0 else loc_3)), loc_15)
																	while true do
																		if rt_lt_i32(loc_4, 2) then
																			break
																		end
																		loc_9 = bit_and(loc_3, 3)
																		loc_1 = 1
																		loc_14 = loc_15
																		if rt_sub_i32(loc_4, 2) >= 3 then
																			while true do
																				loc_10 = bit_and(loc_3, 4294967292)
																				loc_7 = 0
																				while true do
																					rt_store_i64_n8(memory_at_0, rt_add_i32(rt_add_i32(loc_2, 16), (if loc_5 ~= 0 then loc_1 else rt_sub_i32(loc_3, loc_1))), rt_shr_u64(loc_14, rt_i64_from_u32(8, 0)))
																					loc_6 = rt_add_i32(loc_1, 1)
																					rt_store_i64_n8(memory_at_0, rt_add_i32(rt_add_i32(loc_2, 16), (if loc_5 ~= 0 then loc_6 else rt_sub_i32(loc_3, loc_6))), rt_shr_u64(loc_14, rt_i64_from_u32(16, 0)))
																					loc_6 = rt_add_i32(loc_1, 2)
																					rt_store_i64_n8(memory_at_0, rt_add_i32(rt_add_i32(loc_2, 16), (if loc_5 ~= 0 then loc_6 else rt_sub_i32(loc_3, loc_6))), rt_shr_u64(loc_14, rt_i64_from_u32(24, 0)))
																					loc_6 = rt_add_i32(loc_1, 3)
																					loc_14 = rt_shr_u64(loc_14, rt_i64_from_u32(32, 0))
																					rt_store_i64_n8(memory_at_0, rt_add_i32(rt_add_i32(loc_2, 16), (if loc_5 ~= 0 then loc_6 else rt_sub_i32(loc_3, loc_6))), loc_14)
																					loc_1 = rt_add_i32(loc_1, 4)
																					loc_7 = rt_add_i32(loc_7, 4)
																					if loc_10 ~= loc_7 then
																						continue
																					end
																					break
																				end
																				if desired then
																					break
																				end
																				break
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																				end
																				break
																			end
																		end
																		loc_7 = 0
																		if loc_9 ~= 0 then
																			while true do
																				while true do
																					loc_14 = rt_shr_u64(loc_14, rt_i64_from_u32(8, 0))
																					rt_store_i64_n8(memory_at_0, rt_add_i32(rt_add_i32(loc_2, 16), (if loc_5 ~= 0 then loc_1 else rt_sub_i32(loc_3, loc_1))), loc_14)
																					loc_1 = rt_add_i32(loc_1, 1)
																					loc_7 = rt_add_i32(loc_7, 1)
																					if loc_9 ~= loc_7 then
																						continue
																					end
																					break
																				end
																				if desired then
																					break
																				end
																				break
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																				end
																				break
																			end
																		end
																		if rt_lt_i32(loc_4, 9) then
																			break
																		end
																		if rt_ge_i64(loc_15, rt_i64_ZERO) then
																			break
																		end
																		loc_9 = bit_and(loc_4, 3)
																		loc_1 = 8
																		if rt_sub_i32(loc_4, 9) >= 3 then
																			while true do
																				loc_10 = rt_sub_i32(bit_and(loc_4, 2147483644), 12)
																				loc_7 = 0
																				while true do
																					rt_store_i32_n8(memory_at_0, rt_add_i32(rt_add_i32(loc_2, 16), (if loc_5 ~= 0 then loc_1 else rt_sub_i32(loc_3, loc_1))), 255)
																					loc_6 = bit_or(loc_1, 1)
																					rt_store_i32_n8(memory_at_0, rt_add_i32(rt_add_i32(loc_2, 16), (if loc_5 ~= 0 then loc_6 else rt_sub_i32(loc_3, loc_6))), 255)
																					loc_6 = bit_or(loc_1, 2)
																					rt_store_i32_n8(memory_at_0, rt_add_i32(rt_add_i32(loc_2, 16), (if loc_5 ~= 0 then loc_6 else rt_sub_i32(loc_3, loc_6))), 255)
																					loc_6 = bit_or(loc_1, 3)
																					rt_store_i32_n8(memory_at_0, rt_add_i32(rt_add_i32(loc_2, 16), (if loc_5 ~= 0 then loc_6 else rt_sub_i32(loc_3, loc_6))), 255)
																					loc_1 = rt_add_i32(loc_1, 4)
																					loc_6 = (if loc_7 ~= loc_10 then 1 else 0)
																					loc_7 = rt_add_i32(loc_7, 4)
																					if loc_6 ~= 0 then
																						continue
																					end
																					break
																				end
																				if desired then
																					break
																				end
																				break
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																				end
																				break
																			end
																		end
																		loc_7 = 0
																		if loc_9 == 0 then
																			break
																		end
																		while true do
																			rt_store_i32_n8(memory_at_0, rt_add_i32(rt_add_i32(loc_2, 16), (if loc_5 ~= 0 then loc_1 else rt_sub_i32(loc_3, loc_1))), 255)
																			loc_1 = rt_add_i32(loc_1, 1)
																			loc_7 = rt_add_i32(loc_7, 1)
																			if loc_9 ~= loc_7 then
																				continue
																			end
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																		end
																		break
																	end
																	FUNC_LIST[235](rt_add_i32(loc_2, 80), rt_add_i32(loc_2, 16), loc_4)
																	loc_6 = loc_8
																	desired = 8
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																while true do
																	reg_0 = FUNC_LIST[216](loc_0, loc_8)
																	loc_16 = reg_0
																	if math_abs(loc_16) < 9.223372036854776e18 then
																		while true do
																			reg_0 = rt_truncate_i64_f64(loc_16)
																			desired = 14
																			break
																		end
																		if desired then
																			if desired == 14 then
																				desired = nil
																			end
																			break
																		end
																	end
																	reg_0 = rt_i64_from_u32(0, 2147483648)
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																loc_14 = reg_0
																if rt_le_i32(loc_4, 7) then
																	while true do
																		if rt_ne_i64(rt_shr_u64(loc_14, rt_extend_i64_u32(rt_shl_i32(loc_4, 3))), rt_i64_ZERO) then
																			desired = 4
																			break
																		end
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																end
																loc_3 = rt_sub_i32(loc_4, 1)
																loc_5 = rt_load_i32(memory_at_0, loc_2 + 72)
																rt_store_i64_n8(memory_at_0, rt_add_i32(rt_add_i32(loc_2, 16), (if loc_5 ~= 0 then 0 else loc_3)), loc_14)
																while true do
																	if rt_lt_i32(loc_4, 2) then
																		break
																	end
																	loc_9 = bit_and(loc_3, 3)
																	loc_1 = 1
																	if rt_sub_i32(loc_4, 2) >= 3 then
																		while true do
																			loc_10 = bit_and(loc_3, 4294967292)
																			loc_7 = 0
																			while true do
																				rt_store_i64_n8(memory_at_0, rt_add_i32(rt_add_i32(loc_2, 16), (if loc_5 ~= 0 then loc_1 else rt_sub_i32(loc_3, loc_1))), rt_shr_u64(loc_14, rt_i64_from_u32(8, 0)))
																				loc_6 = rt_add_i32(loc_1, 1)
																				rt_store_i64_n8(memory_at_0, rt_add_i32(rt_add_i32(loc_2, 16), (if loc_5 ~= 0 then loc_6 else rt_sub_i32(loc_3, loc_6))), rt_shr_u64(loc_14, rt_i64_from_u32(16, 0)))
																				loc_6 = rt_add_i32(loc_1, 2)
																				rt_store_i64_n8(memory_at_0, rt_add_i32(rt_add_i32(loc_2, 16), (if loc_5 ~= 0 then loc_6 else rt_sub_i32(loc_3, loc_6))), rt_shr_u64(loc_14, rt_i64_from_u32(24, 0)))
																				loc_6 = rt_add_i32(loc_1, 3)
																				loc_14 = rt_shr_u64(loc_14, rt_i64_from_u32(32, 0))
																				rt_store_i64_n8(memory_at_0, rt_add_i32(rt_add_i32(loc_2, 16), (if loc_5 ~= 0 then loc_6 else rt_sub_i32(loc_3, loc_6))), loc_14)
																				loc_1 = rt_add_i32(loc_1, 4)
																				loc_7 = rt_add_i32(loc_7, 4)
																				if loc_10 ~= loc_7 then
																					continue
																				end
																				break
																			end
																			if desired then
																				break
																			end
																			break
																		end
																		if desired then
																			if desired == 14 then
																				desired = nil
																			end
																			break
																		end
																	end
																	loc_7 = 0
																	if loc_9 == 0 then
																		break
																	end
																	while true do
																		loc_14 = rt_shr_u64(loc_14, rt_i64_from_u32(8, 0))
																		rt_store_i64_n8(memory_at_0, rt_add_i32(rt_add_i32(loc_2, 16), (if loc_5 ~= 0 then loc_1 else rt_sub_i32(loc_3, loc_1))), loc_14)
																		loc_1 = rt_add_i32(loc_1, 1)
																		loc_7 = rt_add_i32(loc_7, 1)
																		if loc_9 ~= loc_7 then
																			continue
																		end
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																		end
																		break
																	end
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																FUNC_LIST[235](rt_add_i32(loc_2, 80), rt_add_i32(loc_2, 16), loc_4)
																loc_6 = loc_8
																desired = 8
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
															reg_0 = FUNC_LIST[216](loc_0, loc_8)
															loc_16 = reg_0
															while true do
																if loc_4 == 4 then
																	while true do
																		rt_store_f32(memory_at_0, loc_2 + 16, no_op(loc_16))
																		desired = 13
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																end
																rt_store_f64(memory_at_0, loc_2 + 16, loc_16)
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
															while true do
																if rt_load_i32(memory_at_0, loc_2 + 72) == 1 then
																	while true do
																		if loc_4 == 0 then
																			desired = 13
																			break
																		end
																		loc_9 = rt_sub_i32(loc_4, 1)
																		loc_1 = rt_add_i32(loc_2, 16)
																		loc_3 = loc_2
																		while true do
																			loc_6 = bit_and(loc_4, 7)
																			if loc_6 == 0 then
																				while true do
																					loc_5 = loc_4
																					desired = 15
																					break
																				end
																				if desired then
																					if desired == 15 then
																						desired = nil
																					end
																					break
																				end
																			end
																			loc_7 = 0
																			loc_5 = loc_4
																			while true do
																				rt_store_i32_n8(memory_at_0, loc_3, rt_load_i32_u8(memory_at_0, loc_1))
																				loc_3 = rt_add_i32(loc_3, 1)
																				loc_1 = rt_add_i32(loc_1, 1)
																				loc_5 = rt_sub_i32(loc_5, 1)
																				loc_7 = rt_add_i32(loc_7, 1)
																				if loc_6 ~= loc_7 then
																					continue
																				end
																				break
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																				end
																				break
																			end
																			break
																		end
																		if desired then
																			break
																		end
																		if loc_9 < 7 then
																			desired = 13
																			break
																		end
																		while true do
																			rt_store_i32_n8(memory_at_0, loc_3, rt_load_i32_u8(memory_at_0, loc_1))
																			rt_store_i32_n8(memory_at_0, loc_3 + 1, rt_load_i32_u8(memory_at_0, loc_1 + 1))
																			rt_store_i32_n8(memory_at_0, loc_3 + 2, rt_load_i32_u8(memory_at_0, loc_1 + 2))
																			rt_store_i32_n8(memory_at_0, loc_3 + 3, rt_load_i32_u8(memory_at_0, loc_1 + 3))
																			rt_store_i32_n8(memory_at_0, loc_3 + 4, rt_load_i32_u8(memory_at_0, loc_1 + 4))
																			rt_store_i32_n8(memory_at_0, loc_3 + 5, rt_load_i32_u8(memory_at_0, loc_1 + 5))
																			rt_store_i32_n8(memory_at_0, loc_3 + 6, rt_load_i32_u8(memory_at_0, loc_1 + 6))
																			rt_store_i32_n8(memory_at_0, loc_3 + 7, rt_load_i32_u8(memory_at_0, loc_1 + 7))
																			loc_3 = rt_add_i32(loc_3, 8)
																			loc_1 = rt_add_i32(loc_1, 8)
																			loc_5 = rt_sub_i32(loc_5, 8)
																			if loc_5 ~= 0 then
																				continue
																			end
																			break
																		end
																		if desired then
																			break
																		end
																		desired = 13
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																end
																if loc_4 == 0 then
																	break
																end
																loc_9 = rt_sub_i32(loc_4, 1)
																loc_3 = rt_add_i32(loc_2, loc_4)
																loc_1 = rt_add_i32(loc_2, 16)
																while true do
																	loc_6 = bit_and(loc_4, 3)
																	if loc_6 == 0 then
																		while true do
																			loc_5 = loc_4
																			desired = 14
																			break
																		end
																		if desired then
																			if desired == 14 then
																				desired = nil
																			end
																			break
																		end
																	end
																	loc_7 = 0
																	loc_5 = loc_4
																	while true do
																		loc_3 = rt_sub_i32(loc_3, 1)
																		rt_store_i32_n8(memory_at_0, loc_3, rt_load_i32_u8(memory_at_0, loc_1))
																		loc_1 = rt_add_i32(loc_1, 1)
																		loc_5 = rt_sub_i32(loc_5, 1)
																		loc_7 = rt_add_i32(loc_7, 1)
																		if loc_6 ~= loc_7 then
																			continue
																		end
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																		end
																		break
																	end
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																if loc_9 < 3 then
																	break
																end
																while true do
																	rt_store_i32_n8(memory_at_0, rt_sub_i32(loc_3, 1), rt_load_i32_u8(memory_at_0, loc_1))
																	rt_store_i32_n8(memory_at_0, rt_sub_i32(loc_3, 2), rt_load_i32_u8(memory_at_0, loc_1 + 1))
																	rt_store_i32_n8(memory_at_0, rt_sub_i32(loc_3, 3), rt_load_i32_u8(memory_at_0, loc_1 + 2))
																	loc_3 = rt_sub_i32(loc_3, 4)
																	rt_store_i32_n8(memory_at_0, loc_3, rt_load_i32_u8(memory_at_0, loc_1 + 3))
																	loc_1 = rt_add_i32(loc_1, 4)
																	loc_5 = rt_sub_i32(loc_5, 4)
																	if loc_5 ~= 0 then
																		continue
																	end
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
															FUNC_LIST[235](rt_add_i32(loc_2, 80), loc_2, loc_4)
															loc_6 = loc_8
															desired = 8
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
														reg_0 = FUNC_LIST[209](loc_0, loc_8, rt_add_i32(loc_2, 16))
														loc_1 = reg_0
														loc_3 = rt_load_i32(memory_at_0, loc_2 + 16)
														if loc_4 < loc_3 then
															desired = 3
															break
														end
														FUNC_LIST[235](rt_add_i32(loc_2, 80), loc_1, loc_3)
														loc_1 = rt_load_i32(memory_at_0, loc_2 + 16)
														rt_store_i32(memory_at_0, loc_2 + 16, rt_add_i32(loc_1, 1))
														if loc_1 < loc_4 then
															while true do
																while true do
																	loc_1 = rt_load_i32(memory_at_0, loc_2 + 80)
																	reg_0 = loc_2
																	if loc_1 >= rt_load_i32(memory_at_0, loc_2 + 84) then
																		while true do
																			reg_1 = FUNC_LIST[234](rt_add_i32(loc_2, 80), 1)
																			reg_1 = rt_load_i32(memory_at_0, loc_2 + 80)
																			break
																		end
																		if desired then
																			if desired == 13 then
																				desired = nil
																				continue
																			end
																			break
																		end
																	else
																		while true do
																			reg_1 = loc_1
																			break
																		end
																		if desired then
																			if desired == 13 then
																				desired = nil
																				continue
																			end
																			break
																		end
																	end
																	loc_1 = reg_1
																	rt_store_i32(memory_at_0, reg_0 + 80, rt_add_i32(loc_1, 1))
																	rt_store_i32_n8(memory_at_0, loc_1, 0)
																	loc_1 = rt_load_i32(memory_at_0, loc_2 + 16)
																	rt_store_i32(memory_at_0, loc_2 + 16, rt_add_i32(loc_1, 1))
																	if loc_1 < loc_4 then
																		continue
																	end
																	break
																end
																if desired then
																	break
																end
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																end
																break
															end
														end
														loc_6 = loc_8
														desired = 8
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													reg_0 = FUNC_LIST[209](loc_0, loc_8, loc_2)
													loc_12 = reg_0
													loc_3 = rt_load_i32(memory_at_0, loc_2)
													if (if rt_shr_u32(loc_3, rt_shl_i32(loc_4, 3)) ~= 0 then (if rt_le_i32(loc_4, 3) then 1 else 0) else 0) ~= 0 then
														desired = 2
														break
													end
													loc_5 = rt_sub_i32(loc_4, 1)
													loc_7 = rt_load_i32(memory_at_0, loc_2 + 72)
													rt_store_i32_n8(memory_at_0, rt_add_i32(rt_add_i32(loc_2, 16), (if loc_7 ~= 0 then 0 else loc_5)), loc_3)
													while true do
														if rt_lt_i32(loc_4, 2) then
															break
														end
														loc_10 = bit_and(loc_5, 3)
														loc_1 = 1
														if rt_sub_i32(loc_4, 2) >= 3 then
															while true do
																loc_13 = bit_and(loc_5, 4294967292)
																loc_6 = 0
																while true do
																	rt_store_i32_n8(memory_at_0, rt_add_i32(rt_add_i32(loc_2, 16), (if loc_7 ~= 0 then loc_1 else rt_sub_i32(loc_5, loc_1))), rt_shr_u32(loc_3, 8))
																	loc_9 = rt_add_i32(loc_1, 1)
																	rt_store_i32_n8(memory_at_0, rt_add_i32(rt_add_i32(loc_2, 16), (if loc_7 ~= 0 then loc_9 else rt_sub_i32(loc_5, loc_9))), rt_shr_u32(loc_3, 16))
																	loc_9 = rt_add_i32(loc_1, 2)
																	rt_store_i32_n8(memory_at_0, rt_add_i32(rt_add_i32(loc_2, 16), (if loc_7 ~= 0 then loc_9 else rt_sub_i32(loc_5, loc_9))), rt_shr_u32(loc_3, 24))
																	loc_3 = rt_add_i32(loc_1, 3)
																	rt_store_i32_n8(memory_at_0, rt_add_i32(rt_add_i32(loc_2, 16), (if loc_7 ~= 0 then loc_3 else rt_sub_i32(loc_5, loc_3))), 0)
																	loc_1 = rt_add_i32(loc_1, 4)
																	loc_3 = 0
																	loc_6 = rt_add_i32(loc_6, 4)
																	if loc_13 ~= loc_6 then
																		continue
																	end
																	break
																end
																if desired then
																	break
																end
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																end
																break
															end
														end
														loc_6 = 0
														if loc_10 == 0 then
															break
														end
														while true do
															loc_3 = rt_shr_u32(loc_3, 8)
															rt_store_i32_n8(memory_at_0, rt_add_i32(rt_add_i32(loc_2, 16), (if loc_7 ~= 0 then loc_1 else rt_sub_i32(loc_5, loc_1))), loc_3)
															loc_1 = rt_add_i32(loc_1, 1)
															loc_6 = rt_add_i32(loc_6, 1)
															if loc_10 ~= loc_6 then
																continue
															end
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
													FUNC_LIST[235](rt_add_i32(loc_2, 80), rt_add_i32(loc_2, 16), loc_4)
													FUNC_LIST[235](rt_add_i32(loc_2, 80), loc_12, rt_load_i32(memory_at_0, loc_2))
													loc_11 = rt_add_i32(loc_11, rt_load_i32(memory_at_0, loc_2))
													loc_6 = loc_8
													desired = 8
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
												reg_0 = FUNC_LIST[209](loc_0, loc_8, rt_add_i32(loc_2, 16))
												loc_1 = reg_0
												reg_0 = FUNC_LIST[649](loc_1)
												loc_3 = reg_0
												if loc_3 ~= rt_load_i32(memory_at_0, loc_2 + 16) then
													desired = 1
													break
												end
												FUNC_LIST[235](rt_add_i32(loc_2, 80), loc_1, loc_3)
												loc_1 = rt_load_i32(memory_at_0, loc_2 + 80)
												reg_0 = loc_2
												if loc_1 >= rt_load_i32(memory_at_0, loc_2 + 84) then
													while true do
														reg_1 = FUNC_LIST[234](rt_add_i32(loc_2, 80), 1)
														reg_1 = rt_load_i32(memory_at_0, loc_2 + 80)
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
														end
														break
													end
												else
													while true do
														reg_1 = loc_1
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
														end
														break
													end
												end
												loc_1 = reg_1
												rt_store_i32(memory_at_0, reg_0 + 80, rt_add_i32(loc_1, 1))
												rt_store_i32_n8(memory_at_0, loc_1, 0)
												loc_11 = rt_add_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_2 + 16), loc_11), 1)
												loc_6 = loc_8
												desired = 8
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
											loc_1 = rt_load_i32(memory_at_0, loc_2 + 80)
											reg_0 = loc_2
											if loc_1 >= rt_load_i32(memory_at_0, loc_2 + 84) then
												while true do
													reg_1 = FUNC_LIST[234](rt_add_i32(loc_2, 80), 1)
													reg_1 = rt_load_i32(memory_at_0, loc_2 + 80)
													break
												end
												if desired then
													if desired == 8 then
														desired = nil
													end
													break
												end
											else
												while true do
													reg_1 = loc_1
													break
												end
												if desired then
													if desired == 8 then
														desired = nil
													end
													break
												end
											end
											loc_1 = reg_1
											rt_store_i32(memory_at_0, reg_0 + 80, rt_add_i32(loc_1, 1))
											rt_store_i32_n8(memory_at_0, loc_1, 0)
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
										if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_2 + 64)) ~= 0 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							FUNC_LIST[239](rt_add_i32(loc_2, 80))
							GLOBAL_LIST[0].value = rt_add_i32(loc_2, 608)
							reg_0 = 1
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[202](loc_0, loc_8, 1469)
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[202](loc_0, loc_8, 1541)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[202](loc_0, loc_8, 3655)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[202](loc_0, loc_8, 3614)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[202](loc_0, loc_8, 1981)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[409] = --[[ getdetails(Header*, unsigned long, char const**, int*, int*) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		reg_0 = FUNC_LIST[414](loc_0, loc_2, loc_3)
		loc_6 = reg_0
		loc_3 = rt_load_i32(memory_at_0, loc_3)
		rt_store_i32(memory_at_0, loc_5 + 12, loc_3)
		while true do
			while true do
				if loc_6 == 7 then
					while true do
						if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_2)) == 0 then
							desired = 2
							break
						end
						reg_0 = FUNC_LIST[414](loc_0, loc_2, rt_add_i32(loc_5, 12))
						if reg_0 == 3 then
							desired = 2
							break
						end
						loc_3 = rt_load_i32(memory_at_0, loc_5 + 12)
						if loc_3 == 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = 0
				while true do
					if loc_6 == 3 then
						break
					end
					if rt_lt_i32(loc_3, 2) then
						break
					end
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
					loc_3 = (if rt_gt_i32(loc_2, loc_3) then loc_3 else loc_2)
					loc_2 = rt_sub_i32(loc_3, 1)
					if bit_and(loc_3, loc_2) ~= 0 then
						desired = 1
						break
					end
					loc_2 = bit_and(loc_2, rt_sub_i32(loc_3, bit_and(loc_1, loc_2)))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_4, loc_2)
				GLOBAL_LIST[0].value = rt_add_i32(loc_5, 16)
				reg_0 = loc_6
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[202](rt_load_i32(memory_at_0, loc_0), 1, 6469)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[202](rt_load_i32(memory_at_0, loc_0), 1, 5397)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[410] = --[[ str_packsize(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_1
		reg_0 = FUNC_LIST[209](loc_0, 1, 0)
		loc_3 = reg_0
		rt_store_i64(memory_at_0, loc_1 + 24, rt_i64_from_u32(1, 1))
		rt_store_i32(memory_at_0, loc_1 + 20, loc_0)
		rt_store_i32(memory_at_0, loc_1 + 16, loc_3)
		while true do
			while true do
				if rt_load_i32_u8(memory_at_0, loc_3) ~= 0 then
					while true do
						while true do
							reg_0 = FUNC_LIST[409](rt_add_i32(loc_1, 20), loc_2, rt_add_i32(loc_1, 16), rt_add_i32(loc_1, 12), rt_add_i32(loc_1, 8))
							if rt_sub_i32(reg_0, 6) >= 4294967294 then
								desired = 2
								break
							end
							loc_3 = rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 12), rt_load_i32(memory_at_0, loc_1 + 8))
							if rt_lt_i32(rt_sub_i32(1073741824, loc_3), loc_2) then
								desired = 1
								break
							end
							loc_2 = rt_add_i32(loc_2, loc_3)
							if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 16)) ~= 0 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[142](loc_0, loc_2)
				GLOBAL_LIST[0].value = rt_add_i32(loc_1, 32)
				reg_0 = 1
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[202](loc_0, 1, 1822)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[202](loc_0, 1, 4493)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[411] = --[[ str_unpack(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = rt_i64_ZERO
	local loc_13 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_6 = rt_sub_i32(GLOBAL_LIST[0].value, 112)
		GLOBAL_LIST[0].value = loc_6
		loc_1 = 1
		reg_1 = FUNC_LIST[209](loc_0, 1, 0)
		loc_11 = reg_1
		rt_store_i32(memory_at_0, loc_6 + 96, loc_11)
		reg_0 = FUNC_LIST[209](loc_0, 2, rt_add_i32(loc_6, 92))
		loc_9 = reg_0
		reg_1 = FUNC_LIST[221](loc_0, 3, 1)
		loc_2 = reg_1
		loc_8 = rt_load_i32(memory_at_0, loc_6 + 92)
		loc_2 = rt_add_i32(loc_2, bit_and(rt_add_i32(loc_8, 1), rt_shr_i32(loc_2, 31)))
		loc_3 = (if rt_le_i32(loc_2, 1) then 1 else loc_2)
		loc_2 = rt_sub_i32(loc_3, 1)
		if loc_2 <= loc_8 then
			while true do
				rt_store_i64(memory_at_0, loc_6 + 104, rt_i64_from_u32(1, 1))
				rt_store_i32(memory_at_0, loc_6 + 100, loc_0)
				if rt_load_i32_u8(memory_at_0, loc_11) ~= 0 then
					while true do
						while true do
							reg_0 = FUNC_LIST[409](rt_add_i32(loc_6, 100), loc_2, rt_add_i32(loc_6, 96), rt_add_i32(loc_6, 88), rt_add_i32(loc_6, 84))
							loc_3 = reg_0
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														loc_1 = rt_load_i32(memory_at_0, loc_6 + 88)
														loc_8 = rt_load_i32(memory_at_0, loc_6 + 84)
														if rt_add_i32(loc_1, loc_8) <= rt_sub_i32(rt_load_i32(memory_at_0, loc_6 + 92), loc_2) then
															while true do
																FUNC_LIST[213](loc_0, 2, 1887)
																loc_11 = rt_add_i32(loc_5, 1)
																loc_8 = rt_add_i32(loc_2, loc_8)
																while true do
																	while true do
																		while true do
																			while true do
																				while true do
																					while true do
																						if not br_map[1] then
																							br_map[1] = (function()
																								return { [0] = 1, 2, 3, 4, 5, 13, 13, 13, }
																							end)()
																						end
																						temp = br_map[1][rt_sub_i32(loc_3, 1)] or 0
																						if temp < 3 then
																							if temp < 1 then
																								break
																							elseif temp > 1 then
																								desired = 15
																								break
																							else
																								desired = 16
																								break
																							end
																						elseif temp > 3 then
																							if temp < 5 then
																								desired = 13
																								break
																							elseif temp > 5 then
																								desired = 4
																								break
																							else
																								desired = 12
																								break
																							end
																						else
																							desired = 14
																							break
																						end
																					end
																					if desired then
																						if desired == 16 then
																							desired = nil
																						end
																						break
																					end
																					while true do
																						while true do
																							if rt_le_i32(loc_1, 0) then
																								while true do
																									loc_12 = rt_i64_ZERO
																									desired = 18
																									break
																								end
																								if desired then
																									if desired == 18 then
																										desired = nil
																									end
																									break
																								end
																							end
																							loc_13 = rt_i64_ZERO
																							while true do
																								loc_3 = rt_add_i32(loc_8, loc_9)
																								loc_2 = (if rt_ge_i32(loc_1, 8) then 8 else loc_1)
																								loc_4 = rt_sub_i32(loc_2, 1)
																								loc_5 = rt_load_i32(memory_at_0, loc_6 + 104)
																								loc_12 = rt_load_i64_u8(memory_at_0, rt_add_i32(loc_3, (if loc_5 ~= 0 then loc_4 else rt_sub_i32(loc_1, loc_2))))
																								reg_0 = loc_12
																								if loc_1 == 1 then
																									break
																								end
																								loc_13 = rt_shl_i64(loc_12, rt_i64_from_u32(8, 0))
																								loc_7 = rt_sub_i32(loc_2, 2)
																								loc_12 = rt_bit_or_i64(loc_13, rt_load_i64_u8(memory_at_0, rt_add_i32((if loc_5 ~= 0 then loc_7 else rt_sub_i32(loc_1, loc_4)), loc_3)))
																								reg_0 = loc_12
																								if rt_lt_i32(loc_1, 3) then
																									break
																								end
																								loc_13 = rt_shl_i64(loc_12, rt_i64_from_u32(8, 0))
																								loc_4 = rt_sub_i32(loc_2, 3)
																								loc_12 = rt_bit_or_i64(loc_13, rt_load_i64_u8(memory_at_0, rt_add_i32((if loc_5 ~= 0 then loc_4 else rt_sub_i32(loc_1, loc_7)), loc_3)))
																								reg_0 = loc_12
																								if loc_1 == 3 then
																									break
																								end
																								loc_13 = rt_shl_i64(loc_12, rt_i64_from_u32(8, 0))
																								loc_7 = rt_sub_i32(loc_2, 4)
																								loc_12 = rt_bit_or_i64(loc_13, rt_load_i64_u8(memory_at_0, rt_add_i32((if loc_5 ~= 0 then loc_7 else rt_sub_i32(loc_1, loc_4)), loc_3)))
																								reg_0 = loc_12
																								if rt_lt_i32(loc_1, 5) then
																									break
																								end
																								loc_13 = rt_shl_i64(loc_12, rt_i64_from_u32(8, 0))
																								loc_4 = rt_sub_i32(loc_2, 5)
																								loc_12 = rt_bit_or_i64(loc_13, rt_load_i64_u8(memory_at_0, rt_add_i32((if loc_5 ~= 0 then loc_4 else rt_sub_i32(loc_1, loc_7)), loc_3)))
																								reg_0 = loc_12
																								if loc_1 == 5 then
																									break
																								end
																								loc_13 = rt_shl_i64(loc_12, rt_i64_from_u32(8, 0))
																								loc_7 = rt_sub_i32(loc_2, 6)
																								loc_12 = rt_bit_or_i64(loc_13, rt_load_i64_u8(memory_at_0, rt_add_i32((if loc_5 ~= 0 then loc_7 else rt_sub_i32(loc_1, loc_4)), loc_3)))
																								reg_0 = loc_12
																								if rt_lt_i32(loc_1, 7) then
																									break
																								end
																								loc_13 = rt_shl_i64(loc_12, rt_i64_from_u32(8, 0))
																								loc_4 = rt_sub_i32(loc_2, 7)
																								loc_12 = rt_bit_or_i64(loc_13, rt_load_i64_u8(memory_at_0, rt_add_i32((if loc_5 ~= 0 then loc_4 else rt_sub_i32(loc_1, loc_7)), loc_3)))
																								reg_0 = loc_12
																								if loc_1 == 7 then
																									break
																								end
																								loc_13 = rt_shl_i64(loc_12, rt_i64_from_u32(8, 0))
																								reg_0 = rt_bit_or_i64(loc_13, rt_load_i64_u8(memory_at_0, rt_add_i32((if loc_5 ~= 0 then rt_sub_i32(loc_2, 8) else rt_sub_i32(loc_1, loc_4)), loc_3)))
																								break
																							end
																							if desired then
																								if desired == 18 then
																									desired = nil
																								end
																								break
																							end
																							loc_12 = reg_0
																							if rt_gt_i32(loc_1, 7) then
																								desired = 17
																								break
																							end
																							break
																						end
																						if desired then
																							if desired == 17 then
																								desired = nil
																							end
																							break
																						end
																						loc_13 = rt_shl_i64(rt_i64_ONE, rt_extend_i64_u32(rt_sub_i32(rt_shl_i32(loc_1, 3), 1)))
																						loc_12 = rt_sub_i64(rt_bit_xor_i64(loc_13, loc_12), loc_13)
																						desired = 6
																						break
																					end
																					if desired then
																						if desired == 16 then
																							desired = nil
																						end
																						break
																					end
																					if loc_1 == 8 then
																						desired = 6
																						break
																					end
																					loc_4 = (if rt_lt_i64(loc_13, rt_i64_ZERO) then 255 else 0)
																					while true do
																						if loc_4 == rt_load_i32_u8(memory_at_0, rt_add_i32((if loc_5 ~= 0 then loc_2 else rt_add_i32(bit_xor(loc_2, 4294967295), loc_1)), loc_3)) then
																							while true do
																								loc_2 = rt_add_i32(loc_2, 1)
																								if rt_lt_i32(loc_2, loc_1) then
																									desired = 17
																									break
																								end
																								desired = 6
																								break
																							end
																							if desired then
																								if desired == 17 then
																									desired = nil
																									continue
																								end
																								break
																							end
																						end
																						break
																					end
																					if desired then
																						if desired == 16 then
																							desired = nil
																						end
																						break
																					end
																					rt_store_i32(memory_at_0, loc_6, loc_1)
																					FUNC_LIST[203](loc_0, 2396, loc_6)
																					error("out of code bounds")
																				end
																				if desired then
																					if desired == 15 then
																						desired = nil
																					end
																					break
																				end
																				if rt_le_i32(loc_1, 0) then
																					while true do
																						loc_12 = rt_i64_ZERO
																						desired = 7
																						break
																					end
																					if desired then
																						if desired == 15 then
																							desired = nil
																						end
																						break
																					end
																				end
																				while true do
																					loc_3 = rt_add_i32(loc_8, loc_9)
																					loc_2 = (if rt_ge_i32(loc_1, 8) then 8 else loc_1)
																					loc_4 = rt_sub_i32(loc_2, 1)
																					loc_5 = rt_load_i32(memory_at_0, loc_6 + 104)
																					loc_12 = rt_load_i64_u8(memory_at_0, rt_add_i32(loc_3, (if loc_5 ~= 0 then loc_4 else rt_sub_i32(loc_1, loc_2))))
																					reg_0 = loc_12
																					if loc_1 == 1 then
																						break
																					end
																					loc_7 = rt_sub_i32(loc_2, 2)
																					loc_12 = rt_bit_or_i64(rt_load_i64_u8(memory_at_0, rt_add_i32((if loc_5 ~= 0 then loc_7 else rt_sub_i32(loc_1, loc_4)), loc_3)), rt_shl_i64(loc_12, rt_i64_from_u32(8, 0)))
																					reg_0 = loc_12
																					if rt_lt_i32(loc_1, 3) then
																						break
																					end
																					loc_4 = rt_sub_i32(loc_2, 3)
																					loc_12 = rt_bit_or_i64(rt_load_i64_u8(memory_at_0, rt_add_i32((if loc_5 ~= 0 then loc_4 else rt_sub_i32(loc_1, loc_7)), loc_3)), rt_shl_i64(loc_12, rt_i64_from_u32(8, 0)))
																					reg_0 = loc_12
																					if loc_1 == 3 then
																						break
																					end
																					loc_7 = rt_sub_i32(loc_2, 4)
																					loc_12 = rt_bit_or_i64(rt_load_i64_u8(memory_at_0, rt_add_i32((if loc_5 ~= 0 then loc_7 else rt_sub_i32(loc_1, loc_4)), loc_3)), rt_shl_i64(loc_12, rt_i64_from_u32(8, 0)))
																					reg_0 = loc_12
																					if rt_lt_i32(loc_1, 5) then
																						break
																					end
																					loc_4 = rt_sub_i32(loc_2, 5)
																					loc_12 = rt_bit_or_i64(rt_load_i64_u8(memory_at_0, rt_add_i32((if loc_5 ~= 0 then loc_4 else rt_sub_i32(loc_1, loc_7)), loc_3)), rt_shl_i64(loc_12, rt_i64_from_u32(8, 0)))
																					reg_0 = loc_12
																					if loc_1 == 5 then
																						break
																					end
																					loc_7 = rt_sub_i32(loc_2, 6)
																					loc_12 = rt_bit_or_i64(rt_load_i64_u8(memory_at_0, rt_add_i32((if loc_5 ~= 0 then loc_7 else rt_sub_i32(loc_1, loc_4)), loc_3)), rt_shl_i64(loc_12, rt_i64_from_u32(8, 0)))
																					reg_0 = loc_12
																					if rt_lt_i32(loc_1, 7) then
																						break
																					end
																					loc_4 = rt_sub_i32(loc_2, 7)
																					loc_12 = rt_bit_or_i64(rt_load_i64_u8(memory_at_0, rt_add_i32((if loc_5 ~= 0 then loc_4 else rt_sub_i32(loc_1, loc_7)), loc_3)), rt_shl_i64(loc_12, rt_i64_from_u32(8, 0)))
																					reg_0 = loc_12
																					if loc_1 == 7 then
																						break
																					end
																					reg_0 = rt_bit_or_i64(rt_load_i64_u8(memory_at_0, rt_add_i32((if loc_5 ~= 0 then rt_sub_i32(loc_2, 8) else rt_sub_i32(loc_1, loc_4)), loc_3)), rt_shl_i64(loc_12, rt_i64_from_u32(8, 0)))
																					break
																				end
																				if desired then
																					if desired == 15 then
																						desired = nil
																					end
																					break
																				end
																				loc_12 = reg_0
																				if rt_lt_i32(loc_1, 9) then
																					desired = 7
																					break
																				end
																				while true do
																					if rt_load_i32_u8(memory_at_0, rt_add_i32((if loc_5 ~= 0 then loc_2 else rt_add_i32(bit_xor(loc_2, 4294967295), loc_1)), loc_3)) == 0 then
																						while true do
																							loc_2 = rt_add_i32(loc_2, 1)
																							if loc_2 ~= loc_1 then
																								desired = 16
																								break
																							end
																							desired = 7
																							break
																						end
																						if desired then
																							if desired == 16 then
																								desired = nil
																								continue
																							end
																							break
																						end
																					end
																					break
																				end
																				if desired then
																					if desired == 15 then
																						desired = nil
																					end
																					break
																				end
																				rt_store_i32(memory_at_0, loc_6 + 16, loc_1)
																				FUNC_LIST[203](loc_0, 2396, rt_add_i32(loc_6, 16))
																				error("out of code bounds")
																			end
																			if desired then
																				if desired == 14 then
																					desired = nil
																				end
																				break
																			end
																			loc_2 = rt_add_i32(loc_8, loc_9)
																			while true do
																				while true do
																					if rt_load_i32(memory_at_0, loc_6 + 104) == 1 then
																						while true do
																							if loc_1 == 0 then
																								desired = 15
																								break
																							end
																							loc_3 = rt_add_i32(loc_6, 40)
																							while true do
																								loc_7 = bit_and(loc_1, 7)
																								if loc_7 == 0 then
																									while true do
																										loc_5 = loc_1
																										desired = 18
																										break
																									end
																									if desired then
																										if desired == 18 then
																											desired = nil
																										end
																										break
																									end
																								end
																								loc_4 = 0
																								loc_5 = loc_1
																								while true do
																									rt_store_i32_n8(memory_at_0, loc_3, rt_load_i32_u8(memory_at_0, loc_2))
																									loc_3 = rt_add_i32(loc_3, 1)
																									loc_2 = rt_add_i32(loc_2, 1)
																									loc_5 = rt_sub_i32(loc_5, 1)
																									loc_4 = rt_add_i32(loc_4, 1)
																									if loc_7 ~= loc_4 then
																										continue
																									end
																									break
																								end
																								if desired then
																									if desired == 18 then
																										desired = nil
																									end
																									break
																								end
																								break
																							end
																							if desired then
																								break
																							end
																							if loc_1 < 8 then
																								desired = 16
																								break
																							end
																							while true do
																								rt_store_i32_n8(memory_at_0, loc_3, rt_load_i32_u8(memory_at_0, loc_2))
																								rt_store_i32_n8(memory_at_0, loc_3 + 1, rt_load_i32_u8(memory_at_0, loc_2 + 1))
																								rt_store_i32_n8(memory_at_0, loc_3 + 2, rt_load_i32_u8(memory_at_0, loc_2 + 2))
																								rt_store_i32_n8(memory_at_0, loc_3 + 3, rt_load_i32_u8(memory_at_0, loc_2 + 3))
																								rt_store_i32_n8(memory_at_0, loc_3 + 4, rt_load_i32_u8(memory_at_0, loc_2 + 4))
																								rt_store_i32_n8(memory_at_0, loc_3 + 5, rt_load_i32_u8(memory_at_0, loc_2 + 5))
																								rt_store_i32_n8(memory_at_0, loc_3 + 6, rt_load_i32_u8(memory_at_0, loc_2 + 6))
																								rt_store_i32_n8(memory_at_0, loc_3 + 7, rt_load_i32_u8(memory_at_0, loc_2 + 7))
																								loc_3 = rt_add_i32(loc_3, 8)
																								loc_2 = rt_add_i32(loc_2, 8)
																								loc_5 = rt_sub_i32(loc_5, 8)
																								if loc_5 ~= 0 then
																									continue
																								end
																								break
																							end
																							if desired then
																								break
																							end
																							desired = 16
																							break
																						end
																						if desired then
																							if desired == 16 then
																								desired = nil
																							end
																							break
																						end
																					end
																					if loc_1 == 0 then
																						desired = 15
																						break
																					end
																					loc_3 = rt_add_i32(loc_1, rt_add_i32(loc_6, 40))
																					loc_4 = 0
																					loc_5 = loc_1
																					loc_7 = bit_and(loc_1, 3)
																					if loc_7 ~= 0 then
																						while true do
																							while true do
																								loc_3 = rt_sub_i32(loc_3, 1)
																								rt_store_i32_n8(memory_at_0, loc_3, rt_load_i32_u8(memory_at_0, loc_2))
																								loc_2 = rt_add_i32(loc_2, 1)
																								loc_5 = rt_sub_i32(loc_5, 1)
																								loc_4 = rt_add_i32(loc_4, 1)
																								if loc_7 ~= loc_4 then
																									continue
																								end
																								break
																							end
																							if desired then
																								break
																							end
																							break
																						end
																						if desired then
																							if desired == 16 then
																								desired = nil
																							end
																							break
																						end
																					end
																					if loc_1 < 4 then
																						break
																					end
																					while true do
																						rt_store_i32_n8(memory_at_0, rt_sub_i32(loc_3, 1), rt_load_i32_u8(memory_at_0, loc_2))
																						rt_store_i32_n8(memory_at_0, rt_sub_i32(loc_3, 2), rt_load_i32_u8(memory_at_0, loc_2 + 1))
																						rt_store_i32_n8(memory_at_0, rt_sub_i32(loc_3, 3), rt_load_i32_u8(memory_at_0, loc_2 + 2))
																						loc_3 = rt_sub_i32(loc_3, 4)
																						rt_store_i32_n8(memory_at_0, loc_3, rt_load_i32_u8(memory_at_0, loc_2 + 3))
																						loc_2 = rt_add_i32(loc_2, 4)
																						loc_5 = rt_sub_i32(loc_5, 4)
																						if loc_5 ~= 0 then
																							continue
																						end
																						break
																					end
																					if desired then
																						if desired == 16 then
																							desired = nil
																						end
																						break
																					end
																					break
																				end
																				if desired then
																					if desired == 15 then
																						desired = nil
																					end
																					break
																				end
																				if rt_sub_i32(loc_1, 4) ~= 0 then
																					break
																				end
																				FUNC_LIST[141](loc_0, no_op(rt_load_f32(memory_at_0, loc_6 + 40)))
																				desired = 5
																				break
																			end
																			if desired then
																				if desired == 14 then
																					desired = nil
																				end
																				break
																			end
																			FUNC_LIST[141](loc_0, rt_load_f64(memory_at_0, loc_6 + 40))
																			desired = 5
																			break
																		end
																		if desired then
																			if desired == 13 then
																				desired = nil
																			end
																			break
																		end
																		FUNC_LIST[145](loc_0, rt_add_i32(loc_8, loc_9), loc_1)
																		desired = 5
																		break
																	end
																	if desired then
																		if desired == 12 then
																			desired = nil
																		end
																		break
																	end
																	loc_3 = rt_add_i32(loc_8, loc_9)
																	if rt_le_i32(loc_1, 0) then
																		while true do
																			loc_4 = 0
																			desired = 8
																			break
																		end
																		if desired then
																			if desired == 12 then
																				desired = nil
																			end
																			break
																		end
																	end
																	while true do
																		loc_2 = (if rt_ge_i32(loc_1, 8) then 8 else loc_1)
																		loc_7 = rt_sub_i32(loc_2, 1)
																		loc_5 = rt_load_i32(memory_at_0, loc_6 + 104)
																		loc_4 = rt_load_i32_u8(memory_at_0, rt_add_i32((if loc_5 ~= 0 then loc_7 else rt_sub_i32(loc_1, loc_2)), loc_3))
																		reg_0 = loc_4
																		if loc_1 == 1 then
																			break
																		end
																		loc_10 = rt_sub_i32(loc_2, 2)
																		loc_4 = bit_or(rt_load_i32_u8(memory_at_0, rt_add_i32((if loc_5 ~= 0 then loc_10 else rt_sub_i32(loc_1, loc_7)), loc_3)), rt_shl_i32(loc_4, 8))
																		reg_0 = loc_4
																		if rt_lt_i32(loc_1, 3) then
																			break
																		end
																		loc_7 = rt_sub_i32(loc_2, 3)
																		loc_4 = bit_or(rt_load_i32_u8(memory_at_0, rt_add_i32((if loc_5 ~= 0 then loc_7 else rt_sub_i32(loc_1, loc_10)), loc_3)), rt_shl_i32(loc_4, 8))
																		reg_0 = loc_4
																		if loc_1 == 3 then
																			break
																		end
																		loc_10 = rt_sub_i32(loc_2, 4)
																		loc_4 = bit_or(rt_load_i32_u8(memory_at_0, rt_add_i32((if loc_5 ~= 0 then loc_10 else rt_sub_i32(loc_1, loc_7)), loc_3)), rt_shl_i32(loc_4, 8))
																		reg_0 = loc_4
																		if rt_lt_i32(loc_1, 5) then
																			break
																		end
																		loc_7 = rt_sub_i32(loc_2, 5)
																		loc_4 = bit_or(rt_load_i32_u8(memory_at_0, rt_add_i32((if loc_5 ~= 0 then loc_7 else rt_sub_i32(loc_1, loc_10)), loc_3)), rt_shl_i32(loc_4, 8))
																		reg_0 = loc_4
																		if loc_1 == 5 then
																			break
																		end
																		loc_10 = rt_sub_i32(loc_2, 6)
																		loc_4 = bit_or(rt_load_i32_u8(memory_at_0, rt_add_i32((if loc_5 ~= 0 then loc_10 else rt_sub_i32(loc_1, loc_7)), loc_3)), rt_shl_i32(loc_4, 8))
																		reg_0 = loc_4
																		if rt_lt_i32(loc_1, 7) then
																			break
																		end
																		loc_7 = rt_sub_i32(loc_2, 7)
																		loc_4 = bit_or(rt_load_i32_u8(memory_at_0, rt_add_i32((if loc_5 ~= 0 then loc_7 else rt_sub_i32(loc_1, loc_10)), loc_3)), rt_shl_i32(loc_4, 8))
																		reg_0 = loc_4
																		if loc_1 == 7 then
																			break
																		end
																		reg_0 = bit_or(rt_load_i32_u8(memory_at_0, rt_add_i32((if loc_5 ~= 0 then rt_sub_i32(loc_2, 8) else rt_sub_i32(loc_1, loc_7)), loc_3)), rt_shl_i32(loc_4, 8))
																		break
																	end
																	if desired then
																		if desired == 12 then
																			desired = nil
																		end
																		break
																	end
																	loc_4 = reg_0
																	if rt_lt_i32(loc_1, 9) then
																		desired = 9
																		break
																	end
																	while true do
																		if rt_load_i32_u8(memory_at_0, rt_add_i32((if loc_5 ~= 0 then loc_2 else rt_add_i32(bit_xor(loc_2, 4294967295), loc_1)), loc_3)) == 0 then
																			while true do
																				loc_2 = rt_add_i32(loc_2, 1)
																				if loc_2 ~= loc_1 then
																					desired = 13
																					break
																				end
																				desired = 9
																				break
																			end
																			if desired then
																				if desired == 13 then
																					desired = nil
																					continue
																				end
																				break
																			end
																		end
																		break
																	end
																	if desired then
																		if desired == 12 then
																			desired = nil
																		end
																		break
																	end
																	rt_store_i32(memory_at_0, loc_6 + 32, loc_1)
																	FUNC_LIST[203](loc_0, 2396, rt_add_i32(loc_6, 32))
																	error("out of code bounds")
																end
																if desired then
																	break
																end
																loc_2 = rt_add_i32(loc_8, loc_9)
																reg_1 = FUNC_LIST[649](loc_2)
																loc_3 = reg_1
																loc_8 = rt_add_i32(loc_8, loc_3)
																if loc_8 >= rt_load_i32(memory_at_0, loc_6 + 92) then
																	desired = 10
																	break
																end
																FUNC_LIST[145](loc_0, loc_2, loc_3)
																loc_8 = rt_add_i32(loc_8, 1)
																desired = 5
																break
															end
															if desired then
																if desired == 10 then
																	desired = nil
																end
																break
															end
														end
														FUNC_LIST[202](loc_0, 2, 1620)
														error("out of code bounds")
													end
													if desired then
														if desired == 9 then
															desired = nil
														end
														break
													end
													FUNC_LIST[202](loc_0, 2, 6113)
													error("out of code bounds")
												end
												if desired then
													if desired == 8 then
														desired = nil
													end
													break
												end
												if loc_4 <= rt_sub_i32(rt_load_i32(memory_at_0, loc_6 + 92), rt_add_i32(loc_1, loc_8)) then
													break
												end
												FUNC_LIST[202](loc_0, 2, 1620)
												error("out of code bounds")
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
											FUNC_LIST[145](loc_0, rt_add_i32(loc_1, loc_3), loc_4)
											loc_8 = rt_add_i32(loc_4, loc_8)
											desired = 5
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
										FUNC_LIST[141](loc_0, rt_convert_f64_u64(loc_12))
										desired = 5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
									FUNC_LIST[141](loc_0, rt_convert_f64_i64(loc_12))
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
								loc_5 = loc_11
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
									continue
								end
								break
							end
							loc_2 = rt_add_i32(loc_1, loc_8)
							if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_6 + 96)) ~= 0 then
								continue
							end
							break
						end
						if desired then
							break
						end
						loc_3 = rt_add_i32(loc_2, 1)
						reg_0 = rt_add_i32(loc_5, 1)
						break
					end
					if desired then
						break
					end
				else
					while true do
						reg_0 = loc_1
						break
					end
					if desired then
						break
					end
				end
				loc_1 = reg_0
				FUNC_LIST[142](loc_0, loc_3)
				GLOBAL_LIST[0].value = rt_add_i32(loc_6, 112)
				reg_0 = loc_1
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[202](loc_0, 3, 3375)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[412] = --[[ match_class(int, int) ]] function(loc_0, loc_1)
	local reg_0
	local reg_1
	local reg_2
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															reg_0 = FUNC_LIST[783](loc_1)
															if not br_map[1] then
																br_map[1] = (function()
																	return { [0] = 11, 10, 0, 1, 10, 10, 2, 10, 10, 10, 10, 3, 10, 10, 10, 4, 10, 10, 5, 10, 6, 10, 7, 8, 10, 9, }
																end)()
															end
															temp = br_map[1][rt_sub_i32(reg_0, 97)] or 10
															if temp < 6 then
																if temp < 3 then
																	if temp < 1 then
																		break
																	elseif temp > 1 then
																		desired = 11
																		break
																	else
																		desired = 12
																		break
																	end
																elseif temp > 3 then
																	if temp < 5 then
																		desired = 9
																		break
																	else
																		desired = 8
																		break
																	end
																else
																	desired = 10
																	break
																end
															elseif temp > 6 then
																if temp < 9 then
																	if temp < 8 then
																		desired = 6
																		break
																	else
																		desired = 5
																		break
																	end
																elseif temp > 9 then
																	if temp < 11 then
																		desired = 3
																		break
																	else
																		desired = 2
																		break
																	end
																else
																	desired = 4
																	break
																end
															else
																desired = 7
																break
															end
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														reg_0 = FUNC_LIST[720](loc_0)
														desired = 1
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													reg_0 = (if rt_sub_i32(loc_0, 48) < 10 then 1 else 0)
													desired = 1
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												reg_0 = FUNC_LIST[721](loc_0)
												desired = 1
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											reg_0 = FUNC_LIST[722](loc_0)
											desired = 1
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										reg_0 = FUNC_LIST[723](loc_0)
										desired = 1
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									reg_0 = FUNC_LIST[724](loc_0)
									desired = 1
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = FUNC_LIST[725](loc_0)
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[718](loc_0)
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[726](loc_0)
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = (if loc_0 == 0 then 1 else 0)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = (if loc_0 == loc_1 then 1 else 0)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[719](loc_0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_0 = reg_0
		reg_2 = FUNC_LIST[722](loc_1)
		reg_0 = (if reg_2 ~= 0 then loc_0 else (if loc_0 == 0 then 1 else 0))
		break
	end
	return reg_0
end
FUNC_LIST[413] = --[[ singlematch(MatchState*, char const*, char const*, char const*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		if loc_1 >= rt_load_i32(memory_at_0, loc_0 + 8) then
			while true do
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_0 = rt_load_i32_u8(memory_at_0, loc_1)
		loc_5 = 1
		while true do
			while true do
				while true do
					while true do
						while true do
							loc_1 = rt_load_i32_u8(memory_at_0, loc_2)
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 0, 2, 2, 2, 2, 2, 2, 2, 2, 4, }
								end)()
							end
							temp = br_map[1][rt_sub_i32(loc_1, 37)] or 1
							if temp < 2 then
								if temp < 1 then
									break
								else
									desired = 4
									break
								end
							elseif temp > 2 then
								desired = 1
								break
							else
								desired = 3
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[412](loc_0, rt_load_i32_u8(memory_at_0, loc_2 + 1))
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_1 == 91 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = (if loc_0 == loc_1 then 1 else 0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = rt_load_i32_u8(memory_at_0, loc_2 + 1)
			loc_5 = (if loc_4 == 94 then 1 else 0)
			loc_1 = (if loc_5 ~= 0 then rt_add_i32(loc_2, 1) else loc_2)
			loc_6 = rt_add_i32(loc_1, 1)
			loc_7 = rt_sub_i32(loc_3, 1)
			if loc_6 >= loc_7 then
				break
			end
			loc_4 = (if loc_4 ~= 94 then 1 else 0)
			while true do
				loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 2)
				while true do
					while true do
						loc_3 = rt_load_i32_u8(memory_at_0, loc_1 + 1)
						if loc_3 == 37 then
							while true do
								reg_0 = FUNC_LIST[412](loc_0, loc_2)
								if reg_0 == 0 then
									desired = 4
									break
								end
								reg_0 = loc_4
								desired = 0
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						while true do
							if loc_2 ~= 45 then
								break
							end
							loc_1 = rt_add_i32(loc_1, 3)
							if loc_7 <= loc_1 then
								break
							end
							if loc_0 < loc_3 then
								desired = 3
								break
							end
							if loc_0 > rt_load_i32_u8(memory_at_0, loc_1) then
								desired = 3
								break
							end
							reg_0 = loc_4
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_1 = loc_6
						if loc_0 ~= loc_3 then
							desired = 3
							break
						end
						reg_0 = loc_4
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = rt_add_i32(loc_1, 2)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_6 = rt_add_i32(loc_1, 1)
				if loc_7 > loc_6 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_5
		break
	end
	return reg_0
end
FUNC_LIST[414] = --[[ getoption(Header*, char const**, int*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_7 = rt_sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_7
		loc_3 = 1
		loc_6 = rt_load_i32(memory_at_0, loc_1)
		loc_4 = rt_add_i32(loc_6, 1)
		rt_store_i32(memory_at_0, loc_1, loc_4)
		loc_8 = rt_load_i32_u8(memory_at_0, loc_6)
		loc_6 = 0
		rt_store_i32(memory_at_0, loc_2, 0)
		loc_9 = 4
		loc_5 = 5
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		while true do
																			while true do
																				while true do
																					while true do
																						while true do
																							while true do
																								while true do
																									while true do
																										while true do
																											while true do
																												while true do
																													while true do
																														if not br_map[1] then
																															br_map[1] = (function()
																																return { [0] = 22, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 21, 21, 20, 19, 19, 19, 1, 19, 19, 19, 19, 19, 3, 13, 7, 19, 5, 19, 19, 19, 19, 19, 19, 19, 8, 19, 19, 19, 17, 19, 19, 19, 19, 19, 19, 19, 19, 19, 0, 15, 10, 19, 9, 19, 2, 12, 6, 19, 4, 19, 11, 19, 19, 19, 19, 14, 19, 19, 19, 19, 16, 19, 23, }
																															end)()
																														end
																														temp = br_map[1][rt_sub_i32(loc_8, 32)] or 19
																														if temp < 12 then
																															if temp < 6 then
																																if temp < 3 then
																																	if temp < 1 then
																																		break
																																	elseif temp > 1 then
																																		desired = 26
																																		break
																																	else
																																		desired = 27
																																		break
																																	end
																																elseif temp > 3 then
																																	if temp < 5 then
																																		desired = 24
																																		break
																																	else
																																		desired = 23
																																		break
																																	end
																																else
																																	desired = 25
																																	break
																																end
																															elseif temp > 6 then
																																if temp < 9 then
																																	if temp < 8 then
																																		desired = 21
																																		break
																																	else
																																		desired = 20
																																		break
																																	end
																																elseif temp > 9 then
																																	if temp < 11 then
																																		desired = 18
																																		break
																																	else
																																		desired = 17
																																		break
																																	end
																																else
																																	desired = 19
																																	break
																																end
																															else
																																desired = 22
																																break
																															end
																														elseif temp > 12 then
																															if temp < 18 then
																																if temp < 15 then
																																	if temp < 14 then
																																		desired = 15
																																		break
																																	else
																																		desired = 14
																																		break
																																	end
																																elseif temp > 15 then
																																	if temp < 17 then
																																		desired = 12
																																		break
																																	else
																																		desired = 11
																																		break
																																	end
																																else
																																	desired = 13
																																	break
																																end
																															elseif temp > 18 then
																																if temp < 21 then
																																	if temp < 20 then
																																		desired = 9
																																		break
																																	else
																																		desired = 8
																																		break
																																	end
																																elseif temp > 21 then
																																	if temp < 23 then
																																		desired = 6
																																		break
																																	else
																																		desired = 5
																																		break
																																	end
																																else
																																	desired = 7
																																	break
																																end
																															else
																																desired = 10
																																break
																															end
																														else
																															desired = 16
																															break
																														end
																													end
																													if desired then
																														if desired == 27 then
																															desired = nil
																														end
																														break
																													end
																													rt_store_i32(memory_at_0, loc_2, 1)
																													loc_5 = 0
																													desired = 5
																													break
																												end
																												if desired then
																													if desired == 26 then
																														desired = nil
																													end
																													break
																												end
																												loc_5 = 1
																												rt_store_i32(memory_at_0, loc_2, 1)
																												desired = 5
																												break
																											end
																											if desired then
																												if desired == 25 then
																													desired = nil
																												end
																												break
																											end
																											rt_store_i32(memory_at_0, loc_2, 2)
																											loc_5 = 0
																											desired = 5
																											break
																										end
																										if desired then
																											if desired == 24 then
																												desired = nil
																											end
																											break
																										end
																										rt_store_i32(memory_at_0, loc_2, 2)
																										loc_5 = 1
																										desired = 5
																										break
																									end
																									if desired then
																										if desired == 23 then
																											desired = nil
																										end
																										break
																									end
																									rt_store_i32(memory_at_0, loc_2, 8)
																									loc_5 = 0
																									desired = 5
																									break
																								end
																								if desired then
																									if desired == 22 then
																										desired = nil
																									end
																									break
																								end
																								rt_store_i32(memory_at_0, loc_2, 8)
																								loc_5 = 1
																								desired = 5
																								break
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							rt_store_i32(memory_at_0, loc_2, 4)
																							loc_5 = 0
																							desired = 5
																							break
																						end
																						if desired then
																							if desired == 20 then
																								desired = nil
																							end
																							break
																						end
																						rt_store_i32(memory_at_0, loc_2, 4)
																						loc_5 = 1
																						desired = 5
																						break
																					end
																					if desired then
																						if desired == 19 then
																							desired = nil
																						end
																						break
																					end
																					rt_store_i32(memory_at_0, loc_2, 4)
																					loc_5 = 1
																					desired = 5
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				rt_store_i32(memory_at_0, loc_2, 4)
																				loc_5 = 2
																				desired = 5
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			rt_store_i32(memory_at_0, loc_2, 8)
																			loc_5 = 2
																			desired = 5
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		rt_store_i32(memory_at_0, loc_2, 8)
																		loc_5 = 2
																		desired = 5
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	loc_3 = 4
																	if rt_sub_i32(rt_load_i32_i8(memory_at_0, loc_4), 58) >= 4294967286 then
																		while true do
																			loc_3 = 0
																			while true do
																				while true do
																					loc_6 = rt_add_i32(loc_4, 1)
																					rt_store_i32(memory_at_0, loc_1, loc_6)
																					loc_3 = rt_sub_i32(rt_add_i32(rt_load_i32_i8(memory_at_0, loc_4), rt_mul_i32(loc_3, 10)), 48)
																					loc_5 = rt_sub_i32(rt_load_i32_i8(memory_at_0, loc_4 + 1), 48)
																					if loc_5 > 9 then
																						break
																					end
																					loc_4 = loc_6
																					if rt_lt_i32(loc_3, 214748364) then
																						desired = 17
																						break
																					end
																					break
																				end
																				if desired then
																					if desired == 17 then
																						desired = nil
																						continue
																					end
																					break
																				end
																				break
																			end
																			if desired then
																				break
																			end
																			if rt_gt_i32(loc_3, 1073741824) then
																				desired = 1
																				break
																			end
																			if loc_5 <= 9 then
																				desired = 1
																				break
																			end
																			if rt_sub_i32(loc_3, 17) <= 4294967279 then
																				desired = 4
																				break
																			end
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																	end
																	rt_store_i32(memory_at_0, loc_2, loc_3)
																	loc_5 = 0
																	desired = 5
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																loc_3 = 4
																if rt_sub_i32(rt_load_i32_i8(memory_at_0, loc_4), 58) >= 4294967286 then
																	while true do
																		loc_3 = 0
																		while true do
																			while true do
																				loc_6 = rt_add_i32(loc_4, 1)
																				rt_store_i32(memory_at_0, loc_1, loc_6)
																				loc_3 = rt_sub_i32(rt_add_i32(rt_load_i32_i8(memory_at_0, loc_4), rt_mul_i32(loc_3, 10)), 48)
																				loc_5 = rt_sub_i32(rt_load_i32_i8(memory_at_0, loc_4 + 1), 48)
																				if loc_5 > 9 then
																					break
																				end
																				loc_4 = loc_6
																				if rt_lt_i32(loc_3, 214748364) then
																					desired = 16
																					break
																				end
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																					continue
																				end
																				break
																			end
																			break
																		end
																		if desired then
																			break
																		end
																		if rt_gt_i32(loc_3, 1073741824) then
																			desired = 1
																			break
																		end
																		if loc_5 <= 9 then
																			desired = 1
																			break
																		end
																		if rt_sub_i32(loc_3, 17) <= 4294967279 then
																			desired = 3
																			break
																		end
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																		end
																		break
																	end
																end
																rt_store_i32(memory_at_0, loc_2, loc_3)
																loc_5 = 1
																desired = 5
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															loc_5 = 4
															loc_3 = 4
															reg_0 = loc_2
															if rt_sub_i32(rt_load_i32_i8(memory_at_0, loc_4), 58) >= 4294967286 then
																while true do
																	while true do
																		while true do
																			loc_3 = rt_add_i32(loc_4, 1)
																			rt_store_i32(memory_at_0, loc_1, loc_3)
																			loc_6 = rt_sub_i32(rt_add_i32(rt_load_i32_i8(memory_at_0, loc_4), rt_mul_i32(loc_6, 10)), 48)
																			loc_8 = rt_sub_i32(rt_load_i32_i8(memory_at_0, loc_4 + 1), 48)
																			if loc_8 > 9 then
																				break
																			end
																			loc_4 = loc_3
																			if rt_lt_i32(loc_6, 214748364) then
																				desired = 15
																				break
																			end
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																				continue
																			end
																			break
																		end
																		break
																	end
																	if desired then
																		break
																	end
																	if rt_gt_i32(loc_6, 1073741824) then
																		desired = 1
																		break
																	end
																	if loc_8 <= 9 then
																		desired = 1
																		break
																	end
																	if rt_sub_i32(loc_6, 17) <= 4294967279 then
																		desired = 2
																		break
																	end
																	reg_1 = loc_6
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
															else
																while true do
																	reg_1 = loc_3
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
															end
															loc_3 = reg_1
															rt_store_i32(memory_at_0, reg_0, loc_3)
															desired = 5
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														while true do
															if rt_sub_i32(rt_load_i32_i8(memory_at_0, loc_4), 58) > 4294967285 then
																while true do
																	loc_3 = 0
																	while true do
																		while true do
																			loc_6 = rt_add_i32(loc_4, 1)
																			rt_store_i32(memory_at_0, loc_1, loc_6)
																			loc_3 = rt_sub_i32(rt_add_i32(rt_load_i32_i8(memory_at_0, loc_4), rt_mul_i32(loc_3, 10)), 48)
																			loc_5 = rt_sub_i32(rt_load_i32_i8(memory_at_0, loc_4 + 1), 48)
																			if loc_5 > 9 then
																				break
																			end
																			loc_4 = loc_6
																			if rt_lt_i32(loc_3, 214748364) then
																				desired = 15
																				break
																			end
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																				continue
																			end
																			break
																		end
																		break
																	end
																	if desired then
																		break
																	end
																	if rt_gt_i32(loc_3, 1073741824) then
																		desired = 1
																		break
																	end
																	if loc_5 <= 9 then
																		desired = 1
																		break
																	end
																	rt_store_i32(memory_at_0, loc_2, loc_3)
																	if loc_3 == 4294967295 then
																		desired = 13
																		break
																	end
																	loc_5 = 3
																	desired = 5
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
															end
															rt_store_i32(memory_at_0, loc_2, 4294967295)
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														FUNC_LIST[203](rt_load_i32(memory_at_0, loc_0), 6407, 0)
														error("out of code bounds")
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													rt_store_i32(memory_at_0, loc_2, 1)
													loc_5 = 6
													desired = 5
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_5 = 7
												desired = 5
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_9 = 8
											if rt_sub_i32(rt_load_i32_i8(memory_at_0, loc_4), 58) < 4294967286 then
												while true do
													loc_3 = 8
													desired = 7
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											loc_3 = 0
											while true do
												while true do
													loc_6 = rt_add_i32(loc_4, 1)
													rt_store_i32(memory_at_0, loc_1, loc_6)
													loc_3 = rt_sub_i32(rt_add_i32(rt_load_i32_i8(memory_at_0, loc_4), rt_mul_i32(loc_3, 10)), 48)
													loc_5 = rt_sub_i32(rt_load_i32_i8(memory_at_0, loc_4 + 1), 48)
													if loc_5 > 9 then
														break
													end
													loc_4 = loc_6
													if rt_lt_i32(loc_3, 214748364) then
														desired = 10
														break
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
														continue
													end
													break
												end
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											if rt_gt_i32(loc_3, 1073741824) then
												desired = 1
												break
											end
											if loc_5 <= 9 then
												desired = 1
												break
											end
											if rt_sub_i32(loc_3, 17) > 4294967279 then
												desired = 7
												break
											end
											loc_4 = rt_load_i32(memory_at_0, loc_0)
											rt_store_i32(memory_at_0, loc_7 + 68, 16)
											rt_store_i32(memory_at_0, loc_7 + 64, loc_3)
											FUNC_LIST[203](loc_4, 5065, rt_sub_i32(loc_7, 4294967232))
											error("out of code bounds")
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_4 = rt_load_i32(memory_at_0, loc_0)
										rt_store_i32(memory_at_0, loc_7, rt_extend_i32_n8(loc_8))
										FUNC_LIST[203](loc_4, 6442, loc_7)
										error("out of code bounds")
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_3 = 0
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								rt_store_i32(memory_at_0, rt_add_i32(loc_0, loc_9), loc_3)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_5 = 8
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						GLOBAL_LIST[0].value = rt_add_i32(loc_7, 80)
						reg_0 = loc_5
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = rt_load_i32(memory_at_0, loc_0)
					rt_store_i32(memory_at_0, loc_7 + 20, 16)
					rt_store_i32(memory_at_0, loc_7 + 16, loc_3)
					FUNC_LIST[203](loc_4, 5065, rt_add_i32(loc_7, 16))
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_4 = rt_load_i32(memory_at_0, loc_0)
				rt_store_i32(memory_at_0, loc_7 + 36, 16)
				rt_store_i32(memory_at_0, loc_7 + 32, loc_3)
				FUNC_LIST[203](loc_4, 5065, rt_add_i32(loc_7, 32))
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = rt_load_i32(memory_at_0, loc_0)
			rt_store_i32(memory_at_0, loc_7 + 52, 16)
			rt_store_i32(memory_at_0, loc_7 + 48, loc_6)
			FUNC_LIST[203](loc_4, 5065, rt_add_i32(loc_7, 48))
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[203](rt_load_i32(memory_at_0, loc_0), 4517, 0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[415] = --[[ luaH_next(lua_State*, Table*, lua_TValue*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0.0
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 2, 1, 1, 0, }
								end)()
							end
							temp = br_map[1][rt_load_i32(memory_at_0, loc_2 + 12)] or 1
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 3
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							loc_6 = rt_load_f64(memory_at_0, loc_2)
							if math_abs(loc_6) < 2.147483648e9 then
								while true do
									reg_0 = rt_truncate_f64(loc_6)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							reg_0 = 2147483648
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_3 = reg_0
						if rt_le_i32(loc_3, 0) then
							break
						end
						if rt_convert_f64_i32(loc_3) ~= loc_6 then
							break
						end
						loc_4 = rt_load_i32(memory_at_0, loc_1 + 8)
						if rt_gt_i32(loc_3, loc_4) then
							break
						end
						reg_0 = rt_sub_i32(loc_3, 1)
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[416](loc_1, loc_2)
					loc_3 = reg_0
					loc_5 = rt_add_i32(loc_3, 16)
					reg_0 = FUNC_LIST[364](loc_5, loc_2)
					if reg_0 ~= 0 then
						desired = 2
						break
					end
					while true do
						while true do
							loc_4 = rt_load_i32(memory_at_0, loc_3 + 28)
							if bit_and(loc_4, 15) ~= 13 then
								break
							end
							if rt_lt_i32(rt_load_i32(memory_at_0, loc_2 + 12), 5) then
								break
							end
							if rt_load_i32(memory_at_0, loc_5) == rt_load_i32(memory_at_0, loc_2) then
								desired = 2
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						if loc_4 >= 16 then
							while true do
								loc_3 = rt_add_i32(bit_and(rt_shl_i32(loc_4, 1), 4294967264), loc_3)
								loc_5 = rt_add_i32(loc_3, 16)
								reg_0 = FUNC_LIST[364](loc_5, loc_2)
								if reg_0 == 0 then
									desired = 4
									break
								end
								desired = 2
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[60](loc_0, 6146, 0)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_4 = rt_load_i32(memory_at_0, loc_1 + 8)
				reg_0 = 4294967295
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = rt_load_i32(memory_at_0, loc_1 + 8)
			reg_0 = rt_add_i32(loc_4, rt_shr_i32(rt_sub_i32(loc_3, rt_load_i32(memory_at_0, loc_1 + 24)), 5))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_3 = reg_0
		loc_5 = rt_add_i32(loc_3, 1)
		loc_0 = (if rt_gt_i32(loc_4, loc_5) then loc_4 else loc_5)
		while true do
			while true do
				while true do
					loc_5 = loc_3
					loc_3 = rt_add_i32(loc_5, 1)
					if rt_le_i32(loc_4, loc_3) then
						desired = 2
						break
					end
					if rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 20), rt_shl_i32(loc_3, 4)) + 12) == 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_2 + 12, 3)
				rt_store_f64(memory_at_0, loc_2, rt_convert_f64_i32(rt_add_i32(loc_5, 2)))
				loc_3 = rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 20), rt_shl_i32(loc_3, 4))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = rt_sub_i32(loc_0, loc_4)
			loc_5 = rt_shl_i32(1, rt_load_i32_u8(memory_at_0, loc_1 + 6))
			if rt_lt_i32(loc_3, loc_5) then
				while true do
					loc_0 = rt_load_i32(memory_at_0, loc_1 + 24)
					while true do
						loc_4 = rt_add_i32(rt_shl_i32(loc_3, 5), loc_0)
						if rt_load_i32(memory_at_0, loc_4 + 12) ~= 0 then
							while true do
								rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_4 + 16))
								rt_store_i32(memory_at_0, loc_2 + 8, rt_load_i32(memory_at_0, loc_4 + 24))
								rt_store_i32(memory_at_0, loc_2 + 12, bit_and(rt_load_i32(memory_at_0, loc_4 + 28), 15))
								loc_3 = rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 24), rt_shl_i32(loc_3, 5))
								desired = 1
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
									continue
								end
								break
							end
						end
						loc_3 = rt_add_i32(loc_3, 1)
						if loc_5 ~= loc_3 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = 0
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i64(memory_at_0, loc_2 + 16, rt_load_i64(memory_at_0, loc_3))
		rt_store_i64(memory_at_0, loc_2 + 24, rt_load_i64(memory_at_0, loc_3 + 8))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[416] = --[[ mainposition(Table const*, lua_TValue const*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		reg_0 = rt_load_i32(memory_at_0, loc_0 + 24)
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									if not br_map[1] then
										br_map[1] = (function()
											return { [0] = 3, 4, 0, 1, 2, }
										end)()
									end
									temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 12), 1)] or 5
									if temp < 3 then
										if temp < 1 then
											break
										elseif temp > 1 then
											desired = 5
											break
										else
											desired = 6
											break
										end
									elseif temp > 3 then
										if temp < 5 then
											desired = 3
											break
										else
											desired = 2
											break
										end
									else
										desired = 4
										break
									end
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_3 = rt_load_i64(memory_at_0, loc_1)
								loc_1 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_3, rt_i64_from_u32(32, 0))), 2147483647)
								loc_2 = rt_mul_i32(bit_xor(rt_shr_u32(loc_1, 18), rt_wrap_i32_i64(loc_3)), 1540483477)
								loc_1 = rt_mul_i32(bit_xor(rt_shr_u32(loc_2, 22), loc_1), 1540483477)
								reg_1 = rt_mul_i32(bit_xor(rt_shr_u32(rt_mul_i32(bit_xor(rt_shr_u32(loc_1, 17), loc_2), 1540483477), 19), loc_1), 1540483477)
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
							loc_2 = (if loc_2 ~= 2147483648 then loc_2 else 0)
							reg_1 = rt_mul_i32(bit_xor(rt_shr_u32(loc_2, 17), loc_2), 19349663)
							loc_2 = rt_load_i32(memory_at_0, loc_1)
							loc_2 = (if loc_2 ~= 2147483648 then loc_2 else 0)
							loc_1 = rt_load_i32(memory_at_0, loc_1 + 8)
							loc_1 = (if loc_1 ~= 2147483648 then loc_1 else 0)
							reg_1 = bit_xor(bit_xor(reg_1, rt_mul_i32(bit_xor(rt_shr_u32(loc_2, 17), loc_2), 73856093)), rt_mul_i32(bit_xor(rt_shr_u32(loc_1, 17), loc_1), 83492791))
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_1 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 12)
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_1 = rt_load_i32(memory_at_0, loc_1)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_1 = rt_load_i32(memory_at_0, loc_1)
				loc_1 = rt_mul_i32(bit_xor(rt_shr_u32(loc_1, 16), loc_1), 2246822507)
				loc_1 = rt_mul_i32(bit_xor(rt_shr_u32(loc_1, 13), loc_1), 3266489909)
				reg_1 = bit_xor(rt_shr_u32(loc_1, 16), loc_1)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = rt_load_i32(memory_at_0, loc_1)
			loc_1 = rt_mul_i32(bit_xor(rt_shr_u32(loc_1, 16), loc_1), 2246822507)
			loc_1 = rt_mul_i32(bit_xor(rt_shr_u32(loc_1, 13), loc_1), 3266489909)
			reg_1 = bit_xor(rt_shr_u32(loc_1, 16), loc_1)
			break
		end
		loc_1 = reg_1
		reg_0 = rt_add_i32(reg_0, rt_shl_i32(bit_and(loc_1, bit_xor(rt_shl_i32(4294967295, rt_load_i32_u8(memory_at_0, loc_0 + 6)), 4294967295)), 5))
		break
	end
	return reg_0
end
FUNC_LIST[417] = --[[ luaH_resizearray(lua_State*, Table*, int) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0.0
	local loc_12 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		while true do
			loc_7 = rt_load_i32(memory_at_0, loc_1 + 24)
			if loc_7 ~= 9808 then
				while true do
					loc_8 = rt_shl_i32(1, rt_load_i32_u8(memory_at_0, loc_1 + 6))
					reg_0 = 1
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = (if rt_gt_i32(rt_load_i32(memory_at_0, loc_1 + 8), loc_2) then 1 else 0)
			break
		end
		loc_9 = reg_0
		loc_10 = (if loc_7 == 9808 then 1 else 0)
		while true do
			loc_5 = loc_2
			loc_2 = rt_add_i32(loc_5, 1)
			if loc_2 == 4294967295 then
				continue
			end
			if loc_9 ~= 0 then
				while true do
					while true do
						if loc_5 < rt_load_i32(memory_at_0, loc_1 + 8) then
							while true do
								loc_6 = rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 20), rt_shl_i32(loc_5, 4))
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_6 = 9344
						if loc_10 ~= 0 then
							break
						end
						loc_11 = rt_convert_f64_i32(loc_2)
						loc_12 = rt_reinterpret_i64_f64(loc_11)
						loc_3 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_12, rt_i64_from_u32(32, 0))), 2147483647)
						loc_4 = rt_mul_i32(bit_xor(rt_shr_u32(loc_3, 18), rt_wrap_i32_i64(loc_12)), 1540483477)
						loc_3 = rt_mul_i32(bit_xor(rt_shr_u32(loc_4, 22), loc_3), 1540483477)
						loc_3 = rt_add_i32(rt_shl_i32(bit_and(rt_mul_i32(bit_xor(rt_shr_u32(rt_mul_i32(bit_xor(rt_shr_u32(loc_3, 17), loc_4), 1540483477), 19), loc_3), 1540483477), bit_xor(rt_shl_i32(4294967295, rt_load_i32_u8(memory_at_0, loc_1 + 6)), 4294967295)), 5), loc_7)
						while true do
							while true do
								loc_4 = rt_load_i32(memory_at_0, loc_3 + 28)
								if bit_and(loc_4, 15) ~= 3 then
									break
								end
								if loc_11 ~= rt_load_f64(memory_at_0, loc_3 + 16) then
									break
								end
								loc_6 = loc_3
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							if loc_4 < 16 then
								desired = 3
								break
							end
							loc_3 = rt_add_i32(bit_and(rt_shl_i32(loc_4, 1), 4294967264), loc_3)
							continue
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						error("out of code bounds")
					end
					if desired then
						break
					end
					if rt_load_i32(memory_at_0, loc_6 + 12) ~= 0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			end
			break
		end
		FUNC_LIST[418](loc_0, loc_1, loc_5, loc_8)
		break
	end
end
FUNC_LIST[418] = --[[ resize(lua_State*, Table*, int, int) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0.0
	local loc_14 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_7 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_7
		while true do
			while true do
				if rt_gt_i32(loc_2, 67108864) then
					break
				end
				if rt_ge_i32(loc_3, 67108865) then
					break
				end
				loc_9 = rt_load_i32(memory_at_0, loc_1 + 24)
				loc_10 = rt_load_i32_u8(memory_at_0, loc_1 + 6)
				loc_8 = rt_load_i32(memory_at_0, loc_1 + 8)
				if rt_gt_i32(loc_2, loc_8) then
					while true do
						if loc_2 > 268435455 then
							desired = 1
							break
						end
						reg_1 = FUNC_LIST[357](loc_0, rt_load_i32(memory_at_0, loc_1 + 20), rt_shl_i32(loc_8, 4), rt_shl_i32(loc_2, 4), rt_load_i32_u8(memory_at_0, loc_1 + 2))
						loc_6 = reg_1
						rt_store_i32(memory_at_0, loc_1 + 20, loc_6)
						while true do
							loc_11 = rt_load_i32(memory_at_0, loc_1 + 8)
							if rt_le_i32(loc_2, loc_11) then
								break
							end
							loc_5 = loc_11
							loc_12 = bit_and(rt_sub_i32(loc_2, loc_5), 7)
							if loc_12 ~= 0 then
								while true do
									while true do
										rt_store_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_5, 4), loc_6) + 12, 0)
										loc_5 = rt_add_i32(loc_5, 1)
										loc_4 = rt_add_i32(loc_4, 1)
										if loc_12 ~= loc_4 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							if rt_sub_i32(loc_11, loc_2) > 4294967288 then
								break
							end
							while true do
								loc_4 = rt_add_i32(rt_shl_i32(loc_5, 4), loc_6)
								rt_store_i32(memory_at_0, loc_4 + 12, 0)
								rt_store_i32(memory_at_0, loc_4 + 28, 0)
								rt_store_i32(memory_at_0, loc_4 + 44, 0)
								rt_store_i32(memory_at_0, loc_4 + 60, 0)
								rt_store_i32(memory_at_0, loc_4 + 76, 0)
								rt_store_i32(memory_at_0, loc_4 + 92, 0)
								rt_store_i32(memory_at_0, loc_4 + 108, 0)
								rt_store_i32(memory_at_0, loc_4 + 124, 0)
								loc_5 = rt_add_i32(loc_5, 8)
								if loc_2 ~= loc_5 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							break
						end
						rt_store_i32(memory_at_0, loc_1 + 8, loc_2)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[420](loc_0, loc_1, loc_3)
				if rt_lt_i32(loc_2, loc_8) then
					while true do
						rt_store_i32(memory_at_0, loc_1 + 8, loc_2)
						loc_4 = loc_2
						while true do
							while true do
								loc_5 = rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 20), rt_shl_i32(loc_4, 4))
								if rt_load_i32(memory_at_0, loc_5 + 12) == 0 then
									while true do
										loc_4 = rt_add_i32(loc_4, 1)
										desired = 5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								rt_store_i32(memory_at_0, loc_7 + 12, 3)
								loc_4 = rt_add_i32(loc_4, 1)
								rt_store_f64(memory_at_0, loc_7, rt_convert_f64_i32(loc_4))
								reg_0 = FUNC_LIST[421](loc_0, loc_1, loc_7)
								loc_6 = reg_0
								rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
								rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_5))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							if loc_4 ~= loc_8 then
								continue
							end
							break
						end
						if desired then
							break
						end
						if loc_2 >= 268435456 then
							desired = 1
							break
						end
						reg_1 = FUNC_LIST[357](loc_0, rt_load_i32(memory_at_0, loc_1 + 20), rt_shl_i32(loc_8, 4), rt_shl_i32(loc_2, 4), rt_load_i32_u8(memory_at_0, loc_1 + 2))
						rt_store_i32(memory_at_0, loc_1 + 20, reg_1)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_10 ~= 31 then
					while true do
						loc_5 = bit_xor(rt_shl_i32(4294967295, loc_10), 4294967295)
						while true do
							loc_4 = rt_add_i32(rt_shl_i32(loc_5, 5), loc_9)
							if rt_load_i32(memory_at_0, loc_4 + 12) ~= 0 then
								while true do
									loc_14 = rt_load_i64(memory_at_0, loc_4 + 16)
									rt_store_i64(memory_at_0, loc_7, loc_14)
									rt_store_i32(memory_at_0, loc_7 + 8, rt_load_i32(memory_at_0, loc_4 + 24))
									loc_6 = bit_and(rt_load_i32(memory_at_0, loc_4 + 28), 15)
									rt_store_i32(memory_at_0, loc_7 + 12, loc_6)
									while true do
										while true do
											if loc_6 ~= 3 then
												break
											end
											while true do
												loc_13 = rt_reinterpret_f64_i64(loc_14)
												if math_abs(loc_13) < 2.147483648e9 then
													while true do
														reg_0 = rt_truncate_f64(loc_13)
														desired = 8
														break
													end
													if desired then
														if desired == 8 then
															desired = nil
														end
														break
													end
												end
												reg_0 = 2147483648
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
											loc_6 = reg_0
											if rt_convert_f64_i32(loc_6) ~= loc_13 then
												break
											end
											loc_6 = rt_sub_i32(loc_6, 1)
											if loc_6 >= rt_load_i32(memory_at_0, loc_1 + 8) then
												break
											end
											reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 20), rt_shl_i32(loc_6, 4))
											desired = 6
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
										reg_0 = FUNC_LIST[421](loc_0, loc_1, loc_7)
										break
									end
									if desired then
										break
									end
									loc_6 = reg_0
									rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_4))
									rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							end
							loc_4 = (if rt_gt_i32(loc_5, 0) then 1 else 0)
							loc_5 = rt_sub_i32(loc_5, 1)
							if loc_4 ~= 0 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_9 ~= 9808 then
					while true do
						FUNC_LIST[355](loc_0, loc_9, rt_shl_i32(32, loc_10), rt_load_i32_u8(memory_at_0, loc_1 + 2))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				GLOBAL_LIST[0].value = rt_add_i32(loc_7, 16)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[60](loc_0, 1526, 0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[351](loc_0)
		error("out of code bounds")
	end
end
FUNC_LIST[419] = --[[ adjustasize(Table*, int, lua_TValue const*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0.0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_5 = 1
		loc_9 = rt_load_i32(memory_at_0, loc_0 + 24)
		if loc_9 == 9808 then
			while true do
				reg_0 = (if rt_gt_i32(rt_load_i32(memory_at_0, loc_0 + 8), loc_1) then 1 else 0)
				break
			end
		else
			while true do
				reg_0 = loc_5
				break
			end
		end
		loc_5 = reg_0
		while true do
			loc_6 = 4294967295
			reg_0 = loc_6
			if loc_2 == 0 then
				break
			end
			reg_0 = 4294967295
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			reg_0 = 4294967295
			while true do
				loc_3 = rt_load_f64(memory_at_0, loc_2)
				if math_abs(loc_3) < 2.147483648e9 then
					while true do
						reg_1 = rt_truncate_f64(loc_3)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = reg_1
			reg_0 = (if rt_convert_f64_i32(loc_2) ~= loc_3 then reg_0 else loc_2)
			break
		end
		loc_6 = reg_0
		loc_10 = (if loc_9 == 9808 then 1 else 0)
		while true do
			loc_7 = loc_1
			loc_1 = rt_add_i32(loc_7, 1)
			if loc_6 == loc_1 then
				continue
			end
			if loc_5 ~= 0 then
				while true do
					while true do
						if loc_7 < rt_load_i32(memory_at_0, loc_0 + 8) then
							while true do
								loc_8 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 20), rt_shl_i32(loc_7, 4))
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_8 = 9344
						if loc_10 ~= 0 then
							break
						end
						loc_3 = rt_convert_f64_i32(loc_1)
						loc_11 = rt_reinterpret_i64_f64(loc_3)
						loc_2 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_11, rt_i64_from_u32(32, 0))), 2147483647)
						loc_4 = rt_mul_i32(bit_xor(rt_shr_u32(loc_2, 18), rt_wrap_i32_i64(loc_11)), 1540483477)
						loc_2 = rt_mul_i32(bit_xor(rt_shr_u32(loc_4, 22), loc_2), 1540483477)
						loc_2 = rt_add_i32(rt_shl_i32(bit_and(rt_mul_i32(bit_xor(rt_shr_u32(rt_mul_i32(bit_xor(rt_shr_u32(loc_2, 17), loc_4), 1540483477), 19), loc_2), 1540483477), bit_xor(rt_shl_i32(4294967295, rt_load_i32_u8(memory_at_0, loc_0 + 6)), 4294967295)), 5), loc_9)
						while true do
							while true do
								loc_4 = rt_load_i32(memory_at_0, loc_2 + 28)
								if bit_and(loc_4, 15) ~= 3 then
									break
								end
								if loc_3 ~= rt_load_f64(memory_at_0, loc_2 + 16) then
									break
								end
								loc_8 = loc_2
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							if loc_4 < 16 then
								desired = 3
								break
							end
							loc_2 = rt_add_i32(bit_and(rt_shl_i32(loc_4, 1), 4294967264), loc_2)
							continue
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						error("out of code bounds")
					end
					if desired then
						break
					end
					if rt_load_i32(memory_at_0, loc_8 + 12) ~= 0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			end
			break
		end
		reg_0 = loc_7
		break
	end
	return reg_0
end
FUNC_LIST[420] = --[[ setnodevector(lua_State*, Table*, int) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			while true do
				while true do
					if loc_2 == 0 then
						while true do
							rt_store_i32(memory_at_0, loc_1 + 24, 9808)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[362](rt_sub_i32(loc_2, 1))
					loc_2 = reg_0
					if rt_ge_i32(loc_2, 26) then
						desired = 2
						break
					end
					loc_3 = rt_add_i32(loc_2, 1)
					if loc_3 > 26 then
						desired = 1
						break
					end
					loc_5 = rt_shl_i32(1, loc_3)
					reg_1 = FUNC_LIST[352](loc_0, rt_shl_i32(32, loc_3), rt_load_i32_u8(memory_at_0, loc_1 + 2))
					rt_store_i32(memory_at_0, loc_1 + 24, reg_1)
					loc_2 = 0
					if loc_3 >= 2 then
						while true do
							loc_8 = bit_and(loc_5, 2147483644)
							while true do
								loc_0 = rt_shl_i32(loc_2, 5)
								loc_4 = rt_add_i32(loc_0, rt_load_i32(memory_at_0, loc_1 + 24))
								rt_store_i32(memory_at_0, loc_4 + 12, 0)
								rt_store_i32(memory_at_0, loc_4 + 28, 0)
								loc_4 = rt_add_i32(loc_0, rt_load_i32(memory_at_0, loc_1 + 24))
								rt_store_i32(memory_at_0, loc_4 + 44, 0)
								rt_store_i32(memory_at_0, loc_4 + 60, 0)
								loc_4 = rt_add_i32(loc_0, rt_load_i32(memory_at_0, loc_1 + 24))
								rt_store_i32(memory_at_0, loc_4 + 76, 0)
								rt_store_i32(memory_at_0, loc_4 + 92, 0)
								loc_0 = rt_add_i32(loc_0, rt_load_i32(memory_at_0, loc_1 + 24))
								rt_store_i32(memory_at_0, loc_0 + 108, 0)
								rt_store_i32(memory_at_0, loc_0 + 124, 0)
								loc_2 = rt_add_i32(loc_2, 4)
								loc_6 = rt_add_i32(loc_6, 4)
								if loc_8 ~= loc_6 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_3 > 1 then
						break
					end
					loc_6 = bit_and(loc_5, 3)
					while true do
						loc_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 24), rt_shl_i32(loc_2, 5))
						rt_store_i32(memory_at_0, loc_0 + 12, 0)
						rt_store_i32(memory_at_0, loc_0 + 28, 0)
						loc_2 = rt_add_i32(loc_2, 1)
						loc_7 = rt_add_i32(loc_7, 1)
						if loc_6 ~= loc_7 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_1 + 12, loc_5)
				rt_store_i32_n8(memory_at_0, loc_1 + 6, loc_3)
				rt_store_i32_n8(memory_at_0, loc_1 + 7, bit_xor(rt_shl_i32(4294967295, loc_3), 4294967295))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[60](loc_0, 1526, 0)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[351](loc_0)
		error("out of code bounds")
	end
end
FUNC_LIST[421] = --[[ newkey(lua_State*, Table*, lua_TValue const*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0.0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_7 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_7
		loc_4 = (if rt_load_i32(memory_at_0, loc_2 + 12) == 3 then 1 else 0)
		while true do
			while true do
				while true do
					while true do
						while true do
							if bit_and(loc_4, 1) == 0 then
								break
							end
							if rt_load_f64(memory_at_0, loc_2) ~= rt_convert_f64_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 8), 1)) then
								break
							end
							FUNC_LIST[430](loc_0, loc_1, loc_2)
							loc_4 = 0
							if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
								desired = 4
								break
							end
							loc_4 = 1
							while true do
								loc_9 = rt_load_f64(memory_at_0, loc_2)
								if math_abs(loc_9) < 2.147483648e9 then
									while true do
										reg_0 = rt_truncate_f64(loc_9)
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								reg_0 = 2147483648
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_6 = reg_0
							if rt_convert_f64_i32(loc_6) ~= loc_9 then
								desired = 4
								break
							end
							loc_6 = rt_sub_i32(loc_6, 1)
							if loc_6 >= rt_load_i32(memory_at_0, loc_1 + 8) then
								desired = 4
								break
							end
							loc_3 = rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 20), rt_shl_i32(loc_6, 4))
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						reg_0 = FUNC_LIST[416](loc_1, loc_2)
						loc_3 = reg_0
						if loc_3 ~= 9808 then
							while true do
								if rt_load_i32(memory_at_0, loc_3 + 12) == 0 then
									desired = 2
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						loc_4 = rt_load_i32(memory_at_0, loc_1 + 12)
						while true do
							while true do
								if rt_le_i32(loc_4, 0) then
									desired = 5
									break
								end
								loc_4 = rt_sub_i32(loc_4, 1)
								rt_store_i32(memory_at_0, loc_1 + 12, loc_4)
								loc_5 = rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 24), rt_shl_i32(loc_4, 5))
								if bit_and(rt_load_i32_u8(memory_at_0, loc_5 + 28), 15) ~= 0 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_3 + 16))
							rt_store_i32(memory_at_0, loc_7 + 8, rt_load_i32(memory_at_0, loc_3 + 24))
							loc_4 = rt_load_i32(memory_at_0, loc_3 + 28)
							loc_8 = bit_and(loc_4, 15)
							rt_store_i32(memory_at_0, loc_7 + 12, loc_8)
							reg_1 = FUNC_LIST[416](loc_1, loc_7)
							loc_6 = reg_1
							if loc_3 == loc_6 then
								desired = 3
								break
							end
							while true do
								loc_4 = loc_6
								loc_8 = rt_load_i32(memory_at_0, loc_4 + 28)
								loc_6 = rt_add_i32(loc_4, bit_and(rt_shl_i32(loc_8, 1), 4294967264))
								if loc_3 ~= loc_6 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							rt_store_i32(memory_at_0, loc_4 + 28, bit_or(bit_and(rt_shr_i32(rt_sub_i32(loc_5, loc_4), 1), 4294967280), bit_and(loc_8, 15)))
							rt_store_i64(memory_at_0, loc_5 + 24, rt_load_i64(memory_at_0, loc_3 + 24))
							rt_store_i64(memory_at_0, loc_5 + 16, rt_load_i64(memory_at_0, loc_3 + 16))
							rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
							rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_3))
							if rt_load_i32(memory_at_0, loc_3 + 28) >= 16 then
								while true do
									loc_4 = rt_load_i32(memory_at_0, loc_5 + 28)
									rt_store_i32(memory_at_0, loc_5 + 28, bit_or(bit_and(rt_add_i32(loc_4, rt_shr_i32(rt_sub_i32(loc_3, loc_5), 1)), 4294967280), bit_and(loc_4, 15)))
									rt_store_i32(memory_at_0, loc_3 + 28, bit_and(rt_load_i32(memory_at_0, loc_3 + 28), 15))
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							rt_store_i32(memory_at_0, loc_3 + 12, 0)
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						FUNC_LIST[430](loc_0, loc_1, loc_2)
						loc_4 = 0
						if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
							continue
						end
						loc_4 = 1
						while true do
							loc_9 = rt_load_f64(memory_at_0, loc_2)
							if math_abs(loc_9) < 2.147483648e9 then
								while true do
									reg_0 = rt_truncate_f64(loc_9)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							reg_0 = 2147483648
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_6 = reg_0
						if rt_convert_f64_i32(loc_6) ~= loc_9 then
							continue
						end
						loc_6 = rt_sub_i32(loc_6, 1)
						if loc_6 >= rt_load_i32(memory_at_0, loc_1 + 8) then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_3 = rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 20), rt_shl_i32(loc_6, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = loc_3
				if loc_4 > 15 then
					while true do
						rt_store_i32(memory_at_0, loc_5 + 28, bit_and(rt_shr_i32(rt_sub_i32(rt_add_i32(bit_and(rt_shl_i32(loc_4, 1), 4294967264), loc_3), loc_5), 1), 4294967280))
						reg_1 = bit_and(rt_load_i32(memory_at_0, loc_3 + 28), 15)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_1 = loc_8
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_8 = reg_1
				rt_store_i32(memory_at_0, reg_0 + 28, bit_or(loc_8, bit_and(rt_shr_i32(rt_sub_i32(loc_5, loc_3), 1), 4294967280)))
				loc_3 = loc_5
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_2))
			rt_store_i32(memory_at_0, loc_3 + 24, rt_load_i32(memory_at_0, loc_2 + 8))
			rt_store_i32(memory_at_0, loc_3 + 28, bit_or(bit_and(rt_load_i32(memory_at_0, loc_3 + 28), 4294967280), bit_and(rt_load_i32(memory_at_0, loc_2 + 12), 15)))
			if rt_lt_i32(rt_load_i32(memory_at_0, loc_2 + 12), 5) then
				break
			end
			if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 4) == 0 then
				break
			end
			loc_4 = rt_load_i32(memory_at_0, loc_2)
			if bit_and(rt_load_i32_u8(memory_at_0, loc_4 + 1), 3) == 0 then
				break
			end
			FUNC_LIST[50](loc_0, loc_1, loc_4)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_7, 16)
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[422] = --[[ luaH_resizehash(lua_State*, Table*, int) ]] function(loc_0, loc_1, loc_2)
	while true do
		FUNC_LIST[418](loc_0, loc_1, rt_load_i32(memory_at_0, loc_1 + 8), loc_2)
		break
	end
end
FUNC_LIST[423] = --[[ luaH_new(lua_State*, int, int) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		reg_0 = FUNC_LIST[354](loc_0, 32, rt_load_i32_u8(memory_at_0, loc_0 + 4))
		loc_3 = reg_0
		loc_4 = rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 20)
		rt_store_i32_n8(memory_at_0, loc_3, 6)
		rt_store_i32_n8(memory_at_0, loc_3 + 1, bit_and(loc_4, 3))
		loc_5 = rt_load_i32_u8(memory_at_0, loc_0 + 4)
		rt_store_i32_n8(memory_at_0, loc_3 + 2, loc_5)
		rt_store_i32(memory_at_0, loc_3 + 20, 0)
		rt_store_i32_n8(memory_at_0, loc_3 + 3, 255)
		rt_store_i64(memory_at_0, loc_3 + 4, rt_i64_ZERO)
		rt_store_i64(memory_at_0, loc_3 + 12, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_3 + 24, 9808)
		while true do
			if rt_gt_i32(loc_1, 0) then
				while true do
					if loc_1 >= 67108865 then
						desired = 1
						break
					end
					loc_4 = 0
					reg_1 = FUNC_LIST[357](loc_0, 0, 0, rt_shl_i32(loc_1, 4), bit_and(loc_5, 255))
					loc_6 = reg_1
					rt_store_i32(memory_at_0, loc_3 + 20, loc_6)
					while true do
						loc_7 = rt_load_i32(memory_at_0, loc_3 + 8)
						if rt_le_i32(loc_1, loc_7) then
							break
						end
						loc_5 = loc_7
						loc_8 = bit_and(rt_sub_i32(loc_1, loc_5), 7)
						if loc_8 ~= 0 then
							while true do
								while true do
									rt_store_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_5, 4), loc_6) + 12, 0)
									loc_5 = rt_add_i32(loc_5, 1)
									loc_4 = rt_add_i32(loc_4, 1)
									if loc_8 ~= loc_4 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						if rt_sub_i32(loc_7, loc_1) > 4294967288 then
							break
						end
						while true do
							loc_4 = rt_add_i32(rt_shl_i32(loc_5, 4), loc_6)
							rt_store_i32(memory_at_0, loc_4 + 12, 0)
							rt_store_i32(memory_at_0, loc_4 + 28, 0)
							rt_store_i32(memory_at_0, loc_4 + 44, 0)
							rt_store_i32(memory_at_0, loc_4 + 60, 0)
							rt_store_i32(memory_at_0, loc_4 + 76, 0)
							rt_store_i32(memory_at_0, loc_4 + 92, 0)
							rt_store_i32(memory_at_0, loc_4 + 108, 0)
							rt_store_i32(memory_at_0, loc_4 + 124, 0)
							loc_5 = rt_add_i32(loc_5, 8)
							if loc_1 ~= loc_5 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						break
					end
					rt_store_i32(memory_at_0, loc_3 + 8, loc_1)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_gt_i32(loc_2, 0) then
				while true do
					FUNC_LIST[420](loc_0, loc_3, loc_2)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = loc_3
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[60](loc_0, 1526, 0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[424] = --[[ luaH_free(lua_State*, Table*, lua_Page*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_1 + 24)
		if loc_3 ~= 9808 then
			while true do
				FUNC_LIST[355](loc_0, loc_3, rt_shl_i32(32, rt_load_i32_u8(memory_at_0, loc_1 + 6)), rt_load_i32_u8(memory_at_0, loc_1 + 2))
				break
			end
		end
		loc_3 = rt_load_i32(memory_at_0, loc_1 + 20)
		if loc_3 ~= 0 then
			while true do
				FUNC_LIST[355](loc_0, loc_3, rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 8), 4), rt_load_i32_u8(memory_at_0, loc_1 + 2))
				break
			end
		end
		FUNC_LIST[356](loc_0, loc_1, 32, rt_load_i32_u8(memory_at_0, loc_1 + 2), loc_2)
		break
	end
end
FUNC_LIST[425] = --[[ luaH_getnum(Table*, int) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0.0
	local loc_6 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		while true do
			loc_2 = rt_sub_i32(loc_1, 1)
			if loc_2 < rt_load_i32(memory_at_0, loc_0 + 8) then
				while true do
					loc_2 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 20), rt_shl_i32(loc_2, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = 9344
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 24)
			if loc_3 == 9808 then
				break
			end
			loc_5 = rt_convert_f64_i32(loc_1)
			loc_6 = rt_reinterpret_i64_f64(loc_5)
			loc_1 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_6, rt_i64_from_u32(32, 0))), 2147483647)
			loc_4 = rt_mul_i32(bit_xor(rt_shr_u32(loc_1, 18), rt_wrap_i32_i64(loc_6)), 1540483477)
			loc_1 = rt_mul_i32(bit_xor(rt_shr_u32(loc_4, 22), loc_1), 1540483477)
			loc_0 = rt_add_i32(rt_shl_i32(bit_and(rt_mul_i32(bit_xor(rt_shr_u32(rt_mul_i32(bit_xor(rt_shr_u32(loc_1, 17), loc_4), 1540483477), 19), loc_1), 1540483477), bit_xor(rt_shl_i32(4294967295, rt_load_i32_u8(memory_at_0, loc_0 + 6)), 4294967295)), 5), loc_3)
			while true do
				while true do
					loc_1 = rt_load_i32(memory_at_0, loc_0 + 28)
					if bit_and(loc_1, 15) ~= 3 then
						break
					end
					if loc_5 ~= rt_load_f64(memory_at_0, loc_0 + 16) then
						break
					end
					reg_0 = loc_0
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				if loc_1 < 16 then
					desired = 1
					break
				end
				loc_0 = rt_add_i32(bit_and(rt_shl_i32(loc_1, 1), 4294967264), loc_0)
				continue
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[426] = --[[ luaH_getstr(Table*, TString*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		loc_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 24), rt_shl_i32(bit_and(rt_load_i32(memory_at_0, loc_1 + 12), bit_xor(rt_shl_i32(4294967295, rt_load_i32_u8(memory_at_0, loc_0 + 6)), 4294967295)), 5))
		while true do
			while true do
				while true do
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 28)
					if bit_and(loc_2, 15) == 5 then
						while true do
							if loc_1 == rt_load_i32(memory_at_0, loc_0 + 16) then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_2 >= 16 then
						desired = 2
						break
					end
					loc_0 = 9344
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = loc_0
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			loc_0 = rt_add_i32(bit_and(rt_shl_i32(loc_2, 1), 4294967264), loc_0)
			continue
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[427] = --[[ luaH_get(Table*, lua_TValue const*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = rt_i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_2 = 9344
		while true do
			while true do
				while true do
					while true do
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 3, 2, 2, 1, 2, 0, }
							end)()
						end
						temp = br_map[1][rt_load_i32(memory_at_0, loc_1 + 12)] or 2
						if temp < 2 then
							if temp < 1 then
								break
							else
								desired = 3
								break
							end
						elseif temp > 2 then
							desired = 1
							break
						else
							desired = 2
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_3 = rt_load_i32(memory_at_0, loc_1)
					loc_2 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 24), rt_shl_i32(bit_and(rt_load_i32(memory_at_0, loc_3 + 12), bit_xor(rt_shl_i32(4294967295, rt_load_i32_u8(memory_at_0, loc_0 + 6)), 4294967295)), 5))
					while true do
						loc_1 = rt_load_i32(memory_at_0, loc_2 + 28)
						if bit_and(loc_1, 15) == 5 then
							while true do
								if loc_3 == rt_load_i32(memory_at_0, loc_2 + 16) then
									desired = 1
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						if loc_1 < 16 then
							while true do
								reg_0 = 9344
								desired = 0
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						else
							while true do
								loc_2 = rt_add_i32(bit_and(rt_shl_i32(loc_1, 1), 4294967264), loc_2)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					loc_4 = rt_load_f64(memory_at_0, loc_1)
					if math_abs(loc_4) < 2.147483648e9 then
						while true do
							reg_0 = rt_truncate_f64(loc_4)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = 2147483648
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = reg_0
				loc_5 = rt_convert_f64_i32(loc_2)
				if loc_5 ~= loc_4 then
					break
				end
				loc_2 = rt_sub_i32(loc_2, 1)
				if loc_2 < rt_load_i32(memory_at_0, loc_0 + 8) then
					while true do
						reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 20), rt_shl_i32(loc_2, 4))
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 24)
				if loc_2 == 9808 then
					while true do
						reg_0 = 9344
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_6 = rt_reinterpret_i64_f64(loc_5)
				loc_1 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_6, rt_i64_from_u32(32, 0))), 2147483647)
				loc_3 = rt_mul_i32(bit_xor(rt_shr_u32(loc_1, 18), rt_wrap_i32_i64(loc_6)), 1540483477)
				loc_1 = rt_mul_i32(bit_xor(rt_shr_u32(loc_3, 22), loc_1), 1540483477)
				loc_2 = rt_add_i32(rt_shl_i32(bit_and(rt_mul_i32(bit_xor(rt_shr_u32(rt_mul_i32(bit_xor(rt_shr_u32(loc_1, 17), loc_3), 1540483477), 19), loc_1), 1540483477), bit_xor(rt_shl_i32(4294967295, rt_load_i32_u8(memory_at_0, loc_0 + 6)), 4294967295)), 5), loc_2)
				while true do
					loc_1 = rt_load_i32(memory_at_0, loc_2 + 28)
					if bit_and(loc_1, 15) == 3 then
						while true do
							if loc_5 == rt_load_f64(memory_at_0, loc_2 + 16) then
								desired = 1
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					if loc_1 < 16 then
						while true do
							reg_0 = 9344
							desired = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					else
						while true do
							loc_2 = rt_add_i32(bit_and(rt_shl_i32(loc_1, 1), 4294967264), loc_2)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[416](loc_0, loc_1)
			loc_2 = reg_0
			reg_0 = FUNC_LIST[364](rt_add_i32(loc_2, 16), loc_1)
			if reg_0 ~= 0 then
				break
			end
			while true do
				loc_3 = rt_load_i32(memory_at_0, loc_2 + 28)
				if loc_3 < 16 then
					while true do
						reg_0 = 9344
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				loc_2 = rt_add_i32(bit_and(rt_shl_i32(loc_3, 1), 4294967264), loc_2)
				reg_0 = FUNC_LIST[364](rt_add_i32(loc_2, 16), loc_1)
				if reg_0 == 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[428] = --[[ luaH_set(lua_State*, Table*, lua_TValue const*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[427](loc_1, loc_2)
		loc_3 = reg_0
		rt_store_i32_n8(memory_at_0, loc_1 + 3, 0)
		if loc_3 == 9344 then
			while true do
				reg_0 = FUNC_LIST[429](loc_0, loc_1, loc_2)
				break
			end
		else
			while true do
				reg_0 = loc_3
				break
			end
		end
		loc_3 = reg_0
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[429] = --[[ luaH_newkey(lua_State*, Table*, lua_TValue const*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0.0
	local loc_4 = 0.0
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 0, 3, 3, 1, 2, }
							end)()
						end
						temp = br_map[1][rt_load_i32(memory_at_0, loc_2 + 12)] or 3
						if temp < 2 then
							if temp < 1 then
								break
							else
								desired = 3
								break
							end
						elseif temp > 2 then
							desired = 1
							break
						else
							desired = 2
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[60](loc_0, 2980, 0)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_4 = rt_load_f64(memory_at_0, loc_2)
				if loc_4 == loc_4 then
					desired = 1
					break
				end
				FUNC_LIST[60](loc_0, 5151, 0)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_3 = rt_load_f32(memory_at_0, loc_2)
				if loc_3 ~= loc_3 then
					break
				end
				loc_3 = rt_load_f32(memory_at_0, loc_2 + 4)
				if loc_3 ~= loc_3 then
					break
				end
				loc_3 = rt_load_f32(memory_at_0, loc_2 + 8)
				if loc_3 == loc_3 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[60](loc_0, 5126, 0)
			error("out of code bounds")
		end
		reg_0 = FUNC_LIST[421](loc_0, loc_1, loc_2)
		break
	end
	return reg_0
end
FUNC_LIST[430] = --[[ rehash(lua_State*, Table*, lua_TValue const*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = 0.0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 112)
		GLOBAL_LIST[0].value = loc_4
		reg_0 = FUNC_LIST[611](loc_4, 0, 108)
		loc_12 = reg_0
		loc_18 = rt_load_i32(memory_at_0, loc_1 + 8)
		loc_4 = 1
		loc_15 = 1
		while true do
			while true do
				loc_14 = loc_15
				if rt_lt_i32(loc_18, loc_14) then
					while true do
						loc_14 = loc_18
						if rt_gt_i32(loc_4, loc_14) then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_3 = 0
				if rt_le_i32(loc_4, loc_14) then
					while true do
						loc_5 = rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 20), 4)
						loc_3 = rt_sub_i32(loc_14, loc_4)
						loc_6 = rt_add_i32(loc_3, 1)
						loc_7 = bit_and(loc_6, 3)
						loc_8 = 0
						while true do
							if loc_3 < 3 then
								while true do
									loc_3 = 0
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							loc_9 = rt_add_i32(loc_5, 48)
							loc_11 = rt_add_i32(loc_5, 32)
							loc_17 = rt_add_i32(loc_5, 16)
							loc_19 = bit_and(loc_6, 4294967292)
							loc_3 = 0
							loc_10 = 0
							while true do
								loc_6 = rt_shl_i32(loc_4, 4)
								loc_3 = rt_add_i32(rt_add_i32(rt_add_i32(rt_add_i32((if rt_load_i32(memory_at_0, rt_add_i32(loc_6, loc_5)) ~= 0 then 1 else 0), loc_3), (if rt_load_i32(memory_at_0, rt_add_i32(loc_6, loc_17)) ~= 0 then 1 else 0)), (if rt_load_i32(memory_at_0, rt_add_i32(loc_6, loc_11)) ~= 0 then 1 else 0)), (if rt_load_i32(memory_at_0, rt_add_i32(loc_6, loc_9)) ~= 0 then 1 else 0))
								loc_4 = rt_add_i32(loc_4, 4)
								loc_10 = rt_add_i32(loc_10, 4)
								if loc_19 ~= loc_10 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							break
						end
						if loc_7 ~= 0 then
							while true do
								while true do
									loc_3 = rt_add_i32((if rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_4, 4), loc_5)) ~= 0 then 1 else 0), loc_3)
									loc_4 = rt_add_i32(loc_4, 1)
									loc_8 = rt_add_i32(loc_8, 1)
									if loc_7 ~= loc_8 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								break
							end
						end
						reg_0 = rt_add_i32(loc_14, 1)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_4
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_4 = reg_0
				loc_6 = rt_add_i32(rt_shl_i32(loc_16, 2), loc_12)
				rt_store_i32(memory_at_0, loc_6, rt_add_i32(loc_3, rt_load_i32(memory_at_0, loc_6)))
				loc_15 = rt_shl_i32(loc_15, 1)
				loc_13 = rt_add_i32(loc_3, loc_13)
				loc_16 = rt_add_i32(loc_16, 1)
				if loc_16 ~= 27 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			break
		end
		loc_3 = bit_xor(rt_shl_i32(4294967295, rt_load_i32_u8(memory_at_0, loc_1 + 6)), 4294967295)
		loc_10 = bit_or(loc_12, 4)
		loc_6 = 0
		loc_5 = 0
		while true do
			loc_4 = loc_3
			loc_3 = rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 24), rt_shl_i32(loc_4, 5))
			if rt_load_i32(memory_at_0, loc_3 + 12) ~= 0 then
				while true do
					loc_6 = rt_add_i32(loc_6, 1)
					if bit_and(rt_load_i32(memory_at_0, loc_3 + 28), 15) == 3 then
						while true do
							loc_8 = 0
							reg_0 = 4294967294
							while true do
								loc_21 = rt_load_f64(memory_at_0, loc_3 + 16)
								if math_abs(loc_21) < 2.147483648e9 then
									while true do
										reg_1 = rt_truncate_f64(loc_21)
										desired = 4
										break
									end
									if desired then
										if desired == 4 then
											desired = nil
										end
										break
									end
								end
								reg_1 = 2147483648
								break
							end
							if desired then
								break
							end
							loc_3 = reg_1
							loc_3 = (if rt_convert_f64_i32(loc_3) ~= loc_21 then reg_0 else rt_sub_i32(loc_3, 1))
							if loc_3 <= 67108863 then
								while true do
									reg_0 = FUNC_LIST[362](loc_3)
									loc_3 = rt_add_i32(rt_shl_i32(reg_0, 2), loc_10)
									rt_store_i32(memory_at_0, loc_3, rt_add_i32(rt_load_i32(memory_at_0, loc_3), 1))
									reg_0 = 1
									break
								end
								if desired then
									break
								end
							else
								while true do
									reg_0 = loc_8
									break
								end
								if desired then
									break
								end
							end
							loc_8 = reg_0
							reg_0 = rt_add_i32(loc_8, loc_5)
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_5
							break
						end
						if desired then
							break
						end
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			else
				while true do
					reg_0 = loc_5
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			end
			loc_5 = reg_0
			loc_3 = rt_sub_i32(loc_4, 1)
			if loc_4 ~= 0 then
				continue
			end
			break
		end
		loc_9 = rt_add_i32(loc_5, loc_13)
		if rt_load_i32(memory_at_0, loc_2 + 12) == 3 then
			while true do
				loc_3 = 0
				reg_0 = loc_9
				reg_1 = 4294967294
				while true do
					loc_21 = rt_load_f64(memory_at_0, loc_2)
					if math_abs(loc_21) < 2.147483648e9 then
						while true do
							reg_2 = rt_truncate_f64(loc_21)
							desired = 2
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					reg_2 = 2147483648
					break
				end
				loc_4 = reg_2
				loc_4 = (if rt_convert_f64_i32(loc_4) ~= loc_21 then reg_1 else rt_sub_i32(loc_4, 1))
				if loc_4 <= 67108863 then
					while true do
						reg_1 = FUNC_LIST[362](loc_4)
						loc_20 = rt_add_i32(rt_shl_i32(reg_1, 2), loc_12)
						loc_4 = rt_add_i32(loc_20, 4)
						rt_store_i32(memory_at_0, loc_4, rt_add_i32(rt_load_i32(memory_at_0, loc_20 + 4), 1))
						reg_1 = 1
						break
					end
				else
					while true do
						reg_1 = loc_3
						break
					end
				end
				loc_3 = reg_1
				reg_0 = rt_add_i32(reg_0, loc_3)
				break
			end
		else
			while true do
				reg_0 = loc_9
				break
			end
		end
		loc_9 = reg_0
		loc_4 = 1
		loc_8 = 0
		while true do
			if rt_le_i32(loc_9, 0) then
				while true do
					loc_11 = 0
					loc_7 = 0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_7 = 0
			loc_11 = 0
			loc_3 = 0
			loc_10 = 0
			while true do
				loc_5 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_10, 2), loc_12))
				loc_17 = (if rt_gt_i32(loc_5, 0) then 1 else 0)
				loc_5 = rt_add_i32(loc_3, loc_5)
				loc_8 = bit_and(loc_17, (if rt_lt_i32(loc_8, loc_5) then 1 else 0))
				loc_7 = (if loc_8 ~= 0 then loc_4 else loc_7)
				loc_11 = (if loc_8 ~= 0 then loc_5 else loc_11)
				loc_3 = (if loc_17 ~= 0 then loc_5 else loc_3)
				if loc_9 == loc_3 then
					desired = 1
					break
				end
				loc_10 = rt_add_i32(loc_10, 1)
				loc_8 = bit_and(loc_4, 2147483647)
				loc_4 = rt_shl_i32(loc_4, 1)
				if loc_8 < loc_9 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		loc_4 = rt_add_i32(rt_sub_i32(rt_add_i32(loc_6, loc_13), loc_11), 1)
		reg_2 = FUNC_LIST[419](loc_1, loc_7, loc_2)
		loc_3 = reg_2
		reg_0 = loc_0
		reg_1 = loc_1
		if loc_3 ~= loc_7 then
			while true do
				loc_6 = rt_sub_i32(loc_3, loc_7)
				loc_4 = rt_sub_i32(loc_4, loc_6)
				reg_2 = FUNC_LIST[419](loc_1, rt_add_i32(loc_3, loc_6), loc_2)
				break
			end
		else
			while true do
				reg_2 = loc_7
				break
			end
		end
		loc_7 = reg_2
		FUNC_LIST[418](reg_0, reg_1, loc_7, loc_4)
		GLOBAL_LIST[0].value = rt_add_i32(loc_12, 112)
		break
	end
end
FUNC_LIST[431] = --[[ luaH_setnum(lua_State*, Table*, int) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0.0
	local loc_7 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		while true do
			loc_3 = rt_sub_i32(loc_2, 1)
			if loc_3 < rt_load_i32(memory_at_0, loc_1 + 8) then
				while true do
					loc_2 = rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 20), rt_shl_i32(loc_3, 4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_6 = rt_convert_f64_i32(loc_2)
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_1 + 24)
				if loc_2 == 9808 then
					break
				end
				loc_7 = rt_reinterpret_i64_f64(loc_6)
				loc_3 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_7, rt_i64_from_u32(32, 0))), 2147483647)
				loc_5 = rt_mul_i32(bit_xor(rt_shr_u32(loc_3, 18), rt_wrap_i32_i64(loc_7)), 1540483477)
				loc_3 = rt_mul_i32(bit_xor(rt_shr_u32(loc_5, 22), loc_3), 1540483477)
				loc_2 = rt_add_i32(rt_shl_i32(bit_and(rt_mul_i32(bit_xor(rt_shr_u32(rt_mul_i32(bit_xor(rt_shr_u32(loc_3, 17), loc_5), 1540483477), 19), loc_3), 1540483477), bit_xor(rt_shl_i32(4294967295, rt_load_i32_u8(memory_at_0, loc_1 + 6)), 4294967295)), 5), loc_2)
				while true do
					while true do
						loc_3 = rt_load_i32(memory_at_0, loc_2 + 28)
						if bit_and(loc_3, 15) == 3 then
							while true do
								if loc_6 == rt_load_f64(memory_at_0, loc_2 + 16) then
									desired = 4
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_3 < 16 then
							desired = 2
							break
						end
						loc_2 = rt_add_i32(bit_and(rt_shl_i32(loc_3, 1), 4294967264), loc_2)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_2 ~= 9344 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_4 + 12, 3)
			rt_store_f64(memory_at_0, loc_4, loc_6)
			reg_0 = FUNC_LIST[421](loc_0, loc_1, loc_4)
			loc_2 = reg_0
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[432] = --[[ luaH_setstr(lua_State*, Table*, TString*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_3 = rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 24), rt_shl_i32(bit_and(rt_load_i32(memory_at_0, loc_2 + 12), bit_xor(rt_shl_i32(4294967295, rt_load_i32_u8(memory_at_0, loc_1 + 6)), 4294967295)), 5))
		while true do
			while true do
				while true do
					while true do
						loc_5 = rt_load_i32(memory_at_0, loc_3 + 28)
						if bit_and(loc_5, 15) == 5 then
							while true do
								if loc_2 == rt_load_i32(memory_at_0, loc_3 + 16) then
									desired = 4
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_5 <= 15 then
							while true do
								rt_store_i32_n8(memory_at_0, loc_1 + 3, 0)
								desired = 2
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								loc_3 = rt_add_i32(bit_and(rt_shl_i32(loc_5, 1), 4294967264), loc_3)
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32_n8(memory_at_0, loc_1 + 3, 0)
				if loc_3 ~= 9344 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_4 + 12, 5)
			rt_store_i32(memory_at_0, loc_4, loc_2)
			reg_0 = FUNC_LIST[421](loc_0, loc_1, loc_4)
			loc_3 = reg_0
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[433] = --[[ luaH_getn(Table*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			while true do
				loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
				if rt_lt_i32(loc_5, 0) then
					while true do
						loc_1 = rt_sub_i32(0, loc_5)
						loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
				loc_1 = loc_2
				if rt_le_i32(loc_2, 0) then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = rt_load_i32(memory_at_0, loc_0 + 20)
			if rt_load_i32(memory_at_0, rt_sub_i32(rt_add_i32(loc_4, rt_shl_i32(loc_2, 4)), 4)) ~= 0 then
				while true do
					if rt_load_i32(memory_at_0, loc_0 + 24) == 9808 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = loc_0
			while true do
				while true do
					while true do
						if rt_ge_i32(loc_1, loc_2) then
							break
						end
						loc_3 = rt_add_i32(rt_shl_i32(loc_1, 4), loc_4)
						if rt_load_i32(memory_at_0, rt_sub_i32(loc_3, 4)) ~= 0 then
							while true do
								if rt_load_i32(memory_at_0, loc_3 + 12) ~= 0 then
									desired = 4
									break
								end
								reg_1 = loc_1
								reg_0 = reg_1
								desired = 0
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_1 < 2 then
							desired = 3
							break
						end
						if rt_load_i32(memory_at_0, rt_sub_i32(loc_3, 20)) == 0 then
							desired = 3
							break
						end
						loc_2 = rt_sub_i32(loc_1, 1)
						if rt_gt_i32(loc_5, 0) then
							desired = 1
							break
						end
						reg_1 = rt_sub_i32(1, loc_1)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_3 = rt_add_i32(loc_1, 1)
					if rt_lt_i32(loc_3, loc_2) then
						while true do
							if rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_1, 4), loc_4) + 12) == 0 then
								desired = 3
								break
							end
							if rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_3, 4), loc_4) + 12) ~= 0 then
								desired = 3
								break
							end
							if rt_gt_i32(loc_5, 0) then
								while true do
									reg_1 = loc_3
									reg_0 = reg_1
									desired = 0
									break
								end
								if desired then
									break
								end
							end
							loc_2 = loc_3
							reg_1 = bit_xor(loc_1, 4294967295)
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if rt_le_i32(loc_2, 0) then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = rt_load_i32(memory_at_0, loc_0 + 20)
				if rt_load_i32(memory_at_0, rt_sub_i32(rt_add_i32(loc_6, rt_shl_i32(loc_2, 4)), 4)) ~= 0 then
					desired = 1
					break
				end
				loc_1 = loc_6
				if loc_2 ~= 1 then
					while true do
						while true do
							loc_4 = rt_shr_i32(loc_2, 1)
							loc_3 = rt_add_i32(rt_shl_i32(loc_4, 4), loc_1)
							loc_1 = (if rt_load_i32(memory_at_0, loc_3 + 12) ~= 0 then loc_3 else loc_1)
							loc_2 = rt_sub_i32(loc_2, loc_4)
							if loc_2 > 1 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = rt_add_i32(rt_shr_i32(rt_sub_i32(loc_1, loc_6), 4), (if rt_load_i32(memory_at_0, loc_1 + 12) ~= 0 then 1 else 0))
				if rt_gt_i32(loc_5, 0) then
					desired = 1
					break
				end
				reg_1 = rt_sub_i32(0, loc_2)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = reg_1
			rt_store_i32(memory_at_0, reg_0 + 12, loc_1)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[434] = --[[ luaH_clone(lua_State*, Table*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		reg_0 = FUNC_LIST[354](loc_0, 32, rt_load_i32_u8(memory_at_0, loc_0 + 4))
		loc_2 = reg_0
		loc_3 = rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 20)
		rt_store_i32_n8(memory_at_0, loc_2, 6)
		rt_store_i32_n8(memory_at_0, loc_2 + 1, bit_and(loc_3, 3))
		loc_4 = rt_load_i32_u8(memory_at_0, loc_0 + 4)
		rt_store_i32_n8(memory_at_0, loc_2 + 2, loc_4)
		rt_store_i32(memory_at_0, loc_2 + 16, rt_load_i32(memory_at_0, loc_1 + 16))
		loc_3 = rt_load_i32_u8(memory_at_0, loc_1 + 3)
		rt_store_i32(memory_at_0, loc_2 + 20, 0)
		rt_store_i32_n8(memory_at_0, loc_2 + 3, loc_3)
		rt_store_i32(memory_at_0, loc_2 + 24, 9808)
		rt_store_i64(memory_at_0, loc_2 + 4, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_2 + 12, 0)
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_1 + 8)
			if loc_3 ~= 0 then
				while true do
					if loc_3 > 268435455 then
						desired = 1
						break
					end
					reg_1 = FUNC_LIST[352](loc_0, rt_shl_i32(loc_3, 4), bit_and(loc_4, 255))
					loc_3 = reg_1
					rt_store_i32(memory_at_0, loc_2 + 20, loc_3)
					if rt_le_i32(rt_load_i32(memory_at_0, loc_2 + 12), 0) then
						while true do
							reg_0 = loc_2
							reg_1 = 0
							while true do
								loc_4 = rt_load_i32(memory_at_0, loc_1 + 12)
								if rt_lt_i32(loc_4, 0) then
									while true do
										reg_2 = rt_sub_i32(0, loc_4)
										desired = 4
										break
									end
									if desired then
										if desired == 4 then
											desired = nil
										end
										break
									end
								end
								reg_2 = rt_load_i32(memory_at_0, loc_1 + 8)
								break
							end
							if desired then
								break
							end
							loc_4 = reg_2
							rt_store_i32(memory_at_0, reg_0 + 12, rt_sub_i32(reg_1, loc_4))
							break
						end
						if desired then
							break
						end
					end
					loc_4 = rt_load_i32(memory_at_0, loc_1 + 8)
					rt_store_i32(memory_at_0, loc_2 + 8, loc_4)
					reg_0 = FUNC_LIST[609](loc_3, rt_load_i32(memory_at_0, loc_1 + 20), rt_shl_i32(loc_4, 4))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_load_i32(memory_at_0, loc_1 + 24) ~= 9808 then
				while true do
					loc_3 = rt_load_i32_u8(memory_at_0, loc_1 + 6)
					if loc_3 > 26 then
						desired = 1
						break
					end
					loc_3 = rt_shl_i32(32, loc_3)
					reg_1 = FUNC_LIST[352](loc_0, loc_3, rt_load_i32_u8(memory_at_0, loc_2 + 2))
					loc_0 = reg_1
					rt_store_i32(memory_at_0, loc_2 + 24, loc_0)
					rt_store_i32_n8(memory_at_0, loc_2 + 6, rt_load_i32_u8(memory_at_0, loc_1 + 6))
					rt_store_i32_n8(memory_at_0, loc_2 + 7, rt_load_i32_u8(memory_at_0, loc_1 + 7))
					reg_0 = FUNC_LIST[609](loc_0, rt_load_i32(memory_at_0, loc_1 + 24), loc_3)
					rt_store_i32(memory_at_0, loc_2 + 12, rt_load_i32(memory_at_0, loc_1 + 12))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = loc_2
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[351](loc_0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[435] = --[[ luaH_clear(Table*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	while true do
		while true do
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
			if rt_le_i32(loc_1, 0) then
				break
			end
			loc_5 = bit_and(loc_1, 7)
			loc_4 = rt_load_i32(memory_at_0, loc_0 + 20)
			if loc_1 >= 8 then
				while true do
					loc_7 = bit_and(loc_1, 2147483640)
					while true do
						loc_1 = rt_add_i32(rt_shl_i32(loc_2, 4), loc_4)
						rt_store_i32(memory_at_0, loc_1 + 12, 0)
						rt_store_i32(memory_at_0, loc_1 + 28, 0)
						rt_store_i32(memory_at_0, loc_1 + 44, 0)
						rt_store_i32(memory_at_0, loc_1 + 60, 0)
						rt_store_i32(memory_at_0, loc_1 + 76, 0)
						rt_store_i32(memory_at_0, loc_1 + 92, 0)
						rt_store_i32(memory_at_0, loc_1 + 108, 0)
						rt_store_i32(memory_at_0, loc_1 + 124, 0)
						loc_2 = rt_add_i32(loc_2, 8)
						loc_3 = rt_add_i32(loc_3, 8)
						if loc_7 ~= loc_3 then
							continue
						end
						break
					end
					break
				end
			end
			if loc_5 == 0 then
				break
			end
			while true do
				rt_store_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_2, 4), loc_4) + 12, 0)
				loc_2 = rt_add_i32(loc_2, 1)
				loc_6 = rt_add_i32(loc_6, 1)
				if loc_5 ~= loc_6 then
					continue
				end
				break
			end
			break
		end
		if rt_le_i32(rt_load_i32(memory_at_0, loc_0 + 12), 0) then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 12, 0)
				break
			end
		end
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 24) == 9808 then
				break
			end
			loc_1 = rt_load_i32_u8(memory_at_0, loc_0 + 6)
			loc_2 = rt_shl_i32(1, loc_1)
			rt_store_i32(memory_at_0, loc_0 + 12, loc_2)
			if loc_1 == 31 then
				break
			end
			loc_4 = (if rt_le_i32(loc_2, 1) then 1 else loc_2)
			loc_5 = bit_and(loc_4, 3)
			loc_6 = 0
			loc_1 = 0
			if rt_ge_i32(loc_2, 4) then
				while true do
					loc_7 = bit_and(loc_4, 2147483644)
					loc_4 = 0
					while true do
						loc_2 = rt_shl_i32(loc_1, 5)
						loc_3 = rt_add_i32(loc_2, rt_load_i32(memory_at_0, loc_0 + 24))
						rt_store_i32(memory_at_0, loc_3 + 28, 0)
						rt_store_i32(memory_at_0, loc_3 + 12, 0)
						loc_3 = rt_add_i32(loc_2, rt_load_i32(memory_at_0, loc_0 + 24))
						rt_store_i32(memory_at_0, loc_3 + 60, 0)
						rt_store_i32(memory_at_0, loc_3 + 44, 0)
						loc_3 = rt_add_i32(loc_2, rt_load_i32(memory_at_0, loc_0 + 24))
						rt_store_i32(memory_at_0, loc_3 + 92, 0)
						rt_store_i32(memory_at_0, loc_3 + 76, 0)
						loc_2 = rt_add_i32(loc_2, rt_load_i32(memory_at_0, loc_0 + 24))
						rt_store_i32(memory_at_0, loc_2 + 124, 0)
						rt_store_i32(memory_at_0, loc_2 + 108, 0)
						loc_1 = rt_add_i32(loc_1, 4)
						loc_4 = rt_add_i32(loc_4, 4)
						if loc_7 ~= loc_4 then
							continue
						end
						break
					end
					break
				end
			end
			if loc_5 == 0 then
				break
			end
			while true do
				loc_2 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 24), rt_shl_i32(loc_1, 5))
				rt_store_i32(memory_at_0, loc_2 + 28, 0)
				rt_store_i32(memory_at_0, loc_2 + 12, 0)
				loc_1 = rt_add_i32(loc_1, 1)
				loc_6 = rt_add_i32(loc_6, 1)
				if loc_5 ~= loc_6 then
					continue
				end
				break
			end
			break
		end
		rt_store_i32_n8(memory_at_0, loc_0 + 3, 255)
		break
	end
end
FUNC_LIST[436] = --[[ luaopen_table ]] function(loc_0)
	local reg_0
	while true do
		FUNC_LIST[228](loc_0, 4465, 9840)
		FUNC_LIST[149](loc_0, 154, 3079, 0, 0)
		FUNC_LIST[165](loc_0, 4294957294, 3079)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[437] = --[[ tunpack(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		FUNC_LIST[214](loc_0, 1, 6)
		loc_4 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 12))
		while true do
			reg_0 = FUNC_LIST[221](loc_0, 2, 1)
			loc_1 = reg_0
			reg_0 = loc_1
			while true do
				reg_1 = FUNC_LIST[111](loc_0, 3)
				if rt_le_i32(reg_1, 0) then
					while true do
						reg_1 = FUNC_LIST[129](loc_0, 1)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = FUNC_LIST[220](loc_0, 3)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = reg_1
			if rt_le_i32(reg_0, loc_2) then
				while true do
					loc_3 = rt_sub_i32(loc_2, loc_1)
					if loc_3 > 2147483646 then
						desired = 1
						break
					end
					loc_5 = rt_add_i32(loc_3, 1)
					reg_0 = FUNC_LIST[98](loc_0, loc_5)
					if reg_0 == 0 then
						desired = 1
						break
					end
					while true do
						if loc_1 ~= 1 then
							break
						end
						if rt_le_i32(rt_load_i32(memory_at_0, loc_4 + 8), loc_3) then
							break
						end
						loc_7 = bit_and(loc_2, 1)
						loc_1 = 0
						if loc_2 ~= 1 then
							while true do
								loc_8 = bit_and(loc_2, 4294967294)
								loc_3 = 0
								while true do
									loc_2 = rt_shl_i32(loc_1, 4)
									loc_6 = rt_add_i32(loc_2, rt_load_i32(memory_at_0, loc_0 + 8))
									loc_9 = rt_add_i32(loc_2, rt_load_i32(memory_at_0, loc_4 + 20))
									rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_9))
									rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_9 + 8))
									loc_2 = bit_or(loc_2, 16)
									loc_6 = rt_add_i32(loc_2, rt_load_i32(memory_at_0, loc_0 + 8))
									loc_2 = rt_add_i32(loc_2, rt_load_i32(memory_at_0, loc_4 + 20))
									rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_2))
									rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
									loc_1 = rt_add_i32(loc_1, 2)
									loc_3 = rt_add_i32(loc_3, 2)
									if loc_8 ~= loc_3 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						if loc_7 ~= 0 then
							while true do
								loc_1 = rt_shl_i32(loc_1, 4)
								loc_2 = rt_add_i32(loc_1, rt_load_i32(memory_at_0, loc_0 + 8))
								loc_1 = rt_add_i32(loc_1, rt_load_i32(memory_at_0, loc_4 + 20))
								rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
								rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_5, 4)))
						reg_0 = loc_5
						desired = 0
						break
					end
					if desired then
						break
					end
					if rt_lt_i32(loc_1, loc_2) then
						while true do
							while true do
								reg_0 = FUNC_LIST[157](loc_0, 1, loc_1)
								loc_1 = rt_add_i32(loc_1, 1)
								if loc_2 ~= loc_1 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							break
						end
					end
					reg_0 = FUNC_LIST[157](loc_0, 1, loc_2)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = loc_5
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[203](loc_0, 3059, 0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[438] = --[[ tconcat(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 544)
		GLOBAL_LIST[0].value = loc_1
		reg_0 = FUNC_LIST[208](loc_0, 2, 6597, rt_add_i32(loc_1, 540))
		loc_5 = reg_0
		FUNC_LIST[214](loc_0, 1, 6)
		reg_0 = FUNC_LIST[221](loc_0, 3, 1)
		loc_2 = reg_0
		while true do
			reg_0 = FUNC_LIST[111](loc_0, 4)
			if rt_le_i32(reg_0, 0) then
				while true do
					reg_0 = FUNC_LIST[129](loc_0, 1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[220](loc_0, 4)
			break
		end
		loc_3 = reg_0
		loc_4 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 12))
		FUNC_LIST[231](loc_0, rt_add_i32(loc_1, 12))
		while true do
			while true do
				if rt_lt_i32(loc_2, loc_3) then
					while true do
						while true do
							FUNC_LIST[439](loc_0, rt_add_i32(loc_1, 12), loc_2, loc_4)
							loc_6 = rt_load_i32(memory_at_0, loc_1 + 540)
							if loc_6 ~= 0 then
								while true do
									FUNC_LIST[235](rt_add_i32(loc_1, 12), loc_5, loc_6)
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							end
							loc_2 = rt_add_i32(loc_2, 1)
							if loc_3 ~= loc_2 then
								continue
							end
							desired = 2
							break
						end
						if desired then
							break
						end
						error("out of code bounds")
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_2 ~= loc_3 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[439](loc_0, rt_add_i32(loc_1, 12), loc_3, loc_4)
			break
		end
		FUNC_LIST[239](rt_add_i32(loc_1, 12))
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 544)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[439] = --[[ addfield(lua_State*, luaL_Strbuf*, int, Table*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		while true do
			while true do
				if loc_3 == 0 then
					break
				end
				loc_5 = rt_sub_i32(loc_2, 1)
				if loc_5 >= rt_load_i32(memory_at_0, loc_3 + 8) then
					break
				end
				loc_3 = rt_add_i32(rt_load_i32(memory_at_0, loc_3 + 20), rt_shl_i32(loc_5, 4))
				if rt_load_i32(memory_at_0, loc_3 + 12) ~= 5 then
					break
				end
				loc_3 = rt_load_i32(memory_at_0, loc_3)
				FUNC_LIST[235](loc_1, rt_add_i32(loc_3, 20), rt_load_i32(memory_at_0, loc_3 + 16))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				while true do
					reg_0 = FUNC_LIST[157](loc_0, 1, loc_2)
					if not br_map[1] then
						br_map[1] = (function()
							return { [0] = 1, 0, 1, }
						end)()
					end
					temp = br_map[1][rt_sub_i32(reg_0, 3)] or 0
					if temp < 1 then
						break
					else
						desired = 2
						break
					end
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[230](loc_0, 4294967295)
				loc_3 = reg_0
				rt_store_i32(memory_at_0, loc_4 + 4, loc_2)
				rt_store_i32(memory_at_0, loc_4, loc_3)
				FUNC_LIST[203](loc_0, 6240, loc_4)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[236](loc_1)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[440] = --[[ foreach(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	local desired
	while true do
		FUNC_LIST[214](loc_0, 1, 6)
		FUNC_LIST[214](loc_0, 2, 7)
		FUNC_LIST[140](loc_0)
		while true do
			reg_0 = FUNC_LIST[180](loc_0, 1)
			if reg_0 ~= 0 then
				while true do
					while true do
						FUNC_LIST[110](loc_0, 2)
						FUNC_LIST[110](loc_0, 4294967293)
						FUNC_LIST[110](loc_0, 4294967293)
						FUNC_LIST[171](loc_0, 2, 1)
						reg_1 = FUNC_LIST[111](loc_0, 4294967295)
						reg_0 = 1
						if reg_1 ~= 0 then
							desired = 1
							break
						end
						FUNC_LIST[106](loc_0, 4294967293)
						reg_0 = FUNC_LIST[180](loc_0, 1)
						if reg_0 ~= 0 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = 0
			break
		end
		break
	end
	return reg_0
end
FUNC_LIST[441] = --[[ foreachi(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_1 = 1
		FUNC_LIST[214](loc_0, 1, 6)
		FUNC_LIST[214](loc_0, 2, 7)
		reg_0 = FUNC_LIST[129](loc_0, 1)
		loc_2 = reg_0
		if rt_gt_i32(loc_2, 0) then
			while true do
				while true do
					FUNC_LIST[110](loc_0, 2)
					FUNC_LIST[142](loc_0, loc_1)
					reg_0 = FUNC_LIST[157](loc_0, 1, loc_1)
					FUNC_LIST[171](loc_0, 2, 1)
					reg_0 = FUNC_LIST[111](loc_0, 4294967295)
					if reg_0 ~= 0 then
						while true do
							reg_0 = 1
							desired = 0
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					end
					FUNC_LIST[106](loc_0, 4294967294)
					loc_3 = (if loc_1 ~= loc_2 then 1 else 0)
					loc_1 = rt_add_i32(loc_1, 1)
					if loc_3 ~= 0 then
						continue
					end
					break
				end
				if desired then
					break
				end
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[442] = --[[ getn(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		FUNC_LIST[214](loc_0, 1, 6)
		reg_1 = FUNC_LIST[129](loc_0, 1)
		FUNC_LIST[142](loc_0, reg_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[443] = --[[ maxn(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0.0
	local loc_14 = 0.0
	local reg_0
	local desired
	while true do
		FUNC_LIST[214](loc_0, 1, 6)
		while true do
			loc_7 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 12))
			loc_1 = rt_load_i32(memory_at_0, loc_7 + 8)
			if rt_le_i32(loc_1, 0) then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_8 = bit_and(loc_1, 3)
			loc_2 = rt_load_i32(memory_at_0, loc_7 + 20)
			while true do
				if loc_1 < 4 then
					while true do
						loc_1 = 0
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_10 = bit_and(loc_1, 2147483644)
				loc_1 = 0
				while true do
					loc_3 = bit_or(loc_1, 1)
					loc_11 = rt_shl_i32(loc_1, 4)
					loc_4 = bit_or(loc_1, 2)
					loc_6 = bit_or(loc_1, 3)
					loc_1 = rt_add_i32(loc_1, 4)
					loc_13 = (if rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_6, 4), loc_2) + 12) ~= 0 then no_op(loc_1) else (if rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_4, 4), loc_2) + 12) ~= 0 then no_op(loc_6) else (if rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_3, 4), loc_2) + 12) ~= 0 then no_op(loc_4) else (if rt_load_i32(memory_at_0, rt_add_i32(loc_2, loc_11) + 12) ~= 0 then no_op(loc_3) else loc_13))))
					loc_9 = rt_add_i32(loc_9, 4)
					if loc_10 ~= loc_9 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_8 == 0 then
				break
			end
			while true do
				loc_3 = rt_add_i32(loc_1, 1)
				loc_13 = (if rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_1, 4), loc_2) + 12) ~= 0 then no_op(loc_3) else loc_13)
				loc_1 = loc_3
				loc_5 = rt_add_i32(loc_5, 1)
				if loc_8 ~= loc_5 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		while true do
			loc_1 = rt_load_i32_u8(memory_at_0, loc_7 + 6)
			if loc_1 == 31 then
				break
			end
			loc_1 = rt_shl_i32(1, loc_1)
			loc_2 = (if rt_le_i32(loc_1, 1) then 1 else loc_1)
			loc_5 = bit_and(loc_2, 1)
			loc_4 = rt_load_i32(memory_at_0, loc_7 + 24)
			while true do
				if rt_lt_i32(loc_1, 2) then
					while true do
						loc_2 = 0
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_6 = bit_and(loc_2, 2147483646)
				loc_2 = 0
				loc_3 = 0
				while true do
					while true do
						loc_1 = rt_add_i32(rt_shl_i32(loc_2, 5), loc_4)
						if rt_load_i32(memory_at_0, loc_1 + 12) == 0 then
							break
						end
						if bit_and(rt_load_i32(memory_at_0, loc_1 + 28), 15) ~= 3 then
							break
						end
						loc_14 = rt_load_f64(memory_at_0, loc_1 + 16)
						loc_13 = (if loc_13 < loc_14 then loc_14 else loc_13)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					while true do
						if rt_load_i32(memory_at_0, loc_1 + 44) == 0 then
							break
						end
						loc_12 = loc_1
						loc_1 = rt_add_i32(loc_12, 32)
						if bit_and(rt_load_i32(memory_at_0, loc_1 + 28), 15) ~= 3 then
							break
						end
						loc_14 = rt_load_f64(memory_at_0, loc_12 + 48)
						loc_13 = (if loc_13 < loc_14 then loc_14 else loc_13)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					loc_2 = rt_add_i32(loc_2, 2)
					loc_3 = rt_add_i32(loc_3, 2)
					if loc_6 ~= loc_3 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_5 == 0 then
				break
			end
			loc_1 = rt_add_i32(rt_shl_i32(loc_2, 5), loc_4)
			if rt_load_i32(memory_at_0, loc_1 + 12) == 0 then
				break
			end
			if bit_and(rt_load_i32(memory_at_0, loc_1 + 28), 15) ~= 3 then
				break
			end
			loc_14 = rt_load_f64(memory_at_0, loc_1 + 16)
			loc_13 = (if loc_13 < loc_14 then loc_14 else loc_13)
			break
		end
		FUNC_LIST[141](loc_0, loc_13)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[444] = --[[ tinsert(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		FUNC_LIST[214](loc_0, 1, 6)
		reg_0 = FUNC_LIST[129](loc_0, 1)
		loc_2 = reg_0
		while true do
			while true do
				while true do
					while true do
						reg_0 = FUNC_LIST[105](loc_0)
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 2, 0, }
							end)()
						end
						temp = br_map[1][rt_sub_i32(reg_0, 2)] or 1
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 2
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[220](loc_0, 2)
					loc_1 = reg_0
					if rt_le_i32(loc_1, 0) then
						desired = 1
						break
					end
					if rt_gt_i32(loc_1, loc_2) then
						desired = 1
						break
					end
					FUNC_LIST[445](loc_0, 1, loc_1, loc_2, rt_add_i32(loc_1, 1))
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[203](loc_0, 6168, 0)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = rt_add_i32(loc_2, 1)
			break
		end
		FUNC_LIST[168](loc_0, 1, loc_1)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[445] = --[[ moveelements(lua_State*, int, int, int, int, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local desired
	while true do
		loc_6 = rt_load_i32(memory_at_0, loc_0 + 12)
		loc_8 = rt_load_i32(memory_at_0, rt_sub_i32(rt_add_i32(loc_6, rt_shl_i32(loc_1, 4)), 16))
		if rt_load_i32_u8(memory_at_0, loc_8 + 4) == 0 then
			while true do
				loc_5 = rt_sub_i32(loc_3, loc_2)
				while true do
					while true do
						loc_6 = rt_load_i32(memory_at_0, loc_6)
						loc_7 = rt_load_i32(memory_at_0, loc_6 + 8)
						if loc_7 <= rt_sub_i32(loc_2, 1) then
							break
						end
						if loc_3 > loc_7 then
							break
						end
						loc_7 = rt_load_i32(memory_at_0, loc_8 + 8)
						if loc_7 <= rt_sub_i32(loc_4, 1) then
							break
						end
						if loc_7 < rt_add_i32(loc_4, loc_5) then
							break
						end
						loc_9 = rt_load_i32(memory_at_0, loc_8 + 20)
						loc_10 = rt_load_i32(memory_at_0, loc_6 + 20)
						while true do
							while true do
								if rt_lt_i32(loc_3, loc_4) then
									break
								end
								if rt_ge_i32(loc_2, loc_4) then
									break
								end
								if bit_and((if loc_1 ~= 1 then 1 else 0), (if loc_6 ~= loc_8 then 1 else 0)) ~= 0 then
									break
								end
								loc_7 = 0
								if rt_lt_i32(loc_5, 0) then
									desired = 4
									break
								end
								loc_4 = rt_sub_i32(rt_add_i32(rt_shl_i32(loc_4, 4), loc_9), 16)
								loc_1 = rt_sub_i32(rt_add_i32(rt_shl_i32(loc_2, 4), loc_10), 16)
								loc_6 = loc_5
								loc_11 = bit_and(rt_add_i32(rt_sub_i32(loc_3, loc_2), 1), 3)
								if loc_11 ~= 0 then
									while true do
										while true do
											loc_2 = rt_shl_i32(loc_6, 4)
											loc_3 = rt_add_i32(loc_2, loc_4)
											loc_2 = rt_add_i32(loc_1, loc_2)
											rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_2))
											rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
											loc_6 = rt_sub_i32(loc_6, 1)
											loc_7 = rt_add_i32(loc_7, 1)
											if loc_11 ~= loc_7 then
												continue
											end
											break
										end
										if desired then
											break
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								if loc_5 < 3 then
									desired = 4
									break
								end
								while true do
									loc_2 = rt_shl_i32(loc_6, 4)
									loc_5 = rt_add_i32(loc_2, loc_4)
									loc_3 = rt_add_i32(loc_1, loc_2)
									rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_3))
									rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
									loc_5 = rt_sub_i32(loc_2, 16)
									loc_3 = rt_add_i32(loc_5, loc_4)
									loc_5 = rt_add_i32(loc_1, loc_5)
									rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
									rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_5))
									loc_2 = rt_sub_i32(loc_2, 32)
									loc_5 = rt_add_i32(loc_2, loc_4)
									loc_2 = rt_add_i32(loc_1, loc_2)
									rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
									rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_2))
									loc_2 = rt_sub_i32(loc_6, 3)
									loc_5 = rt_shl_i32(loc_2, 4)
									loc_3 = rt_add_i32(loc_5, loc_4)
									loc_5 = rt_add_i32(loc_1, loc_5)
									rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_5))
									rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
									loc_6 = rt_sub_i32(loc_6, 4)
									if loc_2 ~= 0 then
										continue
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							loc_6 = 0
							if rt_lt_i32(loc_5, 0) then
								break
							end
							loc_3 = rt_add_i32(loc_5, 1)
							loc_11 = bit_and(loc_3, 3)
							loc_9 = rt_add_i32(rt_shl_i32(loc_4, 4), loc_9)
							loc_4 = rt_sub_i32(loc_9, 16)
							loc_10 = rt_add_i32(rt_shl_i32(loc_2, 4), loc_10)
							loc_1 = rt_sub_i32(loc_10, 16)
							if loc_5 >= 3 then
								while true do
									loc_12 = bit_and(loc_3, 4294967292)
									loc_5 = 0
									while true do
										loc_2 = rt_shl_i32(loc_6, 4)
										loc_3 = rt_add_i32(loc_2, loc_4)
										loc_7 = rt_add_i32(loc_1, loc_2)
										rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_7))
										rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_7 + 8))
										loc_3 = rt_add_i32(loc_2, loc_9)
										loc_7 = rt_add_i32(loc_2, loc_10)
										rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_7 + 8))
										rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_7))
										loc_3 = bit_or(loc_2, 32)
										loc_7 = rt_add_i32(loc_3, loc_4)
										loc_3 = rt_add_i32(loc_1, loc_3)
										rt_store_i64(memory_at_0, loc_7 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
										rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_3))
										loc_2 = bit_or(loc_2, 48)
										loc_3 = rt_add_i32(loc_2, loc_4)
										loc_2 = rt_add_i32(loc_1, loc_2)
										rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
										rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_2))
										loc_6 = rt_add_i32(loc_6, 4)
										loc_5 = rt_add_i32(loc_5, 4)
										if loc_12 ~= loc_5 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							if loc_11 == 0 then
								break
							end
							loc_2 = 0
							while true do
								loc_5 = rt_shl_i32(loc_6, 4)
								loc_3 = rt_add_i32(loc_5, loc_4)
								loc_5 = rt_add_i32(loc_1, loc_5)
								rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_5))
								rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
								loc_6 = rt_add_i32(loc_6, 1)
								loc_2 = rt_add_i32(loc_2, 1)
								if loc_11 ~= loc_2 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						if bit_and(rt_load_i32_u8(memory_at_0, loc_8 + 1), 4) == 0 then
							desired = 2
							break
						end
						FUNC_LIST[51](loc_0, loc_8, rt_add_i32(loc_8, 28))
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					while true do
						while true do
							if rt_lt_i32(loc_3, loc_4) then
								break
							end
							if rt_ge_i32(loc_2, loc_4) then
								break
							end
							if loc_6 == loc_8 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						loc_6 = 0
						if rt_lt_i32(loc_5, 0) then
							desired = 2
							break
						end
						loc_5 = rt_add_i32(rt_sub_i32(loc_3, loc_2), 1)
						while true do
							reg_0 = FUNC_LIST[157](loc_0, 1, rt_add_i32(loc_2, loc_6))
							FUNC_LIST[168](loc_0, loc_1, rt_add_i32(loc_4, loc_6))
							loc_6 = rt_add_i32(loc_6, 1)
							if loc_5 ~= loc_6 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					if rt_lt_i32(loc_5, 0) then
						break
					end
					while true do
						loc_6 = loc_5
						reg_0 = FUNC_LIST[157](loc_0, 1, rt_add_i32(loc_2, loc_6))
						FUNC_LIST[168](loc_0, loc_1, rt_add_i32(loc_4, loc_5))
						loc_5 = rt_sub_i32(loc_5, 1)
						if loc_6 ~= 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					break
				end
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[68](loc_0)
		error("out of code bounds")
	end
end
FUNC_LIST[446] = --[[ tremove(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local reg_1
	local reg_2
	while true do
		FUNC_LIST[214](loc_0, 1, 6)
		while true do
			reg_2 = FUNC_LIST[129](loc_0, 1)
			loc_2 = reg_2
			reg_0 = FUNC_LIST[221](loc_0, 2, loc_2)
			loc_1 = reg_0
			if rt_le_i32(loc_1, 0) then
				break
			end
			if rt_gt_i32(loc_1, loc_2) then
				break
			end
			loc_3 = 1
			reg_0 = FUNC_LIST[157](loc_0, 1, loc_1)
			FUNC_LIST[445](loc_0, 1, rt_add_i32(loc_1, 1), loc_2, loc_1)
			FUNC_LIST[140](loc_0)
			FUNC_LIST[168](loc_0, 1, loc_2)
			break
		end
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[447] = --[[ tsort(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		FUNC_LIST[214](loc_0, 1, 6)
		loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 12))
		reg_0 = FUNC_LIST[433](loc_2)
		loc_1 = reg_0
		if rt_load_i32_u8(memory_at_0, loc_2 + 4) == 0 then
			while true do
				reg_0 = FUNC_LIST[111](loc_0, 2)
				if rt_le_i32(reg_0, 0) then
					while true do
						reg_0 = 155
						break
					end
					if desired then
						break
					end
				else
					while true do
						FUNC_LIST[214](loc_0, 2, 7)
						reg_0 = 156
						break
					end
					if desired then
						break
					end
				end
				loc_3 = reg_0
				FUNC_LIST[106](loc_0, 2)
				if rt_gt_i32(loc_1, 0) then
					while true do
						FUNC_LIST[449](loc_0, loc_2, 0, rt_sub_i32(loc_1, 1), loc_1, loc_3)
						break
					end
					if desired then
						break
					end
				end
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[68](loc_0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[448] = --[[ sort_func(lua_State*, lua_TValue const*, lua_TValue const*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 12)
		rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_4 + 16))
		rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_4 + 24))
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_3 + 24, rt_load_i64(memory_at_0, loc_1 + 8))
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i64(memory_at_0, loc_1 + 32, rt_load_i64(memory_at_0, loc_2))
		rt_store_i64(memory_at_0, loc_1 + 40, rt_load_i64(memory_at_0, loc_2 + 8))
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_1, 48))
		FUNC_LIST[85](loc_0, loc_1, 1)
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
		loc_2 = rt_sub_i32(loc_1, 16)
		rt_store_i32(memory_at_0, loc_0 + 8, loc_2)
		while true do
			while true do
				while true do
					loc_0 = rt_load_i32(memory_at_0, rt_sub_i32(loc_1, 4))
					if not br_map[1] then
						br_map[1] = (function()
							return { [0] = 2, 0, }
						end)()
					end
					temp = br_map[1][loc_0] or 1
					if temp < 1 then
						break
					elseif temp > 1 then
						desired = 1
						break
					else
						desired = 2
						break
					end
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = (if rt_load_i32(memory_at_0, loc_2) ~= 0 then 1 else 0)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_0 = 1
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[449] = --[[ sort_rec(lua_State*, Table*, int, int, int, int (*)(lua_State*, lua_TValue const*, lua_TValue const*)) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = 0
	local loc_22 = 0
	local loc_23 = 0
	local loc_24 = 0
	local loc_25 = 0
	local loc_26 = 0
	local loc_27 = 0
	local loc_28 = 0
	local reg_0
	local desired
	while true do
		loc_8 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_8
		while true do
			while true do
				if rt_ge_i32(loc_2, loc_3) then
					break
				end
				while true do
					if loc_4 == 0 then
						while true do
							loc_9 = rt_sub_i32(loc_3, loc_2)
							if rt_le_i32(loc_9, 0) then
								desired = 2
								break
							end
							loc_6 = rt_shr_u32(rt_add_i32(loc_9, 1), 1)
							while true do
								loc_7 = rt_sub_i32(loc_6, 1)
								FUNC_LIST[458](loc_0, loc_1, loc_2, loc_3, loc_5, loc_7)
								loc_10 = (if loc_6 > 1 then 1 else 0)
								loc_6 = loc_7
								if loc_10 ~= 0 then
									continue
								end
								break
							end
							if desired then
								break
							end
							loc_12 = rt_sub_i32(loc_2, 1)
							while true do
								loc_10 = rt_add_i32(loc_8, 8)
								loc_6 = rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 20), rt_shl_i32(loc_2, 4))
								loc_15 = loc_6
								loc_11 = rt_add_i32(loc_15, 8)
								rt_store_i64(memory_at_0, loc_10, rt_load_i64(memory_at_0, loc_11))
								rt_store_i64(memory_at_0, loc_8, rt_load_i64(memory_at_0, loc_6))
								loc_7 = rt_add_i32(rt_shl_i32(loc_9, 4), loc_6)
								loc_16 = loc_7
								loc_13 = rt_add_i32(loc_16, 8)
								rt_store_i64(memory_at_0, loc_15 + 8, rt_load_i64(memory_at_0, loc_13))
								rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_7))
								rt_store_i64(memory_at_0, loc_16 + 8, rt_load_i64(memory_at_0, loc_8 + 8))
								rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_8))
								FUNC_LIST[458](loc_0, loc_1, loc_2, rt_add_i32(loc_9, loc_12), loc_5, 0)
								loc_6 = (if loc_9 > 1 then 1 else 0)
								loc_9 = rt_sub_i32(loc_9, 1)
								if loc_6 ~= 0 then
									continue
								end
								break
							end
							if desired then
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_6 = rt_load_i32(memory_at_0, loc_1 + 8)
					loc_7 = rt_load_i32(memory_at_0, loc_1 + 20)
					loc_13 = rt_shl_i32(loc_3, 4)
					loc_9 = rt_shl_i32(loc_2, 4)
					reg_0 = TABLE_LIST[0].data[loc_5](loc_0, rt_add_i32(loc_7, loc_13), rt_add_i32(loc_9, loc_7))
					loc_7 = reg_0
					if rt_load_i32(memory_at_0, loc_1 + 8) ~= loc_6 then
						desired = 1
						break
					end
					if loc_7 ~= 0 then
						while true do
							loc_10 = rt_add_i32(loc_8, 8)
							loc_7 = rt_load_i32(memory_at_0, loc_1 + 20)
							loc_6 = rt_add_i32(loc_13, loc_7)
							loc_17 = loc_6
							loc_11 = rt_add_i32(loc_17, 8)
							rt_store_i64(memory_at_0, loc_10, rt_load_i64(memory_at_0, loc_11))
							rt_store_i64(memory_at_0, loc_8, rt_load_i64(memory_at_0, loc_6))
							loc_7 = rt_add_i32(loc_7, loc_9)
							loc_18 = loc_7
							loc_12 = rt_add_i32(loc_18, 8)
							rt_store_i64(memory_at_0, loc_17 + 8, rt_load_i64(memory_at_0, loc_12))
							rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_7))
							rt_store_i64(memory_at_0, loc_18 + 8, rt_load_i64(memory_at_0, loc_8 + 8))
							rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_8))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_10 = rt_sub_i32(loc_3, loc_2)
					if loc_10 == 1 then
						desired = 2
						break
					end
					loc_11 = rt_load_i32(memory_at_0, loc_1 + 8)
					loc_6 = rt_load_i32(memory_at_0, loc_1 + 20)
					loc_7 = rt_shl_i32(rt_add_i32(loc_2, rt_shr_i32(loc_10, 1)), 4)
					reg_0 = TABLE_LIST[0].data[loc_5](loc_0, rt_add_i32(loc_6, loc_7), rt_add_i32(loc_6, loc_9))
					loc_12 = reg_0
					if rt_load_i32(memory_at_0, loc_1 + 8) ~= loc_11 then
						desired = 1
						break
					end
					loc_14 = rt_load_i32(memory_at_0, loc_1 + 20)
					loc_6 = rt_add_i32(loc_7, loc_14)
					while true do
						if loc_12 ~= 0 then
							while true do
								loc_11 = rt_add_i32(loc_8, 8)
								loc_13 = rt_add_i32(loc_6, 8)
								rt_store_i64(memory_at_0, loc_11, rt_load_i64(memory_at_0, loc_13))
								rt_store_i64(memory_at_0, loc_8, rt_load_i64(memory_at_0, loc_6))
								loc_9 = rt_add_i32(loc_9, loc_14)
								loc_19 = loc_9
								loc_12 = rt_add_i32(loc_19, 8)
								rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_12))
								rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_9))
								rt_store_i64(memory_at_0, loc_19 + 8, rt_load_i64(memory_at_0, loc_8 + 8))
								rt_store_i64(memory_at_0, loc_9, rt_load_i64(memory_at_0, loc_8))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						reg_0 = TABLE_LIST[0].data[loc_5](loc_0, rt_add_i32(loc_13, loc_14), loc_6)
						loc_9 = reg_0
						if loc_11 ~= rt_load_i32(memory_at_0, loc_1 + 8) then
							desired = 1
							break
						end
						if loc_9 == 0 then
							break
						end
						loc_11 = rt_add_i32(loc_8, 8)
						loc_6 = rt_load_i32(memory_at_0, loc_1 + 20)
						loc_9 = rt_add_i32(loc_7, loc_6)
						loc_20 = loc_9
						loc_12 = rt_add_i32(loc_20, 8)
						rt_store_i64(memory_at_0, loc_11, rt_load_i64(memory_at_0, loc_12))
						rt_store_i64(memory_at_0, loc_8, rt_load_i64(memory_at_0, loc_9))
						loc_6 = rt_add_i32(loc_6, loc_13)
						loc_21 = loc_6
						loc_13 = rt_add_i32(loc_21, 8)
						rt_store_i64(memory_at_0, loc_20 + 8, rt_load_i64(memory_at_0, loc_13))
						rt_store_i64(memory_at_0, loc_9, rt_load_i64(memory_at_0, loc_6))
						rt_store_i64(memory_at_0, loc_21 + 8, rt_load_i64(memory_at_0, loc_8 + 8))
						rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_8))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					if loc_10 == 2 then
						desired = 2
						break
					end
					loc_10 = rt_load_i32(memory_at_0, loc_1 + 20)
					loc_9 = rt_add_i32(loc_7, loc_10)
					loc_22 = loc_9
					loc_11 = rt_add_i32(loc_22, 8)
					rt_store_i64(memory_at_0, loc_8 + 8, rt_load_i64(memory_at_0, loc_11))
					rt_store_i64(memory_at_0, loc_8, rt_load_i64(memory_at_0, loc_9))
					loc_6 = rt_sub_i32(loc_3, 1)
					loc_13 = rt_shl_i32(loc_6, 4)
					loc_7 = rt_add_i32(loc_13, loc_10)
					loc_23 = loc_7
					loc_10 = rt_add_i32(loc_23, 8)
					rt_store_i64(memory_at_0, loc_22 + 8, rt_load_i64(memory_at_0, loc_10))
					rt_store_i64(memory_at_0, loc_9, rt_load_i64(memory_at_0, loc_7))
					rt_store_i64(memory_at_0, loc_23 + 8, rt_load_i64(memory_at_0, loc_8 + 8))
					rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_8))
					loc_11 = loc_2
					while true do
						loc_7 = rt_load_i32(memory_at_0, loc_1 + 8)
						while true do
							while true do
								loc_10 = rt_load_i32(memory_at_0, loc_1 + 20)
								loc_9 = rt_add_i32(loc_11, 1)
								loc_14 = rt_shl_i32(loc_9, 4)
								reg_0 = TABLE_LIST[0].data[loc_5](loc_0, rt_add_i32(loc_10, loc_14), rt_add_i32(loc_10, loc_13))
								loc_10 = reg_0
								if loc_7 ~= rt_load_i32(memory_at_0, loc_1 + 8) then
									desired = 1
									break
								end
								if loc_10 == 0 then
									while true do
										loc_10 = loc_6
										while true do
											loc_12 = rt_load_i32(memory_at_0, loc_1 + 20)
											loc_6 = rt_sub_i32(loc_10, 1)
											loc_24 = rt_shl_i32(loc_6, 4)
											reg_0 = TABLE_LIST[0].data[loc_5](loc_0, rt_add_i32(loc_13, loc_12), rt_add_i32(loc_24, loc_12))
											loc_12 = reg_0
											if loc_7 ~= rt_load_i32(memory_at_0, loc_1 + 8) then
												desired = 1
												break
											end
											if loc_12 == 0 then
												desired = 5
												break
											end
											loc_10 = loc_6
											if rt_lt_i32(loc_2, loc_6) then
												continue
											end
											break
										end
										if desired then
											break
										end
										FUNC_LIST[203](loc_0, 3181, 0)
										error("out of code bounds")
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								loc_11 = loc_9
								if rt_gt_i32(loc_3, loc_9) then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[203](loc_0, 3181, 0)
							error("out of code bounds")
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_7 = rt_load_i32(memory_at_0, loc_1 + 20)
						if rt_lt_i32(loc_9, loc_10) then
							while true do
								loc_10 = rt_add_i32(loc_7, loc_14)
								loc_25 = loc_10
								loc_11 = rt_add_i32(loc_25, 8)
								rt_store_i64(memory_at_0, loc_8 + 8, rt_load_i64(memory_at_0, loc_11))
								rt_store_i64(memory_at_0, loc_8, rt_load_i64(memory_at_0, loc_10))
								loc_7 = rt_add_i32(loc_7, loc_24)
								loc_26 = loc_7
								loc_12 = rt_add_i32(loc_26, 8)
								rt_store_i64(memory_at_0, loc_25 + 8, rt_load_i64(memory_at_0, loc_12))
								rt_store_i64(memory_at_0, loc_10, rt_load_i64(memory_at_0, loc_7))
								rt_store_i64(memory_at_0, loc_26 + 8, rt_load_i64(memory_at_0, loc_8 + 8))
								rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_8))
								loc_11 = loc_9
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					loc_6 = rt_add_i32(loc_7, loc_13)
					loc_27 = loc_6
					loc_10 = rt_add_i32(loc_27, 8)
					rt_store_i64(memory_at_0, loc_8 + 8, rt_load_i64(memory_at_0, loc_10))
					rt_store_i64(memory_at_0, loc_8, rt_load_i64(memory_at_0, loc_6))
					loc_7 = rt_add_i32(loc_7, loc_14)
					loc_28 = loc_7
					loc_13 = rt_add_i32(loc_28, 8)
					rt_store_i64(memory_at_0, loc_27 + 8, rt_load_i64(memory_at_0, loc_13))
					rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_7))
					rt_store_i64(memory_at_0, loc_28 + 8, rt_load_i64(memory_at_0, loc_8 + 8))
					rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_8))
					loc_4 = rt_add_i32(rt_shr_u32(loc_4, 1), rt_shr_u32(loc_4, 2))
					while true do
						if rt_lt_i32(rt_sub_i32(loc_9, loc_2), rt_sub_i32(loc_3, loc_9)) then
							while true do
								FUNC_LIST[449](loc_0, loc_1, loc_2, loc_11, loc_4, loc_5)
								loc_2 = rt_add_i32(loc_11, 2)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[449](loc_0, loc_1, rt_add_i32(loc_11, 2), loc_3, loc_4, loc_5)
						loc_3 = loc_11
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					if rt_lt_i32(loc_2, loc_3) then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			GLOBAL_LIST[0].value = rt_add_i32(loc_8, 16)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[203](loc_0, 3216, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[450] = --[[ tpack(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local reg_1
	local reg_2
	while true do
		reg_1 = FUNC_LIST[105](loc_0)
		loc_3 = reg_1
		FUNC_LIST[158](loc_0, loc_3, 1)
		loc_4 = rt_load_i32(memory_at_0, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
		while true do
			if rt_le_i32(loc_3, 0) then
				break
			end
			if loc_3 ~= 1 then
				while true do
					loc_7 = bit_and(loc_3, 2147483646)
					while true do
						loc_2 = rt_shl_i32(loc_1, 4)
						loc_5 = rt_add_i32(loc_2, rt_load_i32(memory_at_0, loc_4 + 20))
						loc_8 = rt_add_i32(loc_2, rt_load_i32(memory_at_0, loc_0 + 12))
						rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_8))
						rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_8 + 8))
						loc_2 = bit_or(loc_2, 16)
						loc_5 = rt_add_i32(loc_2, rt_load_i32(memory_at_0, loc_4 + 20))
						loc_2 = rt_add_i32(loc_2, rt_load_i32(memory_at_0, loc_0 + 12))
						rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_2))
						rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
						loc_1 = rt_add_i32(loc_1, 2)
						loc_6 = rt_add_i32(loc_6, 2)
						if loc_7 ~= loc_6 then
							continue
						end
						break
					end
					break
				end
			end
			if bit_and(loc_3, 1) == 0 then
				break
			end
			loc_1 = rt_shl_i32(loc_1, 4)
			loc_2 = rt_add_i32(loc_1, rt_load_i32(memory_at_0, loc_4 + 20))
			loc_1 = rt_add_i32(loc_1, rt_load_i32(memory_at_0, loc_0 + 12))
			rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
			rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
			break
		end
		reg_2 = FUNC_LIST[387](loc_0, 2899, 1)
		reg_0 = FUNC_LIST[432](loc_0, loc_4, reg_2)
		loc_1 = reg_0
		rt_store_i32(memory_at_0, loc_1 + 12, 3)
		rt_store_f64(memory_at_0, loc_1, rt_convert_f64_i32(loc_3))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[451] = --[[ tmove(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local desired
	while true do
		FUNC_LIST[214](loc_0, 1, 6)
		reg_0 = FUNC_LIST[220](loc_0, 2)
		loc_1 = reg_0
		reg_0 = FUNC_LIST[220](loc_0, 3)
		loc_3 = reg_0
		reg_0 = FUNC_LIST[220](loc_0, 4)
		loc_2 = reg_0
		reg_3 = FUNC_LIST[111](loc_0, 5)
		loc_4 = (if rt_le_i32(reg_3, 0) then 1 else 5)
		FUNC_LIST[214](loc_0, loc_4, 6)
		while true do
			while true do
				while true do
					if rt_le_i32(loc_1, loc_3) then
						while true do
							if bit_and((if rt_le_i32(loc_1, 0) then 1 else 0), (if rt_le_i32(rt_add_i32(loc_1, 2147483647), loc_3) then 1 else 0)) ~= 0 then
								desired = 3
								break
							end
							loc_5 = rt_sub_i32(loc_3, loc_1)
							if rt_lt_i32(bit_xor(loc_5, 2147483647), loc_2) then
								desired = 2
								break
							end
							loc_6 = rt_load_i32(memory_at_0, rt_sub_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_4, 4)), 16))
							if rt_load_i32_u8(memory_at_0, loc_6 + 4) ~= 0 then
								desired = 1
								break
							end
							while true do
								if rt_le_i32(loc_2, 0) then
									break
								end
								loc_7 = rt_load_i32(memory_at_0, loc_6 + 8)
								if rt_lt_i32(loc_7, rt_sub_i32(loc_2, 1)) then
									break
								end
								loc_5 = rt_add_i32(loc_2, loc_5)
								if rt_ge_i32(loc_7, loc_5) then
									break
								end
								FUNC_LIST[417](loc_0, loc_6, loc_5)
								break
							end
							if desired then
								break
							end
							FUNC_LIST[445](loc_0, loc_4, loc_1, loc_3, loc_2)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[110](loc_0, loc_4)
					reg_0 = 1
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[202](loc_0, 3, 3709)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[202](loc_0, 4, 4762)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[68](loc_0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[452] = --[[ tcreate(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[220](loc_0, 1)
		loc_1 = reg_0
		if rt_ge_i32(loc_1, 0) then
			while true do
				reg_0 = FUNC_LIST[111](loc_0, 2)
				loc_2 = reg_0
				FUNC_LIST[158](loc_0, loc_1, 0)
				while true do
					if rt_le_i32(loc_2, 0) then
						break
					end
					if loc_1 == 0 then
						break
					end
					loc_2 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), 16)
					loc_5 = bit_and(loc_1, 3)
					loc_3 = rt_load_i32(memory_at_0, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
					loc_0 = 0
					if loc_1 >= 4 then
						while true do
							loc_9 = bit_and(loc_1, 2147483644)
							while true do
								loc_1 = rt_shl_i32(loc_0, 4)
								loc_8 = rt_add_i32(loc_1, rt_load_i32(memory_at_0, loc_3 + 20))
								rt_store_i64(memory_at_0, loc_8, rt_load_i64(memory_at_0, loc_2))
								reg_0 = loc_8
								loc_8 = rt_add_i32(loc_2, 8)
								rt_store_i64(memory_at_0, reg_0 + 8, rt_load_i64(memory_at_0, loc_8))
								loc_4 = rt_add_i32(loc_1, rt_load_i32(memory_at_0, loc_3 + 20))
								rt_store_i64(memory_at_0, loc_4 + 24, rt_load_i64(memory_at_0, loc_2 + 8))
								rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_2))
								loc_4 = rt_add_i32(loc_1, rt_load_i32(memory_at_0, loc_3 + 20))
								rt_store_i64(memory_at_0, loc_4 + 40, rt_load_i64(memory_at_0, loc_2 + 8))
								rt_store_i64(memory_at_0, loc_4 + 32, rt_load_i64(memory_at_0, loc_2))
								loc_1 = rt_add_i32(loc_1, rt_load_i32(memory_at_0, loc_3 + 20))
								rt_store_i64(memory_at_0, loc_1 + 56, rt_load_i64(memory_at_0, loc_2 + 8))
								rt_store_i64(memory_at_0, loc_1 + 48, rt_load_i64(memory_at_0, loc_2))
								loc_0 = rt_add_i32(loc_0, 4)
								loc_7 = rt_add_i32(loc_7, 4)
								if loc_9 ~= loc_7 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					if loc_5 == 0 then
						break
					end
					while true do
						loc_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_3 + 20), rt_shl_i32(loc_0, 4))
						rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_2))
						rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
						loc_0 = rt_add_i32(loc_0, 1)
						loc_6 = rt_add_i32(loc_6, 1)
						if loc_5 ~= loc_6 then
							continue
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					break
				end
				reg_0 = 1
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[202](loc_0, 1, 4652)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[453] = --[[ tfind(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		FUNC_LIST[214](loc_0, 1, 6)
		FUNC_LIST[215](loc_0, 2)
		reg_0 = FUNC_LIST[221](loc_0, 3, 1)
		loc_1 = reg_0
		if rt_gt_i32(loc_1, 0) then
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 12)
				loc_5 = rt_load_i32(memory_at_0, loc_2)
				reg_0 = FUNC_LIST[425](loc_5, loc_1)
				loc_3 = reg_0
				loc_4 = rt_load_i32(memory_at_0, loc_3 + 12)
				if loc_4 ~= 0 then
					while true do
						loc_6 = rt_add_i32(loc_2, 16)
						while true do
							while true do
								if loc_4 ~= rt_load_i32(memory_at_0, loc_2 + 28) then
									break
								end
								reg_0 = FUNC_LIST[594](loc_0, loc_6, loc_3)
								if reg_0 == 0 then
									break
								end
								FUNC_LIST[142](loc_0, loc_1)
								reg_0 = 1
								desired = 0
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
									continue
								end
								break
							end
							loc_1 = rt_add_i32(loc_1, 1)
							reg_0 = FUNC_LIST[425](loc_5, loc_1)
							loc_3 = reg_0
							loc_4 = rt_load_i32(memory_at_0, loc_3 + 12)
							if loc_4 ~= 0 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						break
					end
				end
				FUNC_LIST[140](loc_0)
				reg_0 = 1
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[202](loc_0, 3, 4611)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[454] = --[[ tclear(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		FUNC_LIST[214](loc_0, 1, 6)
		loc_1 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 12))
		if rt_load_i32_u8(memory_at_0, loc_1 + 4) ~= 0 then
			while true do
				FUNC_LIST[68](loc_0)
				error("out of code bounds")
			end
		end
		FUNC_LIST[435](loc_1)
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[455] = --[[ tfreeze(lua_State*) ]] function(loc_0)
	local reg_0
	local desired
	while true do
		FUNC_LIST[214](loc_0, 1, 6)
		while true do
			reg_0 = FUNC_LIST[160](loc_0, 1)
			if reg_0 == 0 then
				while true do
					reg_0 = FUNC_LIST[226](loc_0, 1, 4268)
					if reg_0 ~= 0 then
						desired = 1
						break
					end
					FUNC_LIST[159](loc_0, 1, 1)
					FUNC_LIST[110](loc_0, 1)
					reg_0 = 1
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[202](loc_0, 1, 2840)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[202](loc_0, 1, 4280)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[456] = --[[ tisfrozen(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	while true do
		FUNC_LIST[214](loc_0, 1, 6)
		reg_1 = FUNC_LIST[160](loc_0, 1)
		FUNC_LIST[150](loc_0, reg_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[457] = --[[ tclone(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		FUNC_LIST[214](loc_0, 1, 6)
		reg_0 = FUNC_LIST[226](loc_0, 1, 4268)
		if reg_0 ~= 0 then
			while true do
				FUNC_LIST[202](loc_0, 1, 4280)
				error("out of code bounds")
			end
		end
		reg_0 = FUNC_LIST[434](loc_0, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 12)))
		loc_2 = reg_0
		rt_store_i32(memory_at_0, loc_1 + 12, 6)
		rt_store_i32(memory_at_0, loc_1, loc_2)
		FUNC_LIST[97](loc_0, loc_1)
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[458] = --[[ sort_siftheap(lua_State*, Table*, int, int, int (*)(lua_State*, lua_TValue const*, lua_TValue const*), int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local reg_0
	local desired
	while true do
		loc_8 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_8
		while true do
			while true do
				loc_9 = rt_shl_i32(loc_5, 1)
				loc_6 = rt_add_i32(loc_9, 2)
				loc_12 = rt_sub_i32(loc_3, loc_2)
				if rt_gt_i32(loc_6, loc_12) then
					while true do
						loc_7 = loc_5
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				while true do
					loc_7 = rt_load_i32(memory_at_0, loc_1 + 8)
					loc_10 = rt_load_i32(memory_at_0, loc_1 + 20)
					loc_13 = rt_shl_i32(rt_add_i32(loc_2, loc_5), 4)
					loc_11 = rt_shl_i32(loc_2, 4)
					loc_9 = bit_or(loc_9, 1)
					reg_0 = TABLE_LIST[0].data[loc_4](loc_0, rt_add_i32(loc_10, loc_13), rt_add_i32(rt_add_i32(loc_11, loc_10), rt_shl_i32(loc_9, 4)))
					loc_10 = reg_0
					if rt_load_i32(memory_at_0, loc_1 + 8) ~= loc_7 then
						desired = 1
						break
					end
					loc_14 = rt_add_i32(loc_11, rt_load_i32(memory_at_0, loc_1 + 20))
					loc_9 = (if loc_10 ~= 0 then loc_9 else loc_5)
					reg_0 = TABLE_LIST[0].data[loc_4](loc_0, rt_add_i32(loc_14, rt_shl_i32(loc_9, 4)), rt_add_i32(rt_shl_i32(loc_6, 4), loc_14))
					loc_10 = reg_0
					if loc_7 ~= rt_load_i32(memory_at_0, loc_1 + 8) then
						desired = 1
						break
					end
					loc_7 = (if loc_10 ~= 0 then loc_6 else loc_9)
					if loc_7 == loc_5 then
						while true do
							loc_9 = rt_shl_i32(loc_5, 1)
							loc_7 = loc_5
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_9 = rt_add_i32(loc_8, 8)
					loc_6 = rt_load_i32(memory_at_0, loc_1 + 20)
					loc_5 = rt_add_i32(loc_13, loc_6)
					loc_15 = loc_5
					loc_10 = rt_add_i32(loc_15, 8)
					rt_store_i64(memory_at_0, loc_9, rt_load_i64(memory_at_0, loc_10))
					rt_store_i64(memory_at_0, loc_8, rt_load_i64(memory_at_0, loc_5))
					loc_6 = rt_add_i32(rt_add_i32(loc_6, loc_11), rt_shl_i32(loc_7, 4))
					loc_16 = loc_6
					loc_11 = rt_add_i32(loc_16, 8)
					rt_store_i64(memory_at_0, loc_15 + 8, rt_load_i64(memory_at_0, loc_11))
					rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_6))
					rt_store_i64(memory_at_0, loc_16 + 8, rt_load_i64(memory_at_0, loc_8 + 8))
					rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_8))
					loc_5 = loc_7
					loc_9 = rt_shl_i32(loc_5, 1)
					loc_6 = rt_add_i32(loc_9, 2)
					if rt_ge_i32(loc_12, loc_6) then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_12 ~= bit_or(loc_9, 1) then
					break
				end
				loc_5 = rt_load_i32(memory_at_0, loc_1 + 8)
				loc_6 = rt_load_i32(memory_at_0, loc_1 + 20)
				loc_11 = rt_add_i32(loc_2, loc_7)
				reg_0 = TABLE_LIST[0].data[loc_4](loc_0, rt_add_i32(loc_6, rt_shl_i32(loc_11, 4)), rt_add_i32(rt_shl_i32(loc_3, 4), loc_6))
				loc_7 = reg_0
				if rt_load_i32(memory_at_0, loc_1 + 8) ~= loc_5 then
					desired = 1
					break
				end
				if loc_7 == 0 then
					break
				end
				loc_7 = rt_add_i32(loc_8, 8)
				loc_5 = rt_load_i32(memory_at_0, loc_1 + 20)
				loc_1 = rt_add_i32(loc_5, rt_shl_i32(loc_11, 4))
				loc_17 = loc_1
				loc_6 = rt_add_i32(loc_17, 8)
				rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_6))
				rt_store_i64(memory_at_0, loc_8, rt_load_i64(memory_at_0, loc_1))
				loc_5 = rt_add_i32(rt_shl_i32(loc_3, 4), loc_5)
				loc_18 = loc_5
				loc_11 = rt_add_i32(loc_18, 8)
				rt_store_i64(memory_at_0, loc_17 + 8, rt_load_i64(memory_at_0, loc_11))
				rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_5))
				rt_store_i64(memory_at_0, loc_18 + 8, rt_load_i64(memory_at_0, loc_8 + 8))
				rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_8))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			GLOBAL_LIST[0].value = rt_add_i32(loc_8, 16)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[203](loc_0, 3216, 0)
		error("out of code bounds")
	end
end
FUNC_LIST[459] = --[[ luaT_init(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	local reg_2
	while true do
		while true do
			loc_2 = rt_shl_i32(loc_1, 2)
			loc_4 = rt_load_i32(memory_at_0, rt_add_i32(loc_2, 9984))
			reg_2 = FUNC_LIST[649](loc_4)
			reg_0 = FUNC_LIST[387](loc_0, loc_4, reg_2)
			loc_4 = reg_0
			rt_store_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_2, rt_load_i32(memory_at_0, loc_0 + 16)), 1484), loc_4)
			loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_2, rt_load_i32(memory_at_0, loc_0 + 16)), 1484))
			rt_store_i32_n8(memory_at_0, loc_2 + 1, bit_or(rt_load_i32_u8(memory_at_0, loc_2 + 1), 8))
			loc_1 = rt_add_i32(loc_1, 1)
			if loc_1 ~= 11 then
				continue
			end
			break
		end
		while true do
			loc_1 = rt_shl_i32(loc_3, 2)
			loc_2 = rt_load_i32(memory_at_0, rt_add_i32(loc_1, 10032))
			reg_2 = FUNC_LIST[649](loc_2)
			reg_0 = FUNC_LIST[387](loc_0, loc_2, reg_2)
			loc_2 = reg_0
			rt_store_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_1, rt_load_i32(memory_at_0, loc_0 + 16)), 1528), loc_2)
			loc_1 = rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_1, rt_load_i32(memory_at_0, loc_0 + 16)), 1528))
			rt_store_i32_n8(memory_at_0, loc_1 + 1, bit_or(rt_load_i32_u8(memory_at_0, loc_1 + 1), 8))
			loc_3 = rt_add_i32(loc_3, 1)
			if loc_3 ~= 21 then
				continue
			end
			break
		end
		break
	end
end
FUNC_LIST[460] = --[[ luaT_gettm(Table*, TMS, TString*) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[426](loc_0, loc_2)
		loc_2 = reg_0
		if rt_load_i32(memory_at_0, loc_2 + 12) ~= 0 then
			while true do
				reg_0 = loc_2
				break
			end
		else
			while true do
				rt_store_i32_n8(memory_at_0, loc_0 + 3, bit_or(rt_load_i32_u8(memory_at_0, loc_0 + 3), rt_shl_i32(1, loc_1)))
				reg_0 = 0
				break
			end
		end
		loc_2 = reg_0
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[461] = --[[ luaT_gettmbyobj(lua_State*, lua_TValue const*, TMS) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						loc_3 = rt_load_i32(memory_at_0, loc_1 + 12)
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 0, 2, 1, }
							end)()
						end
						temp = br_map[1][rt_sub_i32(loc_3, 6)] or 2
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 2
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_1), 16)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_1), 8)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = rt_add_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 16), rt_shl_i32(loc_3, 2)), 1440)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_1 = reg_0
		loc_1 = rt_load_i32(memory_at_0, loc_1)
		if loc_1 == 0 then
			while true do
				reg_0 = 9344
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = FUNC_LIST[426](loc_1, rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 16), rt_shl_i32(loc_2, 2)) + 1528))
		break
	end
	return reg_0
end
FUNC_LIST[462] = --[[ luaT_objtypenamestr(lua_State*, lua_TValue const*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						while true do
							loc_3 = rt_load_i32(memory_at_0, loc_1 + 12)
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 1, 2, 2, 2, 2, 2, 0, }
								end)()
							end
							temp = br_map[1][rt_sub_i32(loc_3, 2)] or 2
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 3
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_2 = rt_load_i32(memory_at_0, loc_1)
						if rt_load_i32_u8(memory_at_0, loc_2 + 3) == 129 then
							desired = 3
							break
						end
						loc_2 = rt_load_i32(memory_at_0, loc_2 + 8)
						if loc_2 == 0 then
							desired = 3
							break
						end
						reg_0 = FUNC_LIST[426](loc_2, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1604))
						loc_3 = reg_0
						if rt_load_i32(memory_at_0, loc_3 + 12) ~= 5 then
							while true do
								reg_0 = rt_add_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 16), rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 12), 2)), 1484)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_0 = loc_3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_3 = reg_0
						reg_0 = rt_load_i32(memory_at_0, loc_3)
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = rt_load_i32(memory_at_0, loc_1 + 8)
					if loc_2 > 127 then
						break
					end
					loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 16), rt_shl_i32(loc_2, 2)), 2788))
					if loc_2 ~= 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
				loc_4 = rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_2, rt_shl_i32(loc_3, 2)), 1440))
				if loc_4 ~= 0 then
					while true do
						reg_0 = FUNC_LIST[426](loc_4, rt_load_i32(memory_at_0, loc_2 + 1604))
						loc_3 = reg_0
						if rt_load_i32(memory_at_0, loc_3 + 12) == 5 then
							desired = 1
							break
						end
						loc_3 = rt_load_i32(memory_at_0, loc_1 + 12)
						reg_0 = rt_load_i32(memory_at_0, loc_0 + 16)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = reg_0
				loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_2, rt_shl_i32(loc_3, 2)), 1484))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = loc_2
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = rt_load_i32(memory_at_0, loc_3)
		break
	end
	return reg_0
end
FUNC_LIST[463] = --[[ luaT_objtypename(lua_State*, lua_TValue const*) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[462](loc_0, loc_1)
		reg_0 = rt_add_i32(reg_0, 20)
		break
	end
	return reg_0
end
FUNC_LIST[464] = --[[ luaU_newudata(lua_State*, unsigned long, int) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	while true do
		if loc_1 >= 2147483624 then
			while true do
				FUNC_LIST[351](loc_0)
				error("out of code bounds")
			end
		end
		reg_0 = FUNC_LIST[354](loc_0, rt_add_i32(loc_1, 16), rt_load_i32_u8(memory_at_0, loc_0 + 4))
		loc_3 = reg_0
		loc_4 = rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 20)
		rt_store_i32_n8(memory_at_0, loc_3, 8)
		rt_store_i32_n8(memory_at_0, loc_3 + 1, bit_and(loc_4, 3))
		loc_0 = rt_load_i32_u8(memory_at_0, loc_0 + 4)
		rt_store_i32(memory_at_0, loc_3 + 8, 0)
		rt_store_i32(memory_at_0, loc_3 + 4, loc_1)
		rt_store_i32_n8(memory_at_0, loc_3 + 2, loc_0)
		rt_store_i32_n8(memory_at_0, loc_3 + 3, loc_2)
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[465] = --[[ luaU_freeudata(lua_State*, Udata*, lua_Page*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local desired
	while true do
		while true do
			loc_3 = rt_load_i32_i8(memory_at_0, loc_1 + 3)
			if rt_ge_i32(loc_3, 0) then
				while true do
					loc_3 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 16), rt_shl_i32(loc_3, 2)) + 1764)
					if loc_3 == 0 then
						desired = 1
						break
					end
					TABLE_LIST[0].data[loc_3](loc_0, rt_add_i32(loc_1, 16))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_3 ~= 4294967168 then
				break
			end
			loc_3 = rt_add_i32(loc_1, 16)
			loc_4 = rt_load_i32(memory_at_0, rt_sub_i32(rt_add_i32(loc_3, rt_load_i32(memory_at_0, loc_1 + 4)), 4))
			if loc_4 == 0 then
				break
			end
			TABLE_LIST[0].data[loc_4](loc_3)
			break
		end
		FUNC_LIST[356](loc_0, loc_1, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 4), 16), rt_load_i32_u8(memory_at_0, loc_1 + 2), loc_2)
		break
	end
end
FUNC_LIST[466] = --[[ luaopen_utf8 ]] function(loc_0)
	local reg_0
	while true do
		FUNC_LIST[228](loc_0, 5244, 10128)
		FUNC_LIST[145](loc_0, 10176, 14)
		FUNC_LIST[165](loc_0, 4294967294, 2673)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[467] = --[[ byteoffset(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		loc_6 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_6
		reg_0 = FUNC_LIST[209](loc_0, 1, rt_add_i32(loc_6, 12))
		loc_7 = reg_0
		reg_0 = FUNC_LIST[220](loc_0, 2)
		loc_3 = reg_0
		reg_0 = FUNC_LIST[221](loc_0, 3, (if rt_ge_i32(loc_3, 0) then 1 else rt_add_i32(rt_load_i32(memory_at_0, loc_6 + 12), 1)))
		loc_1 = reg_0
		loc_4 = rt_load_i32(memory_at_0, loc_6 + 12)
		while true do
			while true do
				if rt_lt_i32(loc_1, 0) then
					while true do
						if rt_sub_i32(0, loc_1) > loc_4 then
							desired = 2
							break
						end
						reg_0 = rt_add_i32(rt_add_i32(loc_1, loc_4), 1)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_1 = reg_0
				if rt_le_i32(loc_1, 0) then
					break
				end
				loc_2 = rt_sub_i32(loc_1, 1)
				if rt_lt_i32(loc_4, loc_2) then
					break
				end
				while true do
					while true do
						while true do
							if loc_3 == 0 then
								while true do
									if loc_1 == 1 then
										while true do
											loc_2 = 0
											desired = 5
											break
										end
										if desired then
											break
										end
									end
									while true do
										if rt_gt_i32(rt_load_i32_i8(memory_at_0, rt_add_i32(loc_2, loc_7)), 4294967231) then
											desired = 5
											break
										end
										loc_1 = (if rt_gt_i32(loc_2, 1) then 1 else 0)
										loc_2 = rt_sub_i32(loc_2, 1)
										if loc_1 ~= 0 then
											continue
										end
										break
									end
									if desired then
										break
									end
									loc_2 = 0
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if rt_le_i32(rt_load_i32_i8(memory_at_0, rt_add_i32(loc_2, loc_7)), 4294967231) then
								desired = 1
								break
							end
							while true do
								while true do
									if rt_ge_i32(loc_3, 0) then
										while true do
											loc_5 = rt_sub_i32(loc_3, 1)
											if loc_3 == 1 then
												while true do
													loc_1 = loc_5
													desired = 6
													break
												end
												if desired then
													break
												end
											end
											if loc_1 <= loc_4 then
												desired = 7
												break
											end
											loc_1 = loc_5
											desired = 6
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									if loc_2 == 0 then
										desired = 4
										break
									end
									while true do
										while true do
											if loc_2 < 2 then
												while true do
													loc_2 = 0
													desired = 9
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											loc_2 = rt_sub_i32(loc_2, 1)
											if rt_lt_i32(rt_load_i32_i8(memory_at_0, rt_add_i32(loc_2, loc_7)), 4294967232) then
												desired = 8
												break
											end
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
												continue
											end
											break
										end
										loc_1 = rt_add_i32(loc_3, 1)
										if rt_gt_i32(loc_3, 4294967294) then
											desired = 6
											break
										end
										loc_3 = loc_1
										if loc_2 ~= 0 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									desired = 6
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								while true do
									loc_2 = rt_add_i32(loc_2, 1)
									if rt_lt_i32(rt_load_i32_i8(memory_at_0, rt_add_i32(loc_2, loc_7)), 4294967232) then
										continue
									end
									loc_1 = rt_sub_i32(loc_5, 1)
									if rt_lt_i32(loc_5, 2) then
										desired = 6
										break
									end
									loc_5 = loc_1
									if rt_lt_i32(loc_2, loc_4) then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_1 ~= 0 then
								desired = 4
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[142](loc_0, rt_add_i32(loc_2, 1))
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[140](loc_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				GLOBAL_LIST[0].value = rt_add_i32(loc_6, 16)
				reg_0 = 1
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[202](loc_0, 3, 4630)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[203](loc_0, 3901, 0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[468] = --[[ codepoint(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_6 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_6
		reg_0 = FUNC_LIST[209](loc_0, 1, rt_add_i32(loc_6, 12))
		loc_7 = reg_0
		reg_0 = loc_0
		reg_1 = 3
		while true do
			reg_2 = FUNC_LIST[221](loc_0, 2, 1)
			loc_1 = reg_2
			if rt_ge_i32(loc_1, 0) then
				while true do
					reg_2 = loc_1
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = rt_load_i32(memory_at_0, loc_6 + 12)
			reg_2 = 0
			if loc_3 < rt_sub_i32(0, loc_1) then
				break
			end
			reg_2 = rt_add_i32(rt_add_i32(loc_1, loc_3), 1)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_2 = reg_2
		reg_0 = FUNC_LIST[221](reg_0, reg_1, loc_2)
		loc_3 = reg_0
		loc_4 = rt_load_i32(memory_at_0, loc_6 + 12)
		while true do
			reg_0 = loc_3
			if rt_ge_i32(loc_3, 0) then
				break
			end
			loc_1 = 0
			reg_0 = loc_1
			if rt_sub_i32(0, loc_3) > loc_4 then
				break
			end
			reg_0 = rt_add_i32(rt_add_i32(loc_3, loc_4), 1)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_1 = reg_0
		while true do
			while true do
				if rt_gt_i32(loc_2, 0) then
					while true do
						if rt_gt_i32(loc_1, loc_4) then
							desired = 2
							break
						end
						while true do
							if rt_lt_i32(loc_1, loc_2) then
								break
							end
							FUNC_LIST[213](loc_0, rt_add_i32(rt_sub_i32(loc_1, loc_2), 1), 3159)
							loc_5 = rt_sub_i32(rt_add_i32(loc_2, loc_7), 1)
							loc_7 = rt_add_i32(loc_1, loc_7)
							if loc_5 >= loc_7 then
								break
							end
							while true do
								loc_4 = rt_load_i32_i8(memory_at_0, loc_5)
								loc_2 = bit_and(loc_4, 255)
								loc_3 = 0
								loc_1 = 0
								if rt_lt_i32(loc_4, 0) then
									while true do
										while true do
											if bit_and(loc_2, 64) ~= 0 then
												while true do
													loc_1 = rt_add_i32(loc_1, 1)
													loc_4 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_1, loc_5))
													loc_3 = bit_or(bit_and(loc_4, 63), rt_shl_i32(loc_3, 6))
													loc_2 = rt_shl_i32(loc_2, 1)
													if bit_and(loc_4, 192) == 128 then
														desired = 7
														break
													end
													desired = 1
													break
												end
												if desired then
													if desired == 7 then
														desired = nil
														continue
													end
													break
												end
											end
											break
										end
										if desired then
											break
										end
										if loc_1 > 3 then
											desired = 1
											break
										end
										loc_2 = bit_or(loc_3, rt_shl_i32(bit_and(loc_2, 63), rt_mul_i32(loc_1, 5)))
										if loc_2 > 1114111 then
											desired = 1
											break
										end
										loc_3 = bit_and((if bit_and(loc_2, 2095104) ~= 55296 then 1 else 0), (if rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_1, 2), 10192)) < loc_2 then 1 else 0))
										if loc_3 == 0 then
											desired = 1
											break
										end
										reg_0 = rt_add_i32((if loc_3 ~= 0 then loc_1 else 0), loc_5)
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
											continue
										end
										break
									end
								else
									while true do
										reg_0 = loc_5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
											continue
										end
										break
									end
								end
								loc_5 = reg_0
								FUNC_LIST[142](loc_0, loc_2)
								loc_8 = rt_add_i32(loc_8, 1)
								loc_5 = rt_add_i32(loc_5, 1)
								if loc_7 > loc_5 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							break
						end
						GLOBAL_LIST[0].value = rt_add_i32(loc_6, 16)
						reg_0 = loc_8
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[202](loc_0, 2, 4694)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[202](loc_0, 3, 4694)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[203](loc_0, 4724, 0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[469] = --[[ utfchar(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 544)
		GLOBAL_LIST[0].value = loc_3
		while true do
			while true do
				while true do
					reg_0 = FUNC_LIST[105](loc_0)
					loc_7 = reg_0
					if loc_7 == 1 then
						while true do
							reg_0 = FUNC_LIST[220](loc_0, 1)
							loc_1 = reg_0
							if loc_1 >= 1114112 then
								desired = 2
								break
							end
							loc_2 = 1
							loc_4 = 7
							if loc_1 >= 128 then
								while true do
									loc_5 = 63
									while true do
										loc_4 = loc_2
										rt_store_i32_n8(memory_at_0, rt_sub_i32(loc_3, loc_4) + 544, bit_or(bit_and(loc_1, 63), 128))
										loc_2 = rt_add_i32(loc_2, 1)
										loc_1 = rt_shr_u32(loc_1, 6)
										loc_5 = rt_shr_u32(loc_5, 1)
										if loc_1 > loc_5 then
											continue
										end
										break
									end
									if desired then
										break
									end
									loc_4 = rt_sub_i32(7, loc_4)
									reg_0 = bit_or(loc_1, rt_shl_i32(bit_xor(loc_5, 4294967295), 1))
									break
								end
								if desired then
									break
								end
							else
								while true do
									reg_0 = loc_1
									break
								end
								if desired then
									break
								end
							end
							loc_1 = reg_0
							rt_store_i32_n8(memory_at_0, rt_add_i32(loc_4, rt_add_i32(loc_3, 536)), loc_1)
							FUNC_LIST[145](loc_0, rt_add_i32(rt_sub_i32(loc_3, loc_2), 544), loc_2)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[231](loc_0, rt_add_i32(loc_3, 8))
					if rt_gt_i32(loc_7, 0) then
						while true do
							loc_8 = rt_add_i32(loc_3, 544)
							loc_6 = 1
							while true do
								reg_0 = FUNC_LIST[220](loc_0, loc_6)
								loc_1 = reg_0
								if loc_1 >= 1114112 then
									desired = 1
									break
								end
								loc_5 = 63
								loc_2 = 1
								loc_4 = 7
								if loc_1 >= 128 then
									while true do
										while true do
											loc_4 = loc_2
											rt_store_i32_n8(memory_at_0, rt_sub_i32(loc_3, loc_4) + 544, bit_or(bit_and(loc_1, 63), 128))
											loc_2 = rt_add_i32(loc_2, 1)
											loc_1 = rt_shr_u32(loc_1, 6)
											loc_5 = rt_shr_u32(loc_5, 1)
											if loc_1 > loc_5 then
												continue
											end
											break
										end
										if desired then
											break
										end
										loc_4 = rt_sub_i32(7, loc_4)
										reg_0 = bit_or(loc_1, rt_shl_i32(bit_xor(loc_5, 4294967295), 1))
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
											continue
										end
										break
									end
								else
									while true do
										reg_0 = loc_1
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
											continue
										end
										break
									end
								end
								loc_1 = reg_0
								rt_store_i32_n8(memory_at_0, rt_add_i32(loc_4, rt_add_i32(loc_3, 536)), loc_1)
								FUNC_LIST[235](rt_add_i32(loc_3, 8), rt_sub_i32(loc_8, loc_2), loc_2)
								loc_1 = (if loc_6 == loc_7 then 1 else 0)
								loc_6 = rt_add_i32(loc_6, 1)
								if loc_1 == 0 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[239](rt_add_i32(loc_3, 8))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				GLOBAL_LIST[0].value = rt_add_i32(loc_3, 544)
				reg_0 = 1
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[202](loc_0, 1, 4670)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[202](loc_0, loc_6, 4670)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[470] = --[[ utflen(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local desired
	while true do
		loc_6 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_6
		reg_0 = FUNC_LIST[209](loc_0, 1, rt_add_i32(loc_6, 12))
		loc_9 = reg_0
		while true do
			reg_0 = FUNC_LIST[221](loc_0, 2, 1)
			loc_2 = reg_0
			if rt_ge_i32(loc_2, 0) then
				while true do
					reg_0 = loc_2
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = rt_load_i32(memory_at_0, loc_6 + 12)
			reg_0 = 0
			if loc_3 < rt_sub_i32(0, loc_2) then
				break
			end
			reg_0 = rt_add_i32(rt_add_i32(loc_2, loc_3), 1)
			break
		end
		loc_1 = reg_0
		reg_0 = FUNC_LIST[221](loc_0, 3, 4294967295)
		loc_3 = reg_0
		loc_2 = rt_load_i32(memory_at_0, loc_6 + 12)
		while true do
			reg_0 = loc_3
			if rt_ge_i32(loc_3, 0) then
				break
			end
			reg_0 = 0
			if rt_sub_i32(0, loc_3) > loc_2 then
				break
			end
			reg_0 = rt_add_i32(rt_add_i32(loc_2, loc_3), 1)
			break
		end
		loc_7 = reg_0
		while true do
			while true do
				while true do
					if rt_le_i32(loc_1, 0) then
						break
					end
					loc_8 = rt_sub_i32(loc_1, 1)
					if rt_lt_i32(loc_2, loc_8) then
						break
					end
					while true do
						if rt_ge_i32(loc_2, loc_7) then
							while true do
								if rt_le_i32(loc_1, loc_7) then
									desired = 4
									break
								end
								loc_1 = 1
								desired = 1
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						FUNC_LIST[202](loc_0, 3, 3346)
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						loc_5 = rt_add_i32(loc_8, loc_9)
						loc_1 = rt_load_i32_i8(memory_at_0, loc_5)
						if rt_lt_i32(loc_1, 0) then
							while true do
								loc_1 = bit_and(loc_1, 255)
								loc_3 = 0
								loc_2 = 0
								while true do
									if bit_and(loc_1, 64) ~= 0 then
										while true do
											loc_2 = rt_add_i32(loc_2, 1)
											loc_10 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, loc_5))
											loc_3 = bit_or(bit_and(loc_10, 63), rt_shl_i32(loc_3, 6))
											loc_1 = rt_shl_i32(loc_1, 1)
											if bit_and(loc_10, 192) == 128 then
												desired = 6
												break
											end
											desired = 2
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
												continue
											end
											break
										end
									end
									break
								end
								if desired then
									break
								end
								if loc_2 > 3 then
									desired = 2
									break
								end
								loc_1 = bit_or(loc_3, rt_shl_i32(bit_and(loc_1, 63), rt_mul_i32(loc_2, 5)))
								if loc_1 > 1114111 then
									desired = 2
									break
								end
								loc_1 = bit_and((if bit_and(loc_1, 2095104) ~= 55296 then 1 else 0), (if rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_2, 2), 10192)) < loc_1 then 1 else 0))
								if loc_1 == 0 then
									desired = 2
									break
								end
								reg_0 = rt_add_i32((if loc_1 ~= 0 then loc_2 else 0), loc_5)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						else
							while true do
								reg_0 = loc_5
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						loc_5 = reg_0
						loc_1 = 1
						loc_4 = rt_add_i32(loc_4, 1)
						loc_8 = rt_add_i32(rt_sub_i32(loc_5, loc_9), 1)
						if rt_gt_i32(loc_7, loc_8) then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[202](loc_0, 2, 3375)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[140](loc_0)
			loc_4 = rt_add_i32(loc_8, 1)
			loc_1 = 2
			break
		end
		FUNC_LIST[142](loc_0, loc_4)
		GLOBAL_LIST[0].value = rt_add_i32(loc_6, 16)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[471] = --[[ iter_codes(lua_State*) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[209](loc_0, 1, 0)
		FUNC_LIST[149](loc_0, 173, 0, 0, 0)
		FUNC_LIST[110](loc_0, 1)
		FUNC_LIST[142](loc_0, 0)
		reg_0 = 3
		break
	end
	return reg_0
end
FUNC_LIST[472] = --[[ iter_aux(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	while true do
		loc_7 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_7
		reg_0 = FUNC_LIST[209](loc_0, 1, rt_add_i32(loc_7, 12))
		loc_2 = reg_0
		reg_0 = FUNC_LIST[122](loc_0, 2, 0)
		loc_1 = reg_0
		loc_3 = rt_load_i32(memory_at_0, loc_7 + 12)
		while true do
			if rt_le_i32(loc_1, 0) then
				break
			end
			if rt_gt_i32(loc_1, loc_3) then
				while true do
					loc_4 = rt_sub_i32(loc_1, 1)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				loc_4 = loc_1
				loc_1 = rt_add_i32(loc_4, 1)
				if rt_lt_i32(rt_load_i32_i8(memory_at_0, rt_add_i32(loc_2, loc_4)), 4294967232) then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			if rt_gt_i32(loc_3, loc_4) then
				while true do
					loc_6 = rt_add_i32(loc_2, loc_4)
					loc_2 = rt_load_i32_i8(memory_at_0, loc_6)
					loc_1 = bit_and(loc_2, 255)
					if rt_lt_i32(loc_2, 0) then
						while true do
							loc_3 = 0
							loc_2 = 0
							while true do
								if bit_and(loc_1, 64) ~= 0 then
									while true do
										loc_2 = rt_add_i32(loc_2, 1)
										loc_5 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, loc_6))
										loc_3 = bit_or(bit_and(loc_5, 63), rt_shl_i32(loc_3, 6))
										loc_1 = rt_shl_i32(loc_1, 1)
										if bit_and(loc_5, 192) == 128 then
											desired = 4
											break
										end
										desired = 1
										break
									end
									if desired then
										if desired == 4 then
											desired = nil
											continue
										end
										break
									end
								end
								break
							end
							if desired then
								break
							end
							if loc_2 > 3 then
								desired = 1
								break
							end
							loc_1 = bit_or(loc_3, rt_shl_i32(bit_and(loc_1, 63), rt_mul_i32(loc_2, 5)))
							if loc_1 > 1114111 then
								desired = 1
								break
							end
							loc_3 = bit_and((if bit_and(loc_1, 2095104) ~= 55296 then 1 else 0), (if rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_2, 2), 10192)) < loc_1 then 1 else 0))
							if loc_3 == 0 then
								desired = 1
								break
							end
							reg_0 = rt_add_i32((if loc_3 ~= 0 then loc_2 else 0), loc_6)
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_0 = loc_6
							break
						end
						if desired then
							break
						end
					end
					loc_6 = reg_0
					if rt_le_i32(rt_load_i32_i8(memory_at_0, loc_6 + 1), 4294967231) then
						desired = 1
						break
					end
					FUNC_LIST[142](loc_0, rt_add_i32(loc_4, 1))
					FUNC_LIST[142](loc_0, loc_1)
					reg_0 = 2
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_5
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_5 = reg_0
			GLOBAL_LIST[0].value = rt_add_i32(loc_7, 16)
			reg_0 = loc_5
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[203](loc_0, 4724, 0)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[473] = --[[ luaopen_vector ]] function(loc_0)
	local reg_0
	while true do
		FUNC_LIST[228](loc_0, 2312, 10208)
		FUNC_LIST[144](loc_0, 0e0, 0e0, 0e0)
		FUNC_LIST[165](loc_0, 4294967294, 2651)
		FUNC_LIST[144](loc_0, 1e0, 1e0, 1e0)
		FUNC_LIST[165](loc_0, 4294967294, 4047)
		if rt_load_i32_u8(memory_at_0, 36364) == 1 then
			while true do
				FUNC_LIST[158](loc_0, 0, 1)
				FUNC_LIST[144](loc_0, 0e0, 0e0, 0e0)
				FUNC_LIST[110](loc_0, 4294967294)
				reg_0 = FUNC_LIST[169](loc_0, 4294967294)
				FUNC_LIST[106](loc_0, 4294967294)
				FUNC_LIST[149](loc_0, 179, 0, 0, 0)
				FUNC_LIST[165](loc_0, 4294967294, 1355)
				FUNC_LIST[159](loc_0, 4294967295, 1)
				FUNC_LIST[106](loc_0, 4294967294)
				break
			end
		end
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[474] = --[[ vector_index(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		reg_0 = FUNC_LIST[224](loc_0, 1)
		loc_3 = reg_0
		rt_store_i32(memory_at_0, loc_1 + 12, 0)
		reg_0 = FUNC_LIST[209](loc_0, 2, rt_add_i32(loc_1, 12))
		loc_2 = reg_0
		while true do
			if rt_load_i32(memory_at_0, loc_1 + 12) ~= 1 then
				break
			end
			loc_4 = rt_sub_i32(bit_or(rt_load_i32_i8(memory_at_0, loc_2), 32), 120)
			if loc_4 > 2 then
				break
			end
			FUNC_LIST[141](loc_0, no_op(rt_load_f32(memory_at_0, rt_add_i32(rt_shl_i32(loc_4, 2), loc_3))))
			GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
			reg_0 = 1
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32(memory_at_0, loc_1, loc_2)
		FUNC_LIST[203](loc_0, 6343, loc_1)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[475] = --[[ vector_create(lua_State*) ]] function(loc_0)
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	while true do
		reg_1 = FUNC_LIST[216](loc_0, 1)
		reg_2 = FUNC_LIST[216](loc_0, 2)
		reg_3 = FUNC_LIST[216](loc_0, 3)
		FUNC_LIST[144](loc_0, no_op(reg_1), no_op(reg_2), no_op(reg_3))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[476] = --[[ vector_magnitude(lua_State*) ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0
	local reg_0
	local reg_1
	local reg_2
	while true do
		reg_1 = FUNC_LIST[224](loc_0, 1)
		loc_2 = reg_1
		loc_1 = rt_load_f32(memory_at_0, loc_2 + 8)
		reg_1 = (loc_1 * loc_1)
		loc_1 = rt_load_f32(memory_at_0, loc_2)
		reg_2 = (loc_1 * loc_1)
		loc_1 = rt_load_f32(memory_at_0, loc_2 + 4)
		FUNC_LIST[141](loc_0, no_op(math_sqrt((reg_1 + (reg_2 + (loc_1 * loc_1))))))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[477] = --[[ vector_normalize(lua_State*) ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	while true do
		reg_1 = FUNC_LIST[224](loc_0, 1)
		loc_4 = reg_1
		loc_1 = rt_load_f32(memory_at_0, loc_4)
		loc_2 = rt_load_f32(memory_at_0, loc_4 + 8)
		reg_1 = loc_1
		reg_4 = (loc_1 * loc_1)
		loc_1 = rt_load_f32(memory_at_0, loc_4 + 4)
		loc_3 = (1e0 / math_sqrt(((loc_2 * loc_2) + (reg_4 + (loc_1 * loc_1)))))
		FUNC_LIST[144](loc_0, (reg_1 * loc_3), (loc_1 * loc_3), (loc_2 * loc_3))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[478] = --[[ vector_cross(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = 0.0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	local reg_2
	while true do
		reg_0 = FUNC_LIST[224](loc_0, 1)
		loc_1 = reg_0
		reg_0 = FUNC_LIST[224](loc_0, 2)
		loc_2 = reg_0
		loc_4 = rt_load_f32(memory_at_0, loc_1 + 4)
		loc_5 = rt_load_f32(memory_at_0, loc_2 + 8)
		loc_3 = rt_load_f32(memory_at_0, loc_1 + 8)
		loc_6 = rt_load_f32(memory_at_0, loc_2 + 4)
		loc_7 = rt_load_f32(memory_at_0, loc_2)
		reg_1 = ((loc_4 * loc_5) - (loc_3 * loc_6))
		reg_2 = (loc_3 * loc_7)
		loc_3 = rt_load_f32(memory_at_0, loc_1)
		FUNC_LIST[144](loc_0, reg_1, (reg_2 - (loc_3 * loc_5)), ((loc_3 * loc_6) - (loc_4 * loc_7)))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[479] = --[[ vector_dot(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[224](loc_0, 1)
		loc_1 = reg_0
		reg_0 = FUNC_LIST[224](loc_0, 2)
		loc_2 = reg_0
		FUNC_LIST[141](loc_0, no_op(((rt_load_f32(memory_at_0, loc_1 + 8) * rt_load_f32(memory_at_0, loc_2 + 8)) + ((rt_load_f32(memory_at_0, loc_1) * rt_load_f32(memory_at_0, loc_2)) + (rt_load_f32(memory_at_0, loc_1 + 4) * rt_load_f32(memory_at_0, loc_2 + 4))))))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[480] = --[[ vector_angle(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = 0.0
	local loc_7 = 0.0
	local loc_8 = 0.0
	local loc_9 = 0.0
	local loc_10 = 0.0
	local loc_11 = 0.0
	local loc_12 = 0.0
	local loc_13 = 0.0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[224](loc_0, 1)
		loc_2 = reg_0
		reg_0 = FUNC_LIST[224](loc_0, 2)
		loc_3 = reg_0
		reg_0 = FUNC_LIST[225](loc_0, 3, 0)
		loc_1 = reg_0
		loc_5 = rt_load_f32(memory_at_0, loc_2)
		loc_6 = rt_load_f32(memory_at_0, loc_3 + 4)
		loc_7 = rt_load_f32(memory_at_0, loc_2 + 4)
		loc_8 = rt_load_f32(memory_at_0, loc_3)
		loc_9 = ((loc_5 * loc_6) - (loc_7 * loc_8))
		loc_10 = rt_load_f32(memory_at_0, loc_3 + 8)
		loc_11 = rt_load_f32(memory_at_0, loc_2 + 8)
		loc_12 = ((loc_7 * loc_10) - (loc_11 * loc_6))
		loc_13 = ((loc_11 * loc_8) - (loc_5 * loc_10))
		reg_0 = FUNC_LIST[703](no_op(math_sqrt(((loc_9 * loc_9) + ((loc_12 * loc_12) + (loc_13 * loc_13))))), no_op(((loc_11 * loc_10) + ((loc_5 * loc_8) + (loc_7 * loc_6)))))
		loc_4 = reg_0
		while true do
			if loc_1 == 0 then
				break
			end
			if (if ((loc_9 * rt_load_f32(memory_at_0, loc_1 + 8)) + ((loc_12 * rt_load_f32(memory_at_0, loc_1)) + (loc_13 * rt_load_f32(memory_at_0, loc_1 + 4)))) < 0e0 then 1 else 0) == 0 then
				break
			end
			loc_4 = rt_neg_f64(loc_4)
			break
		end
		FUNC_LIST[141](loc_0, loc_4)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[481] = --[[ vector_floor(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[224](loc_0, 1)
		loc_1 = reg_1
		FUNC_LIST[144](loc_0, math_floor(rt_load_f32(memory_at_0, loc_1)), math_floor(rt_load_f32(memory_at_0, loc_1 + 4)), math_floor(rt_load_f32(memory_at_0, loc_1 + 8)))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[482] = --[[ vector_ceil(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[224](loc_0, 1)
		loc_1 = reg_1
		FUNC_LIST[144](loc_0, math_ceil(rt_load_f32(memory_at_0, loc_1)), math_ceil(rt_load_f32(memory_at_0, loc_1 + 4)), math_ceil(rt_load_f32(memory_at_0, loc_1 + 8)))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[483] = --[[ vector_abs(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[224](loc_0, 1)
		loc_1 = reg_1
		FUNC_LIST[144](loc_0, math_abs(rt_load_f32(memory_at_0, loc_1)), math_abs(rt_load_f32(memory_at_0, loc_1 + 4)), math_abs(rt_load_f32(memory_at_0, loc_1 + 8)))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[484] = --[[ vector_sign(lua_State*) ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	while true do
		reg_4 = FUNC_LIST[224](loc_0, 1)
		loc_2 = reg_4
		loc_1 = rt_load_f32(memory_at_0, loc_2)
		reg_1 = (if loc_1 > 0e0 then 1e0 else (if loc_1 < 0e0 then -1e0 else 0e0))
		loc_1 = rt_load_f32(memory_at_0, loc_2 + 4)
		reg_2 = (if loc_1 > 0e0 then 1e0 else (if loc_1 < 0e0 then -1e0 else 0e0))
		loc_1 = rt_load_f32(memory_at_0, loc_2 + 8)
		FUNC_LIST[144](loc_0, reg_1, reg_2, (if loc_1 > 0e0 then 1e0 else (if loc_1 < 0e0 then -1e0 else 0e0)))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[485] = --[[ vector_clamp(lua_State*) ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = 0.0
	local loc_7 = 0.0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		reg_0 = FUNC_LIST[224](loc_0, 1)
		loc_8 = reg_0
		reg_0 = FUNC_LIST[224](loc_0, 2)
		loc_9 = reg_0
		reg_0 = FUNC_LIST[224](loc_0, 3)
		loc_10 = reg_0
		while true do
			while true do
				loc_1 = rt_load_f32(memory_at_0, loc_9)
				loc_2 = rt_load_f32(memory_at_0, loc_10)
				if loc_1 <= loc_2 then
					while true do
						loc_3 = rt_load_f32(memory_at_0, loc_9 + 4)
						loc_4 = rt_load_f32(memory_at_0, loc_10 + 4)
						if (if loc_3 <= loc_4 then 1 else 0) == 0 then
							desired = 2
							break
						end
						loc_5 = rt_load_f32(memory_at_0, loc_9 + 8)
						loc_6 = rt_load_f32(memory_at_0, loc_10 + 8)
						if (if loc_5 <= loc_6 then 1 else 0) == 0 then
							desired = 1
							break
						end
						loc_7 = rt_load_f32(memory_at_0, loc_8)
						loc_1 = (if loc_1 > loc_7 then loc_1 else loc_7)
						reg_1 = (if loc_1 > loc_2 then loc_2 else loc_1)
						loc_1 = rt_load_f32(memory_at_0, loc_8 + 4)
						loc_1 = (if loc_1 < loc_3 then loc_3 else loc_1)
						reg_2 = (if loc_1 > loc_4 then loc_4 else loc_1)
						loc_1 = rt_load_f32(memory_at_0, loc_8 + 8)
						loc_1 = (if loc_1 < loc_5 then loc_5 else loc_1)
						FUNC_LIST[144](loc_0, reg_1, reg_2, (if loc_1 > loc_6 then loc_6 else loc_1))
						reg_0 = 1
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[202](loc_0, 3, 1418)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[202](loc_0, 3, 1256)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[202](loc_0, 3, 1040)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[486] = --[[ vector_max(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = 0.0
	local loc_7 = 0.0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[105](loc_0)
		loc_3 = reg_0
		reg_0 = FUNC_LIST[224](loc_0, 1)
		loc_1 = reg_0
		loc_5 = rt_load_f32(memory_at_0, loc_1 + 8)
		loc_6 = rt_load_f32(memory_at_0, loc_1 + 4)
		loc_7 = rt_load_f32(memory_at_0, loc_1)
		if rt_gt_i32(loc_3, 1) then
			while true do
				loc_1 = 2
				while true do
					reg_0 = FUNC_LIST[224](loc_0, loc_1)
					loc_2 = reg_0
					loc_4 = rt_load_f32(memory_at_0, loc_2 + 8)
					loc_5 = (if loc_4 > loc_5 then loc_4 else loc_5)
					loc_4 = rt_load_f32(memory_at_0, loc_2 + 4)
					loc_6 = (if loc_4 > loc_6 then loc_4 else loc_6)
					loc_4 = rt_load_f32(memory_at_0, loc_2)
					loc_7 = (if loc_4 > loc_7 then loc_4 else loc_7)
					loc_2 = (if loc_1 == loc_3 then 1 else 0)
					loc_1 = rt_add_i32(loc_1, 1)
					if loc_2 == 0 then
						continue
					end
					break
				end
				break
			end
		end
		FUNC_LIST[144](loc_0, loc_7, loc_6, loc_5)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[487] = --[[ vector_min(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = 0.0
	local loc_7 = 0.0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[105](loc_0)
		loc_3 = reg_0
		reg_0 = FUNC_LIST[224](loc_0, 1)
		loc_1 = reg_0
		loc_5 = rt_load_f32(memory_at_0, loc_1 + 8)
		loc_6 = rt_load_f32(memory_at_0, loc_1 + 4)
		loc_7 = rt_load_f32(memory_at_0, loc_1)
		if rt_gt_i32(loc_3, 1) then
			while true do
				loc_1 = 2
				while true do
					reg_0 = FUNC_LIST[224](loc_0, loc_1)
					loc_2 = reg_0
					loc_4 = rt_load_f32(memory_at_0, loc_2 + 8)
					loc_5 = (if loc_4 < loc_5 then loc_4 else loc_5)
					loc_4 = rt_load_f32(memory_at_0, loc_2 + 4)
					loc_6 = (if loc_4 < loc_6 then loc_4 else loc_6)
					loc_4 = rt_load_f32(memory_at_0, loc_2)
					loc_7 = (if loc_4 < loc_7 then loc_4 else loc_7)
					loc_2 = (if loc_1 == loc_3 then 1 else 0)
					loc_1 = rt_add_i32(loc_1, 1)
					if loc_2 == 0 then
						continue
					end
					break
				end
				break
			end
		end
		FUNC_LIST[144](loc_0, loc_7, loc_6, loc_5)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[488] = --[[ luauF_assert(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				if loc_3 ~= 0 then
					break
				end
				if rt_le_i32(loc_5, 0) then
					break
				end
				loc_3 = 0
				while true do
					if not br_map[1] then
						br_map[1] = (function()
							return { [0] = 1, 0, }
						end)()
					end
					temp = br_map[1][rt_load_i32(memory_at_0, loc_2 + 12)] or 2
					if temp < 1 then
						break
					elseif temp > 1 then
						desired = 1
						break
					else
						desired = 2
						break
					end
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if rt_load_i32(memory_at_0, loc_2) ~= 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = 4294967295
			break
		end
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[489] = --[[ luauF_abs(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, math_abs(loc_7))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[490] = --[[ luauF_acos(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			reg_1 = FUNC_LIST[697](loc_7)
			rt_store_f64(memory_at_0, loc_1, reg_1)
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[491] = --[[ luauF_asin(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			reg_1 = FUNC_LIST[700](loc_7)
			rt_store_f64(memory_at_0, loc_1, reg_1)
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[492] = --[[ luauF_atan2(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local loc_8 = 0.0
	local reg_0
	local reg_1
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_4)
			loc_8 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			reg_1 = FUNC_LIST[703](loc_8, loc_7)
			rt_store_f64(memory_at_0, loc_1, reg_1)
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[493] = --[[ luauF_atan(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			reg_1 = FUNC_LIST[702](loc_7)
			rt_store_f64(memory_at_0, loc_1, reg_1)
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[494] = --[[ luauF_ceil(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, math_ceil(loc_7))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[495] = --[[ luauF_cosh(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			reg_1 = FUNC_LIST[710](loc_7)
			rt_store_f64(memory_at_0, loc_1, reg_1)
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[496] = --[[ luauF_cos(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			reg_1 = FUNC_LIST[704](loc_7)
			rt_store_f64(memory_at_0, loc_1, reg_1)
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[497] = --[[ luauF_deg(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, (loc_7 / 1.7453292519943295e-2))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[498] = --[[ luauF_exp(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			reg_1 = FUNC_LIST[615](loc_7)
			rt_store_f64(memory_at_0, loc_1, reg_1)
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[499] = --[[ luauF_floor(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, math_floor(loc_7))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[500] = --[[ luauF_fmod(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local loc_8 = 0.0
	local reg_0
	local reg_1
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_4)
			loc_8 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			reg_1 = FUNC_LIST[620](loc_8, loc_7)
			rt_store_f64(memory_at_0, loc_1, reg_1)
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[501] = --[[ luauF_frexp(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0.0
	local reg_0
	while true do
		loc_7 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_7
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 2) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			reg_0 = FUNC_LIST[717](rt_load_f64(memory_at_0, loc_2), rt_add_i32(loc_7, 12))
			loc_8 = reg_0
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, loc_8)
			loc_6 = rt_load_i32(memory_at_0, loc_7 + 12)
			rt_store_i32(memory_at_0, loc_1 + 28, 3)
			rt_store_f64(memory_at_0, loc_1 + 16, rt_convert_f64_i32(loc_6))
			loc_6 = 2
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_7, 16)
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[502] = --[[ luauF_ldexp(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local loc_8 = 0.0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			loc_8 = rt_load_f64(memory_at_0, loc_2)
			loc_7 = rt_load_f64(memory_at_0, loc_4)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			reg_0 = loc_1
			reg_1 = loc_8
			while true do
				if math_abs(loc_7) < 2.147483648e9 then
					while true do
						reg_2 = rt_truncate_f64(loc_7)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_2 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = reg_2
			reg_1 = FUNC_LIST[634](reg_1, loc_6)
			rt_store_f64(memory_at_0, reg_0, reg_1)
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[503] = --[[ luauF_log10(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			reg_1 = FUNC_LIST[640](loc_7)
			rt_store_f64(memory_at_0, loc_1, reg_1)
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[504] = --[[ luauF_log(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0.0
	local loc_7 = 0.0
	local loc_8 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_8 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			loc_6 = rt_load_f64(memory_at_0, loc_2)
			while true do
				if loc_5 == 1 then
					while true do
						reg_0 = FUNC_LIST[638](loc_6)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
					desired = 1
					break
				end
				loc_7 = rt_load_f64(memory_at_0, loc_4)
				if loc_7 == 2e0 then
					while true do
						reg_0 = FUNC_LIST[641](loc_6)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_7 == 1e1 then
					while true do
						reg_0 = FUNC_LIST[640](loc_6)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[638](loc_6)
				reg_1 = FUNC_LIST[638](loc_7)
				reg_0 = (reg_0 / reg_1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = reg_0
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, loc_6)
			loc_8 = 1
			break
		end
		reg_0 = loc_8
		break
	end
	return reg_0
end
FUNC_LIST[505] = --[[ luauF_max(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0.0
	local loc_7 = 0.0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		loc_8 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			loc_6 = rt_load_f64(memory_at_0, loc_4)
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			loc_6 = (if loc_6 > loc_7 then loc_6 else loc_7)
			loc_3 = 3
			if loc_5 >= 3 then
				while true do
					while true do
						loc_2 = rt_add_i32(rt_shl_i32(loc_3, 4), loc_4)
						if rt_load_i32(memory_at_0, rt_sub_i32(loc_2, 20)) ~= 3 then
							desired = 1
							break
						end
						loc_7 = rt_load_f64(memory_at_0, rt_sub_i32(loc_2, 32))
						loc_6 = (if loc_6 < loc_7 then loc_7 else loc_6)
						loc_2 = (if loc_3 ~= loc_5 then 1 else 0)
						loc_3 = rt_add_i32(loc_3, 1)
						if loc_2 ~= 0 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, loc_6)
			loc_8 = 1
			break
		end
		reg_0 = loc_8
		break
	end
	return reg_0
end
FUNC_LIST[506] = --[[ luauF_min(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0.0
	local loc_7 = 0.0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		loc_8 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			loc_6 = rt_load_f64(memory_at_0, loc_4)
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			loc_6 = (if loc_6 < loc_7 then loc_6 else loc_7)
			loc_3 = 3
			if loc_5 >= 3 then
				while true do
					while true do
						loc_2 = rt_add_i32(rt_shl_i32(loc_3, 4), loc_4)
						if rt_load_i32(memory_at_0, rt_sub_i32(loc_2, 20)) ~= 3 then
							desired = 1
							break
						end
						loc_7 = rt_load_f64(memory_at_0, rt_sub_i32(loc_2, 32))
						loc_6 = (if loc_6 > loc_7 then loc_7 else loc_6)
						loc_2 = (if loc_3 ~= loc_5 then 1 else 0)
						loc_3 = rt_add_i32(loc_3, 1)
						if loc_2 ~= 0 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, loc_6)
			loc_8 = 1
			break
		end
		reg_0 = loc_8
		break
	end
	return reg_0
end
FUNC_LIST[507] = --[[ luauF_modf(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0.0
	local loc_9 = 0.0
	local reg_0
	while true do
		loc_6 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_6
		loc_7 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 2) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			reg_0 = FUNC_LIST[734](rt_load_f64(memory_at_0, loc_2), rt_add_i32(loc_6, 8))
			loc_8 = reg_0
			loc_9 = rt_load_f64(memory_at_0, loc_6 + 8)
			rt_store_i32(memory_at_0, loc_1 + 28, 3)
			rt_store_f64(memory_at_0, loc_1 + 16, loc_8)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, loc_9)
			loc_7 = 2
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_6, 16)
		reg_0 = loc_7
		break
	end
	return reg_0
end
FUNC_LIST[508] = --[[ luauF_pow(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local loc_8 = 0.0
	local reg_0
	local reg_1
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_4)
			loc_8 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			reg_1 = FUNC_LIST[642](loc_8, loc_7)
			rt_store_f64(memory_at_0, loc_1, reg_1)
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[509] = --[[ luauF_rad(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, (loc_7 * 1.7453292519943295e-2))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[510] = --[[ luauF_sinh(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			reg_1 = FUNC_LIST[738](loc_7)
			rt_store_f64(memory_at_0, loc_1, reg_1)
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[511] = --[[ luauF_sin(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			reg_1 = FUNC_LIST[737](loc_7)
			rt_store_f64(memory_at_0, loc_1, reg_1)
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[512] = --[[ luauF_sqrt(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, math_sqrt(loc_7))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[513] = --[[ luauF_tanh(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			reg_1 = FUNC_LIST[782](loc_7)
			rt_store_f64(memory_at_0, loc_1, reg_1)
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[514] = --[[ luauF_tan(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			reg_1 = FUNC_LIST[780](loc_7)
			rt_store_f64(memory_at_0, loc_1, reg_1)
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[515] = --[[ luauF_arshift(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0.0
	local loc_7 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_7 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			while true do
				loc_6 = rt_load_f64(memory_at_0, loc_4)
				if math_abs(loc_6) < 2.147483648e9 then
					while true do
						reg_0 = rt_truncate_f64(loc_6)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = reg_0
			if loc_3 > 31 then
				break
			end
			loc_6 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			reg_0 = loc_1
			while true do
				if math_abs(loc_6) < 9.223372036854776e18 then
					while true do
						reg_1 = rt_truncate_i64_f64(loc_6)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = rt_i64_from_u32(0, 2147483648)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_f64(memory_at_0, reg_0, no_op(rt_shr_i32(rt_wrap_i32_i64(reg_1), loc_3)))
			loc_7 = 1
			break
		end
		reg_0 = loc_7
		break
	end
	return reg_0
end
FUNC_LIST[516] = --[[ luauF_band(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0.0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_7 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			loc_3 = 3
			loc_6 = (if loc_5 < 3 then 1 else 0)
			while true do
				loc_8 = rt_load_f64(memory_at_0, loc_2)
				if math_abs(loc_8) < 9.223372036854776e18 then
					while true do
						reg_0 = rt_truncate_i64_f64(loc_8)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = rt_i64_from_u32(0, 2147483648)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_8 = rt_load_f64(memory_at_0, loc_4)
				if math_abs(loc_8) < 9.223372036854776e18 then
					while true do
						reg_1 = rt_truncate_i64_f64(loc_8)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = rt_i64_from_u32(0, 2147483648)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = rt_wrap_i32_i64(rt_bit_and_i64(reg_0, reg_1))
			if loc_6 == 0 then
				while true do
					while true do
						loc_6 = rt_add_i32(rt_shl_i32(loc_3, 4), loc_4)
						if rt_load_i32(memory_at_0, rt_sub_i32(loc_6, 20)) ~= 3 then
							desired = 1
							break
						end
						while true do
							loc_8 = rt_load_f64(memory_at_0, rt_sub_i32(loc_6, 32))
							if math_abs(loc_8) < 9.223372036854776e18 then
								while true do
									reg_0 = rt_truncate_i64_f64(loc_8)
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							reg_0 = rt_i64_from_u32(0, 2147483648)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
						loc_2 = bit_and(rt_wrap_i32_i64(reg_0), loc_2)
						loc_6 = (if loc_3 ~= loc_5 then 1 else 0)
						loc_3 = rt_add_i32(loc_3, 1)
						if loc_6 ~= 0 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, no_op(loc_2))
			loc_7 = 1
			break
		end
		reg_0 = loc_7
		break
	end
	return reg_0
end
FUNC_LIST[517] = --[[ luauF_bnot(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			reg_0 = loc_1
			while true do
				if math_abs(loc_7) < 9.223372036854776e18 then
					while true do
						reg_1 = rt_truncate_i64_f64(loc_7)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = rt_i64_from_u32(0, 2147483648)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_f64(memory_at_0, reg_0, no_op(bit_xor(rt_wrap_i32_i64(reg_1), 4294967295)))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[518] = --[[ luauF_bor(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0.0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_7 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			loc_3 = 3
			loc_6 = (if loc_5 < 3 then 1 else 0)
			while true do
				loc_8 = rt_load_f64(memory_at_0, loc_2)
				if math_abs(loc_8) < 9.223372036854776e18 then
					while true do
						reg_0 = rt_truncate_i64_f64(loc_8)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = rt_i64_from_u32(0, 2147483648)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_8 = rt_load_f64(memory_at_0, loc_4)
				if math_abs(loc_8) < 9.223372036854776e18 then
					while true do
						reg_1 = rt_truncate_i64_f64(loc_8)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = rt_i64_from_u32(0, 2147483648)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = rt_wrap_i32_i64(rt_bit_or_i64(reg_0, reg_1))
			if loc_6 == 0 then
				while true do
					while true do
						loc_6 = rt_add_i32(rt_shl_i32(loc_3, 4), loc_4)
						if rt_load_i32(memory_at_0, rt_sub_i32(loc_6, 20)) ~= 3 then
							desired = 1
							break
						end
						while true do
							loc_8 = rt_load_f64(memory_at_0, rt_sub_i32(loc_6, 32))
							if math_abs(loc_8) < 9.223372036854776e18 then
								while true do
									reg_0 = rt_truncate_i64_f64(loc_8)
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							reg_0 = rt_i64_from_u32(0, 2147483648)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
						loc_2 = bit_or(rt_wrap_i32_i64(reg_0), loc_2)
						loc_6 = (if loc_3 ~= loc_5 then 1 else 0)
						loc_3 = rt_add_i32(loc_3, 1)
						if loc_6 ~= 0 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, no_op(loc_2))
			loc_7 = 1
			break
		end
		reg_0 = loc_7
		break
	end
	return reg_0
end
FUNC_LIST[519] = --[[ luauF_bxor(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0.0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_7 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			loc_3 = 3
			loc_6 = (if loc_5 < 3 then 1 else 0)
			while true do
				loc_8 = rt_load_f64(memory_at_0, loc_2)
				if math_abs(loc_8) < 9.223372036854776e18 then
					while true do
						reg_0 = rt_truncate_i64_f64(loc_8)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = rt_i64_from_u32(0, 2147483648)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_8 = rt_load_f64(memory_at_0, loc_4)
				if math_abs(loc_8) < 9.223372036854776e18 then
					while true do
						reg_1 = rt_truncate_i64_f64(loc_8)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = rt_i64_from_u32(0, 2147483648)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = rt_wrap_i32_i64(rt_bit_xor_i64(reg_0, reg_1))
			if loc_6 == 0 then
				while true do
					while true do
						loc_6 = rt_add_i32(rt_shl_i32(loc_3, 4), loc_4)
						if rt_load_i32(memory_at_0, rt_sub_i32(loc_6, 20)) ~= 3 then
							desired = 1
							break
						end
						while true do
							loc_8 = rt_load_f64(memory_at_0, rt_sub_i32(loc_6, 32))
							if math_abs(loc_8) < 9.223372036854776e18 then
								while true do
									reg_0 = rt_truncate_i64_f64(loc_8)
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							reg_0 = rt_i64_from_u32(0, 2147483648)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
						loc_2 = bit_xor(rt_wrap_i32_i64(reg_0), loc_2)
						loc_6 = (if loc_3 ~= loc_5 then 1 else 0)
						loc_3 = rt_add_i32(loc_3, 1)
						if loc_6 ~= 0 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, no_op(loc_2))
			loc_7 = 1
			break
		end
		reg_0 = loc_7
		break
	end
	return reg_0
end
FUNC_LIST[520] = --[[ luauF_btest(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0.0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_7 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			loc_3 = 3
			loc_6 = (if loc_5 < 3 then 1 else 0)
			while true do
				loc_8 = rt_load_f64(memory_at_0, loc_2)
				if math_abs(loc_8) < 9.223372036854776e18 then
					while true do
						reg_0 = rt_truncate_i64_f64(loc_8)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = rt_i64_from_u32(0, 2147483648)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_8 = rt_load_f64(memory_at_0, loc_4)
				if math_abs(loc_8) < 9.223372036854776e18 then
					while true do
						reg_1 = rt_truncate_i64_f64(loc_8)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = rt_i64_from_u32(0, 2147483648)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = rt_wrap_i32_i64(rt_bit_and_i64(reg_0, reg_1))
			if loc_6 == 0 then
				while true do
					while true do
						loc_6 = rt_add_i32(rt_shl_i32(loc_3, 4), loc_4)
						if rt_load_i32(memory_at_0, rt_sub_i32(loc_6, 20)) ~= 3 then
							desired = 1
							break
						end
						while true do
							loc_8 = rt_load_f64(memory_at_0, rt_sub_i32(loc_6, 32))
							if math_abs(loc_8) < 9.223372036854776e18 then
								while true do
									reg_0 = rt_truncate_i64_f64(loc_8)
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							reg_0 = rt_i64_from_u32(0, 2147483648)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
						loc_2 = bit_and(rt_wrap_i32_i64(reg_0), loc_2)
						loc_6 = (if loc_3 ~= loc_5 then 1 else 0)
						loc_3 = rt_add_i32(loc_3, 1)
						if loc_6 ~= 0 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_7 = 1
			rt_store_i32(memory_at_0, loc_1 + 12, 1)
			rt_store_i32(memory_at_0, loc_1, (if loc_2 ~= 0 then 1 else 0))
			break
		end
		reg_0 = loc_7
		break
	end
	return reg_0
end
FUNC_LIST[521] = --[[ luauF_extract(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0.0
	local loc_7 = 0
	local loc_8 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_7 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			while true do
				loc_6 = rt_load_f64(memory_at_0, loc_4)
				if math_abs(loc_6) < 2.147483648e9 then
					while true do
						reg_0 = rt_truncate_f64(loc_6)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = reg_0
			loc_5 = (if loc_5 ~= 2 then 1 else 0)
			while true do
				loc_6 = rt_load_f64(memory_at_0, loc_2)
				if math_abs(loc_6) < 9.223372036854776e18 then
					while true do
						reg_0 = rt_truncate_i64_f64(loc_6)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = rt_i64_from_u32(0, 2147483648)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_8 = reg_0
			while true do
				if loc_5 == 0 then
					while true do
						loc_5 = 1
						reg_0 = loc_5
						if loc_3 < 32 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_load_i32(memory_at_0, loc_4 + 28) ~= 3 then
					desired = 1
					break
				end
				while true do
					loc_6 = rt_load_f64(memory_at_0, loc_4 + 16)
					if math_abs(loc_6) < 2.147483648e9 then
						while true do
							reg_0 = rt_truncate_f64(loc_6)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = 2147483648
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = reg_0
				if rt_lt_i32(loc_3, 0) then
					desired = 1
					break
				end
				if rt_le_i32(loc_5, 0) then
					desired = 1
					break
				end
				if rt_gt_i32(rt_add_i32(loc_3, loc_5), 32) then
					desired = 1
					break
				end
				reg_0 = bit_xor(rt_shl_i32(4294967294, rt_sub_i32(loc_5, 1)), 4294967295)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = reg_0
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, no_op(bit_and(loc_5, rt_shr_u32(rt_wrap_i32_i64(loc_8), loc_3))))
			loc_7 = 1
			break
		end
		reg_0 = loc_7
		break
	end
	return reg_0
end
FUNC_LIST[522] = --[[ luauF_lrotate(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local loc_8 = 0.0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			loc_8 = rt_load_f64(memory_at_0, loc_4)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			while true do
				if math_abs(loc_8) < 2.147483648e9 then
					while true do
						reg_0 = rt_truncate_f64(loc_8)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = reg_0
			reg_0 = loc_1
			while true do
				if math_abs(loc_7) < 9.223372036854776e18 then
					while true do
						reg_1 = rt_truncate_i64_f64(loc_7)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = rt_i64_from_u32(0, 2147483648)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_f64(memory_at_0, reg_0, no_op(rt_rotl_i32(rt_wrap_i32_i64(reg_1), loc_6)))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[523] = --[[ luauF_lshift(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0.0
	local loc_7 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_7 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			while true do
				loc_6 = rt_load_f64(memory_at_0, loc_4)
				if math_abs(loc_6) < 2.147483648e9 then
					while true do
						reg_0 = rt_truncate_f64(loc_6)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = reg_0
			if loc_3 > 31 then
				break
			end
			loc_6 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			reg_0 = loc_1
			while true do
				if math_abs(loc_6) < 9.223372036854776e18 then
					while true do
						reg_1 = rt_truncate_i64_f64(loc_6)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = rt_i64_from_u32(0, 2147483648)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_f64(memory_at_0, reg_0, no_op(rt_shl_i32(rt_wrap_i32_i64(reg_1), loc_3)))
			loc_7 = 1
			break
		end
		reg_0 = loc_7
		break
	end
	return reg_0
end
FUNC_LIST[524] = --[[ luauF_replace(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0.0
	local loc_7 = 0
	local loc_8 = rt_i64_ZERO
	local loc_9 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_7 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 3) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 28) ~= 3 then
				break
			end
			while true do
				loc_6 = rt_load_f64(memory_at_0, loc_4 + 16)
				if math_abs(loc_6) < 2.147483648e9 then
					while true do
						reg_0 = rt_truncate_f64(loc_6)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = reg_0
			while true do
				loc_6 = rt_load_f64(memory_at_0, loc_4)
				if math_abs(loc_6) < 9.223372036854776e18 then
					while true do
						reg_0 = rt_truncate_i64_f64(loc_6)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = rt_i64_from_u32(0, 2147483648)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_8 = reg_0
			loc_5 = (if loc_5 ~= 3 then 1 else 0)
			while true do
				loc_6 = rt_load_f64(memory_at_0, loc_2)
				if math_abs(loc_6) < 9.223372036854776e18 then
					while true do
						reg_0 = rt_truncate_i64_f64(loc_6)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = rt_i64_from_u32(0, 2147483648)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_9 = reg_0
			loc_2 = rt_wrap_i32_i64(loc_8)
			while true do
				if loc_5 == 0 then
					while true do
						if loc_3 > 31 then
							desired = 1
							break
						end
						loc_7 = 1
						reg_0 = bit_and(loc_2, 1)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_load_i32(memory_at_0, loc_4 + 44) ~= 3 then
					desired = 1
					break
				end
				while true do
					loc_6 = rt_load_f64(memory_at_0, loc_4 + 32)
					if math_abs(loc_6) < 2.147483648e9 then
						while true do
							reg_0 = rt_truncate_f64(loc_6)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = 2147483648
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = reg_0
				if rt_lt_i32(loc_3, 0) then
					desired = 1
					break
				end
				if rt_le_i32(loc_5, 0) then
					desired = 1
					break
				end
				if rt_gt_i32(rt_add_i32(loc_3, loc_5), 32) then
					desired = 1
					break
				end
				loc_7 = bit_xor(rt_shl_i32(4294967294, rt_sub_i32(loc_5, 1)), 4294967295)
				reg_0 = bit_and(loc_2, loc_7)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = reg_0
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, no_op(bit_or(bit_and(rt_wrap_i32_i64(loc_9), bit_xor(rt_shl_i32(loc_7, loc_3), 4294967295)), rt_shl_i32(loc_5, loc_3))))
			loc_7 = 1
			break
		end
		reg_0 = loc_7
		break
	end
	return reg_0
end
FUNC_LIST[525] = --[[ luauF_rrotate(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local loc_8 = 0.0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			loc_8 = rt_load_f64(memory_at_0, loc_4)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			while true do
				if math_abs(loc_8) < 2.147483648e9 then
					while true do
						reg_0 = rt_truncate_f64(loc_8)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = reg_0
			reg_0 = loc_1
			while true do
				if math_abs(loc_7) < 9.223372036854776e18 then
					while true do
						reg_1 = rt_truncate_i64_f64(loc_7)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = rt_i64_from_u32(0, 2147483648)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_f64(memory_at_0, reg_0, no_op(rt_rotr_i32(rt_wrap_i32_i64(reg_1), loc_6)))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[526] = --[[ luauF_rshift(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0.0
	local loc_7 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_7 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			while true do
				loc_6 = rt_load_f64(memory_at_0, loc_4)
				if math_abs(loc_6) < 2.147483648e9 then
					while true do
						reg_0 = rt_truncate_f64(loc_6)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = reg_0
			if loc_3 > 31 then
				break
			end
			loc_6 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			reg_0 = loc_1
			while true do
				if math_abs(loc_6) < 9.223372036854776e18 then
					while true do
						reg_1 = rt_truncate_i64_f64(loc_6)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = rt_i64_from_u32(0, 2147483648)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_f64(memory_at_0, reg_0, no_op(rt_shr_u32(rt_wrap_i32_i64(reg_1), loc_3)))
			loc_7 = 1
			break
		end
		reg_0 = loc_7
		break
	end
	return reg_0
end
FUNC_LIST[527] = --[[ luauF_type(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local reg_0
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			loc_6 = rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 16), rt_shl_i32(rt_load_i32(memory_at_0, loc_2 + 12), 2)), 1484))
			rt_store_i32(memory_at_0, loc_1 + 12, 5)
			rt_store_i32(memory_at_0, loc_1, loc_6)
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[528] = --[[ luauF_byte(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0.0
	local reg_0
	local desired
	while true do
		loc_6 = 4294967295
		while true do
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 5 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			loc_5 = (if loc_5 == 2 then 1 else 0)
			loc_8 = rt_load_i32(memory_at_0, loc_2)
			while true do
				while true do
					loc_10 = rt_load_f64(memory_at_0, loc_4)
					if math_abs(loc_10) < 2.147483648e9 then
						while true do
							reg_0 = rt_truncate_f64(loc_10)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = 2147483648
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = reg_0
				loc_7 = loc_2
				reg_0 = loc_7
				if loc_5 ~= 0 then
					break
				end
				loc_7 = 0
				reg_0 = loc_7
				if rt_load_i32(memory_at_0, loc_4 + 28) ~= 3 then
					break
				end
				loc_10 = rt_load_f64(memory_at_0, loc_4 + 16)
				if math_abs(loc_10) < 2.147483648e9 then
					while true do
						reg_0 = rt_truncate_f64(loc_10)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_7 = reg_0
			if rt_le_i32(loc_2, 0) then
				break
			end
			if rt_gt_i32(loc_2, loc_7) then
				break
			end
			if rt_lt_i32(rt_load_i32(memory_at_0, loc_8 + 16), loc_7) then
				break
			end
			loc_5 = 0
			loc_4 = rt_sub_i32(loc_7, loc_2)
			loc_9 = rt_add_i32(loc_4, 1)
			if loc_9 ~= (if rt_lt_i32(loc_3, 0) then 1 else loc_3) then
				break
			end
			loc_7 = bit_and(loc_9, 3)
			loc_6 = rt_add_i32(rt_add_i32(loc_2, loc_8), 19)
			if loc_4 >= 3 then
				while true do
					loc_8 = bit_and(loc_9, 4294967292)
					loc_2 = 0
					while true do
						loc_4 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_5, loc_6))
						loc_3 = rt_add_i32(rt_shl_i32(loc_5, 4), loc_1)
						rt_store_i32(memory_at_0, loc_3 + 12, 3)
						rt_store_f64(memory_at_0, loc_3, no_op(loc_4))
						loc_4 = bit_or(loc_5, 1)
						loc_3 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_4, loc_6))
						loc_4 = rt_add_i32(rt_shl_i32(loc_4, 4), loc_1)
						rt_store_i32(memory_at_0, loc_4 + 12, 3)
						rt_store_f64(memory_at_0, loc_4, no_op(loc_3))
						loc_4 = bit_or(loc_5, 2)
						loc_3 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_4, loc_6))
						loc_4 = rt_add_i32(rt_shl_i32(loc_4, 4), loc_1)
						rt_store_i32(memory_at_0, loc_4 + 12, 3)
						rt_store_f64(memory_at_0, loc_4, no_op(loc_3))
						loc_4 = bit_or(loc_5, 3)
						loc_3 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_4, loc_6))
						loc_4 = rt_add_i32(rt_shl_i32(loc_4, 4), loc_1)
						rt_store_i32(memory_at_0, loc_4 + 12, 3)
						rt_store_f64(memory_at_0, loc_4, no_op(loc_3))
						loc_5 = rt_add_i32(loc_5, 4)
						loc_2 = rt_add_i32(loc_2, 4)
						if loc_8 ~= loc_2 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_7 ~= 0 then
				while true do
					loc_2 = 0
					while true do
						loc_4 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_5, loc_6))
						loc_3 = rt_add_i32(rt_shl_i32(loc_5, 4), loc_1)
						rt_store_i32(memory_at_0, loc_3 + 12, 3)
						rt_store_f64(memory_at_0, loc_3, no_op(loc_4))
						loc_5 = rt_add_i32(loc_5, 1)
						loc_2 = rt_add_i32(loc_2, 1)
						if loc_7 ~= loc_2 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_6 = loc_9
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[529] = --[[ luauF_char(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0.0
	local reg_0
	local desired
	while true do
		loc_6 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_6
		loc_7 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_gt_i32(loc_5, 7) then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 16)
			if rt_load_i32(memory_at_0, loc_3 + 40) >= rt_load_i32(memory_at_0, loc_3 + 36) then
				break
			end
			while true do
				if rt_le_i32(loc_5, 0) then
					break
				end
				if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
					desired = 1
					break
				end
				while true do
					loc_8 = rt_load_f64(memory_at_0, loc_2)
					if math_abs(loc_8) < 2.147483648e9 then
						while true do
							reg_0 = rt_truncate_f64(loc_8)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = 2147483648
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = reg_0
				if loc_3 > 255 then
					desired = 1
					break
				end
				rt_store_i32_n8(memory_at_0, loc_6 + 8, loc_3)
				if loc_5 == 1 then
					break
				end
				loc_3 = 2
				while true do
					loc_2 = rt_add_i32(rt_shl_i32(loc_3, 4), loc_4)
					if rt_load_i32(memory_at_0, rt_sub_i32(loc_2, 20)) ~= 3 then
						desired = 1
						break
					end
					while true do
						loc_8 = rt_load_f64(memory_at_0, rt_sub_i32(loc_2, 32))
						if math_abs(loc_8) < 2.147483648e9 then
							while true do
								reg_0 = rt_truncate_f64(loc_8)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						reg_0 = 2147483648
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					loc_2 = reg_0
					if loc_2 > 255 then
						desired = 1
						break
					end
					rt_store_i32_n8(memory_at_0, rt_add_i32(loc_3, loc_6) + 7, loc_2)
					loc_2 = (if loc_3 ~= loc_5 then 1 else 0)
					loc_3 = rt_add_i32(loc_3, 1)
					if loc_2 ~= 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32_n8(memory_at_0, rt_add_i32(loc_5, rt_add_i32(loc_6, 8)), 0)
			reg_0 = FUNC_LIST[387](loc_0, rt_add_i32(loc_6, 8), loc_5)
			loc_5 = reg_0
			rt_store_i32(memory_at_0, loc_1 + 12, 5)
			rt_store_i32(memory_at_0, loc_1, loc_5)
			loc_7 = 1
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_6, 16)
		reg_0 = loc_7
		break
	end
	return reg_0
end
FUNC_LIST[530] = --[[ luauF_len(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local reg_0
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 5 then
				break
			end
			loc_6 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2) + 16)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, rt_convert_f64_i32(loc_6))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[531] = --[[ luauF_typeof(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local reg_0
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			reg_0 = FUNC_LIST[462](loc_0, loc_2)
			loc_6 = reg_0
			rt_store_i32(memory_at_0, loc_1 + 12, 5)
			rt_store_i32(memory_at_0, loc_1, loc_6)
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[532] = --[[ luauF_sub(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0.0
	local reg_0
	local desired
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 3) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 5 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 28) ~= 3 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 16)
			loc_5 = rt_load_i32(memory_at_0, loc_3 + 36)
			loc_3 = rt_load_i32(memory_at_0, loc_3 + 40)
			loc_7 = rt_load_i32(memory_at_0, loc_2)
			while true do
				loc_8 = rt_load_f64(memory_at_0, loc_4 + 16)
				if math_abs(loc_8) < 2.147483648e9 then
					while true do
						reg_0 = rt_truncate_f64(loc_8)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = reg_0
			loc_5 = (if loc_3 >= loc_5 then 1 else 0)
			while true do
				loc_8 = rt_load_f64(memory_at_0, loc_4)
				if math_abs(loc_8) < 2.147483648e9 then
					while true do
						reg_0 = rt_truncate_f64(loc_8)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = reg_0
			if loc_5 ~= 0 then
				break
			end
			if rt_le_i32(loc_3, 0) then
				break
			end
			if rt_lt_i32(loc_2, loc_3) then
				break
			end
			if rt_load_i32(memory_at_0, loc_7 + 16) <= rt_sub_i32(loc_2, 1) then
				break
			end
			loc_6 = 1
			reg_0 = FUNC_LIST[387](loc_0, rt_add_i32(rt_add_i32(loc_3, loc_7), 19), rt_add_i32(rt_sub_i32(loc_2, loc_3), 1))
			loc_3 = reg_0
			rt_store_i32(memory_at_0, loc_1 + 12, 5)
			rt_store_i32(memory_at_0, loc_1, loc_3)
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[533] = --[[ luauF_clamp(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0.0
	local loc_7 = 0.0
	local loc_8 = 0.0
	local loc_9 = 0
	local reg_0
	while true do
		loc_9 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 3) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 28) ~= 3 then
				break
			end
			loc_6 = rt_load_f64(memory_at_0, loc_4)
			loc_7 = rt_load_f64(memory_at_0, loc_4 + 16)
			if (if loc_6 <= loc_7 then 1 else 0) == 0 then
				break
			end
			loc_8 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			loc_6 = (if loc_6 > loc_8 then loc_6 else loc_8)
			rt_store_f64(memory_at_0, loc_1, (if loc_6 > loc_7 then loc_7 else loc_6))
			loc_9 = 1
			break
		end
		reg_0 = loc_9
		break
	end
	return reg_0
end
FUNC_LIST[534] = --[[ luauF_sign(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, (if loc_7 > 0e0 then 1e0 else (if loc_7 < 0e0 then -1e0 else 0e0)))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[535] = --[[ luauF_round(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			reg_1 = FUNC_LIST[736](loc_7)
			rt_store_f64(memory_at_0, loc_1, reg_1)
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[536] = --[[ luauF_rawset(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0.0
	local loc_7 = 0
	local loc_8 = 0.0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_7 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 3) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 6 then
				break
			end
			while true do
				while true do
					while true do
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 3, 2, 2, 0, 1, }
							end)()
						end
						temp = br_map[1][rt_load_i32(memory_at_0, loc_4 + 12)] or 2
						if temp < 2 then
							if temp < 1 then
								break
							else
								desired = 3
								break
							end
						elseif temp > 2 then
							desired = 1
							break
						else
							desired = 2
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_8 = rt_load_f64(memory_at_0, loc_4)
					if loc_8 == loc_8 then
						desired = 2
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = rt_load_f32(memory_at_0, loc_4)
				if loc_6 ~= loc_6 then
					desired = 1
					break
				end
				loc_6 = rt_load_f32(memory_at_0, loc_4 + 4)
				if loc_6 ~= loc_6 then
					desired = 1
					break
				end
				loc_6 = rt_load_f32(memory_at_0, loc_4 + 8)
				if loc_6 ~= loc_6 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_2)
			if rt_load_i32_u8(memory_at_0, loc_3 + 4) ~= 0 then
				break
			end
			rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_2))
			rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
			reg_0 = FUNC_LIST[428](loc_0, loc_3, loc_4)
			loc_7 = reg_0
			rt_store_i64(memory_at_0, loc_7 + 8, rt_load_i64(memory_at_0, loc_4 + 24))
			rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_4 + 16))
			loc_7 = 1
			if rt_lt_i32(rt_load_i32(memory_at_0, loc_4 + 28), 5) then
				break
			end
			if bit_and(rt_load_i32_u8(memory_at_0, loc_3 + 1), 4) == 0 then
				break
			end
			loc_4 = rt_load_i32(memory_at_0, loc_4 + 16)
			if bit_and(rt_load_i32_u8(memory_at_0, loc_4 + 1), 3) == 0 then
				break
			end
			FUNC_LIST[50](loc_0, loc_3, loc_4)
			break
		end
		reg_0 = loc_7
		break
	end
	return reg_0
end
FUNC_LIST[537] = --[[ luauF_rawget(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local reg_0
	local reg_1
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 6 then
				break
			end
			reg_1 = FUNC_LIST[427](rt_load_i32(memory_at_0, loc_2), loc_4)
			loc_6 = reg_1
			rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_6))
			rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_6 + 8))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[538] = --[[ luauF_rawequal(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local reg_0
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			loc_6 = 1
			reg_0 = FUNC_LIST[363](loc_2, loc_4)
			loc_3 = reg_0
			rt_store_i32(memory_at_0, loc_1 + 12, 1)
			rt_store_i32(memory_at_0, loc_1, loc_3)
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[539] = --[[ luauF_tinsert(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local reg_0
	local reg_1
	local reg_2
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 0) then
				break
			end
			if loc_5 ~= 2 then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 6 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_2)
			if rt_load_i32_u8(memory_at_0, loc_3 + 4) ~= 0 then
				break
			end
			reg_2 = FUNC_LIST[433](loc_3)
			reg_0 = FUNC_LIST[431](loc_0, loc_3, rt_add_i32(reg_2, 1))
			loc_6 = reg_0
			rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
			rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_4))
			loc_6 = 0
			if rt_lt_i32(rt_load_i32(memory_at_0, loc_4 + 12), 5) then
				break
			end
			if bit_and(rt_load_i32_u8(memory_at_0, loc_3 + 1), 4) == 0 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_4)
			if bit_and(rt_load_i32_u8(memory_at_0, loc_5 + 1), 3) == 0 then
				break
			end
			FUNC_LIST[50](loc_0, loc_3, loc_5)
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[540] = --[[ luauF_tunpack(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0.0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_6 = 4294967295
		while true do
			if rt_ge_i32(loc_3, 0) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 6 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_2)
			while true do
				while true do
					while true do
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 0, 3, 1, }
							end)()
						end
						temp = br_map[1][rt_sub_i32(loc_5, 1)] or 3
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 1
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[433](loc_3)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
					desired = 1
					break
				end
				if rt_load_i32(memory_at_0, loc_4 + 28) ~= 3 then
					desired = 1
					break
				end
				if rt_load_f64(memory_at_0, loc_4) ~= 1e0 then
					desired = 1
					break
				end
				loc_12 = rt_load_f64(memory_at_0, loc_4 + 16)
				if math_abs(loc_12) < 2.147483648e9 then
					while true do
						reg_0 = rt_truncate_f64(loc_12)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_8 = reg_0
			if rt_lt_i32(loc_8, 0) then
				break
			end
			if rt_lt_i32(rt_load_i32(memory_at_0, loc_3 + 8), loc_8) then
				break
			end
			if rt_gt_i32(loc_8, rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 24), loc_1), 4)) then
				break
			end
			if rt_add_i32(loc_5, loc_8) > 8000 then
				break
			end
			while true do
				if loc_8 == 0 then
					break
				end
				loc_5 = rt_load_i32(memory_at_0, loc_3 + 20)
				loc_2 = 0
				loc_6 = 0
				if loc_8 >= 4 then
					while true do
						loc_10 = bit_and(loc_8, 8188)
						loc_4 = 0
						while true do
							loc_3 = rt_shl_i32(loc_6, 4)
							loc_7 = rt_add_i32(loc_3, loc_1)
							loc_9 = rt_add_i32(loc_3, loc_5)
							rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_9))
							rt_store_i64(memory_at_0, loc_7 + 8, rt_load_i64(memory_at_0, loc_9 + 8))
							loc_7 = bit_or(loc_3, 16)
							loc_9 = rt_add_i32(loc_7, loc_1)
							loc_7 = rt_add_i32(loc_5, loc_7)
							rt_store_i64(memory_at_0, loc_9 + 8, rt_load_i64(memory_at_0, loc_7 + 8))
							rt_store_i64(memory_at_0, loc_9, rt_load_i64(memory_at_0, loc_7))
							loc_7 = bit_or(loc_3, 32)
							loc_9 = rt_add_i32(loc_7, loc_1)
							loc_7 = rt_add_i32(loc_5, loc_7)
							rt_store_i64(memory_at_0, loc_9 + 8, rt_load_i64(memory_at_0, loc_7 + 8))
							rt_store_i64(memory_at_0, loc_9, rt_load_i64(memory_at_0, loc_7))
							loc_3 = bit_or(loc_3, 48)
							loc_7 = rt_add_i32(loc_3, loc_1)
							loc_3 = rt_add_i32(loc_3, loc_5)
							rt_store_i64(memory_at_0, loc_7 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
							rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_3))
							loc_6 = rt_add_i32(loc_6, 4)
							loc_4 = rt_add_i32(loc_4, 4)
							if loc_10 ~= loc_4 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_11 = bit_and(loc_8, 3)
				if loc_11 == 0 then
					break
				end
				while true do
					loc_3 = rt_shl_i32(loc_6, 4)
					loc_4 = rt_add_i32(loc_3, loc_1)
					loc_3 = rt_add_i32(loc_3, loc_5)
					rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_3))
					rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
					loc_6 = rt_add_i32(loc_6, 1)
					loc_2 = rt_add_i32(loc_2, 1)
					if loc_11 ~= loc_2 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = rt_add_i32(rt_shl_i32(loc_8, 4), loc_1)
			loc_6 = rt_load_i32(memory_at_0, loc_0 + 20)
			if loc_5 > rt_load_i32(memory_at_0, loc_6 + 8) then
				while true do
					rt_store_i32(memory_at_0, loc_6 + 8, loc_5)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_6 = loc_8
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[541] = --[[ luauF_vector(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local loc_8 = 0.0
	local loc_9 = 0.0
	local reg_0
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 3) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 28) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			loc_8 = rt_load_f64(memory_at_0, loc_4)
			loc_9 = rt_load_f64(memory_at_0, loc_4 + 16)
			rt_store_i32(memory_at_0, loc_1 + 12, 4)
			rt_store_f32(memory_at_0, loc_1 + 8, no_op(loc_9))
			rt_store_f32(memory_at_0, loc_1 + 4, no_op(loc_8))
			rt_store_f32(memory_at_0, loc_1, no_op(loc_7))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[542] = --[[ luauF_countlz(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			reg_0 = loc_1
			while true do
				if math_abs(loc_7) < 9.223372036854776e18 then
					while true do
						reg_1 = rt_truncate_i64_f64(loc_7)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = rt_i64_from_u32(0, 2147483648)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_f64(memory_at_0, reg_0, no_op(bit_countlz(rt_wrap_i32_i64(reg_1))))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[543] = --[[ luauF_countrz(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			reg_0 = loc_1
			while true do
				if math_abs(loc_7) < 9.223372036854776e18 then
					while true do
						reg_1 = rt_truncate_i64_f64(loc_7)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = rt_i64_from_u32(0, 2147483648)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_f64(memory_at_0, reg_0, no_op(bit_countrz(rt_wrap_i32_i64(reg_1))))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[544] = --[[ luauF_select(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_6 = 4294967295
		while true do
			if loc_3 ~= 1 then
				break
			end
			if loc_5 ~= 1 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
			loc_3 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 4)
			loc_3 = rt_add_i32(rt_shr_i32(rt_sub_i32(loc_5, loc_3), 4), bit_xor(rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3) + 16) + 4), 4294967295))
			while true do
				while true do
					while true do
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 0, 3, 1, }
							end)()
						end
						temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_2 + 12), 3)] or 3
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 1
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = loc_3
					while true do
						loc_7 = rt_load_f64(memory_at_0, loc_2)
						if math_abs(loc_7) < 2.147483648e9 then
							while true do
								reg_1 = rt_truncate_f64(loc_7)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						reg_1 = 2147483648
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_0 = reg_1
					loc_0 = rt_sub_i32(loc_0, 1)
					if reg_0 <= loc_0 then
						desired = 1
						break
					end
					loc_6 = rt_add_i32(rt_sub_i32(loc_5, rt_shl_i32(loc_3, 4)), rt_shl_i32(loc_0, 4))
					rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_6))
					rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_6 + 8))
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_2) + 20) ~= 35 then
					desired = 1
					break
				end
				rt_store_i32(memory_at_0, loc_1 + 12, 3)
				rt_store_f64(memory_at_0, loc_1, rt_convert_f64_i32(loc_3))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[545] = --[[ luauF_rawlen(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			while true do
				while true do
					while true do
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 1, 0, }
							end)()
						end
						temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_2 + 12), 5)] or 3
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 1
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[433](rt_load_i32(memory_at_0, loc_2))
					reg_0 = rt_convert_f64_i32(reg_0)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = no_op(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2) + 16))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_7 = reg_0
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, loc_7)
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[546] = --[[ luauF_extractk(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local loc_8 = 0.0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			loc_8 = rt_load_f64(memory_at_0, loc_4)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			reg_0 = loc_1
			reg_1 = 4294967294
			while true do
				if math_abs(loc_8) < 2.147483648e9 then
					while true do
						reg_2 = rt_truncate_f64(loc_8)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_2 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = reg_2
			reg_1 = bit_xor(rt_shl_i32(reg_1, rt_shr_i32(loc_6, 5)), 4294967295)
			while true do
				if math_abs(loc_7) < 9.223372036854776e18 then
					while true do
						reg_2 = rt_truncate_i64_f64(loc_7)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_2 = rt_i64_from_u32(0, 2147483648)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_f64(memory_at_0, reg_0, no_op(bit_and(reg_1, rt_shr_u32(rt_wrap_i32_i64(reg_2), loc_6))))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[547] = --[[ luauF_getmetatable(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										loc_6 = rt_load_i32(memory_at_0, loc_2 + 12)
										if not br_map[1] then
											br_map[1] = (function()
												return { [0] = 0, 2, 1, }
											end)()
										end
										temp = br_map[1][rt_sub_i32(loc_6, 6)] or 2
										if temp < 1 then
											break
										elseif temp > 1 then
											desired = 6
											break
										else
											desired = 7
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_2), 16)
									desired = 5
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_2), 8)
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = rt_add_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 16), rt_shl_i32(loc_6, 2)), 1440)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_6 = reg_0
						loc_3 = rt_load_i32(memory_at_0, loc_6)
						if loc_3 == 0 then
							while true do
								loc_6 = 9344
								if rt_load_i32(memory_at_0, 9356) ~= 0 then
									desired = 4
									break
								end
								rt_store_i32(memory_at_0, loc_1 + 12, 0)
								desired = 2
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						reg_0 = FUNC_LIST[426](loc_3, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1608))
						loc_6 = reg_0
						if rt_load_i32(memory_at_0, loc_6 + 12) == 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_6))
					rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_6 + 8))
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_1 + 12, 6)
				rt_store_i32(memory_at_0, loc_1, loc_3)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[548] = --[[ luauF_setmetatable(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local reg_0
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 6 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 6 then
				break
			end
			loc_3 = rt_load_i32(memory_at_0, loc_2)
			if rt_load_i32_u8(memory_at_0, loc_3 + 4) ~= 0 then
				break
			end
			if rt_load_i32(memory_at_0, loc_3 + 16) ~= 0 then
				break
			end
			loc_6 = rt_load_i32(memory_at_0, loc_4)
			rt_store_i32(memory_at_0, loc_3 + 16, loc_6)
			while true do
				if bit_and(rt_load_i32_u8(memory_at_0, loc_3 + 1), 4) == 0 then
					break
				end
				if bit_and(rt_load_i32_u8(memory_at_0, loc_6 + 1), 3) == 0 then
					break
				end
				FUNC_LIST[49](loc_0, loc_3, loc_6)
				break
			end
			rt_store_i32(memory_at_0, loc_1 + 12, 6)
			rt_store_i32(memory_at_0, loc_1, loc_3)
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[549] = --[[ luauF_tonumber(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_7 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_7
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if loc_5 ~= 1 then
				break
			end
			loc_6 = 0
			while true do
				while true do
					while true do
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 1, 2, 0, }
							end)()
						end
						temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_2 + 12), 3)] or 2
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 2
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_3 = rt_load_i32(memory_at_0, loc_2)
					loc_2 = rt_add_i32(loc_7, 8)
					reg_0 = FUNC_LIST[365](rt_add_i32(loc_3, 20), rt_add_i32(loc_7, 8))
					if reg_0 == 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_f64(memory_at_0, loc_1, rt_load_f64(memory_at_0, loc_2))
				loc_6 = 3
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_1 + 12, loc_6)
			loc_6 = 1
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_7, 16)
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[550] = --[[ luauF_tostring(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	local br_map = {}
	while true do
		loc_7 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_7
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			while true do
				while true do
					while true do
						while true do
							while true do
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 0, 1, 5, 2, 5, 3, }
									end)()
								end
								temp = br_map[1][rt_load_i32(memory_at_0, loc_2 + 12)] or 5
								if temp < 2 then
									if temp < 1 then
										break
									else
										desired = 5
										break
									end
								elseif temp > 2 then
									if temp < 5 then
										desired = 3
										break
									else
										desired = 1
										break
									end
								else
									desired = 4
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1484)
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							if rt_load_i32(memory_at_0, loc_2) ~= 0 then
								while true do
									reg_0 = FUNC_LIST[387](loc_0, 3834, 4)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							reg_0 = FUNC_LIST[387](loc_0, 3983, 5)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_3 = rt_load_i32(memory_at_0, loc_0 + 16)
					if rt_load_i32(memory_at_0, loc_3 + 40) >= rt_load_i32(memory_at_0, loc_3 + 36) then
						desired = 1
						break
					end
					reg_2 = FUNC_LIST[361](loc_7, rt_load_f64(memory_at_0, loc_2))
					reg_0 = FUNC_LIST[387](loc_0, loc_7, rt_sub_i32(reg_2, loc_7))
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = rt_load_i32(memory_at_0, loc_2)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = reg_0
			rt_store_i32(memory_at_0, loc_1 + 12, 5)
			rt_store_i32(memory_at_0, loc_1, loc_6)
			loc_6 = 1
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_7, 48)
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[551] = --[[ luauF_byteswap(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
				break
			end
			loc_7 = rt_load_f64(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			reg_0 = loc_1
			while true do
				if math_abs(loc_7) < 9.223372036854776e18 then
					while true do
						reg_1 = rt_truncate_i64_f64(loc_7)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = rt_i64_from_u32(0, 2147483648)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = rt_wrap_i32_i64(reg_1)
			rt_store_f64(memory_at_0, reg_0, no_op(bit_or(bit_or(rt_shl_i32(loc_6, 24), rt_shl_i32(bit_and(loc_6, 65280), 8)), bit_or(bit_and(rt_shr_u32(loc_6, 8), 65280), rt_shr_u32(loc_6, 24)))))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[552] = --[[ int luauF_readinteger<signed char>(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local desired
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 10 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			while true do
				loc_7 = rt_load_f64(memory_at_0, loc_4)
				if math_abs(loc_7) < 2.147483648e9 then
					while true do
						reg_0 = rt_truncate_f64(loc_7)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = reg_0
			loc_5 = rt_load_i32(memory_at_0, loc_2)
			if loc_3 >= rt_load_i32(memory_at_0, loc_5 + 4) then
				break
			end
			loc_6 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_3, loc_5) + 8)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, rt_convert_f64_i32(loc_6))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[553] = --[[ int luauF_readinteger<unsigned char>(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local desired
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 10 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			while true do
				loc_7 = rt_load_f64(memory_at_0, loc_4)
				if math_abs(loc_7) < 2.147483648e9 then
					while true do
						reg_0 = rt_truncate_f64(loc_7)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = reg_0
			loc_5 = rt_load_i32(memory_at_0, loc_2)
			if loc_3 >= rt_load_i32(memory_at_0, loc_5 + 4) then
				break
			end
			loc_6 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_3, loc_5) + 8)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, no_op(loc_6))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[554] = --[[ int luauF_writeinteger<unsigned char>(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 0) then
				break
			end
			if rt_lt_i32(loc_5, 3) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 10 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 28) ~= 3 then
				break
			end
			while true do
				loc_7 = rt_load_f64(memory_at_0, loc_4)
				if math_abs(loc_7) < 2.147483648e9 then
					while true do
						reg_0 = rt_truncate_f64(loc_7)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = reg_0
			loc_5 = rt_load_i32(memory_at_0, loc_2)
			if loc_3 >= rt_load_i32(memory_at_0, loc_5 + 4) then
				break
			end
			loc_6 = rt_add_i32(loc_3, loc_5)
			reg_0 = loc_6
			while true do
				loc_7 = rt_load_f64(memory_at_0, loc_4 + 16)
				if math_abs(loc_7) < 9.223372036854776e18 then
					while true do
						reg_1 = rt_truncate_i64_f64(loc_7)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = rt_i64_from_u32(0, 2147483648)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i64_n8(memory_at_0, reg_0 + 8, reg_1)
			loc_6 = 0
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[555] = --[[ int luauF_readinteger<short>(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 10 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_2)
			reg_0 = rt_load_i64_u32(memory_at_0, loc_5 + 4)
			while true do
				loc_7 = rt_load_f64(memory_at_0, loc_4)
				if math_abs(loc_7) < 2.147483648e9 then
					while true do
						reg_1 = rt_truncate_f64(loc_7)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = reg_1
			if rt_le_u64(reg_0, rt_add_i64(rt_extend_i64_u32(loc_3), rt_i64_ONE)) then
				break
			end
			loc_6 = rt_load_i32_i16(memory_at_0, rt_add_i32(loc_3, loc_5) + 8)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, rt_convert_f64_i32(loc_6))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[556] = --[[ int luauF_readinteger<unsigned short>(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 10 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_2)
			reg_0 = rt_load_i64_u32(memory_at_0, loc_5 + 4)
			while true do
				loc_7 = rt_load_f64(memory_at_0, loc_4)
				if math_abs(loc_7) < 2.147483648e9 then
					while true do
						reg_1 = rt_truncate_f64(loc_7)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = reg_1
			if rt_le_u64(reg_0, rt_add_i64(rt_extend_i64_u32(loc_3), rt_i64_ONE)) then
				break
			end
			loc_6 = rt_load_i32_u16(memory_at_0, rt_add_i32(loc_3, loc_5) + 8)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, no_op(loc_6))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[557] = --[[ int luauF_writeinteger<unsigned short>(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 0) then
				break
			end
			if rt_lt_i32(loc_5, 3) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 10 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 28) ~= 3 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_2)
			reg_0 = rt_load_i64_u32(memory_at_0, loc_5 + 4)
			while true do
				loc_7 = rt_load_f64(memory_at_0, loc_4)
				if math_abs(loc_7) < 2.147483648e9 then
					while true do
						reg_1 = rt_truncate_f64(loc_7)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = reg_1
			if rt_le_u64(reg_0, rt_add_i64(rt_extend_i64_u32(loc_3), rt_i64_ONE)) then
				break
			end
			loc_6 = rt_add_i32(loc_3, loc_5)
			reg_0 = loc_6
			while true do
				loc_7 = rt_load_f64(memory_at_0, loc_4 + 16)
				if math_abs(loc_7) < 9.223372036854776e18 then
					while true do
						reg_1 = rt_truncate_i64_f64(loc_7)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = rt_i64_from_u32(0, 2147483648)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i64_n16(memory_at_0, reg_0 + 8, reg_1)
			loc_6 = 0
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[558] = --[[ int luauF_readinteger<int>(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 10 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_2)
			reg_0 = rt_load_i64_u32(memory_at_0, loc_5 + 4)
			while true do
				loc_7 = rt_load_f64(memory_at_0, loc_4)
				if math_abs(loc_7) < 2.147483648e9 then
					while true do
						reg_1 = rt_truncate_f64(loc_7)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = reg_1
			if rt_le_u64(reg_0, rt_add_i64(rt_extend_i64_u32(loc_3), rt_i64_from_u32(3, 0))) then
				break
			end
			loc_6 = rt_load_i32(memory_at_0, rt_add_i32(loc_3, loc_5) + 8)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, rt_convert_f64_i32(loc_6))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[559] = --[[ int luauF_readinteger<unsigned int>(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 10 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_2)
			reg_0 = rt_load_i64_u32(memory_at_0, loc_5 + 4)
			while true do
				loc_7 = rt_load_f64(memory_at_0, loc_4)
				if math_abs(loc_7) < 2.147483648e9 then
					while true do
						reg_1 = rt_truncate_f64(loc_7)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = reg_1
			if rt_le_u64(reg_0, rt_add_i64(rt_extend_i64_u32(loc_3), rt_i64_from_u32(3, 0))) then
				break
			end
			loc_6 = rt_load_i32(memory_at_0, rt_add_i32(loc_3, loc_5) + 8)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, no_op(loc_6))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[560] = --[[ int luauF_writeinteger<unsigned int>(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 0) then
				break
			end
			if rt_lt_i32(loc_5, 3) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 10 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 28) ~= 3 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_2)
			reg_0 = rt_load_i64_u32(memory_at_0, loc_5 + 4)
			while true do
				loc_7 = rt_load_f64(memory_at_0, loc_4)
				if math_abs(loc_7) < 2.147483648e9 then
					while true do
						reg_1 = rt_truncate_f64(loc_7)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = reg_1
			if rt_le_u64(reg_0, rt_add_i64(rt_extend_i64_u32(loc_3), rt_i64_from_u32(3, 0))) then
				break
			end
			loc_6 = rt_add_i32(loc_3, loc_5)
			reg_0 = loc_6
			while true do
				loc_7 = rt_load_f64(memory_at_0, loc_4 + 16)
				if math_abs(loc_7) < 9.223372036854776e18 then
					while true do
						reg_1 = rt_truncate_i64_f64(loc_7)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = rt_i64_from_u32(0, 2147483648)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i64_n32(memory_at_0, reg_0 + 8, reg_1)
			loc_6 = 0
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[561] = --[[ int luauF_readfp<float>(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local loc_8 = 0.0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 10 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_2)
			reg_0 = rt_load_i64_u32(memory_at_0, loc_5 + 4)
			while true do
				loc_7 = rt_load_f64(memory_at_0, loc_4)
				if math_abs(loc_7) < 2.147483648e9 then
					while true do
						reg_1 = rt_truncate_f64(loc_7)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = reg_1
			if rt_le_u64(reg_0, rt_add_i64(rt_extend_i64_u32(loc_3), rt_i64_from_u32(3, 0))) then
				break
			end
			loc_8 = rt_load_f32(memory_at_0, rt_add_i32(loc_3, loc_5) + 8)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, no_op(loc_8))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[562] = --[[ int luauF_writefp<float>(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 0) then
				break
			end
			if rt_lt_i32(loc_5, 3) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 10 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 28) ~= 3 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_2)
			reg_0 = rt_load_i64_u32(memory_at_0, loc_5 + 4)
			while true do
				loc_7 = rt_load_f64(memory_at_0, loc_4)
				if math_abs(loc_7) < 2.147483648e9 then
					while true do
						reg_1 = rt_truncate_f64(loc_7)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = reg_1
			if rt_le_u64(reg_0, rt_add_i64(rt_extend_i64_u32(loc_3), rt_i64_from_u32(3, 0))) then
				break
			end
			rt_store_f32(memory_at_0, rt_add_i32(loc_3, loc_5) + 8, no_op(rt_load_f64(memory_at_0, loc_4 + 16)))
			loc_6 = 0
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[563] = --[[ int luauF_readfp<double>(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0.0
	local loc_7 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_7 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 10 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_2)
			reg_0 = rt_load_i64_u32(memory_at_0, loc_5 + 4)
			while true do
				loc_6 = rt_load_f64(memory_at_0, loc_4)
				if math_abs(loc_6) < 2.147483648e9 then
					while true do
						reg_1 = rt_truncate_f64(loc_6)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = reg_1
			if rt_le_u64(reg_0, rt_add_i64(rt_extend_i64_u32(loc_3), rt_i64_from_u32(7, 0))) then
				break
			end
			loc_6 = rt_load_f64(memory_at_0, rt_add_i32(loc_3, loc_5) + 8)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, loc_6)
			loc_7 = 1
			break
		end
		reg_0 = loc_7
		break
	end
	return reg_0
end
FUNC_LIST[564] = --[[ int luauF_writefp<double>(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 0) then
				break
			end
			if rt_lt_i32(loc_5, 3) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 10 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 28) ~= 3 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_2)
			reg_0 = rt_load_i64_u32(memory_at_0, loc_5 + 4)
			while true do
				loc_7 = rt_load_f64(memory_at_0, loc_4)
				if math_abs(loc_7) < 2.147483648e9 then
					while true do
						reg_1 = rt_truncate_f64(loc_7)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = reg_1
			if rt_le_u64(reg_0, rt_add_i64(rt_extend_i64_u32(loc_3), rt_i64_from_u32(7, 0))) then
				break
			end
			rt_store_f64(memory_at_0, rt_add_i32(loc_3, loc_5) + 8, rt_load_f64(memory_at_0, loc_4 + 16))
			loc_6 = 0
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[565] = --[[ luauF_vectormagnitude(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local loc_8 = 0.0
	local loc_9 = 0.0
	local reg_0
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 4 then
				break
			end
			loc_7 = rt_load_f32(memory_at_0, loc_2 + 8)
			loc_8 = rt_load_f32(memory_at_0, loc_2)
			loc_9 = rt_load_f32(memory_at_0, loc_2 + 4)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, no_op(math_sqrt(((loc_7 * loc_7) + ((loc_8 * loc_8) + (loc_9 * loc_9))))))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[566] = --[[ luauF_vectornormalize(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0.0
	local loc_7 = 0.0
	local loc_8 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	while true do
		loc_8 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 4 then
				break
			end
			loc_6 = rt_load_f32(memory_at_0, loc_2)
			loc_7 = rt_load_f32(memory_at_0, loc_2 + 8)
			reg_1 = loc_6
			reg_4 = (loc_6 * loc_6)
			loc_6 = rt_load_f32(memory_at_0, loc_2 + 4)
			loc_6 = (1e0 / math_sqrt(((loc_7 * loc_7) + (reg_4 + (loc_6 * loc_6)))))
			rt_store_f32(memory_at_0, loc_1, (reg_1 * loc_6))
			rt_store_f32(memory_at_0, loc_1 + 4, (rt_load_f32(memory_at_0, loc_2 + 4) * loc_6))
			loc_7 = rt_load_f32(memory_at_0, loc_2 + 8)
			rt_store_i32(memory_at_0, loc_1 + 12, 4)
			rt_store_f32(memory_at_0, loc_1 + 8, (loc_7 * loc_6))
			loc_8 = 1
			break
		end
		reg_0 = loc_8
		break
	end
	return reg_0
end
FUNC_LIST[567] = --[[ luauF_vectorcross(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local loc_8 = 0.0
	local loc_9 = 0.0
	local loc_10 = 0.0
	local reg_0
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 4 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 4 then
				break
			end
			rt_store_f32(memory_at_0, loc_1, ((rt_load_f32(memory_at_0, loc_2 + 4) * rt_load_f32(memory_at_0, loc_4 + 8)) - (rt_load_f32(memory_at_0, loc_2 + 8) * rt_load_f32(memory_at_0, loc_4 + 4))))
			rt_store_f32(memory_at_0, loc_1 + 4, ((rt_load_f32(memory_at_0, loc_2 + 8) * rt_load_f32(memory_at_0, loc_4)) - (rt_load_f32(memory_at_0, loc_2) * rt_load_f32(memory_at_0, loc_4 + 8))))
			loc_7 = rt_load_f32(memory_at_0, loc_4 + 4)
			loc_8 = rt_load_f32(memory_at_0, loc_2)
			loc_9 = rt_load_f32(memory_at_0, loc_4)
			loc_10 = rt_load_f32(memory_at_0, loc_2 + 4)
			rt_store_i32(memory_at_0, loc_1 + 12, 4)
			rt_store_f32(memory_at_0, loc_1 + 8, ((loc_8 * loc_7) - (loc_10 * loc_9)))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[568] = --[[ luauF_vectordot(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local loc_8 = 0.0
	local loc_9 = 0.0
	local loc_10 = 0.0
	local loc_11 = 0.0
	local loc_12 = 0.0
	local reg_0
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 4 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 4 then
				break
			end
			loc_7 = rt_load_f32(memory_at_0, loc_4 + 8)
			loc_8 = rt_load_f32(memory_at_0, loc_2 + 8)
			loc_9 = rt_load_f32(memory_at_0, loc_4)
			loc_10 = rt_load_f32(memory_at_0, loc_2)
			loc_11 = rt_load_f32(memory_at_0, loc_4 + 4)
			loc_12 = rt_load_f32(memory_at_0, loc_2 + 4)
			rt_store_i32(memory_at_0, loc_1 + 12, 3)
			rt_store_f64(memory_at_0, loc_1, no_op(((loc_8 * loc_7) + ((loc_10 * loc_9) + (loc_12 * loc_11)))))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[569] = --[[ luauF_vectorfloor(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 4 then
				break
			end
			rt_store_f32(memory_at_0, loc_1, math_floor(rt_load_f32(memory_at_0, loc_2)))
			rt_store_f32(memory_at_0, loc_1 + 4, math_floor(rt_load_f32(memory_at_0, loc_2 + 4)))
			loc_7 = rt_load_f32(memory_at_0, loc_2 + 8)
			rt_store_i32(memory_at_0, loc_1 + 12, 4)
			rt_store_f32(memory_at_0, loc_1 + 8, math_floor(loc_7))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[570] = --[[ luauF_vectorceil(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 4 then
				break
			end
			rt_store_f32(memory_at_0, loc_1, math_ceil(rt_load_f32(memory_at_0, loc_2)))
			rt_store_f32(memory_at_0, loc_1 + 4, math_ceil(rt_load_f32(memory_at_0, loc_2 + 4)))
			loc_7 = rt_load_f32(memory_at_0, loc_2 + 8)
			rt_store_i32(memory_at_0, loc_1 + 12, 4)
			rt_store_f32(memory_at_0, loc_1 + 8, math_ceil(loc_7))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[571] = --[[ luauF_vectorabs(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0.0
	local reg_0
	while true do
		loc_6 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 4 then
				break
			end
			rt_store_f32(memory_at_0, loc_1, math_abs(rt_load_f32(memory_at_0, loc_2)))
			rt_store_f32(memory_at_0, loc_1 + 4, math_abs(rt_load_f32(memory_at_0, loc_2 + 4)))
			loc_7 = rt_load_f32(memory_at_0, loc_2 + 8)
			rt_store_i32(memory_at_0, loc_1 + 12, 4)
			rt_store_f32(memory_at_0, loc_1 + 8, math_abs(loc_7))
			loc_6 = 1
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[572] = --[[ luauF_vectorsign(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0.0
	local loc_7 = 0
	local reg_0
	while true do
		loc_7 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_le_i32(loc_5, 0) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 4 then
				break
			end
			loc_6 = rt_load_f32(memory_at_0, loc_2)
			rt_store_f32(memory_at_0, loc_1, (if loc_6 > 0e0 then 1e0 else (if loc_6 < 0e0 then -1e0 else 0e0)))
			loc_6 = rt_load_f32(memory_at_0, loc_2 + 4)
			rt_store_f32(memory_at_0, loc_1 + 4, (if loc_6 > 0e0 then 1e0 else (if loc_6 < 0e0 then -1e0 else 0e0)))
			loc_6 = rt_load_f32(memory_at_0, loc_2 + 8)
			rt_store_i32(memory_at_0, loc_1 + 12, 4)
			rt_store_f32(memory_at_0, loc_1 + 8, (if loc_6 > 0e0 then 1e0 else (if loc_6 < 0e0 then -1e0 else 0e0)))
			loc_7 = 1
			break
		end
		reg_0 = loc_7
		break
	end
	return reg_0
end
FUNC_LIST[573] = --[[ luauF_vectorclamp(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0.0
	local loc_7 = 0.0
	local loc_8 = 0.0
	local loc_9 = 0
	local reg_0
	while true do
		loc_9 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 3) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 4 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 4 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 28) ~= 4 then
				break
			end
			loc_7 = rt_load_f32(memory_at_0, loc_4)
			loc_6 = rt_load_f32(memory_at_0, loc_4 + 16)
			if (if loc_7 <= loc_6 then 1 else 0) == 0 then
				break
			end
			if (if rt_load_f32(memory_at_0, loc_4 + 4) <= rt_load_f32(memory_at_0, loc_4 + 20) then 1 else 0) == 0 then
				break
			end
			if (if rt_load_f32(memory_at_0, loc_4 + 8) <= rt_load_f32(memory_at_0, loc_4 + 24) then 1 else 0) == 0 then
				break
			end
			loc_8 = rt_load_f32(memory_at_0, loc_2)
			loc_7 = (if loc_7 > loc_8 then loc_7 else loc_8)
			rt_store_f32(memory_at_0, loc_1, (if loc_6 < loc_7 then loc_6 else loc_7))
			loc_7 = rt_load_f32(memory_at_0, loc_4 + 20)
			loc_6 = rt_load_f32(memory_at_0, loc_4 + 4)
			loc_8 = rt_load_f32(memory_at_0, loc_2 + 4)
			loc_6 = (if loc_6 > loc_8 then loc_6 else loc_8)
			rt_store_f32(memory_at_0, loc_1 + 4, (if loc_6 > loc_7 then loc_7 else loc_6))
			loc_7 = rt_load_f32(memory_at_0, loc_4 + 24)
			loc_6 = rt_load_f32(memory_at_0, loc_4 + 8)
			loc_8 = rt_load_f32(memory_at_0, loc_2 + 8)
			rt_store_i32(memory_at_0, loc_1 + 12, 4)
			loc_6 = (if loc_6 > loc_8 then loc_6 else loc_8)
			rt_store_f32(memory_at_0, loc_1 + 8, (if loc_6 > loc_7 then loc_7 else loc_6))
			loc_9 = 1
			break
		end
		reg_0 = loc_9
		break
	end
	return reg_0
end
FUNC_LIST[574] = --[[ luauF_vectormin(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0.0
	local loc_7 = 0.0
	local loc_8 = 0.0
	local loc_9 = 0.0
	local loc_10 = 0
	local reg_0
	local desired
	while true do
		loc_10 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 4 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 4 then
				break
			end
			loc_9 = rt_load_f32(memory_at_0, loc_4 + 8)
			loc_6 = rt_load_f32(memory_at_0, loc_2 + 8)
			loc_9 = (if loc_6 > loc_9 then loc_9 else loc_6)
			loc_6 = rt_load_f32(memory_at_0, loc_4 + 4)
			loc_7 = rt_load_f32(memory_at_0, loc_2 + 4)
			loc_6 = (if loc_6 < loc_7 then loc_6 else loc_7)
			loc_7 = rt_load_f32(memory_at_0, loc_4)
			loc_8 = rt_load_f32(memory_at_0, loc_2)
			loc_7 = (if loc_7 < loc_8 then loc_7 else loc_8)
			loc_3 = 3
			if loc_5 >= 3 then
				while true do
					while true do
						loc_2 = rt_add_i32(rt_shl_i32(loc_3, 4), loc_4)
						if rt_load_i32(memory_at_0, rt_sub_i32(loc_2, 20)) ~= 4 then
							desired = 1
							break
						end
						loc_8 = rt_load_f32(memory_at_0, rt_sub_i32(loc_2, 24))
						loc_9 = (if loc_8 < loc_9 then loc_8 else loc_9)
						loc_8 = rt_load_f32(memory_at_0, rt_sub_i32(loc_2, 28))
						loc_6 = (if loc_6 > loc_8 then loc_8 else loc_6)
						loc_8 = rt_load_f32(memory_at_0, rt_sub_i32(loc_2, 32))
						loc_7 = (if loc_7 > loc_8 then loc_8 else loc_7)
						loc_2 = (if loc_3 ~= loc_5 then 1 else 0)
						loc_3 = rt_add_i32(loc_3, 1)
						if loc_2 ~= 0 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i32(memory_at_0, loc_1 + 12, 4)
			rt_store_f32(memory_at_0, loc_1 + 8, loc_9)
			rt_store_f32(memory_at_0, loc_1 + 4, loc_6)
			rt_store_f32(memory_at_0, loc_1, loc_7)
			loc_10 = 1
			break
		end
		reg_0 = loc_10
		break
	end
	return reg_0
end
FUNC_LIST[575] = --[[ luauF_vectormax(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0.0
	local loc_7 = 0.0
	local loc_8 = 0.0
	local loc_9 = 0.0
	local loc_10 = 0
	local reg_0
	local desired
	while true do
		loc_10 = 4294967295
		while true do
			if rt_gt_i32(loc_3, 1) then
				break
			end
			if rt_lt_i32(loc_5, 2) then
				break
			end
			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 4 then
				break
			end
			if rt_load_i32(memory_at_0, loc_4 + 12) ~= 4 then
				break
			end
			loc_9 = rt_load_f32(memory_at_0, loc_4 + 8)
			loc_6 = rt_load_f32(memory_at_0, loc_2 + 8)
			loc_9 = (if loc_6 < loc_9 then loc_9 else loc_6)
			loc_6 = rt_load_f32(memory_at_0, loc_4 + 4)
			loc_7 = rt_load_f32(memory_at_0, loc_2 + 4)
			loc_6 = (if loc_6 > loc_7 then loc_6 else loc_7)
			loc_7 = rt_load_f32(memory_at_0, loc_4)
			loc_8 = rt_load_f32(memory_at_0, loc_2)
			loc_7 = (if loc_7 > loc_8 then loc_7 else loc_8)
			loc_3 = 3
			if loc_5 >= 3 then
				while true do
					while true do
						loc_2 = rt_add_i32(rt_shl_i32(loc_3, 4), loc_4)
						if rt_load_i32(memory_at_0, rt_sub_i32(loc_2, 20)) ~= 4 then
							desired = 1
							break
						end
						loc_8 = rt_load_f32(memory_at_0, rt_sub_i32(loc_2, 24))
						loc_9 = (if loc_8 > loc_9 then loc_8 else loc_9)
						loc_8 = rt_load_f32(memory_at_0, rt_sub_i32(loc_2, 28))
						loc_6 = (if loc_6 < loc_8 then loc_8 else loc_6)
						loc_8 = rt_load_f32(memory_at_0, rt_sub_i32(loc_2, 32))
						loc_7 = (if loc_7 < loc_8 then loc_8 else loc_7)
						loc_2 = (if loc_3 ~= loc_5 then 1 else 0)
						loc_3 = rt_add_i32(loc_3, 1)
						if loc_2 ~= 0 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i32(memory_at_0, loc_1 + 12, 4)
			rt_store_f32(memory_at_0, loc_1 + 8, loc_9)
			rt_store_f32(memory_at_0, loc_1 + 4, loc_6)
			rt_store_f32(memory_at_0, loc_1, loc_7)
			loc_10 = 1
			break
		end
		reg_0 = loc_10
		break
	end
	return reg_0
end
FUNC_LIST[576] = --[[ luauF_missing(lua_State*, lua_TValue*, lua_TValue*, int, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local reg_0
	while true do
		reg_0 = 4294967295
		break
	end
	return reg_0
end
FUNC_LIST[577] = --[[ luau_callhook(lua_State*, void (*)(lua_State*, lua_Debug*), void*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_6 = rt_sub_i32(GLOBAL_LIST[0].value, 288)
		GLOBAL_LIST[0].value = loc_6
		loc_11 = rt_load_i32(memory_at_0, loc_0 + 12)
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 20)
		loc_7 = rt_load_i32(memory_at_0, loc_3 + 8)
		while true do
			while true do
				loc_10 = rt_load_i32_u8(memory_at_0, loc_0 + 3)
				if not br_map[1] then
					br_map[1] = (function()
						return { [0] = 0, 1, 1, 1, 1, 0, }
					end)()
				end
				temp = br_map[1][rt_sub_i32(loc_10, 1)] or 1
				if temp < 1 then
					break
				else
					desired = 1
					break
				end
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32_n8(memory_at_0, loc_0 + 3, 0)
			rt_store_i32(memory_at_0, loc_0 + 12, rt_load_i32(memory_at_0, loc_3))
			break
		end
		loc_8 = rt_load_i32(memory_at_0, loc_0 + 28)
		loc_5 = rt_load_i32(memory_at_0, loc_0 + 8)
		loc_4 = rt_load_i32(memory_at_0, loc_3 + 12)
		if loc_4 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_3 + 12, rt_add_i32(loc_4, 4))
				break
			end
		end
		loc_4 = loc_5
		if rt_le_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 24), loc_5), 320) then
			while true do
				FUNC_LIST[82](loc_0, 20)
				loc_4 = rt_load_i32(memory_at_0, loc_0 + 8)
				reg_0 = rt_load_i32(memory_at_0, loc_0 + 20)
				break
			end
		else
			while true do
				reg_0 = loc_3
				break
			end
		end
		loc_3 = reg_0
		rt_store_i32(memory_at_0, loc_3 + 8, rt_add_i32(loc_4, 320))
		loc_4 = 4294967295
		loc_9 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3 + 4))
		if rt_load_i32_u8(memory_at_0, loc_9 + 3) ~= 0 then
			while true do
				reg_0 = loc_4
				break
			end
		else
			while true do
				loc_4 = rt_load_i32(memory_at_0, loc_9 + 16)
				loc_3 = rt_load_i32(memory_at_0, loc_3 + 12)
				reg_0 = loc_4
				if loc_3 ~= 0 then
					while true do
						reg_1 = rt_sub_i32(rt_shr_i32(rt_sub_i32(loc_3, rt_load_i32(memory_at_0, loc_4 + 12)), 2), 1)
						break
					end
				else
					while true do
						reg_1 = 0
						break
					end
				end
				loc_3 = reg_1
				reg_0 = FUNC_LIST[70](reg_0, loc_3)
				break
			end
		end
		loc_4 = reg_0
		loc_9 = rt_sub_i32(loc_5, loc_8)
		loc_7 = rt_sub_i32(loc_7, loc_8)
		rt_store_i32(memory_at_0, loc_6 + 28, loc_2)
		rt_store_i32(memory_at_0, loc_6 + 20, loc_4)
		TABLE_LIST[0].data[loc_1](loc_0, loc_6)
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 20)
		loc_5 = rt_load_i32(memory_at_0, loc_3 + 12)
		if loc_5 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_3 + 12, rt_sub_i32(loc_5, 4))
				break
			end
		end
		loc_5 = rt_load_i32(memory_at_0, loc_0 + 28)
		rt_store_i32(memory_at_0, loc_3 + 8, rt_add_i32(loc_7, loc_5))
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_5, loc_9))
		while true do
			while true do
				while true do
					if not br_map[2] then
						br_map[2] = (function()
							return { [0] = 0, 2, 2, 2, 2, 1, }
						end)()
					end
					temp = br_map[2][rt_sub_i32(loc_10, 1)] or 2
					if temp < 1 then
						break
					elseif temp > 1 then
						desired = 1
						break
					else
						desired = 2
						break
					end
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if rt_load_i32_u8(memory_at_0, loc_0 + 3) == 1 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32_n8(memory_at_0, loc_0 + 3, loc_10)
			rt_store_i32(memory_at_0, loc_0 + 12, rt_add_i32(rt_sub_i32(loc_11, loc_8), loc_5))
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_6, 288)
		break
	end
end
FUNC_LIST[578] = --[[ luau_execute(lua_State*) ]] function(loc_0)
	local desired
	while true do
		if rt_load_i32_u8(memory_at_0, loc_0 + 6) == 1 then
			while true do
				FUNC_LIST[579](loc_0)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[580](loc_0)
		break
	end
end
FUNC_LIST[579] = --[[ void luau_execute<true>(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = 0
	local loc_22 = 0.0
	local loc_23 = 0.0
	local loc_24 = 0.0
	local loc_25 = 0.0
	local loc_26 = 0.0
	local reg_0
	local reg_1
	local reg_2
	local desired
	local br_map = {}
	while true do
		loc_15 = rt_add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_15
		while true do
			while true do
				while true do
					loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
					loc_1 = rt_load_i32(memory_at_0, loc_0 + 20)
					loc_3 = rt_load_i32(memory_at_0, loc_1 + 12)
					loc_13 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 4))
					loc_12 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_13 + 16) + 8)
					loc_2 = 1
					while true do
						loc_1 = loc_3
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		while true do
																			while true do
																				while true do
																					while true do
																						while true do
																							while true do
																								while true do
																									while true do
																										while true do
																											while true do
																												while true do
																													while true do
																														while true do
																															while true do
																																while true do
																																	while true do
																																		while true do
																																			while true do
																																				while true do
																																					while true do
																																						while true do
																																							while true do
																																								while true do
																																									while true do
																																										while true do
																																											while true do
																																												while true do
																																													while true do
																																														while true do
																																															while true do
																																																while true do
																																																	while true do
																																																		while true do
																																																			while true do
																																																				while true do
																																																					while true do
																																																						while true do
																																																							while true do
																																																								while true do
																																																									while true do
																																																										while true do
																																																											while true do
																																																												while true do
																																																													while true do
																																																														while true do
																																																															while true do
																																																																while true do
																																																																	while true do
																																																																		while true do
																																																																			while true do
																																																																				while true do
																																																																					while true do
																																																																						while true do
																																																																							while true do
																																																																								while true do
																																																																									while true do
																																																																										while true do
																																																																											while true do
																																																																												while true do
																																																																													while true do
																																																																														while true do
																																																																															while true do
																																																																																while true do
																																																																																	while true do
																																																																																		while true do
																																																																																			while true do
																																																																																				while true do
																																																																																					while true do
																																																																																						while true do
																																																																																							while true do
																																																																																								while true do
																																																																																									while true do
																																																																																										while true do
																																																																																											while true do
																																																																																												while true do
																																																																																													while true do
																																																																																														while true do
																																																																																															while true do
																																																																																																while true do
																																																																																																	if not br_map[1] then
																																																																																																		br_map[1] = (function()
																																																																																																			return { [0] = 21, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, }
																																																																																																		end)()
																																																																																																	end
																																																																																																	temp = br_map[1][rt_sub_i32(loc_2, 2)] or 0
																																																																																																	if temp < 42 then
																																																																																																		if temp < 21 then
																																																																																																			if temp < 10 then
																																																																																																				if temp < 5 then
																																																																																																					if temp < 2 then
																																																																																																						if temp < 1 then
																																																																																																							break
																																																																																																						else
																																																																																																							desired = 94
																																																																																																							break
																																																																																																						end
																																																																																																					elseif temp > 2 then
																																																																																																						if temp < 4 then
																																																																																																							desired = 92
																																																																																																							break
																																																																																																						else
																																																																																																							desired = 91
																																																																																																							break
																																																																																																						end
																																																																																																					else
																																																																																																						desired = 93
																																																																																																						break
																																																																																																					end
																																																																																																				elseif temp > 5 then
																																																																																																					if temp < 8 then
																																																																																																						if temp < 7 then
																																																																																																							desired = 89
																																																																																																							break
																																																																																																						else
																																																																																																							desired = 88
																																																																																																							break
																																																																																																						end
																																																																																																					elseif temp > 8 then
																																																																																																						desired = 86
																																																																																																						break
																																																																																																					else
																																																																																																						desired = 87
																																																																																																						break
																																																																																																					end
																																																																																																				else
																																																																																																					desired = 90
																																																																																																					break
																																																																																																				end
																																																																																																			elseif temp > 10 then
																																																																																																				if temp < 16 then
																																																																																																					if temp < 13 then
																																																																																																						if temp < 12 then
																																																																																																							desired = 84
																																																																																																							break
																																																																																																						else
																																																																																																							desired = 83
																																																																																																							break
																																																																																																						end
																																																																																																					elseif temp > 13 then
																																																																																																						if temp < 15 then
																																																																																																							desired = 81
																																																																																																							break
																																																																																																						else
																																																																																																							desired = 80
																																																																																																							break
																																																																																																						end
																																																																																																					else
																																																																																																						desired = 82
																																																																																																						break
																																																																																																					end
																																																																																																				elseif temp > 16 then
																																																																																																					if temp < 19 then
																																																																																																						if temp < 18 then
																																																																																																							desired = 78
																																																																																																							break
																																																																																																						else
																																																																																																							desired = 77
																																																																																																							break
																																																																																																						end
																																																																																																					elseif temp > 19 then
																																																																																																						desired = 75
																																																																																																						break
																																																																																																					else
																																																																																																						desired = 76
																																																																																																						break
																																																																																																					end
																																																																																																				else
																																																																																																					desired = 79
																																																																																																					break
																																																																																																				end
																																																																																																			else
																																																																																																				desired = 85
																																																																																																				break
																																																																																																			end
																																																																																																		elseif temp > 21 then
																																																																																																			if temp < 32 then
																																																																																																				if temp < 27 then
																																																																																																					if temp < 24 then
																																																																																																						if temp < 23 then
																																																																																																							desired = 73
																																																																																																							break
																																																																																																						else
																																																																																																							desired = 72
																																																																																																							break
																																																																																																						end
																																																																																																					elseif temp > 24 then
																																																																																																						if temp < 26 then
																																																																																																							desired = 70
																																																																																																							break
																																																																																																						else
																																																																																																							desired = 69
																																																																																																							break
																																																																																																						end
																																																																																																					else
																																																																																																						desired = 71
																																																																																																						break
																																																																																																					end
																																																																																																				elseif temp > 27 then
																																																																																																					if temp < 30 then
																																																																																																						if temp < 29 then
																																																																																																							desired = 67
																																																																																																							break
																																																																																																						else
																																																																																																							desired = 66
																																																																																																							break
																																																																																																						end
																																																																																																					elseif temp > 30 then
																																																																																																						desired = 64
																																																																																																						break
																																																																																																					else
																																																																																																						desired = 65
																																																																																																						break
																																																																																																					end
																																																																																																				else
																																																																																																					desired = 68
																																																																																																					break
																																																																																																				end
																																																																																																			elseif temp > 32 then
																																																																																																				if temp < 37 then
																																																																																																					if temp < 35 then
																																																																																																						if temp < 34 then
																																																																																																							desired = 62
																																																																																																							break
																																																																																																						else
																																																																																																							desired = 61
																																																																																																							break
																																																																																																						end
																																																																																																					elseif temp > 35 then
																																																																																																						desired = 59
																																																																																																						break
																																																																																																					else
																																																																																																						desired = 60
																																																																																																						break
																																																																																																					end
																																																																																																				elseif temp > 37 then
																																																																																																					if temp < 40 then
																																																																																																						if temp < 39 then
																																																																																																							desired = 57
																																																																																																							break
																																																																																																						else
																																																																																																							desired = 56
																																																																																																							break
																																																																																																						end
																																																																																																					elseif temp > 40 then
																																																																																																						desired = 54
																																																																																																						break
																																																																																																					else
																																																																																																						desired = 55
																																																																																																						break
																																																																																																					end
																																																																																																				else
																																																																																																					desired = 58
																																																																																																					break
																																																																																																				end
																																																																																																			else
																																																																																																				desired = 63
																																																																																																				break
																																																																																																			end
																																																																																																		else
																																																																																																			desired = 74
																																																																																																			break
																																																																																																		end
																																																																																																	elseif temp > 42 then
																																																																																																		if temp < 64 then
																																																																																																			if temp < 54 then
																																																																																																				if temp < 49 then
																																																																																																					if temp < 45 then
																																																																																																						if temp < 44 then
																																																																																																							desired = 52
																																																																																																							break
																																																																																																						else
																																																																																																							desired = 51
																																																																																																							break
																																																																																																						end
																																																																																																					elseif temp > 45 then
																																																																																																						if temp < 47 then
																																																																																																							desired = 49
																																																																																																							break
																																																																																																						else
																																																																																																							desired = 48
																																																																																																							break
																																																																																																						end
																																																																																																					else
																																																																																																						desired = 50
																																																																																																						break
																																																																																																					end
																																																																																																				elseif temp > 49 then
																																																																																																					if temp < 52 then
																																																																																																						if temp < 51 then
																																																																																																							desired = 45
																																																																																																							break
																																																																																																						else
																																																																																																							desired = 44
																																																																																																							break
																																																																																																						end
																																																																																																					elseif temp > 52 then
																																																																																																						desired = 42
																																																																																																						break
																																																																																																					else
																																																																																																						desired = 43
																																																																																																						break
																																																																																																					end
																																																																																																				else
																																																																																																					desired = 46
																																																																																																					break
																																																																																																				end
																																																																																																			elseif temp > 54 then
																																																																																																				if temp < 59 then
																																																																																																					if temp < 57 then
																																																																																																						if temp < 56 then
																																																																																																							desired = 40
																																																																																																							break
																																																																																																						else
																																																																																																							desired = 39
																																																																																																							break
																																																																																																						end
																																																																																																					elseif temp > 57 then
																																																																																																						desired = 37
																																																																																																						break
																																																																																																					else
																																																																																																						desired = 38
																																																																																																						break
																																																																																																					end
																																																																																																				elseif temp > 59 then
																																																																																																					if temp < 62 then
																																																																																																						if temp < 61 then
																																																																																																							desired = 35
																																																																																																							break
																																																																																																						else
																																																																																																							desired = 34
																																																																																																							break
																																																																																																						end
																																																																																																					elseif temp > 62 then
																																																																																																						desired = 32
																																																																																																						break
																																																																																																					else
																																																																																																						desired = 33
																																																																																																						break
																																																																																																					end
																																																																																																				else
																																																																																																					desired = 36
																																																																																																					break
																																																																																																				end
																																																																																																			else
																																																																																																				desired = 41
																																																																																																				break
																																																																																																			end
																																																																																																		elseif temp > 64 then
																																																																																																			if temp < 76 then
																																																																																																				if temp < 70 then
																																																																																																					if temp < 67 then
																																																																																																						if temp < 66 then
																																																																																																							desired = 30
																																																																																																							break
																																																																																																						else
																																																																																																							desired = 29
																																																																																																							break
																																																																																																						end
																																																																																																					elseif temp > 67 then
																																																																																																						if temp < 69 then
																																																																																																							desired = 27
																																																																																																							break
																																																																																																						else
																																																																																																							desired = 26
																																																																																																							break
																																																																																																						end
																																																																																																					else
																																																																																																						desired = 28
																																																																																																						break
																																																																																																					end
																																																																																																				elseif temp > 70 then
																																																																																																					if temp < 73 then
																																																																																																						if temp < 72 then
																																																																																																							desired = 24
																																																																																																							break
																																																																																																						else
																																																																																																							desired = 23
																																																																																																							break
																																																																																																						end
																																																																																																					elseif temp > 73 then
																																																																																																						desired = 21
																																																																																																						break
																																																																																																					else
																																																																																																						desired = 22
																																																																																																						break
																																																																																																					end
																																																																																																				else
																																																																																																					desired = 25
																																																																																																					break
																																																																																																				end
																																																																																																			elseif temp > 76 then
																																																																																																				if temp < 81 then
																																																																																																					if temp < 79 then
																																																																																																						if temp < 78 then
																																																																																																							desired = 18
																																																																																																							break
																																																																																																						else
																																																																																																							desired = 17
																																																																																																							break
																																																																																																						end
																																																																																																					elseif temp > 79 then
																																																																																																						desired = 15
																																																																																																						break
																																																																																																					else
																																																																																																						desired = 16
																																																																																																						break
																																																																																																					end
																																																																																																				elseif temp > 81 then
																																																																																																					if temp < 84 then
																																																																																																						if temp < 83 then
																																																																																																							desired = 13
																																																																																																							break
																																																																																																						else
																																																																																																							desired = 12
																																																																																																							break
																																																																																																						end
																																																																																																					elseif temp > 84 then
																																																																																																						desired = 10
																																																																																																						break
																																																																																																					else
																																																																																																						desired = 11
																																																																																																						break
																																																																																																					end
																																																																																																				else
																																																																																																					desired = 14
																																																																																																					break
																																																																																																				end
																																																																																																			else
																																																																																																				desired = 19
																																																																																																				break
																																																																																																			end
																																																																																																		else
																																																																																																			desired = 31
																																																																																																			break
																																																																																																		end
																																																																																																	else
																																																																																																		desired = 53
																																																																																																		break
																																																																																																	end
																																																																																																end
																																																																																																if desired then
																																																																																																	if desired == 94 then
																																																																																																		desired = nil
																																																																																																	end
																																																																																																	break
																																																																																																end
																																																																																																while true do
																																																																																																	loc_3 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1720)
																																																																																																	if loc_3 == 0 then
																																																																																																		break
																																																																																																	end
																																																																																																	if bit_and(rt_load_i32(memory_at_0, loc_1), 191) == 1 then
																																																																																																		break
																																																																																																	end
																																																																																																	rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_1)
																																																																																																	FUNC_LIST[577](loc_0, loc_3, 0)
																																																																																																	if rt_load_i32_u8(memory_at_0, loc_0 + 3) ~= 0 then
																																																																																																		desired = 7
																																																																																																		break
																																																																																																	end
																																																																																																	loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																																																	break
																																																																																																end
																																																																																																if desired then
																																																																																																	if desired == 94 then
																																																																																																		desired = nil
																																																																																																	end
																																																																																																	break
																																																																																																end
																																																																																																loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(rt_load_i32_u8(memory_at_0, loc_1), 2), 11344))
																																																																																																loc_3 = loc_1
																																																																																																desired = 4
																																																																																																break
																																																																																															end
																																																																																															if desired then
																																																																																																if desired == 93 then
																																																																																																	desired = nil
																																																																																																end
																																																																																																break
																																																																																															end
																																																																																															rt_store_i32(memory_at_0, rt_add_i32(rt_shl_i32(rt_load_i32_u8(memory_at_0, loc_1 + 1), 4), loc_5) + 12, 0)
																																																																																															loc_3 = rt_add_i32(loc_1, 4)
																																																																																															desired = 5
																																																																																															break
																																																																																														end
																																																																																														if desired then
																																																																																															if desired == 92 then
																																																																																																desired = nil
																																																																																															end
																																																																																															break
																																																																																														end
																																																																																														loc_2 = 1
																																																																																														loc_3 = rt_load_i32(memory_at_0, loc_1)
																																																																																														loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 4), 4080), loc_5)
																																																																																														rt_store_i32(memory_at_0, loc_4 + 12, 1)
																																																																																														rt_store_i32(memory_at_0, loc_4, bit_and(rt_shr_u32(loc_3, 16), 255))
																																																																																														loc_3 = rt_add_i32(rt_add_i32(bit_and(rt_shr_u32(loc_3, 22), 1020), loc_1), 4)
																																																																																														desired = 4
																																																																																														break
																																																																																													end
																																																																																													if desired then
																																																																																														if desired == 91 then
																																																																																															desired = nil
																																																																																														end
																																																																																														break
																																																																																													end
																																																																																													loc_3 = rt_load_i32(memory_at_0, loc_1)
																																																																																													loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 4), 4080), loc_5)
																																																																																													rt_store_i32(memory_at_0, loc_2 + 12, 3)
																																																																																													rt_store_f64(memory_at_0, loc_2, rt_convert_f64_i32(rt_shr_i32(loc_3, 16)))
																																																																																													loc_3 = rt_add_i32(loc_1, 4)
																																																																																													desired = 5
																																																																																													break
																																																																																												end
																																																																																												if desired then
																																																																																													if desired == 90 then
																																																																																														desired = nil
																																																																																													end
																																																																																													break
																																																																																												end
																																																																																												loc_3 = rt_load_i32(memory_at_0, loc_1)
																																																																																												loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 4), 4080), loc_5)
																																																																																												loc_3 = rt_add_i32(rt_shl_i32(rt_shr_i32(loc_3, 16), 4), loc_12)
																																																																																												rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_3))
																																																																																												rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
																																																																																												loc_3 = rt_add_i32(loc_1, 4)
																																																																																												desired = 5
																																																																																												break
																																																																																											end
																																																																																											if desired then
																																																																																												if desired == 89 then
																																																																																													desired = nil
																																																																																												end
																																																																																												break
																																																																																											end
																																																																																											loc_3 = rt_load_i32(memory_at_0, loc_1)
																																																																																											loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 4), 4080), loc_5)
																																																																																											loc_3 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 12), 4080), loc_5)
																																																																																											rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_3))
																																																																																											rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
																																																																																											loc_3 = rt_add_i32(loc_1, 4)
																																																																																											desired = 5
																																																																																											break
																																																																																										end
																																																																																										if desired then
																																																																																											if desired == 88 then
																																																																																												desired = nil
																																																																																											end
																																																																																											break
																																																																																										end
																																																																																										loc_3 = rt_add_i32(loc_1, 8)
																																																																																										loc_7 = rt_add_i32(rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 4), 4), loc_12)
																																																																																										loc_2 = rt_load_i32(memory_at_0, loc_1)
																																																																																										loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																																																																										while true do
																																																																																											loc_6 = rt_load_i32(memory_at_0, loc_13 + 12)
																																																																																											loc_8 = bit_and(rt_load_i32_u8(memory_at_0, loc_6 + 7), rt_shr_u32(loc_2, 24))
																																																																																											loc_2 = rt_add_i32(rt_load_i32(memory_at_0, loc_6 + 24), rt_shl_i32(loc_8, 5))
																																																																																											if bit_and(rt_load_i32(memory_at_0, loc_2 + 28), 15) ~= 5 then
																																																																																												break
																																																																																											end
																																																																																											if rt_load_i32(memory_at_0, loc_2 + 16) ~= rt_load_i32(memory_at_0, loc_7) then
																																																																																												break
																																																																																											end
																																																																																											if rt_load_i32(memory_at_0, loc_2 + 12) == 0 then
																																																																																												break
																																																																																											end
																																																																																											rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_2))
																																																																																											rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
																																																																																											desired = 5
																																																																																											break
																																																																																										end
																																																																																										if desired then
																																																																																											if desired == 88 then
																																																																																												desired = nil
																																																																																											end
																																																																																											break
																																																																																										end
																																																																																										rt_store_i32(memory_at_0, loc_15 + 60, 6)
																																																																																										rt_store_i32(memory_at_0, loc_15 + 48, loc_6)
																																																																																										rt_store_i32(memory_at_0, loc_0 + 52, loc_8)
																																																																																										rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																																										FUNC_LIST[588](loc_0, rt_add_i32(loc_15, 48), loc_7, loc_4)
																																																																																										loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																																										rt_store_i32_n8(memory_at_0, loc_1 + 3, rt_load_i32_u8(memory_at_0, loc_0 + 52))
																																																																																										desired = 5
																																																																																										break
																																																																																									end
																																																																																									if desired then
																																																																																										if desired == 87 then
																																																																																											desired = nil
																																																																																										end
																																																																																										break
																																																																																									end
																																																																																									loc_3 = rt_add_i32(loc_1, 8)
																																																																																									loc_7 = rt_add_i32(rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 4), 4), loc_12)
																																																																																									loc_2 = rt_load_i32(memory_at_0, loc_1)
																																																																																									loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																																																																									while true do
																																																																																										loc_6 = rt_load_i32(memory_at_0, loc_13 + 12)
																																																																																										loc_8 = bit_and(rt_load_i32_u8(memory_at_0, loc_6 + 7), rt_shr_u32(loc_2, 24))
																																																																																										loc_2 = rt_add_i32(rt_load_i32(memory_at_0, loc_6 + 24), rt_shl_i32(loc_8, 5))
																																																																																										if bit_and(rt_load_i32(memory_at_0, loc_2 + 28), 15) ~= 5 then
																																																																																											break
																																																																																										end
																																																																																										if rt_load_i32(memory_at_0, loc_2 + 16) ~= rt_load_i32(memory_at_0, loc_7) then
																																																																																											break
																																																																																										end
																																																																																										if rt_load_i32(memory_at_0, loc_2 + 12) == 0 then
																																																																																											break
																																																																																										end
																																																																																										if rt_load_i32_u8(memory_at_0, loc_6 + 4) ~= 0 then
																																																																																											break
																																																																																										end
																																																																																										rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_4))
																																																																																										rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
																																																																																										loc_2 = 1
																																																																																										if rt_lt_i32(rt_load_i32(memory_at_0, loc_4 + 12), 5) then
																																																																																											desired = 4
																																																																																											break
																																																																																										end
																																																																																										if bit_and(rt_load_i32_u8(memory_at_0, loc_6 + 1), 4) == 0 then
																																																																																											desired = 4
																																																																																											break
																																																																																										end
																																																																																										loc_1 = rt_load_i32(memory_at_0, loc_4)
																																																																																										if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) == 0 then
																																																																																											desired = 4
																																																																																											break
																																																																																										end
																																																																																										FUNC_LIST[50](loc_0, loc_6, loc_1)
																																																																																										desired = 5
																																																																																										break
																																																																																									end
																																																																																									if desired then
																																																																																										if desired == 87 then
																																																																																											desired = nil
																																																																																										end
																																																																																										break
																																																																																									end
																																																																																									rt_store_i32(memory_at_0, loc_15 + 44, 6)
																																																																																									rt_store_i32(memory_at_0, loc_15 + 32, loc_6)
																																																																																									rt_store_i32(memory_at_0, loc_0 + 52, loc_8)
																																																																																									rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																																									FUNC_LIST[589](loc_0, rt_add_i32(loc_15, 32), loc_7, loc_4)
																																																																																									loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																																									rt_store_i32_n8(memory_at_0, loc_1 + 3, rt_load_i32_u8(memory_at_0, loc_0 + 52))
																																																																																									desired = 5
																																																																																									break
																																																																																								end
																																																																																								if desired then
																																																																																									if desired == 86 then
																																																																																										desired = nil
																																																																																									end
																																																																																									break
																																																																																								end
																																																																																								loc_3 = rt_load_i32(memory_at_0, loc_1)
																																																																																								loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 4), 4080), loc_5)
																																																																																								loc_3 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 12), 4080), loc_13)
																																																																																								loc_21 = loc_3
																																																																																								loc_2 = rt_add_i32(loc_21, 24)
																																																																																								if rt_load_i32(memory_at_0, loc_3 + 36) == 12 then
																																																																																									while true do
																																																																																										reg_0 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_21 + 24) + 4)
																																																																																										break
																																																																																									end
																																																																																									if desired then
																																																																																										if desired == 86 then
																																																																																											desired = nil
																																																																																										end
																																																																																										break
																																																																																									end
																																																																																								else
																																																																																									while true do
																																																																																										reg_0 = loc_2
																																																																																										break
																																																																																									end
																																																																																									if desired then
																																																																																										if desired == 86 then
																																																																																											desired = nil
																																																																																										end
																																																																																										break
																																																																																									end
																																																																																								end
																																																																																								loc_2 = reg_0
																																																																																								loc_3 = rt_add_i32(loc_1, 4)
																																																																																								rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_2))
																																																																																								rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
																																																																																								desired = 5
																																																																																								break
																																																																																							end
																																																																																							if desired then
																																																																																								if desired == 85 then
																																																																																									desired = nil
																																																																																								end
																																																																																								break
																																																																																							end
																																																																																							loc_3 = rt_load_i32(memory_at_0, loc_1)
																																																																																							loc_6 = rt_load_i32(memory_at_0, rt_add_i32(bit_and(rt_shr_u32(loc_3, 12), 4080), loc_13) + 24)
																																																																																							loc_2 = rt_load_i32(memory_at_0, loc_6 + 4)
																																																																																							loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 4), 4080), loc_5)
																																																																																							rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_4))
																																																																																							rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
																																																																																							loc_3 = rt_add_i32(loc_1, 4)
																																																																																							loc_2 = 1
																																																																																							if rt_lt_i32(rt_load_i32(memory_at_0, loc_4 + 12), 5) then
																																																																																								desired = 4
																																																																																								break
																																																																																							end
																																																																																							if bit_and(rt_load_i32_u8(memory_at_0, loc_6 + 1), 4) == 0 then
																																																																																								desired = 4
																																																																																								break
																																																																																							end
																																																																																							loc_1 = rt_load_i32(memory_at_0, loc_4)
																																																																																							if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) == 0 then
																																																																																								desired = 4
																																																																																								break
																																																																																							end
																																																																																							FUNC_LIST[49](loc_0, loc_6, loc_1)
																																																																																							desired = 5
																																																																																							break
																																																																																						end
																																																																																						if desired then
																																																																																							if desired == 84 then
																																																																																								desired = nil
																																																																																							end
																																																																																							break
																																																																																						end
																																																																																						loc_3 = rt_add_i32(loc_1, 4)
																																																																																						loc_2 = 1
																																																																																						loc_4 = rt_load_i32(memory_at_0, loc_0 + 60)
																																																																																						if loc_4 == 0 then
																																																																																							desired = 4
																																																																																							break
																																																																																						end
																																																																																						loc_1 = rt_add_i32(rt_shl_i32(rt_load_i32_u8(memory_at_0, loc_1 + 1), 4), loc_5)
																																																																																						if loc_1 > rt_load_i32(memory_at_0, loc_4 + 4) then
																																																																																							desired = 4
																																																																																							break
																																																																																						end
																																																																																						FUNC_LIST[19](loc_0, loc_1)
																																																																																						desired = 5
																																																																																						break
																																																																																					end
																																																																																					if desired then
																																																																																						if desired == 83 then
																																																																																							desired = nil
																																																																																						end
																																																																																						break
																																																																																					end
																																																																																					loc_3 = rt_load_i32(memory_at_0, loc_1)
																																																																																					loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 4), 4080), loc_5)
																																																																																					loc_4 = rt_load_i32(memory_at_0, loc_13 + 12)
																																																																																					while true do
																																																																																						loc_3 = rt_add_i32(rt_shl_i32(rt_shr_i32(loc_3, 16), 4), loc_12)
																																																																																						if rt_load_i32(memory_at_0, loc_3 + 12) == 0 then
																																																																																							break
																																																																																						end
																																																																																						if rt_load_i32_u8(memory_at_0, loc_4 + 5) == 0 then
																																																																																							break
																																																																																						end
																																																																																						rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_3))
																																																																																						rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
																																																																																						loc_3 = rt_add_i32(loc_1, 8)
																																																																																						desired = 5
																																																																																						break
																																																																																					end
																																																																																					if desired then
																																																																																						if desired == 83 then
																																																																																							desired = nil
																																																																																						end
																																																																																						break
																																																																																					end
																																																																																					loc_5 = rt_load_i32(memory_at_0, loc_1 + 4)
																																																																																					loc_3 = rt_add_i32(loc_1, 8)
																																																																																					rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																																					FUNC_LIST[583](loc_0, loc_4, loc_12, loc_2, loc_5, 0)
																																																																																					loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																																					desired = 5
																																																																																					break
																																																																																				end
																																																																																				if desired then
																																																																																					if desired == 82 then
																																																																																						desired = nil
																																																																																					end
																																																																																					break
																																																																																				end
																																																																																				loc_3 = rt_add_i32(loc_1, 8)
																																																																																				loc_8 = rt_add_i32(rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 4), 4), loc_12)
																																																																																				loc_2 = rt_load_i32(memory_at_0, loc_1)
																																																																																				loc_9 = bit_and(rt_shr_u32(loc_2, 8), 255)
																																																																																				loc_4 = rt_add_i32(rt_shl_i32(loc_9, 4), loc_5)
																																																																																				while true do
																																																																																					while true do
																																																																																						loc_6 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5)
																																																																																						loc_7 = rt_load_i32(memory_at_0, loc_6 + 12)
																																																																																						if loc_7 ~= 6 then
																																																																																							while true do
																																																																																								if loc_7 ~= 8 then
																																																																																									desired = 83
																																																																																									break
																																																																																								end
																																																																																								loc_7 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_6) + 8)
																																																																																								if loc_7 == 0 then
																																																																																									desired = 84
																																																																																									break
																																																																																								end
																																																																																								if bit_and(rt_load_i32_u8(memory_at_0, loc_7 + 3), 1) ~= 0 then
																																																																																									desired = 84
																																																																																									break
																																																																																								end
																																																																																								reg_0 = FUNC_LIST[460](loc_7, 0, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1528))
																																																																																								loc_7 = reg_0
																																																																																								if loc_7 == 0 then
																																																																																									desired = 84
																																																																																									break
																																																																																								end
																																																																																								if rt_load_i32(memory_at_0, loc_7 + 12) ~= 7 then
																																																																																									desired = 84
																																																																																									break
																																																																																								end
																																																																																								if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_7) + 3) == 0 then
																																																																																									desired = 84
																																																																																									break
																																																																																								end
																																																																																								loc_5 = rt_load_i32(memory_at_0, loc_0 + 8)
																																																																																								rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_7))
																																																																																								rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_7 + 8))
																																																																																								rt_store_i64(memory_at_0, loc_5 + 24, rt_load_i64(memory_at_0, loc_6 + 8))
																																																																																								rt_store_i64(memory_at_0, loc_5 + 16, rt_load_i64(memory_at_0, loc_6))
																																																																																								rt_store_i64(memory_at_0, loc_5 + 40, rt_load_i64(memory_at_0, loc_8 + 8))
																																																																																								rt_store_i64(memory_at_0, loc_5 + 32, rt_load_i64(memory_at_0, loc_8))
																																																																																								rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_5, 48))
																																																																																								rt_store_i32(memory_at_0, loc_0 + 52, rt_shr_u32(loc_2, 24))
																																																																																								rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																																								FUNC_LIST[607](loc_0, 2, loc_9)
																																																																																								loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																																								rt_store_i32_n8(memory_at_0, loc_1 + 3, rt_load_i32_u8(memory_at_0, loc_0 + 52))
																																																																																								desired = 5
																																																																																								break
																																																																																							end
																																																																																							if desired then
																																																																																								if desired == 84 then
																																																																																									desired = nil
																																																																																								end
																																																																																								break
																																																																																							end
																																																																																						end
																																																																																						while true do
																																																																																							loc_7 = rt_load_i32(memory_at_0, loc_6)
																																																																																							loc_9 = bit_and(rt_load_i32_u8(memory_at_0, loc_7 + 7), rt_shr_u32(loc_2, 24))
																																																																																							loc_2 = rt_add_i32(rt_load_i32(memory_at_0, loc_7 + 24), rt_shl_i32(loc_9, 5))
																																																																																							if bit_and(rt_load_i32(memory_at_0, loc_2 + 28), 15) ~= 5 then
																																																																																								break
																																																																																							end
																																																																																							if rt_load_i32(memory_at_0, loc_2 + 16) ~= rt_load_i32(memory_at_0, loc_8) then
																																																																																								break
																																																																																							end
																																																																																							if rt_load_i32(memory_at_0, loc_2 + 12) == 0 then
																																																																																								break
																																																																																							end
																																																																																							rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_2))
																																																																																							rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
																																																																																							desired = 5
																																																																																							break
																																																																																						end
																																																																																						if desired then
																																																																																							if desired == 84 then
																																																																																								desired = nil
																																																																																							end
																																																																																							break
																																																																																						end
																																																																																						if rt_load_i32(memory_at_0, loc_7 + 16) == 0 then
																																																																																							while true do
																																																																																								reg_0 = FUNC_LIST[426](loc_7, rt_load_i32(memory_at_0, loc_8))
																																																																																								loc_2 = reg_0
																																																																																								if loc_2 ~= 9344 then
																																																																																									while true do
																																																																																										rt_store_i32_n8(memory_at_0, loc_1 + 3, rt_shr_u32(rt_sub_i32(loc_2, rt_load_i32(memory_at_0, loc_7 + 24)), 5))
																																																																																										break
																																																																																									end
																																																																																									if desired then
																																																																																										break
																																																																																									end
																																																																																								end
																																																																																								rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_2))
																																																																																								rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
																																																																																								desired = 5
																																																																																								break
																																																																																							end
																																																																																							if desired then
																																																																																								if desired == 84 then
																																																																																									desired = nil
																																																																																								end
																																																																																								break
																																																																																							end
																																																																																						end
																																																																																						rt_store_i32(memory_at_0, loc_0 + 52, loc_9)
																																																																																						rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																																						FUNC_LIST[588](loc_0, loc_6, loc_8, loc_4)
																																																																																						loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																																						rt_store_i32_n8(memory_at_0, loc_1 + 3, rt_load_i32_u8(memory_at_0, loc_0 + 52))
																																																																																						desired = 5
																																																																																						break
																																																																																					end
																																																																																					if desired then
																																																																																						if desired == 83 then
																																																																																							desired = nil
																																																																																						end
																																																																																						break
																																																																																					end
																																																																																					loc_7 = rt_load_i32(memory_at_0, loc_6 + 12)
																																																																																					break
																																																																																				end
																																																																																				if desired then
																																																																																					if desired == 82 then
																																																																																						desired = nil
																																																																																					end
																																																																																					break
																																																																																				end
																																																																																				while true do
																																																																																					if loc_7 ~= 4 then
																																																																																						break
																																																																																					end
																																																																																					while true do
																																																																																						loc_7 = rt_load_i32(memory_at_0, loc_8)
																																																																																						loc_11 = rt_sub_i32(bit_or(rt_load_i32_i8(memory_at_0, loc_7 + 20), 32), 120)
																																																																																						if loc_11 > 2 then
																																																																																							break
																																																																																						end
																																																																																						if rt_load_i32_u8(memory_at_0, loc_7 + 21) ~= 0 then
																																																																																							break
																																																																																						end
																																																																																						loc_25 = rt_load_f32(memory_at_0, rt_add_i32(rt_shl_i32(loc_11, 2), loc_6))
																																																																																						rt_store_i32(memory_at_0, loc_4 + 12, 3)
																																																																																						rt_store_f64(memory_at_0, loc_4, no_op(loc_25))
																																																																																						desired = 5
																																																																																						break
																																																																																					end
																																																																																					if desired then
																																																																																						if desired == 83 then
																																																																																							desired = nil
																																																																																						end
																																																																																						break
																																																																																					end
																																																																																					loc_7 = rt_load_i32(memory_at_0, loc_0 + 16)
																																																																																					loc_5 = rt_load_i32(memory_at_0, loc_7 + 1456)
																																																																																					if loc_5 == 0 then
																																																																																						break
																																																																																					end
																																																																																					if bit_and(rt_load_i32_u8(memory_at_0, loc_5 + 3), 1) ~= 0 then
																																																																																						break
																																																																																					end
																																																																																					reg_0 = FUNC_LIST[460](loc_5, 0, rt_load_i32(memory_at_0, loc_7 + 1528))
																																																																																					loc_5 = reg_0
																																																																																					if loc_5 == 0 then
																																																																																						break
																																																																																					end
																																																																																					if rt_load_i32(memory_at_0, loc_5 + 12) ~= 7 then
																																																																																						break
																																																																																					end
																																																																																					if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_5) + 3) == 0 then
																																																																																						break
																																																																																					end
																																																																																					loc_4 = rt_load_i32(memory_at_0, loc_0 + 8)
																																																																																					rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_5))
																																																																																					rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
																																																																																					rt_store_i64(memory_at_0, loc_4 + 24, rt_load_i64(memory_at_0, loc_6 + 8))
																																																																																					rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_6))
																																																																																					rt_store_i64(memory_at_0, loc_4 + 40, rt_load_i64(memory_at_0, loc_8 + 8))
																																																																																					rt_store_i64(memory_at_0, loc_4 + 32, rt_load_i64(memory_at_0, loc_8))
																																																																																					rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_4, 48))
																																																																																					rt_store_i32(memory_at_0, loc_0 + 52, rt_shr_u32(loc_2, 24))
																																																																																					rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																																					FUNC_LIST[607](loc_0, 2, loc_9)
																																																																																					loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																																					rt_store_i32_n8(memory_at_0, loc_1 + 3, rt_load_i32_u8(memory_at_0, loc_0 + 52))
																																																																																					desired = 5
																																																																																					break
																																																																																				end
																																																																																				if desired then
																																																																																					if desired == 82 then
																																																																																						desired = nil
																																																																																					end
																																																																																					break
																																																																																				end
																																																																																				rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																																				FUNC_LIST[588](loc_0, loc_6, loc_8, loc_4)
																																																																																				loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																																				desired = 5
																																																																																				break
																																																																																			end
																																																																																			if desired then
																																																																																				if desired == 81 then
																																																																																					desired = nil
																																																																																				end
																																																																																				break
																																																																																			end
																																																																																			loc_3 = rt_add_i32(loc_1, 8)
																																																																																			loc_8 = rt_add_i32(rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 4), 4), loc_12)
																																																																																			loc_2 = rt_load_i32(memory_at_0, loc_1)
																																																																																			loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																																																																			while true do
																																																																																				loc_7 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5)
																																																																																				loc_6 = rt_load_i32(memory_at_0, loc_7 + 12)
																																																																																				if loc_6 ~= 6 then
																																																																																					while true do
																																																																																						if loc_6 ~= 8 then
																																																																																							desired = 82
																																																																																							break
																																																																																						end
																																																																																						loc_5 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_7) + 8)
																																																																																						if loc_5 == 0 then
																																																																																							desired = 82
																																																																																							break
																																																																																						end
																																																																																						if bit_and(rt_load_i32_u8(memory_at_0, loc_5 + 3), 2) ~= 0 then
																																																																																							desired = 82
																																																																																							break
																																																																																						end
																																																																																						reg_0 = FUNC_LIST[460](loc_5, 1, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1532))
																																																																																						loc_5 = reg_0
																																																																																						if loc_5 == 0 then
																																																																																							desired = 82
																																																																																							break
																																																																																						end
																																																																																						if rt_load_i32(memory_at_0, loc_5 + 12) ~= 7 then
																																																																																							desired = 82
																																																																																							break
																																																																																						end
																																																																																						if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_5) + 3) == 0 then
																																																																																							desired = 82
																																																																																							break
																																																																																						end
																																																																																						loc_6 = rt_load_i32(memory_at_0, loc_0 + 8)
																																																																																						rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_5))
																																																																																						rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
																																																																																						rt_store_i64(memory_at_0, loc_6 + 24, rt_load_i64(memory_at_0, loc_7 + 8))
																																																																																						rt_store_i64(memory_at_0, loc_6 + 16, rt_load_i64(memory_at_0, loc_7))
																																																																																						rt_store_i64(memory_at_0, loc_6 + 40, rt_load_i64(memory_at_0, loc_8 + 8))
																																																																																						rt_store_i64(memory_at_0, loc_6 + 32, rt_load_i64(memory_at_0, loc_8))
																																																																																						rt_store_i64(memory_at_0, loc_6 + 56, rt_load_i64(memory_at_0, loc_4 + 8))
																																																																																						rt_store_i64(memory_at_0, loc_6 + 48, rt_load_i64(memory_at_0, loc_4))
																																																																																						rt_store_i32(memory_at_0, loc_0 + 8, rt_sub_i32(loc_6, 4294967232))
																																																																																						rt_store_i32(memory_at_0, loc_0 + 52, rt_shr_u32(loc_2, 24))
																																																																																						rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																																						FUNC_LIST[607](loc_0, 3, 4294967295)
																																																																																						loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																																						rt_store_i32_n8(memory_at_0, loc_1 + 3, rt_load_i32_u8(memory_at_0, loc_0 + 52))
																																																																																						desired = 5
																																																																																						break
																																																																																					end
																																																																																					if desired then
																																																																																						if desired == 82 then
																																																																																							desired = nil
																																																																																						end
																																																																																						break
																																																																																					end
																																																																																				end
																																																																																				while true do
																																																																																					loc_6 = rt_load_i32(memory_at_0, loc_7)
																																																																																					loc_9 = bit_and(rt_load_i32_u8(memory_at_0, loc_6 + 7), rt_shr_u32(loc_2, 24))
																																																																																					loc_2 = rt_add_i32(rt_load_i32(memory_at_0, loc_6 + 24), rt_shl_i32(loc_9, 5))
																																																																																					if bit_and(rt_load_i32(memory_at_0, loc_2 + 28), 15) ~= 5 then
																																																																																						break
																																																																																					end
																																																																																					if rt_load_i32(memory_at_0, loc_2 + 16) ~= rt_load_i32(memory_at_0, loc_8) then
																																																																																						break
																																																																																					end
																																																																																					if rt_load_i32(memory_at_0, loc_2 + 12) == 0 then
																																																																																						break
																																																																																					end
																																																																																					if rt_load_i32_u8(memory_at_0, loc_6 + 4) ~= 0 then
																																																																																						break
																																																																																					end
																																																																																					rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_4))
																																																																																					rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
																																																																																					loc_2 = 1
																																																																																					if rt_lt_i32(rt_load_i32(memory_at_0, loc_4 + 12), 5) then
																																																																																						desired = 4
																																																																																						break
																																																																																					end
																																																																																					if bit_and(rt_load_i32_u8(memory_at_0, loc_6 + 1), 4) == 0 then
																																																																																						desired = 4
																																																																																						break
																																																																																					end
																																																																																					loc_1 = rt_load_i32(memory_at_0, loc_4)
																																																																																					if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) == 0 then
																																																																																						desired = 4
																																																																																						break
																																																																																					end
																																																																																					FUNC_LIST[50](loc_0, loc_6, loc_1)
																																																																																					desired = 5
																																																																																					break
																																																																																				end
																																																																																				if desired then
																																																																																					if desired == 82 then
																																																																																						desired = nil
																																																																																					end
																																																																																					break
																																																																																				end
																																																																																				while true do
																																																																																					while true do
																																																																																						loc_11 = rt_load_i32(memory_at_0, loc_6 + 16)
																																																																																						if loc_11 == 0 then
																																																																																							while true do
																																																																																								loc_2 = rt_load_i32(memory_at_0, loc_0 + 20)
																																																																																								desired = 84
																																																																																								break
																																																																																							end
																																																																																							if desired then
																																																																																								if desired == 84 then
																																																																																									desired = nil
																																																																																								end
																																																																																								break
																																																																																							end
																																																																																						end
																																																																																						loc_2 = rt_load_i32(memory_at_0, loc_0 + 20)
																																																																																						if bit_and(rt_load_i32_u8(memory_at_0, loc_11 + 3), 2) == 0 then
																																																																																							desired = 83
																																																																																							break
																																																																																						end
																																																																																						break
																																																																																					end
																																																																																					if desired then
																																																																																						if desired == 83 then
																																																																																							desired = nil
																																																																																						end
																																																																																						break
																																																																																					end
																																																																																					if rt_load_i32_u8(memory_at_0, loc_6 + 4) ~= 0 then
																																																																																						break
																																																																																					end
																																																																																					rt_store_i32(memory_at_0, loc_2 + 12, loc_3)
																																																																																					reg_1 = FUNC_LIST[432](loc_0, loc_6, rt_load_i32(memory_at_0, loc_8))
																																																																																					reg_0 = loc_1
																																																																																					loc_1 = reg_1
																																																																																					rt_store_i32_n8(memory_at_0, reg_0 + 3, rt_shr_u32(rt_sub_i32(loc_1, rt_load_i32(memory_at_0, loc_6 + 24)), 5))
																																																																																					rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
																																																																																					rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_4))
																																																																																					loc_2 = 1
																																																																																					if rt_lt_i32(rt_load_i32(memory_at_0, loc_4 + 12), 5) then
																																																																																						desired = 4
																																																																																						break
																																																																																					end
																																																																																					if bit_and(rt_load_i32_u8(memory_at_0, loc_6 + 1), 4) == 0 then
																																																																																						desired = 4
																																																																																						break
																																																																																					end
																																																																																					loc_1 = rt_load_i32(memory_at_0, loc_4)
																																																																																					if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) == 0 then
																																																																																						desired = 4
																																																																																						break
																																																																																					end
																																																																																					FUNC_LIST[50](loc_0, loc_6, loc_1)
																																																																																					desired = 5
																																																																																					break
																																																																																				end
																																																																																				if desired then
																																																																																					if desired == 82 then
																																																																																						desired = nil
																																																																																					end
																																																																																					break
																																																																																				end
																																																																																				rt_store_i32(memory_at_0, loc_0 + 52, loc_9)
																																																																																				rt_store_i32(memory_at_0, loc_2 + 12, loc_3)
																																																																																				FUNC_LIST[589](loc_0, loc_7, loc_8, loc_4)
																																																																																				loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																																				rt_store_i32_n8(memory_at_0, loc_1 + 3, rt_load_i32_u8(memory_at_0, loc_0 + 52))
																																																																																				desired = 5
																																																																																				break
																																																																																			end
																																																																																			if desired then
																																																																																				if desired == 81 then
																																																																																					desired = nil
																																																																																				end
																																																																																				break
																																																																																			end
																																																																																			rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																																			FUNC_LIST[589](loc_0, loc_7, loc_8, loc_4)
																																																																																			loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																																			desired = 5
																																																																																			break
																																																																																		end
																																																																																		if desired then
																																																																																			if desired == 80 then
																																																																																				desired = nil
																																																																																			end
																																																																																			break
																																																																																		end
																																																																																		loc_3 = rt_add_i32(loc_1, 4)
																																																																																		loc_1 = rt_load_i32(memory_at_0, loc_1)
																																																																																		loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 20), 4080), loc_5)
																																																																																		loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																																																																																		while true do
																																																																																			loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 12), 4080), loc_5)
																																																																																			if rt_load_i32(memory_at_0, loc_1 + 12) ~= 6 then
																																																																																				break
																																																																																			end
																																																																																			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
																																																																																				break
																																																																																			end
																																																																																			while true do
																																																																																				loc_22 = rt_load_f64(memory_at_0, loc_2)
																																																																																				if math_abs(loc_22) < 2.147483648e9 then
																																																																																					while true do
																																																																																						reg_0 = rt_truncate_f64(loc_22)
																																																																																						desired = 82
																																																																																						break
																																																																																					end
																																																																																					if desired then
																																																																																						if desired == 82 then
																																																																																							desired = nil
																																																																																						end
																																																																																						break
																																																																																					end
																																																																																				end
																																																																																				reg_0 = 2147483648
																																																																																				break
																																																																																			end
																																																																																			if desired then
																																																																																				if desired == 81 then
																																																																																					desired = nil
																																																																																				end
																																																																																				break
																																																																																			end
																																																																																			loc_6 = reg_0
																																																																																			loc_8 = rt_sub_i32(loc_6, 1)
																																																																																			loc_7 = rt_load_i32(memory_at_0, loc_1)
																																																																																			if loc_8 >= rt_load_i32(memory_at_0, loc_7 + 8) then
																																																																																				break
																																																																																			end
																																																																																			if rt_convert_f64_i32(loc_6) ~= loc_22 then
																																																																																				break
																																																																																			end
																																																																																			if rt_load_i32(memory_at_0, loc_7 + 16) ~= 0 then
																																																																																				break
																																																																																			end
																																																																																			loc_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_7 + 20), rt_shl_i32(loc_8, 4))
																																																																																			rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_1))
																																																																																			rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
																																																																																			desired = 5
																																																																																			break
																																																																																		end
																																																																																		if desired then
																																																																																			if desired == 80 then
																																																																																				desired = nil
																																																																																			end
																																																																																			break
																																																																																		end
																																																																																		rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																																		FUNC_LIST[588](loc_0, loc_1, loc_2, loc_4)
																																																																																		loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																																		desired = 5
																																																																																		break
																																																																																	end
																																																																																	if desired then
																																																																																		if desired == 79 then
																																																																																			desired = nil
																																																																																		end
																																																																																		break
																																																																																	end
																																																																																	loc_3 = rt_add_i32(loc_1, 4)
																																																																																	loc_1 = rt_load_i32(memory_at_0, loc_1)
																																																																																	loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 20), 4080), loc_5)
																																																																																	loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																																																																																	while true do
																																																																																		loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 12), 4080), loc_5)
																																																																																		if rt_load_i32(memory_at_0, loc_1 + 12) ~= 6 then
																																																																																			break
																																																																																		end
																																																																																		if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
																																																																																			break
																																																																																		end
																																																																																		while true do
																																																																																			loc_22 = rt_load_f64(memory_at_0, loc_2)
																																																																																			if math_abs(loc_22) < 2.147483648e9 then
																																																																																				while true do
																																																																																					reg_0 = rt_truncate_f64(loc_22)
																																																																																					desired = 81
																																																																																					break
																																																																																				end
																																																																																				if desired then
																																																																																					if desired == 81 then
																																																																																						desired = nil
																																																																																					end
																																																																																					break
																																																																																				end
																																																																																			end
																																																																																			reg_0 = 2147483648
																																																																																			break
																																																																																		end
																																																																																		if desired then
																																																																																			if desired == 80 then
																																																																																				desired = nil
																																																																																			end
																																																																																			break
																																																																																		end
																																																																																		loc_7 = reg_0
																																																																																		loc_8 = rt_sub_i32(loc_7, 1)
																																																																																		loc_6 = rt_load_i32(memory_at_0, loc_1)
																																																																																		if loc_8 >= rt_load_i32(memory_at_0, loc_6 + 8) then
																																																																																			break
																																																																																		end
																																																																																		if rt_load_i32(memory_at_0, loc_6 + 16) ~= 0 then
																																																																																			break
																																																																																		end
																																																																																		if rt_convert_f64_i32(loc_7) ~= loc_22 then
																																																																																			break
																																																																																		end
																																																																																		if rt_load_i32_u8(memory_at_0, loc_6 + 4) ~= 0 then
																																																																																			break
																																																																																		end
																																																																																		loc_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_6 + 20), rt_shl_i32(loc_8, 4))
																																																																																		rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_4))
																																																																																		rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
																																																																																		loc_2 = 1
																																																																																		if rt_lt_i32(rt_load_i32(memory_at_0, loc_4 + 12), 5) then
																																																																																			desired = 4
																																																																																			break
																																																																																		end
																																																																																		if bit_and(rt_load_i32_u8(memory_at_0, loc_6 + 1), 4) == 0 then
																																																																																			desired = 4
																																																																																			break
																																																																																		end
																																																																																		loc_1 = rt_load_i32(memory_at_0, loc_4)
																																																																																		if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) == 0 then
																																																																																			desired = 4
																																																																																			break
																																																																																		end
																																																																																		FUNC_LIST[50](loc_0, loc_6, loc_1)
																																																																																		desired = 5
																																																																																		break
																																																																																	end
																																																																																	if desired then
																																																																																		if desired == 79 then
																																																																																			desired = nil
																																																																																		end
																																																																																		break
																																																																																	end
																																																																																	rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																																	FUNC_LIST[589](loc_0, loc_1, loc_2, loc_4)
																																																																																	loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																																	desired = 5
																																																																																	break
																																																																																end
																																																																																if desired then
																																																																																	if desired == 78 then
																																																																																		desired = nil
																																																																																	end
																																																																																	break
																																																																																end
																																																																																loc_3 = rt_add_i32(loc_1, 4)
																																																																																loc_1 = rt_load_i32(memory_at_0, loc_1)
																																																																																loc_4 = rt_shr_u32(loc_1, 24)
																																																																																loc_6 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																																																																																while true do
																																																																																	loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 12), 4080), loc_5)
																																																																																	if rt_load_i32(memory_at_0, loc_1 + 12) ~= 6 then
																																																																																		break
																																																																																	end
																																																																																	loc_2 = rt_load_i32(memory_at_0, loc_1)
																																																																																	if rt_load_i32(memory_at_0, loc_2 + 8) <= loc_4 then
																																																																																		break
																																																																																	end
																																																																																	if rt_load_i32(memory_at_0, loc_2 + 16) ~= 0 then
																																																																																		break
																																																																																	end
																																																																																	loc_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_2 + 20), rt_shl_i32(loc_4, 4))
																																																																																	rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_1))
																																																																																	rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
																																																																																	desired = 5
																																																																																	break
																																																																																end
																																																																																if desired then
																																																																																	if desired == 78 then
																																																																																		desired = nil
																																																																																	end
																																																																																	break
																																																																																end
																																																																																rt_store_i32(memory_at_0, loc_15 + 28, 3)
																																																																																loc_2 = 1
																																																																																rt_store_f64(memory_at_0, loc_15 + 16, no_op(rt_add_i32(loc_4, 1)))
																																																																																rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																																FUNC_LIST[588](loc_0, loc_1, rt_add_i32(loc_15, 16), loc_6)
																																																																																loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																																desired = 4
																																																																																break
																																																																															end
																																																																															if desired then
																																																																																if desired == 77 then
																																																																																	desired = nil
																																																																																end
																																																																																break
																																																																															end
																																																																															loc_3 = rt_add_i32(loc_1, 4)
																																																																															loc_2 = rt_load_i32(memory_at_0, loc_1)
																																																																															loc_4 = rt_shr_u32(loc_2, 24)
																																																																															loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																																																															while true do
																																																																																loc_7 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5)
																																																																																if rt_load_i32(memory_at_0, loc_7 + 12) ~= 6 then
																																																																																	break
																																																																																end
																																																																																loc_6 = rt_load_i32(memory_at_0, loc_7)
																																																																																if rt_load_i32(memory_at_0, loc_6 + 8) <= loc_4 then
																																																																																	break
																																																																																end
																																																																																if rt_load_i32(memory_at_0, loc_6 + 16) ~= 0 then
																																																																																	break
																																																																																end
																																																																																if rt_load_i32_u8(memory_at_0, loc_6 + 4) ~= 0 then
																																																																																	break
																																																																																end
																																																																																loc_2 = rt_add_i32(rt_load_i32(memory_at_0, loc_6 + 20), rt_shl_i32(loc_4, 4))
																																																																																rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
																																																																																rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
																																																																																loc_2 = 1
																																																																																if rt_lt_i32(rt_load_i32(memory_at_0, loc_1 + 12), 5) then
																																																																																	desired = 4
																																																																																	break
																																																																																end
																																																																																if bit_and(rt_load_i32_u8(memory_at_0, loc_6 + 1), 4) == 0 then
																																																																																	desired = 4
																																																																																	break
																																																																																end
																																																																																loc_1 = rt_load_i32(memory_at_0, loc_1)
																																																																																if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) == 0 then
																																																																																	desired = 4
																																																																																	break
																																																																																end
																																																																																FUNC_LIST[50](loc_0, loc_6, loc_1)
																																																																																desired = 5
																																																																																break
																																																																															end
																																																																															if desired then
																																																																																if desired == 77 then
																																																																																	desired = nil
																																																																																end
																																																																																break
																																																																															end
																																																																															rt_store_i32(memory_at_0, loc_15 + 12, 3)
																																																																															loc_2 = 1
																																																																															rt_store_f64(memory_at_0, loc_15, no_op(rt_add_i32(loc_4, 1)))
																																																																															rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																															FUNC_LIST[589](loc_0, loc_7, loc_15, loc_1)
																																																																															loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																															desired = 4
																																																																															break
																																																																														end
																																																																														if desired then
																																																																															if desired == 76 then
																																																																																desired = nil
																																																																															end
																																																																															break
																																																																														end
																																																																														loc_2 = rt_load_i32(memory_at_0, loc_1)
																																																																														loc_4 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_13 + 16) + 16), rt_shl_i32(rt_shr_i32(loc_2, 16), 2)))
																																																																														loc_3 = rt_add_i32(loc_1, 4)
																																																																														rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																														reg_0 = FUNC_LIST[15](loc_0, rt_load_i32_u8(memory_at_0, loc_4 + 3), rt_load_i32(memory_at_0, loc_13 + 12), loc_4)
																																																																														loc_1 = reg_0
																																																																														loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																																																														rt_store_i32(memory_at_0, loc_2 + 12, 7)
																																																																														rt_store_i32(memory_at_0, loc_2, loc_1)
																																																																														if rt_load_i32_u8(memory_at_0, loc_4 + 3) ~= 0 then
																																																																															while true do
																																																																																loc_6 = rt_add_i32(loc_1, 24)
																																																																																loc_8 = rt_add_i32(loc_13, 24)
																																																																																loc_1 = 0
																																																																																while true do
																																																																																	while true do
																																																																																		while true do
																																																																																			while true do
																																																																																				while true do
																																																																																					loc_2 = rt_load_i32(memory_at_0, loc_3)
																																																																																					if not br_map[2] then
																																																																																						br_map[2] = (function()
																																																																																							return { [0] = 1, 2, }
																																																																																						end)()
																																																																																					end
																																																																																					temp = br_map[2][rt_sub_i32(bit_and(rt_shr_u32(loc_2, 8), 255), 1)] or 0
																																																																																					if temp < 1 then
																																																																																						break
																																																																																					elseif temp > 1 then
																																																																																						desired = 80
																																																																																						break
																																																																																					else
																																																																																						desired = 81
																																																																																						break
																																																																																					end
																																																																																				end
																																																																																				if desired then
																																																																																					if desired == 81 then
																																																																																						desired = nil
																																																																																					end
																																																																																					break
																																																																																				end
																																																																																				loc_7 = rt_add_i32(rt_shl_i32(loc_1, 4), loc_6)
																																																																																				loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5)
																																																																																				rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_2))
																																																																																				rt_store_i64(memory_at_0, loc_7 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
																																																																																				desired = 79
																																																																																				break
																																																																																			end
																																																																																			if desired then
																																																																																				if desired == 80 then
																																																																																					desired = nil
																																																																																				end
																																																																																				break
																																																																																			end
																																																																																			reg_0 = FUNC_LIST[17](loc_0, rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5))
																																																																																			loc_2 = reg_0
																																																																																			loc_7 = rt_add_i32(rt_shl_i32(loc_1, 4), loc_6)
																																																																																			rt_store_i32(memory_at_0, loc_7 + 12, 12)
																																																																																			rt_store_i32(memory_at_0, loc_7, loc_2)
																																																																																			desired = 79
																																																																																			break
																																																																																		end
																																																																																		if desired then
																																																																																			if desired == 79 then
																																																																																				desired = nil
																																																																																			end
																																																																																			break
																																																																																		end
																																																																																		loc_7 = rt_add_i32(rt_shl_i32(loc_1, 4), loc_6)
																																																																																		loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_8)
																																																																																		rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_2))
																																																																																		rt_store_i64(memory_at_0, loc_7 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
																																																																																		break
																																																																																	end
																																																																																	if desired then
																																																																																		if desired == 78 then
																																																																																			desired = nil
																																																																																			continue
																																																																																		end
																																																																																		break
																																																																																	end
																																																																																	loc_3 = rt_add_i32(loc_3, 4)
																																																																																	loc_1 = rt_add_i32(loc_1, 1)
																																																																																	if loc_1 < rt_load_i32_u8(memory_at_0, loc_4 + 3) then
																																																																																		continue
																																																																																	end
																																																																																	break
																																																																																end
																																																																																if desired then
																																																																																	break
																																																																																end
																																																																																break
																																																																															end
																																																																															if desired then
																																																																																if desired == 76 then
																																																																																	desired = nil
																																																																																end
																																																																																break
																																																																															end
																																																																														end
																																																																														rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																														loc_1 = rt_load_i32(memory_at_0, loc_0 + 16)
																																																																														if rt_load_i32(memory_at_0, loc_1 + 40) >= rt_load_i32(memory_at_0, loc_1 + 36) then
																																																																															while true do
																																																																																reg_0 = FUNC_LIST[42](loc_0, 1)
																																																																																break
																																																																															end
																																																																															if desired then
																																																																																if desired == 76 then
																																																																																	desired = nil
																																																																																end
																																																																																break
																																																																															end
																																																																														end
																																																																														loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																														desired = 5
																																																																														break
																																																																													end
																																																																													if desired then
																																																																														if desired == 75 then
																																																																															desired = nil
																																																																														end
																																																																														break
																																																																													end
																																																																													loc_7 = rt_add_i32(loc_1, 8)
																																																																													loc_6 = rt_add_i32(rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 4), 4), loc_12)
																																																																													loc_4 = rt_load_i32(memory_at_0, loc_1)
																																																																													loc_10 = bit_and(rt_shr_u32(loc_4, 8), 255)
																																																																													loc_2 = rt_add_i32(rt_shl_i32(loc_10, 4), loc_5)
																																																																													while true do
																																																																														while true do
																																																																															while true do
																																																																																while true do
																																																																																	while true do
																																																																																		loc_3 = rt_add_i32(bit_and(rt_shr_u32(loc_4, 12), 4080), loc_5)
																																																																																		loc_8 = rt_load_i32(memory_at_0, loc_3 + 12)
																																																																																		if loc_8 ~= 6 then
																																																																																			while true do
																																																																																				if loc_8 ~= 8 then
																																																																																					desired = 80
																																																																																					break
																																																																																				end
																																																																																				reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_3), 8)
																																																																																				desired = 79
																																																																																				break
																																																																																			end
																																																																																			if desired then
																																																																																				if desired == 80 then
																																																																																					desired = nil
																																																																																				end
																																																																																				break
																																																																																			end
																																																																																		end
																																																																																		while true do
																																																																																			loc_8 = rt_load_i32(memory_at_0, loc_3)
																																																																																			loc_14 = rt_load_i32(memory_at_0, loc_6)
																																																																																			loc_9 = rt_add_i32(rt_load_i32(memory_at_0, loc_8 + 24), rt_shl_i32(bit_and(rt_load_i32(memory_at_0, loc_14 + 12), bit_xor(rt_shl_i32(4294967295, rt_load_i32_u8(memory_at_0, loc_8 + 6)), 4294967295)), 5))
																																																																																			loc_11 = rt_load_i32(memory_at_0, loc_9 + 28)
																																																																																			if bit_and(loc_11, 15) ~= 5 then
																																																																																				break
																																																																																			end
																																																																																			if loc_14 ~= rt_load_i32(memory_at_0, loc_9 + 16) then
																																																																																				break
																																																																																			end
																																																																																			if rt_load_i32(memory_at_0, loc_9 + 12) == 0 then
																																																																																				break
																																																																																			end
																																																																																			rt_store_i64(memory_at_0, loc_2 + 16, rt_load_i64(memory_at_0, loc_3))
																																																																																			rt_store_i64(memory_at_0, loc_2 + 24, rt_load_i64(memory_at_0, loc_3 + 8))
																																																																																			rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_9))
																																																																																			rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_9 + 8))
																																																																																			desired = 76
																																																																																			break
																																																																																		end
																																																																																		if desired then
																																																																																			if desired == 80 then
																																																																																				desired = nil
																																																																																			end
																																																																																			break
																																																																																		end
																																																																																		while true do
																																																																																			if loc_11 > 15 then
																																																																																				break
																																																																																			end
																																																																																			loc_8 = rt_load_i32(memory_at_0, loc_8 + 16)
																																																																																			if loc_8 == 0 then
																																																																																				break
																																																																																			end
																																																																																			if bit_and(rt_load_i32_u8(memory_at_0, loc_8 + 3), 1) ~= 0 then
																																																																																				break
																																																																																			end
																																																																																			reg_0 = FUNC_LIST[460](loc_8, 0, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1528))
																																																																																			loc_8 = reg_0
																																																																																			if loc_8 == 0 then
																																																																																				break
																																																																																			end
																																																																																			if rt_load_i32(memory_at_0, loc_8 + 12) ~= 6 then
																																																																																				break
																																																																																			end
																																																																																			loc_8 = rt_load_i32(memory_at_0, loc_8)
																																																																																			loc_9 = rt_load_i32(memory_at_0, loc_8 + 24)
																																																																																			if loc_9 == 0 then
																																																																																				break
																																																																																			end
																																																																																			loc_8 = rt_add_i32(rt_shl_i32(bit_and(rt_load_i32_u8(memory_at_0, loc_8 + 7), rt_shr_u32(loc_4, 24)), 5), loc_9)
																																																																																			if bit_and(rt_load_i32(memory_at_0, loc_8 + 28), 15) ~= 5 then
																																																																																				break
																																																																																			end
																																																																																			if rt_load_i32(memory_at_0, loc_8 + 16) ~= rt_load_i32(memory_at_0, loc_6) then
																																																																																				break
																																																																																			end
																																																																																			if rt_load_i32(memory_at_0, loc_8 + 12) == 0 then
																																																																																				break
																																																																																			end
																																																																																			rt_store_i64(memory_at_0, loc_2 + 16, rt_load_i64(memory_at_0, loc_3))
																																																																																			rt_store_i64(memory_at_0, loc_2 + 24, rt_load_i64(memory_at_0, loc_3 + 8))
																																																																																			rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_8))
																																																																																			rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_8 + 8))
																																																																																			desired = 76
																																																																																			break
																																																																																		end
																																																																																		if desired then
																																																																																			if desired == 80 then
																																																																																				desired = nil
																																																																																			end
																																																																																			break
																																																																																		end
																																																																																		rt_store_i64(memory_at_0, loc_2 + 16, rt_load_i64(memory_at_0, loc_3))
																																																																																		rt_store_i64(memory_at_0, loc_2 + 24, rt_load_i64(memory_at_0, loc_3 + 8))
																																																																																		rt_store_i32(memory_at_0, loc_0 + 52, rt_shr_u32(loc_4, 24))
																																																																																		rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_7)
																																																																																		FUNC_LIST[588](loc_0, loc_3, loc_6, loc_2)
																																																																																		loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																																		rt_store_i32_n8(memory_at_0, loc_1 + 3, rt_load_i32_u8(memory_at_0, loc_0 + 52))
																																																																																		loc_1 = loc_7
																																																																																		loc_3 = rt_add_i32(rt_shl_i32(loc_10, 4), loc_5)
																																																																																		if rt_load_i32(memory_at_0, loc_3 + 12) ~= 0 then
																																																																																			desired = 75
																																																																																			break
																																																																																		end
																																																																																		desired = 3
																																																																																		break
																																																																																	end
																																																																																	if desired then
																																																																																		if desired == 79 then
																																																																																			desired = nil
																																																																																		end
																																																																																		break
																																																																																	end
																																																																																	reg_0 = rt_add_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 16), rt_shl_i32(loc_8, 2)), 1440)
																																																																																	break
																																																																																end
																																																																																if desired then
																																																																																	if desired == 78 then
																																																																																		desired = nil
																																																																																	end
																																																																																	break
																																																																																end
																																																																																loc_8 = reg_0
																																																																																loc_8 = rt_load_i32(memory_at_0, loc_8)
																																																																																if loc_8 == 0 then
																																																																																	break
																																																																																end
																																																																																loc_9 = rt_load_i32_u8(memory_at_0, loc_8 + 3)
																																																																																if bit_and(loc_9, 8) ~= 0 then
																																																																																	while true do
																																																																																		reg_0 = loc_9
																																																																																		break
																																																																																	end
																																																																																	if desired then
																																																																																		if desired == 78 then
																																																																																			desired = nil
																																																																																		end
																																																																																		break
																																																																																	end
																																																																																else
																																																																																	while true do
																																																																																		reg_0 = FUNC_LIST[460](loc_8, 3, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1540))
																																																																																		loc_9 = reg_0
																																																																																		if loc_9 ~= 0 then
																																																																																			desired = 77
																																																																																			break
																																																																																		end
																																																																																		reg_0 = rt_load_i32_u8(memory_at_0, loc_8 + 3)
																																																																																		break
																																																																																	end
																																																																																	if desired then
																																																																																		if desired == 78 then
																																																																																			desired = nil
																																																																																		end
																																																																																		break
																																																																																	end
																																																																																end
																																																																																loc_9 = reg_0
																																																																																if bit_and(loc_9, 1) ~= 0 then
																																																																																	break
																																																																																end
																																																																																reg_0 = FUNC_LIST[460](loc_8, 0, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1528))
																																																																																loc_8 = reg_0
																																																																																if loc_8 == 0 then
																																																																																	break
																																																																																end
																																																																																if rt_load_i32(memory_at_0, loc_8 + 12) ~= 6 then
																																																																																	break
																																																																																end
																																																																																while true do
																																																																																	loc_8 = rt_load_i32(memory_at_0, loc_8)
																																																																																	reg_0 = rt_load_i32(memory_at_0, loc_8 + 24)
																																																																																	loc_8 = bit_and(rt_load_i32_u8(memory_at_0, loc_8 + 7), rt_shr_u32(loc_4, 24))
																																																																																	loc_4 = rt_add_i32(reg_0, rt_shl_i32(loc_8, 5))
																																																																																	if bit_and(rt_load_i32(memory_at_0, loc_4 + 28), 15) ~= 5 then
																																																																																		break
																																																																																	end
																																																																																	if rt_load_i32(memory_at_0, loc_4 + 16) ~= rt_load_i32(memory_at_0, loc_6) then
																																																																																		break
																																																																																	end
																																																																																	if rt_load_i32(memory_at_0, loc_4 + 12) == 0 then
																																																																																		break
																																																																																	end
																																																																																	rt_store_i64(memory_at_0, loc_2 + 16, rt_load_i64(memory_at_0, loc_3))
																																																																																	rt_store_i64(memory_at_0, loc_2 + 24, rt_load_i64(memory_at_0, loc_3 + 8))
																																																																																	rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_4))
																																																																																	rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
																																																																																	desired = 76
																																																																																	break
																																																																																end
																																																																																if desired then
																																																																																	if desired == 78 then
																																																																																		desired = nil
																																																																																	end
																																																																																	break
																																																																																end
																																																																																rt_store_i64(memory_at_0, loc_2 + 16, rt_load_i64(memory_at_0, loc_3))
																																																																																rt_store_i64(memory_at_0, loc_2 + 24, rt_load_i64(memory_at_0, loc_3 + 8))
																																																																																rt_store_i32(memory_at_0, loc_0 + 52, loc_8)
																																																																																rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_7)
																																																																																FUNC_LIST[588](loc_0, loc_3, loc_6, loc_2)
																																																																																loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																																rt_store_i32_n8(memory_at_0, loc_1 + 3, rt_load_i32_u8(memory_at_0, loc_0 + 52))
																																																																																loc_1 = loc_7
																																																																																loc_3 = rt_add_i32(rt_shl_i32(loc_10, 4), loc_5)
																																																																																if rt_load_i32(memory_at_0, loc_3 + 12) ~= 0 then
																																																																																	desired = 75
																																																																																	break
																																																																																end
																																																																																desired = 3
																																																																																break
																																																																															end
																																																																															if desired then
																																																																																if desired == 77 then
																																																																																	desired = nil
																																																																																end
																																																																																break
																																																																															end
																																																																															rt_store_i64(memory_at_0, loc_2 + 16, rt_load_i64(memory_at_0, loc_3))
																																																																															rt_store_i64(memory_at_0, loc_2 + 24, rt_load_i64(memory_at_0, loc_3 + 8))
																																																																															rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_7)
																																																																															FUNC_LIST[588](loc_0, loc_3, loc_6, loc_2)
																																																																															loc_1 = loc_7
																																																																															loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																															loc_3 = rt_add_i32(loc_5, rt_shl_i32(loc_10, 4))
																																																																															if rt_load_i32(memory_at_0, loc_3 + 12) ~= 0 then
																																																																																desired = 75
																																																																																break
																																																																															end
																																																																															desired = 3
																																																																															break
																																																																														end
																																																																														if desired then
																																																																															if desired == 76 then
																																																																																desired = nil
																																																																															end
																																																																															break
																																																																														end
																																																																														rt_store_i64(memory_at_0, loc_2 + 16, rt_load_i64(memory_at_0, loc_3))
																																																																														rt_store_i64(memory_at_0, loc_2 + 24, rt_load_i64(memory_at_0, loc_3 + 8))
																																																																														rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_9))
																																																																														rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_9 + 8))
																																																																														rt_store_i32(memory_at_0, loc_0 + 68, rt_load_i32(memory_at_0, loc_6))
																																																																														break
																																																																													end
																																																																													if desired then
																																																																														if desired == 75 then
																																																																															desired = nil
																																																																														end
																																																																														break
																																																																													end
																																																																													loc_1 = loc_7
																																																																													break
																																																																												end
																																																																												if desired then
																																																																													if desired == 74 then
																																																																														desired = nil
																																																																													end
																																																																													break
																																																																												end
																																																																												loc_4 = rt_load_i32(memory_at_0, loc_0 + 20)
																																																																												loc_3 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1700)
																																																																												if loc_3 ~= 0 then
																																																																													while true do
																																																																														rt_store_i32(memory_at_0, loc_4 + 12, rt_add_i32(loc_1, 4))
																																																																														TABLE_LIST[0].data[loc_3](loc_0, 4294967295)
																																																																														loc_4 = rt_load_i32(memory_at_0, loc_0 + 20)
																																																																														if rt_load_i32_u8(memory_at_0, loc_0 + 3) ~= 0 then
																																																																															desired = 9
																																																																															break
																																																																														end
																																																																														reg_0 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																														break
																																																																													end
																																																																													if desired then
																																																																														if desired == 74 then
																																																																															desired = nil
																																																																														end
																																																																														break
																																																																													end
																																																																												else
																																																																													while true do
																																																																														reg_0 = loc_5
																																																																														break
																																																																													end
																																																																													if desired then
																																																																														if desired == 74 then
																																																																															desired = nil
																																																																														end
																																																																														break
																																																																													end
																																																																												end
																																																																												loc_5 = reg_0
																																																																												loc_8 = rt_load_i32(memory_at_0, loc_1)
																																																																												loc_5 = rt_add_i32(loc_5, bit_and(rt_shr_u32(loc_8, 4), 4080))
																																																																												loc_3 = bit_and(rt_shr_u32(loc_8, 16), 255)
																																																																												loc_7 = (if loc_3 ~= 0 then rt_add_i32(loc_5, rt_shl_i32(loc_3, 4)) else rt_load_i32(memory_at_0, loc_0 + 8))
																																																																												loc_3 = rt_add_i32(loc_1, 4)
																																																																												loc_1 = rt_shr_u32(loc_8, 24)
																																																																												if rt_load_i32(memory_at_0, loc_5 + 12) ~= 7 then
																																																																													while true do
																																																																														rt_store_i32(memory_at_0, loc_4 + 12, loc_3)
																																																																														FUNC_LIST[608](loc_0, loc_5)
																																																																														loc_7 = rt_add_i32(loc_7, 16)
																																																																														reg_0 = rt_load_i32(memory_at_0, loc_0 + 20)
																																																																														break
																																																																													end
																																																																													if desired then
																																																																														if desired == 74 then
																																																																															desired = nil
																																																																														end
																																																																														break
																																																																													end
																																																																												else
																																																																													while true do
																																																																														reg_0 = loc_4
																																																																														break
																																																																													end
																																																																													if desired then
																																																																														if desired == 74 then
																																																																															desired = nil
																																																																														end
																																																																														break
																																																																													end
																																																																												end
																																																																												loc_4 = reg_0
																																																																												loc_2 = rt_sub_i32(loc_1, 1)
																																																																												loc_1 = rt_add_i32(loc_5, 16)
																																																																												loc_6 = rt_load_i32(memory_at_0, loc_5)
																																																																												rt_store_i32(memory_at_0, loc_4 + 12, loc_3)
																																																																												while true do
																																																																													if loc_4 == rt_load_i32(memory_at_0, loc_0 + 32) then
																																																																														while true do
																																																																															reg_0 = FUNC_LIST[83](loc_0)
																																																																															loc_4 = reg_0
																																																																															desired = 75
																																																																															break
																																																																														end
																																																																														if desired then
																																																																															if desired == 75 then
																																																																																desired = nil
																																																																															end
																																																																															break
																																																																														end
																																																																													end
																																																																													loc_4 = rt_add_i32(loc_4, 24)
																																																																													rt_store_i32(memory_at_0, loc_0 + 20, loc_4)
																																																																													break
																																																																												end
																																																																												if desired then
																																																																													if desired == 74 then
																																																																														desired = nil
																																																																													end
																																																																													break
																																																																												end
																																																																												rt_store_i32(memory_at_0, loc_4, loc_1)
																																																																												rt_store_i32(memory_at_0, loc_4 + 4, loc_5)
																																																																												loc_5 = rt_load_i32_u8(memory_at_0, loc_6 + 5)
																																																																												rt_store_i32(memory_at_0, loc_4 + 20, 0)
																																																																												rt_store_i32(memory_at_0, loc_4 + 12, 0)
																																																																												rt_store_i32(memory_at_0, loc_4 + 16, loc_2)
																																																																												loc_9 = rt_shl_i32(loc_5, 4)
																																																																												rt_store_i32(memory_at_0, loc_4 + 8, rt_add_i32(loc_9, loc_7))
																																																																												rt_store_i32(memory_at_0, loc_0 + 8, loc_7)
																																																																												rt_store_i32(memory_at_0, loc_0 + 12, loc_1)
																																																																												if rt_le_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 24), loc_7), loc_9) then
																																																																													while true do
																																																																														FUNC_LIST[82](loc_0, loc_5)
																																																																														break
																																																																													end
																																																																													if desired then
																																																																														if desired == 74 then
																																																																															desired = nil
																																																																														end
																																																																														break
																																																																													end
																																																																												end
																																																																												loc_7 = rt_load_i32(memory_at_0, loc_6 + 16)
																																																																												if rt_load_i32_u8(memory_at_0, loc_6 + 3) == 0 then
																																																																													while true do
																																																																														loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
																																																																														loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																														loc_3 = rt_add_i32(loc_5, rt_shl_i32(rt_load_i32_u8(memory_at_0, loc_7 + 4), 4))
																																																																														if loc_1 < loc_3 then
																																																																															while true do
																																																																																while true do
																																																																																	rt_store_i32(memory_at_0, loc_1 + 12, 0)
																																																																																	loc_1 = rt_add_i32(loc_1, 16)
																																																																																	if loc_3 > loc_1 then
																																																																																		continue
																																																																																	end
																																																																																	break
																																																																																end
																																																																																if desired then
																																																																																	break
																																																																																end
																																																																																break
																																																																															end
																																																																															if desired then
																																																																																break
																																																																															end
																																																																														end
																																																																														reg_0 = loc_0
																																																																														if rt_load_i32_u8(memory_at_0, loc_7 + 5) ~= 0 then
																																																																															while true do
																																																																																reg_1 = loc_1
																																																																																break
																																																																															end
																																																																															if desired then
																																																																																break
																																																																															end
																																																																														else
																																																																															while true do
																																																																																reg_1 = rt_load_i32(memory_at_0, loc_4 + 8)
																																																																																break
																																																																															end
																																																																															if desired then
																																																																																break
																																																																															end
																																																																														end
																																																																														loc_1 = reg_1
																																																																														rt_store_i32(memory_at_0, reg_0 + 8, loc_1)
																																																																														loc_12 = rt_load_i32(memory_at_0, loc_7 + 8)
																																																																														loc_3 = rt_load_i32(memory_at_0, loc_7 + 12)
																																																																														loc_13 = loc_6
																																																																														desired = 5
																																																																														break
																																																																													end
																																																																													if desired then
																																																																														if desired == 74 then
																																																																															desired = nil
																																																																														end
																																																																														break
																																																																													end
																																																																												end
																																																																												reg_0 = TABLE_LIST[0].data[loc_7](loc_0)
																																																																												loc_5 = reg_0
																																																																												if rt_lt_i32(loc_5, 0) then
																																																																													desired = 7
																																																																													break
																																																																												end
																																																																												loc_9 = rt_load_i32(memory_at_0, loc_0 + 20)
																																																																												loc_1 = rt_load_i32(memory_at_0, loc_9 + 4)
																																																																												if loc_2 == 0 then
																																																																													desired = 6
																																																																													break
																																																																												end
																																																																												if loc_5 == 0 then
																																																																													desired = 6
																																																																													break
																																																																												end
																																																																												loc_4 = rt_load_i32(memory_at_0, loc_0 + 8)
																																																																												loc_5 = rt_sub_i32(loc_4, rt_shl_i32(loc_5, 4))
																																																																												while true do
																																																																													rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_5))
																																																																													rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
																																																																													loc_1 = rt_add_i32(loc_1, 16)
																																																																													loc_2 = rt_sub_i32(loc_2, 1)
																																																																													if loc_2 == 0 then
																																																																														desired = 6
																																																																														break
																																																																													end
																																																																													loc_5 = rt_add_i32(loc_5, 16)
																																																																													if loc_4 > loc_5 then
																																																																														continue
																																																																													end
																																																																													break
																																																																												end
																																																																												if desired then
																																																																													if desired == 74 then
																																																																														desired = nil
																																																																													end
																																																																													break
																																																																												end
																																																																												desired = 6
																																																																												break
																																																																											end
																																																																											if desired then
																																																																												if desired == 73 then
																																																																													desired = nil
																																																																												end
																																																																												break
																																																																											end
																																																																											loc_3 = rt_add_i32(loc_1, 4)
																																																																											desired = 5
																																																																											break
																																																																										end
																																																																										if desired then
																																																																											if desired == 72 then
																																																																												desired = nil
																																																																											end
																																																																											break
																																																																										end
																																																																										loc_6 = rt_add_i32(loc_1, 4)
																																																																										loc_3 = rt_load_i32(memory_at_0, loc_1 + 4)
																																																																										loc_4 = 0
																																																																										loc_1 = rt_load_i32(memory_at_0, loc_1)
																																																																										loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																																																																										if rt_load_i32(memory_at_0, loc_2 + 12) == 5 then
																																																																											while true do
																																																																												reg_0 = (if rt_load_i32(memory_at_0, loc_2) == rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(bit_and(loc_3, 16777215), 4), loc_12)) then 1 else 0)
																																																																												break
																																																																											end
																																																																											if desired then
																																																																												if desired == 72 then
																																																																													desired = nil
																																																																												end
																																																																												break
																																																																											end
																																																																										else
																																																																											while true do
																																																																												reg_0 = loc_4
																																																																												break
																																																																											end
																																																																											if desired then
																																																																												if desired == 72 then
																																																																													desired = nil
																																																																												end
																																																																												break
																																																																											end
																																																																										end
																																																																										loc_4 = reg_0
																																																																										loc_2 = 1
																																																																										loc_3 = rt_add_i32(rt_shl_i32((if rt_shr_u32(loc_3, 31) == loc_4 then 1 else rt_shr_i32(loc_1, 16)), 2), loc_6)
																																																																										desired = 4
																																																																										break
																																																																									end
																																																																									if desired then
																																																																										if desired == 71 then
																																																																											desired = nil
																																																																										end
																																																																										break
																																																																									end
																																																																									loc_6 = rt_add_i32(loc_1, 4)
																																																																									loc_3 = rt_load_i32(memory_at_0, loc_1 + 4)
																																																																									loc_4 = 0
																																																																									loc_1 = rt_load_i32(memory_at_0, loc_1)
																																																																									loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																																																																									if rt_load_i32(memory_at_0, loc_2 + 12) == 3 then
																																																																										while true do
																																																																											reg_0 = (if rt_load_f64(memory_at_0, loc_2) == rt_load_f64(memory_at_0, rt_add_i32(rt_shl_i32(bit_and(loc_3, 16777215), 4), loc_12)) then 1 else 0)
																																																																											break
																																																																										end
																																																																										if desired then
																																																																											if desired == 71 then
																																																																												desired = nil
																																																																											end
																																																																											break
																																																																										end
																																																																									else
																																																																										while true do
																																																																											reg_0 = loc_4
																																																																											break
																																																																										end
																																																																										if desired then
																																																																											if desired == 71 then
																																																																												desired = nil
																																																																											end
																																																																											break
																																																																										end
																																																																									end
																																																																									loc_4 = reg_0
																																																																									loc_2 = 1
																																																																									loc_3 = rt_add_i32(rt_shl_i32((if rt_shr_u32(loc_3, 31) == loc_4 then 1 else rt_shr_i32(loc_1, 16)), 2), loc_6)
																																																																									desired = 4
																																																																									break
																																																																								end
																																																																								if desired then
																																																																									if desired == 70 then
																																																																										desired = nil
																																																																									end
																																																																									break
																																																																								end
																																																																								loc_6 = rt_add_i32(loc_1, 4)
																																																																								loc_2 = 1
																																																																								loc_3 = rt_load_i32(memory_at_0, loc_1 + 4)
																																																																								loc_4 = 0
																																																																								loc_1 = rt_load_i32(memory_at_0, loc_1)
																																																																								loc_7 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																																																																								if rt_load_i32(memory_at_0, loc_7 + 12) == 1 then
																																																																									while true do
																																																																										reg_0 = (if rt_load_i32(memory_at_0, loc_7) == bit_and(loc_3, 1) then 1 else 0)
																																																																										break
																																																																									end
																																																																									if desired then
																																																																										if desired == 70 then
																																																																											desired = nil
																																																																										end
																																																																										break
																																																																									end
																																																																								else
																																																																									while true do
																																																																										reg_0 = loc_4
																																																																										break
																																																																									end
																																																																									if desired then
																																																																										if desired == 70 then
																																																																											desired = nil
																																																																										end
																																																																										break
																																																																									end
																																																																								end
																																																																								loc_4 = reg_0
																																																																								loc_3 = rt_add_i32(rt_shl_i32((if rt_shr_u32(loc_3, 31) == loc_4 then 1 else rt_shr_i32(loc_1, 16)), 2), loc_6)
																																																																								desired = 4
																																																																								break
																																																																							end
																																																																							if desired then
																																																																								if desired == 69 then
																																																																									desired = nil
																																																																								end
																																																																								break
																																																																							end
																																																																							loc_2 = 1
																																																																							loc_3 = rt_load_i32(memory_at_0, loc_1)
																																																																							loc_3 = rt_add_i32(rt_add_i32(loc_1, 4), rt_shl_i32((if rt_ge_i32(bit_xor(rt_load_i32(memory_at_0, loc_1 + 4), rt_sub_i32(rt_load_i32(memory_at_0, rt_add_i32(bit_and(rt_shr_u32(loc_3, 4), 4080), loc_5) + 12), 1)), 0) then 1 else rt_shr_i32(loc_3, 16)), 2))
																																																																							desired = 4
																																																																							break
																																																																						end
																																																																						if desired then
																																																																							if desired == 68 then
																																																																								desired = nil
																																																																							end
																																																																							break
																																																																						end
																																																																						loc_3 = rt_load_i32(memory_at_0, loc_13 + 16)
																																																																						loc_3 = rt_load_i32_u8(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_3 + 56), rt_shr_i32(rt_sub_i32(loc_1, rt_load_i32(memory_at_0, loc_3 + 12)), 2)))
																																																																						loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1716)
																																																																						if loc_2 ~= 0 then
																																																																							while true do
																																																																								rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_1)
																																																																								FUNC_LIST[577](loc_0, loc_2, 0)
																																																																								if rt_load_i32_u8(memory_at_0, loc_0 + 3) ~= 0 then
																																																																									desired = 7
																																																																									break
																																																																								end
																																																																								reg_0 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																								break
																																																																							end
																																																																							if desired then
																																																																								if desired == 68 then
																																																																									desired = nil
																																																																								end
																																																																								break
																																																																							end
																																																																						else
																																																																							while true do
																																																																								reg_0 = loc_5
																																																																								break
																																																																							end
																																																																							if desired then
																																																																								if desired == 68 then
																																																																									desired = nil
																																																																								end
																																																																								break
																																																																							end
																																																																						end
																																																																						loc_5 = reg_0
																																																																						loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_3, 2), 11344))
																																																																						loc_3 = loc_1
																																																																						desired = 4
																																																																						break
																																																																					end
																																																																					if desired then
																																																																						if desired == 67 then
																																																																							desired = nil
																																																																						end
																																																																						break
																																																																					end
																																																																					loc_3 = rt_add_i32(loc_1, 8)
																																																																					loc_2 = 1
																																																																					if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_13 + 12) + 5) == 0 then
																																																																						desired = 4
																																																																						break
																																																																					end
																																																																					loc_6 = rt_load_i32(memory_at_0, loc_1)
																																																																					loc_8 = rt_add_i32(bit_and(rt_shr_u32(loc_6, 22), 1020), loc_3)
																																																																					loc_4 = rt_load_i32(memory_at_0, rt_sub_i32(loc_8, 4))
																																																																					loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
																																																																					rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																					loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
																																																																					loc_7 = rt_add_i32(rt_shl_i32(bit_and(loc_2, 255), 4), loc_5)
																																																																					rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_7))
																																																																					rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_7 + 8))
																																																																					loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																																																					rt_store_i64(memory_at_0, loc_1 + 16, rt_load_i64(memory_at_0, loc_2))
																																																																					rt_store_i64(memory_at_0, loc_1 + 24, rt_load_i64(memory_at_0, loc_2 + 8))
																																																																					loc_2 = 1
																																																																					loc_7 = rt_add_i32(bit_and(rt_shr_u32(loc_4, 4), 4080), loc_5)
																																																																					reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_add_i32(bit_and(rt_shr_u32(loc_6, 6), 1020), 10320))](loc_0, loc_7, rt_add_i32(bit_and(rt_shr_u32(loc_6, 12), 4080), loc_5), rt_sub_i32(rt_shr_u32(loc_4, 24), 1), loc_1, 3)
																																																																					loc_1 = reg_0
																																																																					if rt_lt_i32(loc_1, 0) then
																																																																						desired = 4
																																																																						break
																																																																					end
																																																																					loc_3 = loc_8
																																																																					if loc_4 > 16777215 then
																																																																						desired = 4
																																																																						break
																																																																					end
																																																																					rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_shl_i32(loc_1, 4), loc_7))
																																																																					desired = 4
																																																																					break
																																																																				end
																																																																				if desired then
																																																																					if desired == 66 then
																																																																						desired = nil
																																																																					end
																																																																					break
																																																																				end
																																																																				loc_3 = rt_add_i32(loc_1, 8)
																																																																				loc_2 = 1
																																																																				if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_13 + 12) + 5) == 0 then
																																																																					desired = 4
																																																																					break
																																																																				end
																																																																				loc_6 = rt_load_i32(memory_at_0, loc_1)
																																																																				loc_7 = rt_add_i32(bit_and(rt_shr_u32(loc_6, 22), 1020), loc_3)
																																																																				loc_4 = rt_load_i32(memory_at_0, rt_sub_i32(loc_7, 4))
																																																																				loc_1 = rt_load_i32(memory_at_0, loc_1 + 4)
																																																																				rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																				loc_8 = rt_add_i32(bit_and(rt_shr_u32(loc_4, 4), 4080), loc_5)
																																																																				reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_add_i32(bit_and(rt_shr_u32(loc_6, 6), 1020), 10320))](loc_0, loc_8, rt_add_i32(bit_and(rt_shr_u32(loc_6, 12), 4080), loc_5), rt_sub_i32(rt_shr_u32(loc_4, 24), 1), rt_add_i32(rt_shl_i32(loc_1, 4), loc_12), 2)
																																																																				loc_1 = reg_0
																																																																				if rt_lt_i32(loc_1, 0) then
																																																																					desired = 4
																																																																					break
																																																																				end
																																																																				loc_3 = loc_7
																																																																				if loc_4 > 16777215 then
																																																																					desired = 4
																																																																					break
																																																																				end
																																																																				rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_shl_i32(loc_1, 4), loc_8))
																																																																				desired = 4
																																																																				break
																																																																			end
																																																																			if desired then
																																																																				if desired == 65 then
																																																																					desired = nil
																																																																				end
																																																																				break
																																																																			end
																																																																			loc_3 = rt_add_i32(loc_1, 8)
																																																																			loc_2 = 1
																																																																			if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_13 + 12) + 5) == 0 then
																																																																				desired = 4
																																																																				break
																																																																			end
																																																																			loc_6 = rt_load_i32(memory_at_0, loc_1)
																																																																			loc_7 = rt_add_i32(bit_and(rt_shr_u32(loc_6, 22), 1020), loc_3)
																																																																			loc_4 = rt_load_i32(memory_at_0, rt_sub_i32(loc_7, 4))
																																																																			loc_1 = rt_load_i32(memory_at_0, loc_1 + 4)
																																																																			rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																			loc_8 = rt_add_i32(bit_and(rt_shr_u32(loc_4, 4), 4080), loc_5)
																																																																			reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_add_i32(bit_and(rt_shr_u32(loc_6, 6), 1020), 10320))](loc_0, loc_8, rt_add_i32(bit_and(rt_shr_u32(loc_6, 12), 4080), loc_5), rt_sub_i32(rt_shr_u32(loc_4, 24), 1), rt_add_i32(rt_shl_i32(loc_1, 4), loc_5), 2)
																																																																			loc_1 = reg_0
																																																																			if rt_lt_i32(loc_1, 0) then
																																																																				desired = 4
																																																																				break
																																																																			end
																																																																			loc_3 = loc_7
																																																																			if loc_4 > 16777215 then
																																																																				desired = 4
																																																																				break
																																																																			end
																																																																			rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_shl_i32(loc_1, 4), loc_8))
																																																																			desired = 4
																																																																			break
																																																																		end
																																																																		if desired then
																																																																			if desired == 64 then
																																																																				desired = nil
																																																																			end
																																																																			break
																																																																		end
																																																																		loc_3 = rt_add_i32(loc_1, 4)
																																																																		loc_2 = 1
																																																																		if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_13 + 12) + 5) == 0 then
																																																																			desired = 4
																																																																			break
																																																																		end
																																																																		loc_4 = rt_load_i32(memory_at_0, loc_1)
																																																																		loc_6 = rt_add_i32(bit_and(rt_shr_u32(loc_4, 22), 1020), loc_3)
																																																																		loc_1 = rt_load_i32(memory_at_0, loc_6)
																																																																		rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																		loc_7 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																																																																		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_add_i32(bit_and(rt_shr_u32(loc_4, 6), 1020), 10320))](loc_0, loc_7, rt_add_i32(bit_and(rt_shr_u32(loc_4, 12), 4080), loc_5), rt_sub_i32(rt_shr_u32(loc_1, 24), 1), 0, 1)
																																																																		loc_4 = reg_0
																																																																		if rt_lt_i32(loc_4, 0) then
																																																																			desired = 4
																																																																			break
																																																																		end
																																																																		if loc_1 <= 16777215 then
																																																																			while true do
																																																																				rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_shl_i32(loc_4, 4), loc_7))
																																																																				break
																																																																			end
																																																																			if desired then
																																																																				if desired == 64 then
																																																																					desired = nil
																																																																				end
																																																																				break
																																																																			end
																																																																		end
																																																																		loc_3 = rt_add_i32(loc_6, 4)
																																																																		desired = 4
																																																																		break
																																																																	end
																																																																	if desired then
																																																																		if desired == 63 then
																																																																			desired = nil
																																																																		end
																																																																		break
																																																																	end
																																																																	loc_3 = rt_add_i32(loc_1, 4)
																																																																	loc_2 = rt_load_i32(memory_at_0, loc_1)
																																																																	loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_12)
																																																																	loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																																																	loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 20), 4080), loc_5)
																																																																	loc_6 = rt_load_i32(memory_at_0, loc_2 + 12)
																																																																	if loc_6 ~= 3 then
																																																																		while true do
																																																																			if loc_6 == 4 then
																																																																				while true do
																																																																					loc_25 = no_op(rt_load_f64(memory_at_0, loc_4))
																																																																					rt_store_f32(memory_at_0, loc_1, (loc_25 / rt_load_f32(memory_at_0, loc_2)))
																																																																					rt_store_f32(memory_at_0, loc_1 + 4, (loc_25 / rt_load_f32(memory_at_0, loc_2 + 4)))
																																																																					loc_26 = rt_load_f32(memory_at_0, loc_2 + 8)
																																																																					rt_store_i32(memory_at_0, loc_1 + 12, 4)
																																																																					rt_store_f32(memory_at_0, loc_1 + 8, (loc_25 / loc_26))
																																																																					loc_2 = 1
																																																																					desired = 4
																																																																					break
																																																																				end
																																																																				if desired then
																																																																					break
																																																																				end
																																																																			end
																																																																			rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																			FUNC_LIST[600](loc_0, loc_1, loc_4, loc_2)
																																																																			desired = 20
																																																																			break
																																																																		end
																																																																		if desired then
																																																																			if desired == 63 then
																																																																				desired = nil
																																																																			end
																																																																			break
																																																																		end
																																																																	end
																																																																	loc_22 = rt_load_f64(memory_at_0, loc_2)
																																																																	loc_23 = rt_load_f64(memory_at_0, loc_4)
																																																																	rt_store_i32(memory_at_0, loc_1 + 12, 3)
																																																																	rt_store_f64(memory_at_0, loc_1, (loc_23 / loc_22))
																																																																	loc_2 = 1
																																																																	desired = 4
																																																																	break
																																																																end
																																																																if desired then
																																																																	if desired == 62 then
																																																																		desired = nil
																																																																	end
																																																																	break
																																																																end
																																																																loc_3 = rt_add_i32(loc_1, 4)
																																																																loc_1 = rt_load_i32(memory_at_0, loc_1)
																																																																loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 12), 4080), loc_12)
																																																																loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																																																																loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 20), 4080), loc_5)
																																																																if rt_load_i32(memory_at_0, loc_1 + 12) == 3 then
																																																																	while true do
																																																																		loc_22 = rt_load_f64(memory_at_0, loc_1)
																																																																		loc_23 = rt_load_f64(memory_at_0, loc_4)
																																																																		rt_store_i32(memory_at_0, loc_2 + 12, 3)
																																																																		rt_store_f64(memory_at_0, loc_2, (loc_23 - loc_22))
																																																																		loc_2 = 1
																																																																		desired = 4
																																																																		break
																																																																	end
																																																																	if desired then
																																																																		if desired == 62 then
																																																																			desired = nil
																																																																		end
																																																																		break
																																																																	end
																																																																end
																																																																rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																FUNC_LIST[598](loc_0, loc_2, loc_4, loc_1)
																																																																desired = 20
																																																																break
																																																															end
																																																															if desired then
																																																																if desired == 61 then
																																																																	desired = nil
																																																																end
																																																																break
																																																															end
																																																															error("out of code bounds")
																																																														end
																																																														if desired then
																																																															if desired == 60 then
																																																																desired = nil
																																																															end
																																																															break
																																																														end
																																																														loc_3 = rt_load_i32(memory_at_0, loc_1)
																																																														loc_2 = rt_shr_i32(loc_3, 8)
																																																														rt_store_i32(memory_at_0, loc_1, bit_or(rt_shl_i32(rt_add_i32(loc_2, (if rt_lt_i32(loc_2, 8388607) then 1 else 0)), 8), bit_and(loc_3, 255)))
																																																														loc_3 = rt_add_i32(loc_1, 4)
																																																														loc_2 = 1
																																																														desired = 4
																																																														break
																																																													end
																																																													if desired then
																																																														if desired == 59 then
																																																															desired = nil
																																																														end
																																																														break
																																																													end
																																																													loc_3 = rt_add_i32(loc_1, 4)
																																																													loc_7 = rt_load_i32(memory_at_0, loc_1)
																																																													loc_8 = rt_add_i32(loc_3, bit_and(rt_shr_u32(loc_7, 22), 1020))
																																																													loc_4 = rt_load_i32(memory_at_0, loc_8)
																																																													loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_4, 4), 4080), loc_5)
																																																													loc_6 = bit_and(rt_shr_u32(loc_4, 16), 255)
																																																													if loc_6 ~= 0 then
																																																														while true do
																																																															reg_0 = loc_6
																																																															break
																																																														end
																																																														if desired then
																																																															if desired == 59 then
																																																																desired = nil
																																																															end
																																																															break
																																																														end
																																																													else
																																																														while true do
																																																															reg_0 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), loc_1), 4)
																																																															break
																																																														end
																																																														if desired then
																																																															if desired == 59 then
																																																																desired = nil
																																																															end
																																																															break
																																																														end
																																																													end
																																																													loc_6 = reg_0
																																																													loc_2 = 1
																																																													if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_13 + 12) + 5) == 0 then
																																																														desired = 4
																																																														break
																																																													end
																																																													rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																													reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(bit_and(rt_shr_u32(loc_7, 8), 255), 2), 10320))](loc_0, loc_1, rt_add_i32(loc_1, 16), rt_sub_i32(rt_shr_u32(loc_4, 24), 1), rt_add_i32(loc_1, 32), rt_sub_i32(loc_6, 1))
																																																													loc_6 = reg_0
																																																													if rt_lt_i32(loc_6, 0) then
																																																														desired = 4
																																																														break
																																																													end
																																																													reg_0 = loc_0
																																																													if loc_4 <= 16777215 then
																																																														while true do
																																																															reg_1 = rt_add_i32(rt_shl_i32(loc_6, 4), loc_1)
																																																															break
																																																														end
																																																														if desired then
																																																															if desired == 59 then
																																																																desired = nil
																																																															end
																																																															break
																																																														end
																																																													else
																																																														while true do
																																																															reg_1 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 8)
																																																															break
																																																														end
																																																														if desired then
																																																															if desired == 59 then
																																																																desired = nil
																																																															end
																																																															break
																																																														end
																																																													end
																																																													loc_1 = reg_1
																																																													rt_store_i32(memory_at_0, reg_0 + 8, loc_1)
																																																													loc_3 = rt_add_i32(loc_8, 4)
																																																													desired = 4
																																																													break
																																																												end
																																																												if desired then
																																																													if desired == 58 then
																																																														desired = nil
																																																													end
																																																													break
																																																												end
																																																												loc_3 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1700)
																																																												if loc_3 ~= 0 then
																																																													while true do
																																																														rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, rt_add_i32(loc_1, 4))
																																																														TABLE_LIST[0].data[loc_3](loc_0, 4294967295)
																																																														if rt_load_i32_u8(memory_at_0, loc_0 + 3) ~= 0 then
																																																															desired = 47
																																																															break
																																																														end
																																																														reg_0 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																														break
																																																													end
																																																													if desired then
																																																														if desired == 58 then
																																																															desired = nil
																																																														end
																																																														break
																																																													end
																																																												else
																																																													while true do
																																																														reg_0 = loc_5
																																																														break
																																																													end
																																																													if desired then
																																																														if desired == 58 then
																																																															desired = nil
																																																														end
																																																														break
																																																													end
																																																												end
																																																												loc_5 = reg_0
																																																												loc_3 = rt_add_i32(rt_add_i32(rt_shl_i32(rt_shr_i32(rt_load_i32(memory_at_0, loc_1), 8), 2), loc_1), 4)
																																																												loc_2 = 1
																																																												desired = 4
																																																												break
																																																											end
																																																											if desired then
																																																												if desired == 57 then
																																																													desired = nil
																																																												end
																																																												break
																																																											end
																																																											loc_3 = rt_add_i32(rt_shl_i32(rt_load_i32_u8(memory_at_0, loc_1 + 1), 4), loc_5)
																																																											loc_2 = rt_add_i32(rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 4), 4), loc_12)
																																																											rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_2))
																																																											rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
																																																											loc_3 = rt_add_i32(loc_1, 8)
																																																											loc_2 = 1
																																																											desired = 4
																																																											break
																																																										end
																																																										if desired then
																																																											if desired == 56 then
																																																												desired = nil
																																																											end
																																																											break
																																																										end
																																																										loc_3 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1700)
																																																										if loc_3 ~= 0 then
																																																											while true do
																																																												rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, rt_add_i32(loc_1, 4))
																																																												TABLE_LIST[0].data[loc_3](loc_0, 4294967295)
																																																												if rt_load_i32_u8(memory_at_0, loc_0 + 3) ~= 0 then
																																																													desired = 47
																																																													break
																																																												end
																																																												reg_0 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																												break
																																																											end
																																																											if desired then
																																																												if desired == 56 then
																																																													desired = nil
																																																												end
																																																												break
																																																											end
																																																										else
																																																											while true do
																																																												reg_0 = loc_5
																																																												break
																																																											end
																																																											if desired then
																																																												if desired == 56 then
																																																													desired = nil
																																																												end
																																																												break
																																																											end
																																																										end
																																																										loc_5 = reg_0
																																																										loc_3 = rt_add_i32(rt_add_i32(rt_shl_i32(rt_load_i32_i16(memory_at_0, loc_1 + 2), 2), loc_1), 4)
																																																										loc_2 = 1
																																																										desired = 4
																																																										break
																																																									end
																																																									if desired then
																																																										if desired == 55 then
																																																											desired = nil
																																																										end
																																																										break
																																																									end
																																																									loc_2 = rt_load_i32(memory_at_0, loc_1)
																																																									loc_3 = rt_add_i32(loc_1, 4)
																																																									rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																									loc_5 = rt_load_i32(memory_at_0, loc_0 + 8)
																																																									loc_1 = rt_shr_u32(loc_2, 8)
																																																									loc_2 = bit_and(loc_1, 255)
																																																									loc_4 = rt_add_i32(loc_2, rt_load_i32_u8(memory_at_0, loc_13 + 5))
																																																									if rt_le_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 24), loc_5), rt_shl_i32(loc_4, 4)) then
																																																										while true do
																																																											FUNC_LIST[82](loc_0, loc_4)
																																																											reg_0 = rt_load_i32(memory_at_0, loc_0 + 8)
																																																											break
																																																										end
																																																										if desired then
																																																											if desired == 55 then
																																																												desired = nil
																																																											end
																																																											break
																																																										end
																																																									else
																																																										while true do
																																																											reg_0 = loc_5
																																																											break
																																																										end
																																																										if desired then
																																																											if desired == 55 then
																																																												desired = nil
																																																											end
																																																											break
																																																										end
																																																									end
																																																									loc_5 = reg_0
																																																									while true do
																																																										if loc_2 == 0 then
																																																											break
																																																										end
																																																										loc_6 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																										loc_11 = bit_and(loc_1, 1)
																																																										loc_1 = 0
																																																										if loc_2 ~= 1 then
																																																											while true do
																																																												loc_9 = rt_sub_i32(loc_2, loc_11)
																																																												loc_7 = 0
																																																												while true do
																																																													loc_2 = rt_shl_i32(loc_1, 4)
																																																													loc_8 = rt_add_i32(loc_2, loc_5)
																																																													loc_4 = rt_add_i32(loc_2, loc_6)
																																																													rt_store_i64(memory_at_0, loc_8, rt_load_i64(memory_at_0, loc_4))
																																																													rt_store_i64(memory_at_0, loc_8 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
																																																													rt_store_i32(memory_at_0, loc_4 + 12, 0)
																																																													loc_2 = bit_or(loc_2, 16)
																																																													loc_4 = rt_add_i32(loc_2, loc_5)
																																																													loc_2 = rt_add_i32(loc_2, loc_6)
																																																													rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
																																																													rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_2))
																																																													rt_store_i32(memory_at_0, loc_2 + 12, 0)
																																																													loc_1 = rt_add_i32(loc_1, 2)
																																																													loc_7 = rt_add_i32(loc_7, 2)
																																																													if loc_9 ~= loc_7 then
																																																														continue
																																																													end
																																																													break
																																																												end
																																																												if desired then
																																																													break
																																																												end
																																																												break
																																																											end
																																																											if desired then
																																																												if desired == 56 then
																																																													desired = nil
																																																												end
																																																												break
																																																											end
																																																										end
																																																										if loc_11 == 0 then
																																																											break
																																																										end
																																																										loc_1 = rt_shl_i32(loc_1, 4)
																																																										loc_2 = rt_add_i32(loc_1, loc_5)
																																																										loc_1 = rt_add_i32(loc_1, loc_6)
																																																										rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
																																																										rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
																																																										rt_store_i32(memory_at_0, loc_1 + 12, 0)
																																																										break
																																																									end
																																																									if desired then
																																																										if desired == 55 then
																																																											desired = nil
																																																										end
																																																										break
																																																									end
																																																									loc_1 = rt_load_i32(memory_at_0, loc_0 + 20)
																																																									rt_store_i32(memory_at_0, loc_1, loc_5)
																																																									loc_2 = rt_add_i32(rt_shl_i32(rt_load_i32_u8(memory_at_0, loc_13 + 5), 4), loc_5)
																																																									rt_store_i32(memory_at_0, loc_1 + 8, loc_2)
																																																									rt_store_i32(memory_at_0, loc_0 + 8, loc_2)
																																																									rt_store_i32(memory_at_0, loc_0 + 12, loc_5)
																																																									loc_2 = 1
																																																									desired = 4
																																																									break
																																																								end
																																																								if desired then
																																																									if desired == 54 then
																																																										desired = nil
																																																									end
																																																									break
																																																								end
																																																								loc_3 = rt_load_i32(memory_at_0, loc_1)
																																																								loc_4 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(rt_shr_i32(loc_3, 16), 4), loc_12))
																																																								loc_7 = rt_add_i32(loc_1, 4)
																																																								rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_7)
																																																								loc_9 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 4), 4080), loc_5)
																																																								loc_1 = rt_load_i32(memory_at_0, loc_13 + 12)
																																																								loc_2 = loc_4
																																																								if loc_1 ~= rt_load_i32(memory_at_0, loc_2 + 12) then
																																																									while true do
																																																										reg_0 = FUNC_LIST[15](loc_0, rt_load_i32_u8(memory_at_0, loc_2 + 4), loc_1, rt_load_i32(memory_at_0, loc_2 + 16))
																																																										break
																																																									end
																																																									if desired then
																																																										if desired == 54 then
																																																											desired = nil
																																																										end
																																																										break
																																																									end
																																																								else
																																																									while true do
																																																										reg_0 = loc_2
																																																										break
																																																									end
																																																									if desired then
																																																										if desired == 54 then
																																																											desired = nil
																																																										end
																																																										break
																																																									end
																																																								end
																																																								loc_2 = reg_0
																																																								rt_store_i32(memory_at_0, loc_9 + 12, 7)
																																																								rt_store_i32(memory_at_0, loc_9, loc_2)
																																																								while true do
																																																									if rt_load_i32_u8(memory_at_0, loc_4 + 4) == 0 then
																																																										while true do
																																																											loc_3 = 0
																																																											desired = 55
																																																											break
																																																										end
																																																										if desired then
																																																											if desired == 55 then
																																																												desired = nil
																																																											end
																																																											break
																																																										end
																																																									end
																																																									loc_8 = rt_add_i32(loc_13, 24)
																																																									loc_1 = 0
																																																									while true do
																																																										loc_3 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_1, 2), loc_7))
																																																										loc_3 = rt_add_i32((if bit_and(loc_3, 65280) ~= 0 then loc_8 else loc_5), bit_and(rt_shr_u32(loc_3, 12), 4080))
																																																										while true do
																																																											while true do
																																																												if loc_2 ~= loc_4 then
																																																													break
																																																												end
																																																												reg_0 = FUNC_LIST[363](rt_add_i32(rt_add_i32(rt_shl_i32(loc_1, 4), loc_2), 24), loc_3)
																																																												if reg_0 ~= 0 then
																																																													desired = 57
																																																													break
																																																												end
																																																												if rt_load_i32_u8(memory_at_0, loc_4 + 6) ~= 0 then
																																																													break
																																																												end
																																																												reg_0 = FUNC_LIST[15](loc_0, rt_load_i32_u8(memory_at_0, loc_4 + 4), rt_load_i32(memory_at_0, loc_13 + 12), rt_load_i32(memory_at_0, loc_4 + 16))
																																																												loc_2 = reg_0
																																																												rt_store_i32(memory_at_0, loc_9 + 12, 7)
																																																												rt_store_i32(memory_at_0, loc_9, loc_2)
																																																												loc_1 = 4294967295
																																																												desired = 57
																																																												break
																																																											end
																																																											if desired then
																																																												if desired == 57 then
																																																													desired = nil
																																																												end
																																																												break
																																																											end
																																																											loc_6 = rt_add_i32(rt_shl_i32(loc_1, 4), loc_2)
																																																											rt_store_i64(memory_at_0, loc_6 + 32, rt_load_i64(memory_at_0, loc_3 + 8))
																																																											rt_store_i64(memory_at_0, loc_6 + 24, rt_load_i64(memory_at_0, loc_3))
																																																											if rt_lt_i32(rt_load_i32(memory_at_0, loc_3 + 12), 5) then
																																																												break
																																																											end
																																																											if bit_and(rt_load_i32_u8(memory_at_0, loc_2 + 1), 4) == 0 then
																																																												break
																																																											end
																																																											loc_3 = rt_load_i32(memory_at_0, loc_3)
																																																											if bit_and(rt_load_i32_u8(memory_at_0, loc_3 + 1), 3) == 0 then
																																																												break
																																																											end
																																																											FUNC_LIST[49](loc_0, loc_2, loc_3)
																																																											break
																																																										end
																																																										if desired then
																																																											if desired == 56 then
																																																												desired = nil
																																																												continue
																																																											end
																																																											break
																																																										end
																																																										loc_1 = rt_add_i32(loc_1, 1)
																																																										loc_3 = rt_load_i32_u8(memory_at_0, loc_4 + 4)
																																																										if rt_lt_i32(loc_1, loc_3) then
																																																											continue
																																																										end
																																																										break
																																																									end
																																																									if desired then
																																																										if desired == 55 then
																																																											desired = nil
																																																										end
																																																										break
																																																									end
																																																									break
																																																								end
																																																								if desired then
																																																									if desired == 54 then
																																																										desired = nil
																																																									end
																																																									break
																																																								end
																																																								rt_store_i32_n8(memory_at_0, loc_2 + 6, 0)
																																																								if loc_2 ~= loc_4 then
																																																									while true do
																																																										rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_7)
																																																										loc_1 = rt_load_i32(memory_at_0, loc_0 + 16)
																																																										if rt_load_i32(memory_at_0, loc_1 + 40) >= rt_load_i32(memory_at_0, loc_1 + 36) then
																																																											while true do
																																																												reg_0 = FUNC_LIST[42](loc_0, 1)
																																																												reg_0 = rt_load_i32_u8(memory_at_0, loc_4 + 4)
																																																												break
																																																											end
																																																											if desired then
																																																												break
																																																											end
																																																										else
																																																											while true do
																																																												reg_0 = loc_3
																																																												break
																																																											end
																																																											if desired then
																																																												break
																																																											end
																																																										end
																																																										loc_3 = reg_0
																																																										reg_0 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																										break
																																																									end
																																																									if desired then
																																																										if desired == 54 then
																																																											desired = nil
																																																										end
																																																										break
																																																									end
																																																								else
																																																									while true do
																																																										reg_0 = loc_5
																																																										break
																																																									end
																																																									if desired then
																																																										if desired == 54 then
																																																											desired = nil
																																																										end
																																																										break
																																																									end
																																																								end
																																																								loc_5 = reg_0
																																																								loc_3 = rt_add_i32(rt_shl_i32(bit_and(loc_3, 255), 2), loc_7)
																																																								loc_2 = 1
																																																								desired = 4
																																																								break
																																																							end
																																																							if desired then
																																																								if desired == 53 then
																																																									desired = nil
																																																								end
																																																								break
																																																							end
																																																							loc_2 = rt_load_i32(memory_at_0, loc_0 + 20)
																																																							loc_6 = rt_add_i32(bit_xor(rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_13 + 16) + 4), 4294967295), rt_shr_i32(rt_sub_i32(loc_5, rt_load_i32(memory_at_0, loc_2 + 4)), 4))
																																																							loc_3 = rt_add_i32(loc_1, 4)
																																																							loc_1 = rt_load_i32(memory_at_0, loc_1)
																																																							loc_20 = rt_shr_u32(loc_1, 16)
																																																							loc_19 = bit_and(loc_20, 255)
																																																							if loc_19 == 0 then
																																																								while true do
																																																									rt_store_i32(memory_at_0, loc_2 + 12, loc_3)
																																																									if rt_le_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 24), rt_load_i32(memory_at_0, loc_0 + 8)), rt_shl_i32(loc_6, 4)) then
																																																										while true do
																																																											FUNC_LIST[82](loc_0, loc_6)
																																																											break
																																																										end
																																																										if desired then
																																																											break
																																																										end
																																																									end
																																																									loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																									loc_4 = rt_add_i32(loc_5, bit_and(rt_shr_u32(loc_1, 4), 4080))
																																																									loc_2 = 1
																																																									while true do
																																																										if rt_le_i32(loc_6, 0) then
																																																											break
																																																										end
																																																										loc_17 = bit_and(loc_6, 3)
																																																										loc_7 = rt_sub_i32(loc_5, rt_shl_i32(loc_6, 4))
																																																										loc_9 = 0
																																																										loc_1 = 0
																																																										if loc_6 >= 4 then
																																																											while true do
																																																												loc_16 = bit_and(loc_6, 2147483644)
																																																												loc_11 = 0
																																																												while true do
																																																													loc_8 = rt_shl_i32(loc_1, 4)
																																																													loc_10 = rt_add_i32(loc_8, loc_4)
																																																													loc_14 = rt_add_i32(loc_7, loc_8)
																																																													rt_store_i64(memory_at_0, loc_10, rt_load_i64(memory_at_0, loc_14))
																																																													rt_store_i64(memory_at_0, loc_10 + 8, rt_load_i64(memory_at_0, loc_14 + 8))
																																																													loc_10 = bit_or(loc_8, 16)
																																																													loc_14 = rt_add_i32(loc_10, loc_4)
																																																													loc_10 = rt_add_i32(loc_7, loc_10)
																																																													rt_store_i64(memory_at_0, loc_14 + 8, rt_load_i64(memory_at_0, loc_10 + 8))
																																																													rt_store_i64(memory_at_0, loc_14, rt_load_i64(memory_at_0, loc_10))
																																																													loc_10 = bit_or(loc_8, 32)
																																																													loc_14 = rt_add_i32(loc_10, loc_4)
																																																													loc_10 = rt_add_i32(loc_7, loc_10)
																																																													rt_store_i64(memory_at_0, loc_14 + 8, rt_load_i64(memory_at_0, loc_10 + 8))
																																																													rt_store_i64(memory_at_0, loc_14, rt_load_i64(memory_at_0, loc_10))
																																																													loc_8 = bit_or(loc_8, 48)
																																																													loc_10 = rt_add_i32(loc_8, loc_4)
																																																													loc_8 = rt_add_i32(loc_7, loc_8)
																																																													rt_store_i64(memory_at_0, loc_10 + 8, rt_load_i64(memory_at_0, loc_8 + 8))
																																																													rt_store_i64(memory_at_0, loc_10, rt_load_i64(memory_at_0, loc_8))
																																																													loc_1 = rt_add_i32(loc_1, 4)
																																																													loc_11 = rt_add_i32(loc_11, 4)
																																																													if loc_16 ~= loc_11 then
																																																														continue
																																																													end
																																																													break
																																																												end
																																																												if desired then
																																																													break
																																																												end
																																																												break
																																																											end
																																																											if desired then
																																																												if desired == 55 then
																																																													desired = nil
																																																												end
																																																												break
																																																											end
																																																										end
																																																										if loc_17 == 0 then
																																																											break
																																																										end
																																																										while true do
																																																											loc_8 = rt_shl_i32(loc_1, 4)
																																																											loc_11 = rt_add_i32(loc_8, loc_4)
																																																											loc_8 = rt_add_i32(loc_7, loc_8)
																																																											rt_store_i64(memory_at_0, loc_11, rt_load_i64(memory_at_0, loc_8))
																																																											rt_store_i64(memory_at_0, loc_11 + 8, rt_load_i64(memory_at_0, loc_8 + 8))
																																																											loc_1 = rt_add_i32(loc_1, 1)
																																																											loc_9 = rt_add_i32(loc_9, 1)
																																																											if loc_17 ~= loc_9 then
																																																												continue
																																																											end
																																																											break
																																																										end
																																																										if desired then
																																																											if desired == 55 then
																																																												desired = nil
																																																											end
																																																											break
																																																										end
																																																										break
																																																									end
																																																									if desired then
																																																										break
																																																									end
																																																									rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_shl_i32(loc_6, 4), loc_4))
																																																									desired = 4
																																																									break
																																																								end
																																																								if desired then
																																																									if desired == 53 then
																																																										desired = nil
																																																									end
																																																									break
																																																								end
																																																							end
																																																							loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																																																							loc_2 = 1
																																																							while true do
																																																								loc_16 = rt_sub_i32(loc_19, 1)
																																																								loc_8 = (if rt_gt_i32(loc_6, loc_16) then loc_16 else loc_6)
																																																								if rt_le_i32(loc_8, 0) then
																																																									break
																																																								end
																																																								loc_17 = bit_and(loc_8, 3)
																																																								loc_7 = rt_sub_i32(loc_5, rt_shl_i32(loc_6, 4))
																																																								loc_9 = 0
																																																								loc_4 = 0
																																																								if loc_8 >= 4 then
																																																									while true do
																																																										loc_18 = bit_and(loc_8, 2147483644)
																																																										loc_11 = 0
																																																										while true do
																																																											loc_8 = rt_shl_i32(loc_4, 4)
																																																											loc_10 = rt_add_i32(loc_8, loc_1)
																																																											loc_14 = rt_add_i32(loc_7, loc_8)
																																																											rt_store_i64(memory_at_0, loc_10, rt_load_i64(memory_at_0, loc_14))
																																																											rt_store_i64(memory_at_0, loc_10 + 8, rt_load_i64(memory_at_0, loc_14 + 8))
																																																											loc_10 = bit_or(loc_8, 16)
																																																											loc_14 = rt_add_i32(loc_10, loc_1)
																																																											loc_10 = rt_add_i32(loc_7, loc_10)
																																																											rt_store_i64(memory_at_0, loc_14 + 8, rt_load_i64(memory_at_0, loc_10 + 8))
																																																											rt_store_i64(memory_at_0, loc_14, rt_load_i64(memory_at_0, loc_10))
																																																											loc_10 = bit_or(loc_8, 32)
																																																											loc_14 = rt_add_i32(loc_10, loc_1)
																																																											loc_10 = rt_add_i32(loc_7, loc_10)
																																																											rt_store_i64(memory_at_0, loc_14 + 8, rt_load_i64(memory_at_0, loc_10 + 8))
																																																											rt_store_i64(memory_at_0, loc_14, rt_load_i64(memory_at_0, loc_10))
																																																											loc_8 = bit_or(loc_8, 48)
																																																											loc_10 = rt_add_i32(loc_8, loc_1)
																																																											loc_8 = rt_add_i32(loc_7, loc_8)
																																																											rt_store_i64(memory_at_0, loc_10 + 8, rt_load_i64(memory_at_0, loc_8 + 8))
																																																											rt_store_i64(memory_at_0, loc_10, rt_load_i64(memory_at_0, loc_8))
																																																											loc_4 = rt_add_i32(loc_4, 4)
																																																											loc_11 = rt_add_i32(loc_11, 4)
																																																											if loc_18 ~= loc_11 then
																																																												continue
																																																											end
																																																											break
																																																										end
																																																										if desired then
																																																											break
																																																										end
																																																										break
																																																									end
																																																									if desired then
																																																										if desired == 54 then
																																																											desired = nil
																																																										end
																																																										break
																																																									end
																																																								end
																																																								if loc_17 == 0 then
																																																									break
																																																								end
																																																								while true do
																																																									loc_8 = rt_shl_i32(loc_4, 4)
																																																									loc_11 = rt_add_i32(loc_8, loc_1)
																																																									loc_8 = rt_add_i32(loc_7, loc_8)
																																																									rt_store_i64(memory_at_0, loc_11, rt_load_i64(memory_at_0, loc_8))
																																																									rt_store_i64(memory_at_0, loc_11 + 8, rt_load_i64(memory_at_0, loc_8 + 8))
																																																									loc_4 = rt_add_i32(loc_4, 1)
																																																									loc_9 = rt_add_i32(loc_9, 1)
																																																									if loc_17 ~= loc_9 then
																																																										continue
																																																									end
																																																									break
																																																								end
																																																								if desired then
																																																									if desired == 54 then
																																																										desired = nil
																																																									end
																																																									break
																																																								end
																																																								break
																																																							end
																																																							if desired then
																																																								if desired == 53 then
																																																									desired = nil
																																																								end
																																																								break
																																																							end
																																																							if rt_ge_i32(loc_6, loc_16) then
																																																								desired = 4
																																																								break
																																																							end
																																																							loc_8 = rt_sub_i32(rt_sub_i32(loc_19, loc_6), 2)
																																																							loc_4 = 0
																																																							loc_7 = bit_and(rt_add_i32(bit_xor(loc_6, 4294967295), loc_20), 7)
																																																							if loc_7 ~= 0 then
																																																								while true do
																																																									while true do
																																																										rt_store_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_6, 4), loc_1) + 12, 0)
																																																										loc_6 = rt_add_i32(loc_6, 1)
																																																										loc_4 = rt_add_i32(loc_4, 1)
																																																										if loc_7 ~= loc_4 then
																																																											continue
																																																										end
																																																										break
																																																									end
																																																									if desired then
																																																										break
																																																									end
																																																									break
																																																								end
																																																								if desired then
																																																									if desired == 53 then
																																																										desired = nil
																																																									end
																																																									break
																																																								end
																																																							end
																																																							if loc_8 < 7 then
																																																								desired = 4
																																																								break
																																																							end
																																																							while true do
																																																								loc_4 = rt_add_i32(rt_shl_i32(loc_6, 4), loc_1)
																																																								rt_store_i32(memory_at_0, loc_4 + 12, 0)
																																																								rt_store_i32(memory_at_0, loc_4 + 28, 0)
																																																								rt_store_i32(memory_at_0, loc_4 + 44, 0)
																																																								rt_store_i32(memory_at_0, loc_4 + 60, 0)
																																																								rt_store_i32(memory_at_0, loc_4 + 76, 0)
																																																								rt_store_i32(memory_at_0, loc_4 + 92, 0)
																																																								rt_store_i32(memory_at_0, loc_4 + 108, 0)
																																																								rt_store_i32(memory_at_0, loc_4 + 124, 0)
																																																								loc_6 = rt_add_i32(loc_6, 8)
																																																								if loc_16 ~= loc_6 then
																																																									continue
																																																								end
																																																								break
																																																							end
																																																							if desired then
																																																								if desired == 53 then
																																																									desired = nil
																																																								end
																																																								break
																																																							end
																																																							desired = 4
																																																							break
																																																						end
																																																						if desired then
																																																							if desired == 52 then
																																																								desired = nil
																																																							end
																																																							break
																																																						end
																																																						loc_1 = rt_load_i32(memory_at_0, loc_13 + 16)
																																																						loc_3 = rt_load_i32(memory_at_0, loc_0 + 20)
																																																						rt_store_i32(memory_at_0, loc_3 + 20, 4)
																																																						rt_store_i32(memory_at_0, loc_3 + 12, rt_load_i32(memory_at_0, loc_1 + 12))
																																																						reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1748)](loc_0, loc_1)
																																																						if reg_0 == 1 then
																																																							desired = 2
																																																							break
																																																						end
																																																						desired = 7
																																																						break
																																																					end
																																																					if desired then
																																																						if desired == 51 then
																																																							desired = nil
																																																						end
																																																						break
																																																					end
																																																					loc_3 = rt_add_i32(loc_1, 4)
																																																					loc_2 = rt_load_i32(memory_at_0, loc_1)
																																																					loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																																					while true do
																																																						while true do
																																																							while true do
																																																								if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_13 + 12) + 5) == 0 then
																																																									break
																																																								end
																																																								if rt_load_i32(memory_at_0, loc_1 + 28) ~= 6 then
																																																									break
																																																								end
																																																								if rt_load_i32(memory_at_0, loc_1 + 44) ~= 0 then
																																																									break
																																																								end
																																																								rt_store_i64(memory_at_0, loc_1 + 40, rt_i64_from_u32(128, 2))
																																																								rt_store_i32(memory_at_0, loc_1 + 32, 0)
																																																								rt_store_i32(memory_at_0, loc_1 + 12, 0)
																																																								desired = 53
																																																								break
																																																							end
																																																							if desired then
																																																								if desired == 53 then
																																																									desired = nil
																																																								end
																																																								break
																																																							end
																																																							if rt_load_i32(memory_at_0, loc_1 + 12) ~= 7 then
																																																								desired = 52
																																																								break
																																																							end
																																																							break
																																																						end
																																																						if desired then
																																																							if desired == 52 then
																																																								desired = nil
																																																							end
																																																							break
																																																						end
																																																						loc_3 = rt_add_i32(rt_shl_i32(rt_shr_i32(loc_2, 16), 2), loc_3)
																																																						loc_2 = 1
																																																						desired = 4
																																																						break
																																																					end
																																																					if desired then
																																																						if desired == 51 then
																																																							desired = nil
																																																						end
																																																						break
																																																					end
																																																					desired = 1
																																																					break
																																																				end
																																																				if desired then
																																																					if desired == 50 then
																																																						desired = nil
																																																					end
																																																					break
																																																				end
																																																				loc_3 = rt_add_i32(loc_1, 4)
																																																				loc_2 = rt_load_i32(memory_at_0, loc_1)
																																																				loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																																				while true do
																																																					while true do
																																																						while true do
																																																							if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_13 + 12) + 5) == 0 then
																																																								break
																																																							end
																																																							if rt_load_i32(memory_at_0, loc_1 + 28) ~= 6 then
																																																								break
																																																							end
																																																							if rt_load_i32(memory_at_0, loc_1 + 44) ~= 3 then
																																																								break
																																																							end
																																																							if rt_load_f64(memory_at_0, loc_1 + 32) ~= 0e0 then
																																																								break
																																																							end
																																																							rt_store_i64(memory_at_0, loc_1 + 40, rt_i64_from_u32(128, 2))
																																																							rt_store_i32(memory_at_0, loc_1 + 32, 0)
																																																							rt_store_i32(memory_at_0, loc_1 + 12, 0)
																																																							desired = 52
																																																							break
																																																						end
																																																						if desired then
																																																							if desired == 52 then
																																																								desired = nil
																																																							end
																																																							break
																																																						end
																																																						if rt_load_i32(memory_at_0, loc_1 + 12) ~= 7 then
																																																							desired = 51
																																																							break
																																																						end
																																																						break
																																																					end
																																																					if desired then
																																																						if desired == 51 then
																																																							desired = nil
																																																						end
																																																						break
																																																					end
																																																					loc_3 = rt_add_i32(rt_shl_i32(rt_shr_i32(loc_2, 16), 2), loc_3)
																																																					loc_2 = 1
																																																					desired = 4
																																																					break
																																																				end
																																																				if desired then
																																																					if desired == 50 then
																																																						desired = nil
																																																					end
																																																					break
																																																				end
																																																				desired = 1
																																																				break
																																																			end
																																																			if desired then
																																																				if desired == 49 then
																																																					desired = nil
																																																				end
																																																				break
																																																			end
																																																			loc_3 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1700)
																																																			if loc_3 ~= 0 then
																																																				while true do
																																																					rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, rt_add_i32(loc_1, 4))
																																																					TABLE_LIST[0].data[loc_3](loc_0, 4294967295)
																																																					if rt_load_i32_u8(memory_at_0, loc_0 + 3) ~= 0 then
																																																						desired = 47
																																																						break
																																																					end
																																																					reg_0 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																					break
																																																				end
																																																				if desired then
																																																					if desired == 49 then
																																																						desired = nil
																																																					end
																																																					break
																																																				end
																																																			else
																																																				while true do
																																																					reg_0 = loc_5
																																																					break
																																																				end
																																																				if desired then
																																																					if desired == 49 then
																																																						desired = nil
																																																					end
																																																					break
																																																				end
																																																			end
																																																			loc_5 = reg_0
																																																			loc_7 = rt_add_i32(loc_1, 4)
																																																			loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
																																																			while true do
																																																				loc_9 = rt_load_i32(memory_at_0, loc_1)
																																																				loc_4 = rt_shl_i32(bit_and(rt_shr_u32(loc_9, 8), 255), 4)
																																																				loc_3 = rt_add_i32(loc_4, loc_5)
																																																				if rt_load_i32(memory_at_0, loc_3 + 12) ~= 0 then
																																																					break
																																																				end
																																																				if rt_load_i32(memory_at_0, loc_3 + 28) ~= 6 then
																																																					break
																																																				end
																																																				loc_10 = rt_load_i32(memory_at_0, loc_3 + 16)
																																																				loc_8 = rt_load_i32(memory_at_0, loc_10 + 8)
																																																				while true do
																																																					if rt_lt_i32(loc_2, 3) then
																																																						break
																																																					end
																																																					loc_11 = rt_add_i32(loc_3, 60)
																																																					loc_6 = rt_sub_i32(loc_2, 2)
																																																					loc_16 = bit_and(loc_6, 3)
																																																					loc_4 = 2
																																																					if rt_sub_i32(loc_2, 3) >= 3 then
																																																						while true do
																																																							loc_18 = rt_add_i32(loc_11, 48)
																																																							loc_19 = rt_add_i32(loc_11, 32)
																																																							loc_20 = bit_and(loc_6, 4294967292)
																																																							loc_14 = 0
																																																							while true do
																																																								loc_6 = rt_shl_i32(loc_4, 4)
																																																								loc_17 = rt_add_i32(loc_6, loc_11)
																																																								rt_store_i32(memory_at_0, loc_17, 0)
																																																								rt_store_i32(memory_at_0, loc_17 + 16, 0)
																																																								rt_store_i32(memory_at_0, rt_add_i32(loc_6, loc_19), 0)
																																																								rt_store_i32(memory_at_0, rt_add_i32(loc_6, loc_18), 0)
																																																								loc_4 = rt_add_i32(loc_4, 4)
																																																								loc_14 = rt_add_i32(loc_14, 4)
																																																								if loc_20 ~= loc_14 then
																																																									continue
																																																								end
																																																								break
																																																							end
																																																							if desired then
																																																								break
																																																							end
																																																							break
																																																						end
																																																						if desired then
																																																							if desired == 51 then
																																																								desired = nil
																																																							end
																																																							break
																																																						end
																																																					end
																																																					loc_6 = 0
																																																					if loc_16 == 0 then
																																																						break
																																																					end
																																																					while true do
																																																						rt_store_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_4, 4), loc_11), 0)
																																																						loc_4 = rt_add_i32(loc_4, 1)
																																																						loc_6 = rt_add_i32(loc_6, 1)
																																																						if loc_16 ~= loc_6 then
																																																							continue
																																																						end
																																																						break
																																																					end
																																																					if desired then
																																																						if desired == 51 then
																																																							desired = nil
																																																						end
																																																						break
																																																					end
																																																					break
																																																				end
																																																				if desired then
																																																					if desired == 50 then
																																																						desired = nil
																																																					end
																																																					break
																																																				end
																																																				loc_4 = rt_load_i32(memory_at_0, loc_3 + 32)
																																																				while true do
																																																					if rt_ge_i32(loc_2, 0) then
																																																						break
																																																					end
																																																					if loc_4 < loc_8 then
																																																						while true do
																																																							if rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_10 + 20), rt_shl_i32(loc_4, 4)) + 12) ~= 0 then
																																																								desired = 51
																																																								break
																																																							end
																																																							break
																																																						end
																																																						if desired then
																																																							if desired == 51 then
																																																								desired = nil
																																																							end
																																																							break
																																																						end
																																																					end
																																																					loc_3 = rt_add_i32(loc_1, 8)
																																																					loc_2 = 1
																																																					desired = 4
																																																					break
																																																				end
																																																				if desired then
																																																					if desired == 50 then
																																																						desired = nil
																																																					end
																																																					break
																																																				end
																																																				if loc_4 < loc_8 then
																																																					while true do
																																																						loc_11 = rt_load_i32(memory_at_0, loc_10 + 20)
																																																						while true do
																																																							loc_2 = 1
																																																							loc_6 = rt_add_i32(loc_4, 1)
																																																							loc_4 = rt_add_i32(rt_shl_i32(loc_4, 4), loc_11)
																																																							if rt_load_i32(memory_at_0, loc_4 + 12) ~= 0 then
																																																								while true do
																																																									rt_store_i32(memory_at_0, loc_3 + 60, 3)
																																																									rt_store_i64(memory_at_0, loc_3 + 40, rt_i64_from_u32(128, 2))
																																																									rt_store_i32(memory_at_0, loc_3 + 32, loc_6)
																																																									rt_store_f64(memory_at_0, loc_3 + 48, rt_convert_f64_i32(loc_6))
																																																									rt_store_i64(memory_at_0, loc_3 + 64, rt_load_i64(memory_at_0, loc_4))
																																																									rt_store_i64(memory_at_0, loc_3 + 72, rt_load_i64(memory_at_0, loc_4 + 8))
																																																									loc_3 = rt_add_i32(rt_shl_i32(rt_shr_i32(loc_9, 16), 2), loc_7)
																																																									desired = 4
																																																									break
																																																								end
																																																								if desired then
																																																									if desired == 52 then
																																																										desired = nil
																																																										continue
																																																									end
																																																									break
																																																								end
																																																							end
																																																							loc_4 = loc_6
																																																							if loc_4 ~= loc_8 then
																																																								continue
																																																							end
																																																							break
																																																						end
																																																						if desired then
																																																							break
																																																						end
																																																						reg_0 = loc_8
																																																						break
																																																					end
																																																					if desired then
																																																						if desired == 50 then
																																																							desired = nil
																																																						end
																																																						break
																																																					end
																																																				else
																																																					while true do
																																																						reg_0 = loc_4
																																																						break
																																																					end
																																																					if desired then
																																																						if desired == 50 then
																																																							desired = nil
																																																						end
																																																						break
																																																					end
																																																				end
																																																				loc_4 = reg_0
																																																				loc_6 = rt_sub_i32(loc_4, loc_8)
																																																				loc_11 = rt_load_i32_u8(memory_at_0, loc_10 + 6)
																																																				if rt_shr_u32(loc_6, loc_11) == 0 then
																																																					while true do
																																																						loc_10 = rt_load_i32(memory_at_0, loc_10 + 24)
																																																						while true do
																																																							loc_2 = 1
																																																							loc_4 = rt_add_i32(loc_4, 1)
																																																							loc_6 = rt_add_i32(rt_shl_i32(loc_6, 5), loc_10)
																																																							if rt_load_i32(memory_at_0, loc_6 + 12) ~= 0 then
																																																								while true do
																																																									rt_store_i64(memory_at_0, loc_3 + 40, rt_i64_from_u32(128, 2))
																																																									rt_store_i32(memory_at_0, loc_3 + 32, loc_4)
																																																									rt_store_i64(memory_at_0, loc_3 + 48, rt_load_i64(memory_at_0, loc_6 + 16))
																																																									rt_store_i32(memory_at_0, loc_3 + 56, rt_load_i32(memory_at_0, loc_6 + 24))
																																																									rt_store_i32(memory_at_0, loc_3 + 60, bit_and(rt_load_i32(memory_at_0, loc_6 + 28), 15))
																																																									rt_store_i64(memory_at_0, loc_3 + 64, rt_load_i64(memory_at_0, loc_6))
																																																									rt_store_i64(memory_at_0, loc_3 + 72, rt_load_i64(memory_at_0, loc_6 + 8))
																																																									loc_3 = rt_add_i32(rt_shl_i32(rt_shr_i32(loc_9, 16), 2), loc_7)
																																																									desired = 4
																																																									break
																																																								end
																																																								if desired then
																																																									if desired == 52 then
																																																										desired = nil
																																																										continue
																																																									end
																																																									break
																																																								end
																																																							end
																																																							loc_6 = rt_sub_i32(loc_4, loc_8)
																																																							if rt_shr_u32(loc_6, loc_11) == 0 then
																																																								continue
																																																							end
																																																							break
																																																						end
																																																						if desired then
																																																							break
																																																						end
																																																						break
																																																					end
																																																					if desired then
																																																						if desired == 50 then
																																																							desired = nil
																																																						end
																																																						break
																																																					end
																																																				end
																																																				loc_3 = rt_add_i32(loc_1, 8)
																																																				loc_2 = 1
																																																				desired = 4
																																																				break
																																																			end
																																																			if desired then
																																																				if desired == 49 then
																																																					desired = nil
																																																				end
																																																				break
																																																			end
																																																			rt_store_i64(memory_at_0, loc_3 + 80, rt_load_i64(memory_at_0, loc_3 + 32))
																																																			rt_store_i64(memory_at_0, loc_3 + 64, rt_load_i64(memory_at_0, loc_3 + 16))
																																																			rt_store_i64(memory_at_0, loc_3 + 48, rt_load_i64(memory_at_0, loc_3))
																																																			rt_store_i64(memory_at_0, loc_3 + 56, rt_load_i64(memory_at_0, loc_3 + 8))
																																																			rt_store_i64(memory_at_0, loc_3 + 72, rt_load_i64(memory_at_0, loc_3 + 24))
																																																			rt_store_i64(memory_at_0, loc_3 + 88, rt_load_i64(memory_at_0, loc_3 + 40))
																																																			rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_3, 96))
																																																			rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_7)
																																																			FUNC_LIST[85](loc_0, rt_add_i32(loc_3, 48), bit_and(loc_2, 255))
																																																			rt_store_i32(memory_at_0, loc_0 + 8, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 8))
																																																			loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																			loc_1 = rt_add_i32(loc_4, loc_5)
																																																			rt_store_i64(memory_at_0, loc_1 + 40, rt_load_i64(memory_at_0, loc_1 + 56))
																																																			rt_store_i64(memory_at_0, loc_1 + 32, rt_load_i64(memory_at_0, loc_1 + 48))
																																																			loc_2 = 1
																																																			loc_3 = rt_add_i32(rt_shl_i32((if rt_load_i32(memory_at_0, loc_1 + 60) ~= 0 then rt_shr_i32(loc_9, 16) else 1), 2), loc_7)
																																																			desired = 4
																																																			break
																																																		end
																																																		if desired then
																																																			if desired == 48 then
																																																				desired = nil
																																																			end
																																																			break
																																																		end
																																																		loc_3 = rt_add_i32(loc_1, 4)
																																																		loc_2 = 16
																																																		while true do
																																																			while true do
																																																				while true do
																																																					while true do
																																																						while true do
																																																							loc_4 = rt_load_i32(memory_at_0, loc_1)
																																																							loc_6 = bit_and(rt_shr_u32(loc_4, 8), 255)
																																																							loc_1 = rt_add_i32(rt_shl_i32(loc_6, 4), loc_5)
																																																							if not br_map[3] then
																																																								br_map[3] = (function()
																																																									return { [0] = 1, 2, 0, }
																																																								end)()
																																																							end
																																																							temp = br_map[3][rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 12), 6)] or 4
																																																							if temp < 2 then
																																																								if temp < 1 then
																																																									break
																																																								else
																																																									desired = 52
																																																									break
																																																								end
																																																							elseif temp > 2 then
																																																								desired = 49
																																																								break
																																																							else
																																																								desired = 51
																																																								break
																																																							end
																																																						end
																																																						if desired then
																																																							if desired == 52 then
																																																								desired = nil
																																																							end
																																																							break
																																																						end
																																																						loc_2 = 8
																																																						break
																																																					end
																																																					if desired then
																																																						if desired == 51 then
																																																							desired = nil
																																																						end
																																																						break
																																																					end
																																																					while true do
																																																						while true do
																																																							loc_2 = rt_load_i32(memory_at_0, rt_add_i32(loc_2, rt_load_i32(memory_at_0, loc_1)))
																																																							if loc_2 == 0 then
																																																								break
																																																							end
																																																							loc_7 = rt_load_i32_u8(memory_at_0, loc_2 + 3)
																																																							if bit_and(loc_7, 32) ~= 0 then
																																																								while true do
																																																									reg_0 = loc_7
																																																									break
																																																								end
																																																								if desired then
																																																									if desired == 53 then
																																																										desired = nil
																																																									end
																																																									break
																																																								end
																																																							else
																																																								while true do
																																																									reg_0 = FUNC_LIST[460](loc_2, 5, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1548))
																																																									loc_7 = reg_0
																																																									if loc_7 ~= 0 then
																																																										desired = 52
																																																										break
																																																									end
																																																									reg_0 = rt_load_i32_u8(memory_at_0, loc_2 + 3)
																																																									break
																																																								end
																																																								if desired then
																																																									if desired == 53 then
																																																										desired = nil
																																																									end
																																																									break
																																																								end
																																																							end
																																																							loc_7 = reg_0
																																																							if bit_and(loc_7, 16) ~= 0 then
																																																								break
																																																							end
																																																							reg_0 = FUNC_LIST[460](loc_2, 4, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1544))
																																																							if reg_0 ~= 0 then
																																																								desired = 51
																																																								break
																																																							end
																																																							break
																																																						end
																																																						if desired then
																																																							if desired == 52 then
																																																								desired = nil
																																																							end
																																																							break
																																																						end
																																																						if rt_load_i32(memory_at_0, loc_1 + 12) ~= 6 then
																																																							desired = 49
																																																							break
																																																						end
																																																						rt_store_i64(memory_at_0, loc_1 + 40, rt_i64_from_u32(128, 2))
																																																						rt_store_i32(memory_at_0, loc_1 + 32, 0)
																																																						rt_store_i64(memory_at_0, loc_1 + 16, rt_load_i64(memory_at_0, loc_1))
																																																						rt_store_i64(memory_at_0, loc_1 + 24, rt_load_i64(memory_at_0, loc_1 + 8))
																																																						rt_store_i32(memory_at_0, loc_1 + 12, 0)
																																																						desired = 51
																																																						break
																																																					end
																																																					if desired then
																																																						if desired == 51 then
																																																							desired = nil
																																																						end
																																																						break
																																																					end
																																																					rt_store_i64(memory_at_0, loc_1 + 16, rt_load_i64(memory_at_0, loc_1))
																																																					loc_5 = rt_add_i32(loc_1, 8)
																																																					rt_store_i64(memory_at_0, loc_1 + 24, rt_load_i64(memory_at_0, loc_5))
																																																					rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_7 + 8))
																																																					rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_7))
																																																					rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_1, 32))
																																																					rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																					FUNC_LIST[85](loc_0, loc_1, 3)
																																																					loc_1 = rt_load_i32(memory_at_0, loc_0 + 20)
																																																					rt_store_i32(memory_at_0, loc_0 + 8, rt_load_i32(memory_at_0, loc_1 + 8))
																																																					loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																					loc_2 = rt_add_i32(loc_5, rt_shl_i32(loc_6, 4))
																																																					if rt_load_i32(memory_at_0, loc_2 + 12) == 0 then
																																																						desired = 50
																																																						break
																																																					end
																																																					break
																																																				end
																																																				if desired then
																																																					if desired == 50 then
																																																						desired = nil
																																																					end
																																																					break
																																																				end
																																																				loc_3 = rt_add_i32(rt_shl_i32(rt_shr_i32(loc_4, 16), 2), loc_3)
																																																				loc_2 = 1
																																																				desired = 4
																																																				break
																																																			end
																																																			if desired then
																																																				if desired == 49 then
																																																					desired = nil
																																																				end
																																																				break
																																																			end
																																																			rt_store_i32(memory_at_0, loc_1 + 12, loc_3)
																																																			FUNC_LIST[59](loc_0, loc_2, 2975)
																																																			error("out of code bounds")
																																																		end
																																																		if desired then
																																																			if desired == 48 then
																																																				desired = nil
																																																			end
																																																			break
																																																		end
																																																		desired = 1
																																																		break
																																																	end
																																																	if desired then
																																																		if desired == 47 then
																																																			desired = nil
																																																		end
																																																		break
																																																	end
																																																	loc_3 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1700)
																																																	if loc_3 ~= 0 then
																																																		while true do
																																																			rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, rt_add_i32(loc_1, 4))
																																																			TABLE_LIST[0].data[loc_3](loc_0, 4294967295)
																																																			if rt_load_i32_u8(memory_at_0, loc_0 + 3) ~= 0 then
																																																				desired = 47
																																																				break
																																																			end
																																																			reg_0 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																			break
																																																		end
																																																		if desired then
																																																			if desired == 47 then
																																																				desired = nil
																																																			end
																																																			break
																																																		end
																																																	else
																																																		while true do
																																																			reg_0 = loc_5
																																																			break
																																																		end
																																																		if desired then
																																																			if desired == 47 then
																																																				desired = nil
																																																			end
																																																			break
																																																		end
																																																	end
																																																	loc_5 = reg_0
																																																	loc_4 = rt_load_i32(memory_at_0, loc_1)
																																																	loc_2 = rt_add_i32(loc_5, bit_and(rt_shr_u32(loc_4, 4), 4080))
																																																	rt_store_i32(memory_at_0, loc_2 + 44, 3)
																																																	loc_22 = rt_load_f64(memory_at_0, loc_2 + 16)
																																																	loc_23 = (loc_22 + rt_load_f64(memory_at_0, loc_2 + 32))
																																																	rt_store_f64(memory_at_0, loc_2 + 32, loc_23)
																																																	loc_3 = rt_add_i32(loc_1, 4)
																																																	loc_24 = rt_load_f64(memory_at_0, loc_2)
																																																	while true do
																																																		if loc_22 > 0e0 then
																																																			while true do
																																																				loc_2 = 1
																																																				if loc_23 <= loc_24 then
																																																					desired = 48
																																																					break
																																																				end
																																																				desired = 4
																																																				break
																																																			end
																																																			if desired then
																																																				if desired == 48 then
																																																					desired = nil
																																																				end
																																																				break
																																																			end
																																																		end
																																																		loc_2 = 1
																																																		if (if loc_23 >= loc_24 then 1 else 0) == 0 then
																																																			desired = 4
																																																			break
																																																		end
																																																		break
																																																	end
																																																	if desired then
																																																		if desired == 47 then
																																																			desired = nil
																																																		end
																																																		break
																																																	end
																																																	loc_3 = rt_add_i32(rt_shl_i32(rt_shr_i32(loc_4, 16), 2), loc_3)
																																																	desired = 4
																																																	break
																																																end
																																																if desired then
																																																	if desired == 46 then
																																																		desired = nil
																																																	end
																																																	break
																																																end
																																																loc_4 = rt_load_i32(memory_at_0, loc_0 + 20)
																																																desired = 9
																																																break
																																															end
																																															if desired then
																																																if desired == 45 then
																																																	desired = nil
																																																end
																																																break
																																															end
																																															loc_3 = rt_add_i32(loc_1, 4)
																																															while true do
																																																while true do
																																																	loc_2 = rt_load_i32(memory_at_0, loc_1)
																																																	loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																																	if rt_load_i32(memory_at_0, loc_1 + 12) ~= 3 then
																																																		break
																																																	end
																																																	if rt_load_i32(memory_at_0, loc_1 + 28) ~= 3 then
																																																		break
																																																	end
																																																	if rt_load_i32(memory_at_0, loc_1 + 44) == 3 then
																																																		desired = 46
																																																		break
																																																	end
																																																	break
																																																end
																																																if desired then
																																																	if desired == 46 then
																																																		desired = nil
																																																	end
																																																	break
																																																end
																																																rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																FUNC_LIST[606](loc_0, loc_1, rt_add_i32(loc_1, 16), rt_add_i32(loc_1, 32))
																																																break
																																															end
																																															if desired then
																																																if desired == 45 then
																																																	desired = nil
																																																end
																																																break
																																															end
																																															loc_22 = rt_load_f64(memory_at_0, loc_1 + 32)
																																															loc_23 = rt_load_f64(memory_at_0, loc_1)
																																															while true do
																																																while true do
																																																	if rt_load_f64(memory_at_0, loc_1 + 16) > 0e0 then
																																																		while true do
																																																			if (if loc_22 <= loc_23 then 1 else 0) == 0 then
																																																				desired = 47
																																																				break
																																																			end
																																																			reg_0 = 0
																																																			desired = 46
																																																			break
																																																		end
																																																		if desired then
																																																			if desired == 47 then
																																																				desired = nil
																																																			end
																																																			break
																																																		end
																																																	end
																																																	if (if loc_22 >= loc_23 then 1 else 0) == 0 then
																																																		break
																																																	end
																																																	reg_0 = 0
																																																	desired = 46
																																																	break
																																																end
																																																if desired then
																																																	if desired == 46 then
																																																		desired = nil
																																																	end
																																																	break
																																																end
																																																reg_0 = rt_shr_i32(loc_2, 16)
																																																break
																																															end
																																															if desired then
																																																if desired == 45 then
																																																	desired = nil
																																																end
																																																break
																																															end
																																															loc_1 = reg_0
																																															loc_3 = rt_add_i32(rt_shl_i32(loc_1, 2), loc_3)
																																															loc_2 = 1
																																															desired = 4
																																															break
																																														end
																																														if desired then
																																															if desired == 44 then
																																																desired = nil
																																															end
																																															break
																																														end
																																														loc_3 = rt_load_i32(memory_at_0, loc_1)
																																														loc_6 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 12), 4080), loc_5)
																																														loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 4), 4080), loc_5)
																																														loc_7 = rt_load_i32(memory_at_0, loc_1 + 4)
																																														if loc_3 > 16777215 then
																																															while true do
																																																reg_0 = rt_sub_i32(rt_shr_u32(loc_3, 24), 1)
																																																break
																																															end
																																															if desired then
																																																if desired == 44 then
																																																	desired = nil
																																																end
																																																break
																																															end
																																														else
																																															while true do
																																																loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
																																																rt_store_i32(memory_at_0, loc_0 + 8, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 8))
																																																reg_0 = rt_shr_i32(rt_sub_i32(loc_3, loc_6), 4)
																																																break
																																															end
																																															if desired then
																																																if desired == 44 then
																																																	desired = nil
																																																end
																																																break
																																															end
																																														end
																																														loc_4 = reg_0
																																														if rt_load_i32(memory_at_0, loc_2 + 12) ~= 6 then
																																															desired = 7
																																															break
																																														end
																																														loc_3 = rt_add_i32(loc_1, 8)
																																														loc_1 = rt_sub_i32(rt_add_i32(loc_4, loc_7), 1)
																																														loc_18 = rt_load_i32(memory_at_0, loc_2)
																																														if rt_gt_i32(loc_1, rt_load_i32(memory_at_0, loc_18 + 8)) then
																																															while true do
																																																rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																FUNC_LIST[417](loc_0, loc_18, loc_1)
																																																break
																																															end
																																															if desired then
																																																if desired == 44 then
																																																	desired = nil
																																																end
																																																break
																																															end
																																														end
																																														loc_2 = 1
																																														while true do
																																															if rt_le_i32(loc_4, 0) then
																																																break
																																															end
																																															loc_14 = bit_and(loc_4, 3)
																																															loc_17 = rt_add_i32(rt_load_i32(memory_at_0, loc_18 + 20), rt_shl_i32(loc_7, 4))
																																															loc_7 = rt_sub_i32(loc_17, 16)
																																															loc_9 = 0
																																															loc_1 = 0
																																															if loc_4 >= 4 then
																																																while true do
																																																	loc_16 = bit_and(loc_4, 2147483644)
																																																	loc_11 = 0
																																																	while true do
																																																		loc_4 = rt_shl_i32(loc_1, 4)
																																																		loc_10 = rt_add_i32(loc_4, loc_7)
																																																		loc_8 = rt_add_i32(loc_4, loc_6)
																																																		rt_store_i64(memory_at_0, loc_10, rt_load_i64(memory_at_0, loc_8))
																																																		rt_store_i64(memory_at_0, loc_10 + 8, rt_load_i64(memory_at_0, loc_8 + 8))
																																																		loc_10 = rt_add_i32(loc_4, loc_17)
																																																		rt_store_i64(memory_at_0, loc_10 + 8, rt_load_i64(memory_at_0, loc_8 + 24))
																																																		rt_store_i64(memory_at_0, loc_10, rt_load_i64(memory_at_0, loc_8 + 16))
																																																		loc_8 = bit_or(loc_4, 32)
																																																		loc_10 = rt_add_i32(loc_8, loc_7)
																																																		loc_8 = rt_add_i32(loc_6, loc_8)
																																																		rt_store_i64(memory_at_0, loc_10 + 8, rt_load_i64(memory_at_0, loc_8 + 8))
																																																		rt_store_i64(memory_at_0, loc_10, rt_load_i64(memory_at_0, loc_8))
																																																		loc_4 = bit_or(loc_4, 48)
																																																		loc_8 = rt_add_i32(loc_4, loc_7)
																																																		loc_4 = rt_add_i32(loc_4, loc_6)
																																																		rt_store_i64(memory_at_0, loc_8 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
																																																		rt_store_i64(memory_at_0, loc_8, rt_load_i64(memory_at_0, loc_4))
																																																		loc_1 = rt_add_i32(loc_1, 4)
																																																		loc_11 = rt_add_i32(loc_11, 4)
																																																		if loc_16 ~= loc_11 then
																																																			continue
																																																		end
																																																		break
																																																	end
																																																	if desired then
																																																		break
																																																	end
																																																	break
																																																end
																																																if desired then
																																																	if desired == 45 then
																																																		desired = nil
																																																	end
																																																	break
																																																end
																																															end
																																															if loc_14 == 0 then
																																																break
																																															end
																																															while true do
																																																loc_4 = rt_shl_i32(loc_1, 4)
																																																loc_8 = rt_add_i32(loc_4, loc_7)
																																																loc_4 = rt_add_i32(loc_4, loc_6)
																																																rt_store_i64(memory_at_0, loc_8, rt_load_i64(memory_at_0, loc_4))
																																																rt_store_i64(memory_at_0, loc_8 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
																																																loc_1 = rt_add_i32(loc_1, 1)
																																																loc_9 = rt_add_i32(loc_9, 1)
																																																if loc_14 ~= loc_9 then
																																																	continue
																																																end
																																																break
																																															end
																																															if desired then
																																																if desired == 45 then
																																																	desired = nil
																																																end
																																																break
																																															end
																																															break
																																														end
																																														if desired then
																																															if desired == 44 then
																																																desired = nil
																																															end
																																															break
																																														end
																																														if bit_and(rt_load_i32_u8(memory_at_0, loc_18 + 1), 4) == 0 then
																																															desired = 4
																																															break
																																														end
																																														FUNC_LIST[51](loc_0, loc_18, rt_add_i32(loc_18, 28))
																																														desired = 4
																																														break
																																													end
																																													if desired then
																																														if desired == 43 then
																																															desired = nil
																																														end
																																														break
																																													end
																																													loc_2 = rt_load_i32(memory_at_0, loc_1)
																																													loc_3 = rt_add_i32(loc_1, 4)
																																													rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																													reg_0 = FUNC_LIST[434](loc_0, rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(rt_shr_i32(loc_2, 16), 4), loc_12)))
																																													loc_1 = reg_0
																																													loc_5 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																													rt_store_i32(memory_at_0, loc_5 + 12, 6)
																																													rt_store_i32(memory_at_0, loc_5, loc_1)
																																													rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																													loc_1 = rt_load_i32(memory_at_0, loc_0 + 16)
																																													if rt_load_i32(memory_at_0, loc_1 + 40) < rt_load_i32(memory_at_0, loc_1 + 36) then
																																														desired = 20
																																														break
																																													end
																																													reg_0 = FUNC_LIST[42](loc_0, 1)
																																													desired = 20
																																													break
																																												end
																																												if desired then
																																													if desired == 42 then
																																														desired = nil
																																													end
																																													break
																																												end
																																												loc_6 = rt_load_i32(memory_at_0, loc_1 + 4)
																																												loc_4 = rt_load_i32(memory_at_0, loc_1)
																																												loc_3 = rt_add_i32(loc_1, 8)
																																												rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																												loc_2 = 1
																																												loc_1 = bit_and(rt_shr_u32(loc_4, 16), 255)
																																												reg_0 = FUNC_LIST[423](loc_0, loc_6, (if loc_1 ~= 0 then rt_shl_i32(1, rt_sub_i32(loc_1, 1)) else 0))
																																												loc_1 = reg_0
																																												loc_5 = rt_add_i32(bit_and(rt_shr_u32(loc_4, 4), 4080), loc_5)
																																												rt_store_i32(memory_at_0, loc_5 + 12, 6)
																																												rt_store_i32(memory_at_0, loc_5, loc_1)
																																												rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																												loc_1 = rt_load_i32(memory_at_0, loc_0 + 16)
																																												if rt_load_i32(memory_at_0, loc_1 + 40) >= rt_load_i32(memory_at_0, loc_1 + 36) then
																																													while true do
																																														reg_0 = FUNC_LIST[42](loc_0, 1)
																																														break
																																													end
																																													if desired then
																																														if desired == 42 then
																																															desired = nil
																																														end
																																														break
																																													end
																																												end
																																												loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																												desired = 4
																																												break
																																											end
																																											if desired then
																																												if desired == 41 then
																																													desired = nil
																																												end
																																												break
																																											end
																																											loc_3 = rt_add_i32(loc_1, 4)
																																											loc_2 = rt_load_i32(memory_at_0, loc_1)
																																											loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																											while true do
																																												loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5)
																																												loc_4 = rt_load_i32(memory_at_0, loc_2 + 12)
																																												if loc_4 ~= 6 then
																																													while true do
																																														if loc_4 ~= 5 then
																																															desired = 42
																																															break
																																														end
																																														loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2) + 16)
																																														rt_store_i32(memory_at_0, loc_1 + 12, 3)
																																														rt_store_f64(memory_at_0, loc_1, no_op(loc_2))
																																														loc_2 = 1
																																														desired = 4
																																														break
																																													end
																																													if desired then
																																														if desired == 42 then
																																															desired = nil
																																														end
																																														break
																																													end
																																												end
																																												while true do
																																													loc_4 = rt_load_i32(memory_at_0, loc_2)
																																													loc_6 = rt_load_i32(memory_at_0, loc_4 + 16)
																																													if loc_6 ~= 0 then
																																														while true do
																																															if bit_and(rt_load_i32_u8(memory_at_0, loc_6 + 3), 64) == 0 then
																																																desired = 43
																																																break
																																															end
																																															break
																																														end
																																														if desired then
																																															if desired == 43 then
																																																desired = nil
																																															end
																																															break
																																														end
																																													end
																																													reg_0 = FUNC_LIST[433](loc_4)
																																													loc_2 = reg_0
																																													rt_store_i32(memory_at_0, loc_1 + 12, 3)
																																													rt_store_f64(memory_at_0, loc_1, rt_convert_f64_i32(loc_2))
																																													loc_2 = 1
																																													desired = 4
																																													break
																																												end
																																												if desired then
																																													if desired == 42 then
																																														desired = nil
																																													end
																																													break
																																												end
																																												rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																												FUNC_LIST[605](loc_0, loc_1, loc_2)
																																												desired = 20
																																												break
																																											end
																																											if desired then
																																												if desired == 41 then
																																													desired = nil
																																												end
																																												break
																																											end
																																											rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																											FUNC_LIST[605](loc_0, loc_1, loc_2)
																																											desired = 20
																																											break
																																										end
																																										if desired then
																																											if desired == 40 then
																																												desired = nil
																																											end
																																											break
																																										end
																																										loc_3 = rt_add_i32(loc_1, 4)
																																										loc_2 = rt_load_i32(memory_at_0, loc_1)
																																										loc_6 = bit_and(rt_shr_u32(loc_2, 8), 255)
																																										loc_1 = rt_add_i32(rt_shl_i32(loc_6, 4), loc_5)
																																										while true do
																																											while true do
																																												while true do
																																													loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5)
																																													loc_4 = rt_load_i32(memory_at_0, loc_2 + 12)
																																													if loc_4 ~= 3 then
																																														while true do
																																															if not br_map[4] then
																																																br_map[4] = (function()
																																																	return { [0] = 1, 3, 3, 3, 2, }
																																																end)()
																																															end
																																															temp = br_map[4][rt_sub_i32(loc_4, 4)] or 3
																																															if temp < 2 then
																																																desired = 43
																																																break
																																															elseif temp > 2 then
																																																desired = 41
																																																break
																																															else
																																																desired = 42
																																																break
																																															end
																																														end
																																														if desired then
																																															if desired == 43 then
																																																desired = nil
																																															end
																																															break
																																														end
																																													end
																																													loc_22 = rt_load_f64(memory_at_0, loc_2)
																																													rt_store_i32(memory_at_0, loc_1 + 12, 3)
																																													rt_store_f64(memory_at_0, loc_1, rt_neg_f64(loc_22))
																																													loc_2 = 1
																																													desired = 4
																																													break
																																												end
																																												if desired then
																																													if desired == 42 then
																																														desired = nil
																																													end
																																													break
																																												end
																																												rt_store_f32(memory_at_0, loc_1, rt_neg_f32(rt_load_f32(memory_at_0, loc_2)))
																																												rt_store_f32(memory_at_0, loc_1 + 4, rt_neg_f32(rt_load_f32(memory_at_0, loc_2 + 4)))
																																												loc_25 = rt_load_f32(memory_at_0, loc_2 + 8)
																																												rt_store_i32(memory_at_0, loc_1 + 12, 4)
																																												rt_store_f32(memory_at_0, loc_1 + 8, rt_neg_f32(loc_25))
																																												loc_2 = 1
																																												desired = 4
																																												break
																																											end
																																											if desired then
																																												if desired == 41 then
																																													desired = nil
																																												end
																																												break
																																											end
																																											reg_0 = FUNC_LIST[461](loc_0, loc_2, 15)
																																											loc_5 = reg_0
																																											if loc_5 == 0 then
																																												break
																																											end
																																											if rt_load_i32(memory_at_0, loc_5 + 12) ~= 7 then
																																												break
																																											end
																																											if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_5) + 3) == 0 then
																																												break
																																											end
																																											loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
																																											rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_5))
																																											rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
																																											rt_store_i64(memory_at_0, loc_1 + 24, rt_load_i64(memory_at_0, loc_2 + 8))
																																											rt_store_i64(memory_at_0, loc_1 + 16, rt_load_i64(memory_at_0, loc_2))
																																											rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_1, 32))
																																											rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																											loc_2 = 1
																																											FUNC_LIST[607](loc_0, 1, loc_6)
																																											loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																											desired = 4
																																											break
																																										end
																																										if desired then
																																											if desired == 40 then
																																												desired = nil
																																											end
																																											break
																																										end
																																										rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																										FUNC_LIST[604](loc_0, loc_1, loc_2, loc_2)
																																										desired = 20
																																										break
																																									end
																																									if desired then
																																										if desired == 39 then
																																											desired = nil
																																										end
																																										break
																																									end
																																									loc_2 = 1
																																									loc_3 = rt_load_i32(memory_at_0, loc_1)
																																									loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 4), 4080), loc_5)
																																									loc_6 = 1
																																									while true do
																																										while true do
																																											while true do
																																												loc_3 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 12), 4080), loc_5)
																																												if not br_map[5] then
																																													br_map[5] = (function()
																																														return { [0] = 2, 0, }
																																													end)()
																																												end
																																												temp = br_map[5][rt_load_i32(memory_at_0, loc_3 + 12)] or 1
																																												if temp < 1 then
																																													break
																																												elseif temp > 1 then
																																													desired = 40
																																													break
																																												else
																																													desired = 41
																																													break
																																												end
																																											end
																																											if desired then
																																												if desired == 41 then
																																													desired = nil
																																												end
																																												break
																																											end
																																											loc_6 = (if rt_load_i32(memory_at_0, loc_3) == 0 then 1 else 0)
																																											desired = 40
																																											break
																																										end
																																										if desired then
																																											if desired == 40 then
																																												desired = nil
																																											end
																																											break
																																										end
																																										loc_6 = 0
																																										break
																																									end
																																									if desired then
																																										if desired == 39 then
																																											desired = nil
																																										end
																																										break
																																									end
																																									loc_3 = rt_add_i32(loc_1, 4)
																																									rt_store_i32(memory_at_0, loc_4 + 12, 1)
																																									rt_store_i32(memory_at_0, loc_4, loc_6)
																																									desired = 4
																																									break
																																								end
																																								if desired then
																																									if desired == 38 then
																																										desired = nil
																																									end
																																									break
																																								end
																																								loc_5 = rt_load_i32(memory_at_0, loc_1)
																																								loc_3 = rt_add_i32(loc_1, 4)
																																								rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																								loc_2 = 1
																																								loc_1 = rt_shr_u32(loc_5, 24)
																																								loc_4 = bit_and(rt_shr_u32(loc_5, 16), 255)
																																								FUNC_LIST[595](loc_0, rt_add_i32(rt_sub_i32(loc_1, loc_4), 1), loc_1)
																																								loc_1 = rt_load_i32(memory_at_0, loc_0 + 12)
																																								loc_5 = rt_add_i32(loc_1, bit_and(rt_shr_u32(loc_5, 4), 4080))
																																								loc_1 = rt_add_i32(rt_shl_i32(loc_4, 4), loc_1)
																																								rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_1))
																																								rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
																																								rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																								loc_1 = rt_load_i32(memory_at_0, loc_0 + 16)
																																								if rt_load_i32(memory_at_0, loc_1 + 40) >= rt_load_i32(memory_at_0, loc_1 + 36) then
																																									while true do
																																										reg_0 = FUNC_LIST[42](loc_0, 1)
																																										break
																																									end
																																									if desired then
																																										if desired == 38 then
																																											desired = nil
																																										end
																																										break
																																									end
																																								end
																																								loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																								desired = 4
																																								break
																																							end
																																							if desired then
																																								if desired == 37 then
																																									desired = nil
																																								end
																																								break
																																							end
																																							loc_3 = rt_load_i32(memory_at_0, loc_1)
																																							loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 20), 4080), loc_12)
																																							loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 4), 4080), loc_5)
																																							while true do
																																								while true do
																																									while true do
																																										loc_3 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 12), 4080), loc_5)
																																										if not br_map[6] then
																																											br_map[6] = (function()
																																												return { [0] = 2, 0, }
																																											end)()
																																										end
																																										temp = br_map[6][rt_load_i32(memory_at_0, loc_3 + 12)] or 1
																																										if temp < 1 then
																																											break
																																										elseif temp > 1 then
																																											desired = 38
																																											break
																																										else
																																											desired = 39
																																											break
																																										end
																																									end
																																									if desired then
																																										if desired == 39 then
																																											desired = nil
																																										end
																																										break
																																									end
																																									if rt_load_i32(memory_at_0, loc_3) == 0 then
																																										desired = 38
																																										break
																																									end
																																									break
																																								end
																																								if desired then
																																									if desired == 38 then
																																										desired = nil
																																									end
																																									break
																																								end
																																								loc_2 = loc_3
																																								break
																																							end
																																							if desired then
																																								if desired == 37 then
																																									desired = nil
																																								end
																																								break
																																							end
																																							loc_3 = rt_add_i32(loc_1, 4)
																																							rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_2))
																																							rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
																																							loc_2 = 1
																																							desired = 4
																																							break
																																						end
																																						if desired then
																																							if desired == 36 then
																																								desired = nil
																																							end
																																							break
																																						end
																																						loc_3 = rt_load_i32(memory_at_0, loc_1)
																																						loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 4), 4080), loc_5)
																																						while true do
																																							while true do
																																								while true do
																																									loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 12), 4080), loc_5)
																																									if not br_map[7] then
																																										br_map[7] = (function()
																																											return { [0] = 2, 0, }
																																										end)()
																																									end
																																									temp = br_map[7][rt_load_i32(memory_at_0, loc_2 + 12)] or 1
																																									if temp < 1 then
																																										break
																																									elseif temp > 1 then
																																										desired = 37
																																										break
																																									else
																																										desired = 38
																																										break
																																									end
																																								end
																																								if desired then
																																									if desired == 38 then
																																										desired = nil
																																									end
																																									break
																																								end
																																								if rt_load_i32(memory_at_0, loc_2) == 0 then
																																									desired = 37
																																									break
																																								end
																																								break
																																							end
																																							if desired then
																																								if desired == 37 then
																																									desired = nil
																																								end
																																								break
																																							end
																																							loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 20), 4080), loc_12)
																																							break
																																						end
																																						if desired then
																																							if desired == 36 then
																																								desired = nil
																																							end
																																							break
																																						end
																																						loc_3 = rt_add_i32(loc_1, 4)
																																						rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_2))
																																						rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
																																						loc_2 = 1
																																						desired = 4
																																						break
																																					end
																																					if desired then
																																						if desired == 35 then
																																							desired = nil
																																						end
																																						break
																																					end
																																					loc_3 = rt_load_i32(memory_at_0, loc_1)
																																					loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 20), 4080), loc_5)
																																					loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 4), 4080), loc_5)
																																					while true do
																																						while true do
																																							while true do
																																								loc_3 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 12), 4080), loc_5)
																																								if not br_map[8] then
																																									br_map[8] = (function()
																																										return { [0] = 2, 0, }
																																									end)()
																																								end
																																								temp = br_map[8][rt_load_i32(memory_at_0, loc_3 + 12)] or 1
																																								if temp < 1 then
																																									break
																																								elseif temp > 1 then
																																									desired = 36
																																									break
																																								else
																																									desired = 37
																																									break
																																								end
																																							end
																																							if desired then
																																								if desired == 37 then
																																									desired = nil
																																								end
																																								break
																																							end
																																							if rt_load_i32(memory_at_0, loc_3) == 0 then
																																								desired = 36
																																								break
																																							end
																																							break
																																						end
																																						if desired then
																																							if desired == 36 then
																																								desired = nil
																																							end
																																							break
																																						end
																																						loc_2 = loc_3
																																						break
																																					end
																																					if desired then
																																						if desired == 35 then
																																							desired = nil
																																						end
																																						break
																																					end
																																					loc_3 = rt_add_i32(loc_1, 4)
																																					rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_2))
																																					rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
																																					loc_2 = 1
																																					desired = 4
																																					break
																																				end
																																				if desired then
																																					if desired == 34 then
																																						desired = nil
																																					end
																																					break
																																				end
																																				loc_3 = rt_load_i32(memory_at_0, loc_1)
																																				loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 4), 4080), loc_5)
																																				while true do
																																					while true do
																																						while true do
																																							loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 12), 4080), loc_5)
																																							if not br_map[9] then
																																								br_map[9] = (function()
																																									return { [0] = 2, 0, }
																																								end)()
																																							end
																																							temp = br_map[9][rt_load_i32(memory_at_0, loc_2 + 12)] or 1
																																							if temp < 1 then
																																								break
																																							elseif temp > 1 then
																																								desired = 35
																																								break
																																							else
																																								desired = 36
																																								break
																																							end
																																						end
																																						if desired then
																																							if desired == 36 then
																																								desired = nil
																																							end
																																							break
																																						end
																																						if rt_load_i32(memory_at_0, loc_2) == 0 then
																																							desired = 35
																																							break
																																						end
																																						break
																																					end
																																					if desired then
																																						if desired == 35 then
																																							desired = nil
																																						end
																																						break
																																					end
																																					loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 20), 4080), loc_5)
																																					break
																																				end
																																				if desired then
																																					if desired == 34 then
																																						desired = nil
																																					end
																																					break
																																				end
																																				loc_3 = rt_add_i32(loc_1, 4)
																																				rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_2))
																																				rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
																																				loc_2 = 1
																																				desired = 4
																																				break
																																			end
																																			if desired then
																																				if desired == 33 then
																																					desired = nil
																																				end
																																				break
																																			end
																																			loc_3 = rt_add_i32(loc_1, 4)
																																			loc_1 = rt_load_i32(memory_at_0, loc_1)
																																			loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 20), 4080), loc_12)
																																			loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																																			loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 12), 4080), loc_5)
																																			if rt_load_i32(memory_at_0, loc_1 + 12) == 3 then
																																				while true do
																																					while true do
																																						loc_22 = rt_load_f64(memory_at_0, loc_1)
																																						loc_23 = rt_load_f64(memory_at_0, loc_4)
																																						reg_0 = (loc_22 * loc_22)
																																						if loc_23 == 2e0 then
																																							break
																																						end
																																						reg_0 = math_sqrt(loc_22)
																																						if loc_23 == 5e-1 then
																																							break
																																						end
																																						reg_0 = (loc_22 * (loc_22 * loc_22))
																																						if loc_23 == 3e0 then
																																							break
																																						end
																																						reg_0 = FUNC_LIST[642](loc_22, loc_23)
																																						break
																																					end
																																					if desired then
																																						break
																																					end
																																					loc_22 = reg_0
																																					rt_store_i32(memory_at_0, loc_2 + 12, 3)
																																					rt_store_f64(memory_at_0, loc_2, loc_22)
																																					loc_2 = 1
																																					desired = 4
																																					break
																																				end
																																				if desired then
																																					if desired == 33 then
																																						desired = nil
																																					end
																																					break
																																				end
																																			end
																																			rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																			FUNC_LIST[603](loc_0, loc_2, loc_1, loc_4)
																																			desired = 20
																																			break
																																		end
																																		if desired then
																																			if desired == 32 then
																																				desired = nil
																																			end
																																			break
																																		end
																																		loc_3 = rt_add_i32(loc_1, 4)
																																		loc_1 = rt_load_i32(memory_at_0, loc_1)
																																		loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 20), 4080), loc_12)
																																		loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																																		loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 12), 4080), loc_5)
																																		if rt_load_i32(memory_at_0, loc_1 + 12) == 3 then
																																			while true do
																																				loc_22 = rt_load_f64(memory_at_0, loc_4)
																																				loc_23 = rt_load_f64(memory_at_0, loc_1)
																																				rt_store_i32(memory_at_0, loc_2 + 12, 3)
																																				rt_store_f64(memory_at_0, loc_2, (loc_23 - (loc_22 * math_floor((loc_23 / loc_22)))))
																																				loc_2 = 1
																																				desired = 4
																																				break
																																			end
																																			if desired then
																																				if desired == 32 then
																																					desired = nil
																																				end
																																				break
																																			end
																																		end
																																		rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																		FUNC_LIST[602](loc_0, loc_2, loc_1, loc_4)
																																		desired = 20
																																		break
																																	end
																																	if desired then
																																		if desired == 31 then
																																			desired = nil
																																		end
																																		break
																																	end
																																	loc_3 = rt_add_i32(loc_1, 4)
																																	loc_2 = rt_load_i32(memory_at_0, loc_1)
																																	loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 20), 4080), loc_12)
																																	loc_7 = bit_and(rt_shr_u32(loc_2, 8), 255)
																																	loc_1 = rt_add_i32(rt_shl_i32(loc_7, 4), loc_5)
																																	while true do
																																		while true do
																																			while true do
																																				loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5)
																																				loc_6 = rt_load_i32(memory_at_0, loc_2 + 12)
																																				if loc_6 ~= 3 then
																																					while true do
																																						if not br_map[10] then
																																							br_map[10] = (function()
																																								return { [0] = 1, 3, 3, 3, 2, }
																																							end)()
																																						end
																																						temp = br_map[10][rt_sub_i32(loc_6, 4)] or 3
																																						if temp < 2 then
																																							desired = 34
																																							break
																																						elseif temp > 2 then
																																							desired = 32
																																							break
																																						else
																																							desired = 33
																																							break
																																						end
																																					end
																																					if desired then
																																						if desired == 34 then
																																							desired = nil
																																						end
																																						break
																																					end
																																				end
																																				loc_22 = rt_load_f64(memory_at_0, loc_4)
																																				loc_23 = rt_load_f64(memory_at_0, loc_2)
																																				rt_store_i32(memory_at_0, loc_1 + 12, 3)
																																				rt_store_f64(memory_at_0, loc_1, math_floor((loc_23 / loc_22)))
																																				loc_2 = 1
																																				desired = 4
																																				break
																																			end
																																			if desired then
																																				if desired == 33 then
																																					desired = nil
																																				end
																																				break
																																			end
																																			loc_22 = no_op(no_op(rt_load_f64(memory_at_0, loc_4)))
																																			rt_store_f32(memory_at_0, loc_1, no_op(math_floor((no_op(rt_load_f32(memory_at_0, loc_2)) / loc_22))))
																																			rt_store_f32(memory_at_0, loc_1 + 4, no_op(math_floor((no_op(rt_load_f32(memory_at_0, loc_2 + 4)) / loc_22))))
																																			loc_25 = rt_load_f32(memory_at_0, loc_2 + 8)
																																			rt_store_i32(memory_at_0, loc_1 + 12, 4)
																																			rt_store_f32(memory_at_0, loc_1 + 8, no_op(math_floor((no_op(loc_25) / loc_22))))
																																			loc_2 = 1
																																			desired = 4
																																			break
																																		end
																																		if desired then
																																			if desired == 32 then
																																				desired = nil
																																			end
																																			break
																																		end
																																		reg_0 = FUNC_LIST[461](loc_0, loc_2, 12)
																																		loc_5 = reg_0
																																		if loc_5 == 0 then
																																			break
																																		end
																																		if rt_load_i32(memory_at_0, loc_5 + 12) ~= 7 then
																																			break
																																		end
																																		if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_5) + 3) == 0 then
																																			break
																																		end
																																		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
																																		rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_5))
																																		rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
																																		rt_store_i64(memory_at_0, loc_1 + 24, rt_load_i64(memory_at_0, loc_2 + 8))
																																		rt_store_i64(memory_at_0, loc_1 + 16, rt_load_i64(memory_at_0, loc_2))
																																		rt_store_i64(memory_at_0, loc_1 + 40, rt_load_i64(memory_at_0, loc_4 + 8))
																																		rt_store_i64(memory_at_0, loc_1 + 32, rt_load_i64(memory_at_0, loc_4))
																																		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_1, 48))
																																		rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																		FUNC_LIST[607](loc_0, 2, loc_7)
																																		desired = 20
																																		break
																																	end
																																	if desired then
																																		if desired == 31 then
																																			desired = nil
																																		end
																																		break
																																	end
																																	rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																	FUNC_LIST[601](loc_0, loc_1, loc_2, loc_4)
																																	desired = 20
																																	break
																																end
																																if desired then
																																	if desired == 30 then
																																		desired = nil
																																	end
																																	break
																																end
																																loc_3 = rt_add_i32(loc_1, 4)
																																loc_2 = rt_load_i32(memory_at_0, loc_1)
																																loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 20), 4080), loc_12)
																																loc_7 = bit_and(rt_shr_u32(loc_2, 8), 255)
																																loc_1 = rt_add_i32(rt_shl_i32(loc_7, 4), loc_5)
																																while true do
																																	while true do
																																		while true do
																																			loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5)
																																			loc_6 = rt_load_i32(memory_at_0, loc_2 + 12)
																																			if loc_6 ~= 3 then
																																				while true do
																																					if not br_map[11] then
																																						br_map[11] = (function()
																																							return { [0] = 1, 3, 3, 3, 2, }
																																						end)()
																																					end
																																					temp = br_map[11][rt_sub_i32(loc_6, 4)] or 3
																																					if temp < 2 then
																																						desired = 33
																																						break
																																					elseif temp > 2 then
																																						desired = 31
																																						break
																																					else
																																						desired = 32
																																						break
																																					end
																																				end
																																				if desired then
																																					if desired == 33 then
																																						desired = nil
																																					end
																																					break
																																				end
																																			end
																																			loc_22 = rt_load_f64(memory_at_0, loc_4)
																																			loc_23 = rt_load_f64(memory_at_0, loc_2)
																																			rt_store_i32(memory_at_0, loc_1 + 12, 3)
																																			rt_store_f64(memory_at_0, loc_1, (loc_23 / loc_22))
																																			loc_2 = 1
																																			desired = 4
																																			break
																																		end
																																		if desired then
																																			if desired == 32 then
																																				desired = nil
																																			end
																																			break
																																		end
																																		loc_25 = no_op(rt_load_f64(memory_at_0, loc_4))
																																		rt_store_f32(memory_at_0, loc_1, (rt_load_f32(memory_at_0, loc_2) / loc_25))
																																		rt_store_f32(memory_at_0, loc_1 + 4, (rt_load_f32(memory_at_0, loc_2 + 4) / loc_25))
																																		loc_26 = rt_load_f32(memory_at_0, loc_2 + 8)
																																		rt_store_i32(memory_at_0, loc_1 + 12, 4)
																																		rt_store_f32(memory_at_0, loc_1 + 8, (loc_26 / loc_25))
																																		loc_2 = 1
																																		desired = 4
																																		break
																																	end
																																	if desired then
																																		if desired == 31 then
																																			desired = nil
																																		end
																																		break
																																	end
																																	reg_0 = FUNC_LIST[461](loc_0, loc_2, 11)
																																	loc_5 = reg_0
																																	if loc_5 == 0 then
																																		break
																																	end
																																	if rt_load_i32(memory_at_0, loc_5 + 12) ~= 7 then
																																		break
																																	end
																																	if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_5) + 3) == 0 then
																																		break
																																	end
																																	loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
																																	rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_5))
																																	rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
																																	rt_store_i64(memory_at_0, loc_1 + 24, rt_load_i64(memory_at_0, loc_2 + 8))
																																	rt_store_i64(memory_at_0, loc_1 + 16, rt_load_i64(memory_at_0, loc_2))
																																	rt_store_i64(memory_at_0, loc_1 + 40, rt_load_i64(memory_at_0, loc_4 + 8))
																																	rt_store_i64(memory_at_0, loc_1 + 32, rt_load_i64(memory_at_0, loc_4))
																																	rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_1, 48))
																																	rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																	FUNC_LIST[607](loc_0, 2, loc_7)
																																	desired = 20
																																	break
																																end
																																if desired then
																																	if desired == 30 then
																																		desired = nil
																																	end
																																	break
																																end
																																rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																FUNC_LIST[600](loc_0, loc_1, loc_2, loc_4)
																																desired = 20
																																break
																															end
																															if desired then
																																if desired == 29 then
																																	desired = nil
																																end
																																break
																															end
																															loc_3 = rt_add_i32(loc_1, 4)
																															loc_2 = rt_load_i32(memory_at_0, loc_1)
																															loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 20), 4080), loc_12)
																															loc_7 = bit_and(rt_shr_u32(loc_2, 8), 255)
																															loc_1 = rt_add_i32(rt_shl_i32(loc_7, 4), loc_5)
																															while true do
																																while true do
																																	while true do
																																		loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5)
																																		loc_6 = rt_load_i32(memory_at_0, loc_2 + 12)
																																		if loc_6 ~= 3 then
																																			while true do
																																				if not br_map[12] then
																																					br_map[12] = (function()
																																						return { [0] = 1, 3, 3, 3, 2, }
																																					end)()
																																				end
																																				temp = br_map[12][rt_sub_i32(loc_6, 4)] or 3
																																				if temp < 2 then
																																					desired = 32
																																					break
																																				elseif temp > 2 then
																																					desired = 30
																																					break
																																				else
																																					desired = 31
																																					break
																																				end
																																			end
																																			if desired then
																																				if desired == 32 then
																																					desired = nil
																																				end
																																				break
																																			end
																																		end
																																		loc_22 = rt_load_f64(memory_at_0, loc_4)
																																		loc_23 = rt_load_f64(memory_at_0, loc_2)
																																		rt_store_i32(memory_at_0, loc_1 + 12, 3)
																																		rt_store_f64(memory_at_0, loc_1, (loc_23 * loc_22))
																																		loc_2 = 1
																																		desired = 4
																																		break
																																	end
																																	if desired then
																																		if desired == 31 then
																																			desired = nil
																																		end
																																		break
																																	end
																																	loc_25 = no_op(rt_load_f64(memory_at_0, loc_4))
																																	rt_store_f32(memory_at_0, loc_1, (rt_load_f32(memory_at_0, loc_2) * loc_25))
																																	rt_store_f32(memory_at_0, loc_1 + 4, (rt_load_f32(memory_at_0, loc_2 + 4) * loc_25))
																																	loc_26 = rt_load_f32(memory_at_0, loc_2 + 8)
																																	rt_store_i32(memory_at_0, loc_1 + 12, 4)
																																	rt_store_f32(memory_at_0, loc_1 + 8, (loc_26 * loc_25))
																																	loc_2 = 1
																																	desired = 4
																																	break
																																end
																																if desired then
																																	if desired == 30 then
																																		desired = nil
																																	end
																																	break
																																end
																																reg_0 = FUNC_LIST[461](loc_0, loc_2, 10)
																																loc_5 = reg_0
																																if loc_5 == 0 then
																																	break
																																end
																																if rt_load_i32(memory_at_0, loc_5 + 12) ~= 7 then
																																	break
																																end
																																if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_5) + 3) == 0 then
																																	break
																																end
																																loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
																																rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_5))
																																rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
																																rt_store_i64(memory_at_0, loc_1 + 24, rt_load_i64(memory_at_0, loc_2 + 8))
																																rt_store_i64(memory_at_0, loc_1 + 16, rt_load_i64(memory_at_0, loc_2))
																																rt_store_i64(memory_at_0, loc_1 + 40, rt_load_i64(memory_at_0, loc_4 + 8))
																																rt_store_i64(memory_at_0, loc_1 + 32, rt_load_i64(memory_at_0, loc_4))
																																rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_1, 48))
																																rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																FUNC_LIST[607](loc_0, 2, loc_7)
																																desired = 20
																																break
																															end
																															if desired then
																																if desired == 29 then
																																	desired = nil
																																end
																																break
																															end
																															rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																															FUNC_LIST[599](loc_0, loc_1, loc_2, loc_4)
																															desired = 20
																															break
																														end
																														if desired then
																															if desired == 28 then
																																desired = nil
																															end
																															break
																														end
																														loc_3 = rt_add_i32(loc_1, 4)
																														loc_1 = rt_load_i32(memory_at_0, loc_1)
																														loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 20), 4080), loc_12)
																														loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																														loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 12), 4080), loc_5)
																														if rt_load_i32(memory_at_0, loc_1 + 12) == 3 then
																															while true do
																																loc_22 = rt_load_f64(memory_at_0, loc_4)
																																loc_23 = rt_load_f64(memory_at_0, loc_1)
																																rt_store_i32(memory_at_0, loc_2 + 12, 3)
																																rt_store_f64(memory_at_0, loc_2, (loc_23 - loc_22))
																																loc_2 = 1
																																desired = 4
																																break
																															end
																															if desired then
																																if desired == 28 then
																																	desired = nil
																																end
																																break
																															end
																														end
																														rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																														FUNC_LIST[598](loc_0, loc_2, loc_1, loc_4)
																														desired = 20
																														break
																													end
																													if desired then
																														if desired == 27 then
																															desired = nil
																														end
																														break
																													end
																													loc_3 = rt_add_i32(loc_1, 4)
																													loc_1 = rt_load_i32(memory_at_0, loc_1)
																													loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 20), 4080), loc_12)
																													loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																													loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 12), 4080), loc_5)
																													if rt_load_i32(memory_at_0, loc_1 + 12) == 3 then
																														while true do
																															loc_22 = rt_load_f64(memory_at_0, loc_4)
																															loc_23 = rt_load_f64(memory_at_0, loc_1)
																															rt_store_i32(memory_at_0, loc_2 + 12, 3)
																															rt_store_f64(memory_at_0, loc_2, (loc_23 + loc_22))
																															loc_2 = 1
																															desired = 4
																															break
																														end
																														if desired then
																															if desired == 27 then
																																desired = nil
																															end
																															break
																														end
																													end
																													rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																													FUNC_LIST[597](loc_0, loc_2, loc_1, loc_4)
																													desired = 20
																													break
																												end
																												if desired then
																													if desired == 26 then
																														desired = nil
																													end
																													break
																												end
																												loc_3 = rt_add_i32(loc_1, 4)
																												loc_1 = rt_load_i32(memory_at_0, loc_1)
																												loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 20), 4080), loc_5)
																												loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																												while true do
																													loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 12), 4080), loc_5)
																													if rt_load_i32(memory_at_0, loc_1 + 12) ~= 3 then
																														break
																													end
																													if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
																														break
																													end
																													loc_22 = rt_load_f64(memory_at_0, loc_2)
																													loc_23 = rt_load_f64(memory_at_0, loc_1)
																													rt_store_i32(memory_at_0, loc_4 + 12, 3)
																													reg_1 = FUNC_LIST[642](loc_23, loc_22)
																													rt_store_f64(memory_at_0, loc_4, reg_1)
																													loc_2 = 1
																													desired = 4
																													break
																												end
																												if desired then
																													if desired == 26 then
																														desired = nil
																													end
																													break
																												end
																												rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																												FUNC_LIST[603](loc_0, loc_4, loc_1, loc_2)
																												desired = 20
																												break
																											end
																											if desired then
																												if desired == 25 then
																													desired = nil
																												end
																												break
																											end
																											loc_3 = rt_add_i32(loc_1, 4)
																											loc_1 = rt_load_i32(memory_at_0, loc_1)
																											loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 20), 4080), loc_5)
																											loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																											while true do
																												loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 12), 4080), loc_5)
																												if rt_load_i32(memory_at_0, loc_1 + 12) ~= 3 then
																													break
																												end
																												if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
																													break
																												end
																												loc_22 = rt_load_f64(memory_at_0, loc_2)
																												loc_23 = rt_load_f64(memory_at_0, loc_1)
																												rt_store_i32(memory_at_0, loc_4 + 12, 3)
																												rt_store_f64(memory_at_0, loc_4, (loc_23 - (loc_22 * math_floor((loc_23 / loc_22)))))
																												loc_2 = 1
																												desired = 4
																												break
																											end
																											if desired then
																												if desired == 25 then
																													desired = nil
																												end
																												break
																											end
																											rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																											FUNC_LIST[602](loc_0, loc_4, loc_1, loc_2)
																											desired = 20
																											break
																										end
																										if desired then
																											if desired == 24 then
																												desired = nil
																											end
																											break
																										end
																										loc_3 = rt_add_i32(loc_1, 4)
																										loc_2 = rt_load_i32(memory_at_0, loc_1)
																										loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 20), 4080), loc_5)
																										loc_8 = bit_and(rt_shr_u32(loc_2, 8), 255)
																										loc_4 = rt_add_i32(rt_shl_i32(loc_8, 4), loc_5)
																										while true do
																											while true do
																												loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5)
																												loc_6 = rt_load_i32(memory_at_0, loc_2 + 12)
																												if loc_6 ~= 3 then
																													while true do
																														loc_7 = loc_2
																														if loc_6 ~= 4 then
																															desired = 26
																															break
																														end
																														if rt_load_i32(memory_at_0, loc_1 + 12) ~= 3 then
																															desired = 25
																															break
																														end
																														loc_22 = no_op(no_op(rt_load_f64(memory_at_0, loc_1)))
																														rt_store_f32(memory_at_0, loc_4, no_op(math_floor((no_op(rt_load_f32(memory_at_0, loc_2)) / loc_22))))
																														rt_store_f32(memory_at_0, loc_4 + 4, no_op(math_floor((no_op(rt_load_f32(memory_at_0, loc_2 + 4)) / loc_22))))
																														loc_25 = rt_load_f32(memory_at_0, loc_2 + 8)
																														rt_store_i32(memory_at_0, loc_4 + 12, 4)
																														rt_store_f32(memory_at_0, loc_4 + 8, no_op(math_floor((no_op(loc_25) / loc_22))))
																														loc_2 = 1
																														desired = 4
																														break
																													end
																													if desired then
																														if desired == 26 then
																															desired = nil
																														end
																														break
																													end
																												end
																												loc_7 = loc_1
																												loc_6 = rt_load_i32(memory_at_0, loc_1 + 12)
																												if loc_6 ~= 3 then
																													break
																												end
																												loc_22 = rt_load_f64(memory_at_0, loc_1)
																												loc_23 = rt_load_f64(memory_at_0, loc_2)
																												rt_store_i32(memory_at_0, loc_4 + 12, 3)
																												rt_store_f64(memory_at_0, loc_4, math_floor((loc_23 / loc_22)))
																												loc_2 = 1
																												desired = 4
																												break
																											end
																											if desired then
																												if desired == 25 then
																													desired = nil
																												end
																												break
																											end
																											if loc_6 ~= 8 then
																												break
																											end
																											reg_0 = FUNC_LIST[461](loc_0, loc_7, 12)
																											loc_5 = reg_0
																											if loc_5 == 0 then
																												break
																											end
																											if rt_load_i32(memory_at_0, loc_5 + 12) ~= 7 then
																												break
																											end
																											if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_5) + 3) == 0 then
																												break
																											end
																											loc_4 = rt_load_i32(memory_at_0, loc_0 + 8)
																											rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_5))
																											rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
																											rt_store_i64(memory_at_0, loc_4 + 24, rt_load_i64(memory_at_0, loc_2 + 8))
																											rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_2))
																											rt_store_i64(memory_at_0, loc_4 + 40, rt_load_i64(memory_at_0, loc_1 + 8))
																											rt_store_i64(memory_at_0, loc_4 + 32, rt_load_i64(memory_at_0, loc_1))
																											rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_4, 48))
																											rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																											FUNC_LIST[607](loc_0, 2, loc_8)
																											desired = 20
																											break
																										end
																										if desired then
																											if desired == 24 then
																												desired = nil
																											end
																											break
																										end
																										rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																										FUNC_LIST[601](loc_0, loc_4, loc_2, loc_1)
																										desired = 20
																										break
																									end
																									if desired then
																										if desired == 23 then
																											desired = nil
																										end
																										break
																									end
																									loc_3 = rt_add_i32(loc_1, 4)
																									loc_4 = rt_load_i32(memory_at_0, loc_1)
																									loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_4, 20), 4080), loc_5)
																									loc_7 = bit_and(rt_shr_u32(loc_4, 8), 255)
																									loc_2 = rt_add_i32(rt_shl_i32(loc_7, 4), loc_5)
																									while true do
																										while true do
																											while true do
																												while true do
																													loc_6 = rt_add_i32(bit_and(rt_shr_u32(loc_4, 12), 4080), loc_5)
																													loc_4 = rt_load_i32(memory_at_0, loc_6 + 12)
																													if loc_4 ~= 3 then
																														while true do
																															loc_8 = loc_6
																															if loc_4 ~= 4 then
																																desired = 25
																																break
																															end
																															if not br_map[13] then
																																br_map[13] = (function()
																																	return { [0] = 1, 2, }
																																end)()
																															end
																															temp = br_map[13][rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 12), 3)] or 4
																															if temp < 2 then
																																desired = 27
																																break
																															elseif temp > 2 then
																																desired = 24
																																break
																															else
																																desired = 26
																																break
																															end
																														end
																														if desired then
																															if desired == 27 then
																																desired = nil
																															end
																															break
																														end
																													end
																													loc_4 = rt_load_i32(memory_at_0, loc_1 + 12)
																													if loc_4 ~= 3 then
																														while true do
																															loc_8 = loc_1
																															if loc_4 ~= 4 then
																																desired = 25
																																break
																															end
																															loc_25 = no_op(rt_load_f64(memory_at_0, loc_6))
																															rt_store_f32(memory_at_0, loc_2, (loc_25 / rt_load_f32(memory_at_0, loc_1)))
																															rt_store_f32(memory_at_0, loc_2 + 4, (loc_25 / rt_load_f32(memory_at_0, loc_1 + 4)))
																															loc_26 = rt_load_f32(memory_at_0, loc_1 + 8)
																															rt_store_i32(memory_at_0, loc_2 + 12, 4)
																															rt_store_f32(memory_at_0, loc_2 + 8, (loc_25 / loc_26))
																															loc_2 = 1
																															desired = 4
																															break
																														end
																														if desired then
																															if desired == 27 then
																																desired = nil
																															end
																															break
																														end
																													end
																													loc_22 = rt_load_f64(memory_at_0, loc_1)
																													loc_23 = rt_load_f64(memory_at_0, loc_6)
																													rt_store_i32(memory_at_0, loc_2 + 12, 3)
																													rt_store_f64(memory_at_0, loc_2, (loc_23 / loc_22))
																													loc_2 = 1
																													desired = 4
																													break
																												end
																												if desired then
																													if desired == 26 then
																														desired = nil
																													end
																													break
																												end
																												loc_25 = no_op(rt_load_f64(memory_at_0, loc_1))
																												rt_store_f32(memory_at_0, loc_2, (rt_load_f32(memory_at_0, loc_6) / loc_25))
																												rt_store_f32(memory_at_0, loc_2 + 4, (rt_load_f32(memory_at_0, loc_6 + 4) / loc_25))
																												loc_26 = rt_load_f32(memory_at_0, loc_6 + 8)
																												rt_store_i32(memory_at_0, loc_2 + 12, 4)
																												rt_store_f32(memory_at_0, loc_2 + 8, (loc_26 / loc_25))
																												loc_2 = 1
																												desired = 4
																												break
																											end
																											if desired then
																												if desired == 25 then
																													desired = nil
																												end
																												break
																											end
																											rt_store_f32(memory_at_0, loc_2, (rt_load_f32(memory_at_0, loc_6) / rt_load_f32(memory_at_0, loc_1)))
																											rt_store_f32(memory_at_0, loc_2 + 4, (rt_load_f32(memory_at_0, loc_6 + 4) / rt_load_f32(memory_at_0, loc_1 + 4)))
																											loc_25 = rt_load_f32(memory_at_0, loc_1 + 8)
																											loc_26 = rt_load_f32(memory_at_0, loc_6 + 8)
																											rt_store_i32(memory_at_0, loc_2 + 12, 4)
																											rt_store_f32(memory_at_0, loc_2 + 8, (loc_26 / loc_25))
																											loc_2 = 1
																											desired = 4
																											break
																										end
																										if desired then
																											if desired == 24 then
																												desired = nil
																											end
																											break
																										end
																										if loc_4 ~= 8 then
																											break
																										end
																										reg_0 = FUNC_LIST[461](loc_0, loc_8, 11)
																										loc_5 = reg_0
																										if loc_5 == 0 then
																											break
																										end
																										if rt_load_i32(memory_at_0, loc_5 + 12) ~= 7 then
																											break
																										end
																										if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_5) + 3) == 0 then
																											break
																										end
																										loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
																										rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_5))
																										rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
																										rt_store_i64(memory_at_0, loc_2 + 24, rt_load_i64(memory_at_0, loc_6 + 8))
																										rt_store_i64(memory_at_0, loc_2 + 16, rt_load_i64(memory_at_0, loc_6))
																										rt_store_i64(memory_at_0, loc_2 + 40, rt_load_i64(memory_at_0, loc_1 + 8))
																										rt_store_i64(memory_at_0, loc_2 + 32, rt_load_i64(memory_at_0, loc_1))
																										rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_2, 48))
																										rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																										FUNC_LIST[607](loc_0, 2, loc_7)
																										desired = 20
																										break
																									end
																									if desired then
																										if desired == 23 then
																											desired = nil
																										end
																										break
																									end
																									rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																									FUNC_LIST[600](loc_0, loc_2, loc_6, loc_1)
																									desired = 20
																									break
																								end
																								if desired then
																									if desired == 22 then
																										desired = nil
																									end
																									break
																								end
																								loc_3 = rt_add_i32(loc_1, 4)
																								loc_4 = rt_load_i32(memory_at_0, loc_1)
																								loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_4, 20), 4080), loc_5)
																								loc_7 = bit_and(rt_shr_u32(loc_4, 8), 255)
																								loc_2 = rt_add_i32(rt_shl_i32(loc_7, 4), loc_5)
																								while true do
																									while true do
																										while true do
																											while true do
																												loc_6 = rt_add_i32(bit_and(rt_shr_u32(loc_4, 12), 4080), loc_5)
																												loc_4 = rt_load_i32(memory_at_0, loc_6 + 12)
																												if loc_4 ~= 3 then
																													while true do
																														loc_8 = loc_6
																														if loc_4 ~= 4 then
																															desired = 24
																															break
																														end
																														if not br_map[14] then
																															br_map[14] = (function()
																																return { [0] = 1, 2, }
																															end)()
																														end
																														temp = br_map[14][rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 12), 3)] or 4
																														if temp < 2 then
																															desired = 26
																															break
																														elseif temp > 2 then
																															desired = 23
																															break
																														else
																															desired = 25
																															break
																														end
																													end
																													if desired then
																														if desired == 26 then
																															desired = nil
																														end
																														break
																													end
																												end
																												loc_4 = rt_load_i32(memory_at_0, loc_1 + 12)
																												if loc_4 ~= 3 then
																													while true do
																														loc_8 = loc_1
																														if loc_4 ~= 4 then
																															desired = 24
																															break
																														end
																														loc_25 = no_op(rt_load_f64(memory_at_0, loc_6))
																														rt_store_f32(memory_at_0, loc_2, (rt_load_f32(memory_at_0, loc_1) * loc_25))
																														rt_store_f32(memory_at_0, loc_2 + 4, (rt_load_f32(memory_at_0, loc_1 + 4) * loc_25))
																														loc_26 = rt_load_f32(memory_at_0, loc_1 + 8)
																														rt_store_i32(memory_at_0, loc_2 + 12, 4)
																														rt_store_f32(memory_at_0, loc_2 + 8, (loc_26 * loc_25))
																														loc_2 = 1
																														desired = 4
																														break
																													end
																													if desired then
																														if desired == 26 then
																															desired = nil
																														end
																														break
																													end
																												end
																												loc_22 = rt_load_f64(memory_at_0, loc_1)
																												loc_23 = rt_load_f64(memory_at_0, loc_6)
																												rt_store_i32(memory_at_0, loc_2 + 12, 3)
																												rt_store_f64(memory_at_0, loc_2, (loc_23 * loc_22))
																												loc_2 = 1
																												desired = 4
																												break
																											end
																											if desired then
																												if desired == 25 then
																													desired = nil
																												end
																												break
																											end
																											loc_25 = no_op(rt_load_f64(memory_at_0, loc_1))
																											rt_store_f32(memory_at_0, loc_2, (rt_load_f32(memory_at_0, loc_6) * loc_25))
																											rt_store_f32(memory_at_0, loc_2 + 4, (rt_load_f32(memory_at_0, loc_6 + 4) * loc_25))
																											loc_26 = rt_load_f32(memory_at_0, loc_6 + 8)
																											rt_store_i32(memory_at_0, loc_2 + 12, 4)
																											rt_store_f32(memory_at_0, loc_2 + 8, (loc_26 * loc_25))
																											loc_2 = 1
																											desired = 4
																											break
																										end
																										if desired then
																											if desired == 24 then
																												desired = nil
																											end
																											break
																										end
																										rt_store_f32(memory_at_0, loc_2, (rt_load_f32(memory_at_0, loc_6) * rt_load_f32(memory_at_0, loc_1)))
																										rt_store_f32(memory_at_0, loc_2 + 4, (rt_load_f32(memory_at_0, loc_6 + 4) * rt_load_f32(memory_at_0, loc_1 + 4)))
																										loc_25 = rt_load_f32(memory_at_0, loc_1 + 8)
																										loc_26 = rt_load_f32(memory_at_0, loc_6 + 8)
																										rt_store_i32(memory_at_0, loc_2 + 12, 4)
																										rt_store_f32(memory_at_0, loc_2 + 8, (loc_26 * loc_25))
																										loc_2 = 1
																										desired = 4
																										break
																									end
																									if desired then
																										if desired == 23 then
																											desired = nil
																										end
																										break
																									end
																									if loc_4 ~= 8 then
																										break
																									end
																									reg_0 = FUNC_LIST[461](loc_0, loc_8, 10)
																									loc_5 = reg_0
																									if loc_5 == 0 then
																										break
																									end
																									if rt_load_i32(memory_at_0, loc_5 + 12) ~= 7 then
																										break
																									end
																									if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_5) + 3) == 0 then
																										break
																									end
																									loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
																									rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_5))
																									rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
																									rt_store_i64(memory_at_0, loc_2 + 24, rt_load_i64(memory_at_0, loc_6 + 8))
																									rt_store_i64(memory_at_0, loc_2 + 16, rt_load_i64(memory_at_0, loc_6))
																									rt_store_i64(memory_at_0, loc_2 + 40, rt_load_i64(memory_at_0, loc_1 + 8))
																									rt_store_i64(memory_at_0, loc_2 + 32, rt_load_i64(memory_at_0, loc_1))
																									rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_2, 48))
																									rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																									FUNC_LIST[607](loc_0, 2, loc_7)
																									desired = 20
																									break
																								end
																								if desired then
																									if desired == 22 then
																										desired = nil
																									end
																									break
																								end
																								rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																								FUNC_LIST[599](loc_0, loc_2, loc_6, loc_1)
																								desired = 20
																								break
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							loc_3 = rt_add_i32(loc_1, 4)
																							loc_2 = rt_load_i32(memory_at_0, loc_1)
																							loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 20), 4080), loc_5)
																							loc_7 = bit_and(rt_shr_u32(loc_2, 8), 255)
																							loc_4 = rt_add_i32(rt_shl_i32(loc_7, 4), loc_5)
																							while true do
																								while true do
																									while true do
																										loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5)
																										loc_6 = rt_load_i32(memory_at_0, loc_2 + 12)
																										if loc_6 ~= 3 then
																											while true do
																												if not br_map[15] then
																													br_map[15] = (function()
																														return { [0] = 1, 3, 3, 3, 2, }
																													end)()
																												end
																												temp = br_map[15][rt_sub_i32(loc_6, 4)] or 3
																												if temp < 2 then
																													desired = 24
																													break
																												elseif temp > 2 then
																													desired = 22
																													break
																												else
																													desired = 23
																													break
																												end
																											end
																											if desired then
																												if desired == 24 then
																													desired = nil
																												end
																												break
																											end
																										end
																										if rt_load_i32(memory_at_0, loc_1 + 12) ~= 3 then
																											desired = 22
																											break
																										end
																										loc_22 = rt_load_f64(memory_at_0, loc_1)
																										loc_23 = rt_load_f64(memory_at_0, loc_2)
																										rt_store_i32(memory_at_0, loc_4 + 12, 3)
																										rt_store_f64(memory_at_0, loc_4, (loc_23 - loc_22))
																										loc_2 = 1
																										desired = 4
																										break
																									end
																									if desired then
																										if desired == 23 then
																											desired = nil
																										end
																										break
																									end
																									if rt_load_i32(memory_at_0, loc_1 + 12) ~= 4 then
																										desired = 22
																										break
																									end
																									rt_store_f32(memory_at_0, loc_4, (rt_load_f32(memory_at_0, loc_2) - rt_load_f32(memory_at_0, loc_1)))
																									rt_store_f32(memory_at_0, loc_4 + 4, (rt_load_f32(memory_at_0, loc_2 + 4) - rt_load_f32(memory_at_0, loc_1 + 4)))
																									loc_25 = rt_load_f32(memory_at_0, loc_1 + 8)
																									loc_26 = rt_load_f32(memory_at_0, loc_2 + 8)
																									rt_store_i32(memory_at_0, loc_4 + 12, 4)
																									rt_store_f32(memory_at_0, loc_4 + 8, (loc_26 - loc_25))
																									loc_2 = 1
																									desired = 4
																									break
																								end
																								if desired then
																									if desired == 22 then
																										desired = nil
																									end
																									break
																								end
																								reg_0 = FUNC_LIST[461](loc_0, loc_2, 9)
																								loc_5 = reg_0
																								if loc_5 == 0 then
																									break
																								end
																								if rt_load_i32(memory_at_0, loc_5 + 12) ~= 7 then
																									break
																								end
																								if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_5) + 3) == 0 then
																									break
																								end
																								loc_4 = rt_load_i32(memory_at_0, loc_0 + 8)
																								rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_5))
																								rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
																								rt_store_i64(memory_at_0, loc_4 + 24, rt_load_i64(memory_at_0, loc_2 + 8))
																								rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_2))
																								rt_store_i64(memory_at_0, loc_4 + 40, rt_load_i64(memory_at_0, loc_1 + 8))
																								rt_store_i64(memory_at_0, loc_4 + 32, rt_load_i64(memory_at_0, loc_1))
																								rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_4, 48))
																								rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																								FUNC_LIST[607](loc_0, 2, loc_7)
																								desired = 20
																								break
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																							FUNC_LIST[598](loc_0, loc_4, loc_2, loc_1)
																							desired = 20
																							break
																						end
																						if desired then
																							if desired == 20 then
																								desired = nil
																							end
																							break
																						end
																						loc_3 = rt_add_i32(loc_1, 4)
																						loc_2 = rt_load_i32(memory_at_0, loc_1)
																						loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 20), 4080), loc_5)
																						loc_7 = bit_and(rt_shr_u32(loc_2, 8), 255)
																						loc_4 = rt_add_i32(rt_shl_i32(loc_7, 4), loc_5)
																						while true do
																							while true do
																								while true do
																									loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5)
																									loc_6 = rt_load_i32(memory_at_0, loc_2 + 12)
																									if loc_6 ~= 3 then
																										while true do
																											if not br_map[16] then
																												br_map[16] = (function()
																													return { [0] = 1, 3, 3, 3, 2, }
																												end)()
																											end
																											temp = br_map[16][rt_sub_i32(loc_6, 4)] or 3
																											if temp < 2 then
																												desired = 23
																												break
																											elseif temp > 2 then
																												desired = 21
																												break
																											else
																												desired = 22
																												break
																											end
																										end
																										if desired then
																											if desired == 23 then
																												desired = nil
																											end
																											break
																										end
																									end
																									if rt_load_i32(memory_at_0, loc_1 + 12) ~= 3 then
																										desired = 21
																										break
																									end
																									loc_22 = rt_load_f64(memory_at_0, loc_1)
																									loc_23 = rt_load_f64(memory_at_0, loc_2)
																									rt_store_i32(memory_at_0, loc_4 + 12, 3)
																									rt_store_f64(memory_at_0, loc_4, (loc_23 + loc_22))
																									loc_2 = 1
																									desired = 4
																									break
																								end
																								if desired then
																									if desired == 22 then
																										desired = nil
																									end
																									break
																								end
																								if rt_load_i32(memory_at_0, loc_1 + 12) ~= 4 then
																									desired = 21
																									break
																								end
																								rt_store_f32(memory_at_0, loc_4, (rt_load_f32(memory_at_0, loc_2) + rt_load_f32(memory_at_0, loc_1)))
																								rt_store_f32(memory_at_0, loc_4 + 4, (rt_load_f32(memory_at_0, loc_2 + 4) + rt_load_f32(memory_at_0, loc_1 + 4)))
																								loc_25 = rt_load_f32(memory_at_0, loc_1 + 8)
																								loc_26 = rt_load_f32(memory_at_0, loc_2 + 8)
																								rt_store_i32(memory_at_0, loc_4 + 12, 4)
																								rt_store_f32(memory_at_0, loc_4 + 8, (loc_26 + loc_25))
																								loc_2 = 1
																								desired = 4
																								break
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							reg_0 = FUNC_LIST[461](loc_0, loc_2, 8)
																							loc_5 = reg_0
																							if loc_5 == 0 then
																								break
																							end
																							if rt_load_i32(memory_at_0, loc_5 + 12) ~= 7 then
																								break
																							end
																							if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_5) + 3) == 0 then
																								break
																							end
																							loc_4 = rt_load_i32(memory_at_0, loc_0 + 8)
																							rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_5))
																							rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
																							rt_store_i64(memory_at_0, loc_4 + 24, rt_load_i64(memory_at_0, loc_2 + 8))
																							rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_2))
																							rt_store_i64(memory_at_0, loc_4 + 40, rt_load_i64(memory_at_0, loc_1 + 8))
																							rt_store_i64(memory_at_0, loc_4 + 32, rt_load_i64(memory_at_0, loc_1))
																							rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_4, 48))
																							rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																							FUNC_LIST[607](loc_0, 2, loc_7)
																							desired = 20
																							break
																						end
																						if desired then
																							if desired == 20 then
																								desired = nil
																							end
																							break
																						end
																						rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																						FUNC_LIST[597](loc_0, loc_4, loc_2, loc_1)
																						break
																					end
																					if desired then
																						if desired == 19 then
																							desired = nil
																						end
																						break
																					end
																					loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																					loc_2 = 1
																					desired = 4
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				loc_4 = rt_add_i32(loc_1, 4)
																				loc_3 = rt_add_i32(rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 4), 4), loc_5)
																				while true do
																					loc_1 = rt_load_i32(memory_at_0, loc_1)
																					loc_6 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																					loc_2 = rt_load_i32(memory_at_0, loc_6 + 12)
																					if loc_2 ~= 3 then
																						while true do
																							if loc_2 ~= 5 then
																								desired = 19
																								break
																							end
																							if rt_load_i32(memory_at_0, loc_3 + 12) ~= 5 then
																								desired = 19
																								break
																							end
																							loc_2 = 1
																							reg_2 = FUNC_LIST[590](rt_load_i32(memory_at_0, loc_6), rt_load_i32(memory_at_0, loc_3))
																							loc_3 = rt_add_i32(rt_shl_i32((if rt_lt_i32(reg_2, 0) then 1 else rt_shr_i32(loc_1, 16)), 2), loc_4)
																							desired = 4
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																					end
																					if rt_load_i32(memory_at_0, loc_3 + 12) ~= 3 then
																						break
																					end
																					loc_2 = 1
																					loc_3 = rt_add_i32(rt_shl_i32((if rt_load_f64(memory_at_0, loc_6) < rt_load_f64(memory_at_0, loc_3) then 1 else rt_shr_i32(loc_1, 16)), 2), loc_4)
																					desired = 4
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_4)
																				loc_2 = 1
																				reg_2 = FUNC_LIST[591](loc_0, loc_6, loc_3)
																				loc_3 = rt_add_i32(rt_shl_i32((if reg_2 ~= 0 then 1 else rt_shr_i32(loc_1, 16)), 2), loc_4)
																				loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																				desired = 4
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			loc_4 = rt_add_i32(loc_1, 4)
																			loc_3 = rt_add_i32(rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 4), 4), loc_5)
																			while true do
																				loc_1 = rt_load_i32(memory_at_0, loc_1)
																				loc_6 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																				loc_2 = rt_load_i32(memory_at_0, loc_6 + 12)
																				if loc_2 ~= 3 then
																					while true do
																						if loc_2 ~= 5 then
																							desired = 18
																							break
																						end
																						if rt_load_i32(memory_at_0, loc_3 + 12) ~= 5 then
																							desired = 18
																							break
																						end
																						loc_2 = 1
																						reg_2 = FUNC_LIST[590](rt_load_i32(memory_at_0, loc_6), rt_load_i32(memory_at_0, loc_3))
																						loc_3 = rt_add_i32(rt_shl_i32((if rt_ge_i32(reg_2, 0) then 1 else rt_shr_i32(loc_1, 16)), 2), loc_4)
																						desired = 4
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																				end
																				if rt_load_i32(memory_at_0, loc_3 + 12) ~= 3 then
																					break
																				end
																				loc_2 = 1
																				loc_3 = rt_add_i32(rt_shl_i32((if rt_load_f64(memory_at_0, loc_6) < rt_load_f64(memory_at_0, loc_3) then rt_shr_i32(loc_1, 16) else 1), 2), loc_4)
																				desired = 4
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_4)
																			loc_2 = 1
																			reg_2 = FUNC_LIST[591](loc_0, loc_6, loc_3)
																			loc_3 = rt_add_i32(rt_shl_i32((if reg_2 ~= 1 then 1 else rt_shr_i32(loc_1, 16)), 2), loc_4)
																			loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																			desired = 4
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		loc_4 = rt_add_i32(loc_1, 4)
																		loc_3 = rt_add_i32(rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 4), 4), loc_5)
																		while true do
																			loc_1 = rt_load_i32(memory_at_0, loc_1)
																			loc_6 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																			loc_2 = rt_load_i32(memory_at_0, loc_6 + 12)
																			if loc_2 ~= 3 then
																				while true do
																					if loc_2 ~= 5 then
																						desired = 17
																						break
																					end
																					if rt_load_i32(memory_at_0, loc_3 + 12) ~= 5 then
																						desired = 17
																						break
																					end
																					loc_2 = 1
																					reg_2 = FUNC_LIST[590](rt_load_i32(memory_at_0, loc_6), rt_load_i32(memory_at_0, loc_3))
																					loc_3 = rt_add_i32(rt_shl_i32((if rt_le_i32(reg_2, 0) then 1 else rt_shr_i32(loc_1, 16)), 2), loc_4)
																					desired = 4
																					break
																				end
																				if desired then
																					if desired == 17 then
																						desired = nil
																					end
																					break
																				end
																			end
																			if rt_load_i32(memory_at_0, loc_3 + 12) ~= 3 then
																				break
																			end
																			loc_2 = 1
																			loc_3 = rt_add_i32(rt_shl_i32((if rt_load_f64(memory_at_0, loc_6) <= rt_load_f64(memory_at_0, loc_3) then 1 else rt_shr_i32(loc_1, 16)), 2), loc_4)
																			desired = 4
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_4)
																		loc_2 = 1
																		reg_2 = FUNC_LIST[593](loc_0, loc_6, loc_3)
																		loc_3 = rt_add_i32(rt_shl_i32((if reg_2 ~= 0 then 1 else rt_shr_i32(loc_1, 16)), 2), loc_4)
																		loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																		desired = 4
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	loc_4 = rt_add_i32(loc_1, 4)
																	loc_3 = rt_add_i32(rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 4), 4), loc_5)
																	while true do
																		loc_1 = rt_load_i32(memory_at_0, loc_1)
																		loc_6 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																		loc_2 = rt_load_i32(memory_at_0, loc_6 + 12)
																		if loc_2 ~= 3 then
																			while true do
																				if loc_2 ~= 5 then
																					desired = 16
																					break
																				end
																				if rt_load_i32(memory_at_0, loc_3 + 12) ~= 5 then
																					desired = 16
																					break
																				end
																				loc_2 = 1
																				reg_2 = FUNC_LIST[590](rt_load_i32(memory_at_0, loc_6), rt_load_i32(memory_at_0, loc_3))
																				loc_3 = rt_add_i32(rt_shl_i32((if rt_gt_i32(reg_2, 0) then 1 else rt_shr_i32(loc_1, 16)), 2), loc_4)
																				desired = 4
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																				end
																				break
																			end
																		end
																		if rt_load_i32(memory_at_0, loc_3 + 12) ~= 3 then
																			break
																		end
																		loc_2 = 1
																		loc_3 = rt_add_i32(rt_shl_i32((if rt_load_f64(memory_at_0, loc_6) <= rt_load_f64(memory_at_0, loc_3) then rt_shr_i32(loc_1, 16) else 1), 2), loc_4)
																		desired = 4
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_4)
																	loc_2 = 1
																	reg_2 = FUNC_LIST[593](loc_0, loc_6, loc_3)
																	loc_3 = rt_add_i32(rt_shl_i32((if reg_2 ~= 1 then 1 else rt_shr_i32(loc_1, 16)), 2), loc_4)
																	loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																	desired = 4
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																loc_3 = rt_add_i32(loc_1, 4)
																loc_4 = rt_load_i32(memory_at_0, loc_1)
																loc_6 = rt_add_i32(bit_and(rt_shr_u32(loc_4, 4), 4080), loc_5)
																loc_2 = rt_load_i32(memory_at_0, loc_6 + 12)
																loc_7 = rt_add_i32(rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 4), 4), loc_5)
																if loc_2 == rt_load_i32(memory_at_0, loc_7 + 12) then
																	while true do
																		while true do
																			while true do
																				while true do
																					while true do
																						while true do
																							while true do
																								while true do
																									while true do
																										while true do
																											if not br_map[17] then
																												br_map[17] = (function()
																													return { [0] = 1, 2, 3, 4, 5, 6, 5, 7, 5, 5, }
																												end)()
																											end
																											temp = br_map[17][rt_sub_i32(loc_2, 1)] or 0
																											if temp < 4 then
																												if temp < 2 then
																													if temp < 1 then
																														break
																													else
																														desired = 23
																														break
																													end
																												elseif temp > 2 then
																													desired = 21
																													break
																												else
																													desired = 22
																													break
																												end
																											elseif temp > 4 then
																												if temp < 6 then
																													desired = 19
																													break
																												elseif temp > 6 then
																													desired = 17
																													break
																												else
																													desired = 18
																													break
																												end
																											else
																												desired = 20
																												break
																											end
																										end
																										if desired then
																											if desired == 23 then
																												desired = nil
																											end
																											break
																										end
																										loc_3 = rt_add_i32(loc_1, 8)
																										loc_2 = 1
																										desired = 4
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																									loc_2 = 1
																									loc_3 = rt_add_i32(rt_shl_i32((if rt_load_i32(memory_at_0, loc_6) == rt_load_i32(memory_at_0, loc_7) then 1 else rt_shr_i32(loc_4, 16)), 2), loc_3)
																									desired = 4
																									break
																								end
																								if desired then
																									if desired == 21 then
																										desired = nil
																									end
																									break
																								end
																								while true do
																									if rt_load_i32(memory_at_0, loc_6) == rt_load_i32(memory_at_0, loc_7) then
																										while true do
																											loc_1 = 1
																											reg_0 = loc_1
																											if rt_load_i32(memory_at_0, loc_6 + 8) == rt_load_i32(memory_at_0, loc_7 + 8) then
																												desired = 22
																												break
																											end
																											break
																										end
																										if desired then
																											if desired == 22 then
																												desired = nil
																											end
																											break
																										end
																									end
																									reg_0 = rt_shr_i32(loc_4, 16)
																									break
																								end
																								if desired then
																									if desired == 21 then
																										desired = nil
																									end
																									break
																								end
																								loc_1 = reg_0
																								loc_3 = rt_add_i32(rt_shl_i32(loc_1, 2), loc_3)
																								loc_2 = 1
																								desired = 4
																								break
																							end
																							if desired then
																								if desired == 20 then
																									desired = nil
																								end
																								break
																							end
																							loc_2 = 1
																							loc_3 = rt_add_i32(rt_shl_i32((if rt_load_f64(memory_at_0, loc_6) == rt_load_f64(memory_at_0, loc_7) then 1 else rt_shr_i32(loc_4, 16)), 2), loc_3)
																							desired = 4
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																						while true do
																							while true do
																								if rt_load_f32(memory_at_0, loc_6) == rt_load_f32(memory_at_0, loc_7) then
																									while true do
																										if rt_load_f32(memory_at_0, loc_6 + 4) == rt_load_f32(memory_at_0, loc_7 + 4) then
																											desired = 21
																											break
																										end
																										break
																									end
																									if desired then
																										if desired == 21 then
																											desired = nil
																										end
																										break
																									end
																								end
																								reg_0 = rt_shr_i32(loc_4, 16)
																								desired = 20
																								break
																							end
																							if desired then
																								if desired == 20 then
																									desired = nil
																								end
																								break
																							end
																							reg_0 = (if rt_load_f32(memory_at_0, loc_6 + 8) == rt_load_f32(memory_at_0, loc_7 + 8) then 1 else rt_shr_i32(loc_4, 16))
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																						loc_1 = reg_0
																						loc_3 = rt_add_i32(rt_shl_i32(loc_1, 2), loc_3)
																						loc_2 = 1
																						desired = 4
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																					loc_2 = 1
																					loc_3 = rt_add_i32(rt_shl_i32((if rt_load_i32(memory_at_0, loc_6) == rt_load_i32(memory_at_0, loc_7) then 1 else rt_shr_i32(loc_4, 16)), 2), loc_3)
																					desired = 4
																					break
																				end
																				if desired then
																					if desired == 17 then
																						desired = nil
																					end
																					break
																				end
																				loc_8 = rt_load_i32(memory_at_0, loc_6)
																				loc_1 = rt_load_i32(memory_at_0, loc_8 + 16)
																				loc_9 = rt_load_i32(memory_at_0, loc_7)
																				if loc_1 ~= rt_load_i32(memory_at_0, loc_9 + 16) then
																					desired = 16
																					break
																				end
																				while true do
																					if loc_1 == 0 then
																						break
																					end
																					if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_1 + 3), 0) then
																						break
																					end
																					reg_0 = FUNC_LIST[460](loc_1, 7, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1556))
																					if reg_0 ~= 0 then
																						desired = 16
																						break
																					end
																					loc_9 = rt_load_i32(memory_at_0, loc_7)
																					loc_8 = rt_load_i32(memory_at_0, loc_6)
																					break
																				end
																				if desired then
																					if desired == 17 then
																						desired = nil
																					end
																					break
																				end
																				loc_2 = 1
																				loc_3 = rt_add_i32(rt_shl_i32((if loc_8 == loc_9 then 1 else rt_shr_i32(loc_4, 16)), 2), loc_3)
																				desired = 4
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																				end
																				break
																			end
																			loc_8 = rt_load_i32(memory_at_0, loc_6)
																			loc_1 = rt_load_i32(memory_at_0, loc_8 + 8)
																			loc_9 = rt_load_i32(memory_at_0, loc_7)
																			if loc_1 ~= rt_load_i32(memory_at_0, loc_9 + 8) then
																				break
																			end
																			while true do
																				while true do
																					if loc_1 == 0 then
																						break
																					end
																					if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_1 + 3), 0) then
																						break
																					end
																					reg_0 = FUNC_LIST[460](loc_1, 7, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1556))
																					loc_1 = reg_0
																					if loc_1 ~= 0 then
																						desired = 17
																						break
																					end
																					loc_9 = rt_load_i32(memory_at_0, loc_7)
																					loc_8 = rt_load_i32(memory_at_0, loc_6)
																					break
																				end
																				if desired then
																					if desired == 17 then
																						desired = nil
																					end
																					break
																				end
																				loc_2 = 1
																				loc_3 = rt_add_i32(rt_shl_i32((if loc_8 == loc_9 then 1 else rt_shr_i32(loc_4, 16)), 2), loc_3)
																				desired = 4
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																				end
																				break
																			end
																			if rt_load_i32(memory_at_0, loc_1 + 12) ~= 7 then
																				break
																			end
																			if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 3) == 0 then
																				break
																			end
																			loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
																			rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
																			rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
																			rt_store_i64(memory_at_0, loc_2 + 24, rt_load_i64(memory_at_0, loc_6 + 8))
																			rt_store_i64(memory_at_0, loc_2 + 16, rt_load_i64(memory_at_0, loc_6))
																			rt_store_i64(memory_at_0, loc_2 + 40, rt_load_i64(memory_at_0, loc_7 + 8))
																			rt_store_i64(memory_at_0, loc_2 + 32, rt_load_i64(memory_at_0, loc_7))
																			rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_2, 48))
																			rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																			loc_6 = rt_sub_i32(loc_2, loc_5)
																			FUNC_LIST[607](loc_0, 2, rt_shr_i32(loc_6, 4))
																			loc_2 = 1
																			loc_1 = 1
																			while true do
																				while true do
																					while true do
																						loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																						loc_6 = rt_add_i32(loc_5, loc_6)
																						if not br_map[18] then
																							br_map[18] = (function()
																								return { [0] = 1, 0, }
																							end)()
																						end
																						temp = br_map[18][rt_load_i32(memory_at_0, loc_6 + 12)] or 2
																						if temp < 1 then
																							break
																						elseif temp > 1 then
																							desired = 17
																							break
																						else
																							desired = 18
																							break
																						end
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																					if rt_load_i32(memory_at_0, loc_6) ~= 0 then
																						desired = 17
																						break
																					end
																					break
																				end
																				if desired then
																					if desired == 17 then
																						desired = nil
																					end
																					break
																				end
																				loc_1 = rt_shr_i32(loc_4, 16)
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																				end
																				break
																			end
																			loc_3 = rt_add_i32(rt_shl_i32(loc_1, 2), loc_3)
																			desired = 4
																			break
																		end
																		if desired then
																			break
																		end
																		rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																		loc_2 = 1
																		reg_2 = FUNC_LIST[594](loc_0, loc_6, loc_7)
																		loc_3 = rt_add_i32(rt_shl_i32((if reg_2 ~= 0 then 1 else rt_shr_i32(loc_4, 16)), 2), loc_3)
																		loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																		desired = 4
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																		end
																		break
																	end
																end
																loc_3 = rt_add_i32(rt_shl_i32(rt_shr_i32(loc_4, 16), 2), loc_3)
																loc_2 = 1
																desired = 4
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															loc_6 = rt_load_i32(memory_at_0, loc_1)
															loc_3 = rt_add_i32(bit_and(rt_shr_u32(loc_6, 4), 4080), loc_5)
															loc_2 = rt_load_i32(memory_at_0, loc_3 + 12)
															loc_4 = rt_add_i32(rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 4), 4), loc_5)
															if loc_2 == rt_load_i32(memory_at_0, loc_4 + 12) then
																while true do
																	loc_1 = rt_add_i32(loc_1, 4)
																	while true do
																		while true do
																			while true do
																				while true do
																					while true do
																						while true do
																							while true do
																								while true do
																									while true do
																										if not br_map[19] then
																											br_map[19] = (function()
																												return { [0] = 1, 2, 3, 4, 5, 6, 5, 7, 5, 5, }
																											end)()
																										end
																										temp = br_map[19][rt_sub_i32(loc_2, 1)] or 0
																										if temp < 4 then
																											if temp < 2 then
																												if temp < 1 then
																													break
																												else
																													desired = 22
																													break
																												end
																											elseif temp > 2 then
																												desired = 20
																												break
																											else
																												desired = 21
																												break
																											end
																										elseif temp > 4 then
																											if temp < 6 then
																												desired = 18
																												break
																											elseif temp > 6 then
																												desired = 16
																												break
																											else
																												desired = 17
																												break
																											end
																										else
																											desired = 19
																											break
																										end
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																									loc_3 = rt_add_i32(rt_shl_i32(rt_shr_i32(loc_6, 16), 2), loc_1)
																									loc_2 = 1
																									desired = 4
																									break
																								end
																								if desired then
																									if desired == 21 then
																										desired = nil
																									end
																									break
																								end
																								loc_2 = 1
																								loc_3 = rt_add_i32(rt_shl_i32((if rt_load_i32(memory_at_0, loc_3) ~= rt_load_i32(memory_at_0, loc_4) then 1 else rt_shr_i32(loc_6, 16)), 2), loc_1)
																								desired = 4
																								break
																							end
																							if desired then
																								if desired == 20 then
																									desired = nil
																								end
																								break
																							end
																							loc_2 = 1
																							loc_7 = 1
																							if rt_load_i32(memory_at_0, loc_3) == rt_load_i32(memory_at_0, loc_4) then
																								while true do
																									reg_0 = (if rt_load_i32(memory_at_0, loc_3 + 8) ~= rt_load_i32(memory_at_0, loc_4 + 8) then 1 else rt_shr_i32(loc_6, 16))
																									break
																								end
																								if desired then
																									if desired == 20 then
																										desired = nil
																									end
																									break
																								end
																							else
																								while true do
																									reg_0 = loc_7
																									break
																								end
																								if desired then
																									if desired == 20 then
																										desired = nil
																									end
																									break
																								end
																							end
																							loc_7 = reg_0
																							loc_3 = rt_add_i32(rt_shl_i32(loc_7, 2), loc_1)
																							desired = 4
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																						loc_2 = 1
																						loc_3 = rt_add_i32(rt_shl_i32((if rt_load_f64(memory_at_0, loc_3) ~= rt_load_f64(memory_at_0, loc_4) then 1 else rt_shr_i32(loc_6, 16)), 2), loc_1)
																						desired = 4
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																					loc_2 = 1
																					while true do
																						loc_7 = 1
																						reg_0 = loc_7
																						if rt_load_f32(memory_at_0, loc_3) ~= rt_load_f32(memory_at_0, loc_4) then
																							break
																						end
																						reg_0 = 1
																						if rt_load_f32(memory_at_0, loc_3 + 4) ~= rt_load_f32(memory_at_0, loc_4 + 4) then
																							break
																						end
																						reg_0 = (if rt_load_f32(memory_at_0, loc_3 + 8) ~= rt_load_f32(memory_at_0, loc_4 + 8) then 1 else rt_shr_i32(loc_6, 16))
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																					loc_7 = reg_0
																					loc_3 = rt_add_i32(rt_shl_i32(loc_7, 2), loc_1)
																					desired = 4
																					break
																				end
																				if desired then
																					if desired == 17 then
																						desired = nil
																					end
																					break
																				end
																				loc_2 = 1
																				loc_3 = rt_add_i32(rt_shl_i32((if rt_load_i32(memory_at_0, loc_3) ~= rt_load_i32(memory_at_0, loc_4) then 1 else rt_shr_i32(loc_6, 16)), 2), loc_1)
																				desired = 4
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																				end
																				break
																			end
																			loc_7 = rt_load_i32(memory_at_0, loc_3)
																			loc_2 = rt_load_i32(memory_at_0, loc_7 + 16)
																			loc_8 = rt_load_i32(memory_at_0, loc_4)
																			if loc_2 ~= rt_load_i32(memory_at_0, loc_8 + 16) then
																				desired = 15
																				break
																			end
																			while true do
																				if loc_2 == 0 then
																					break
																				end
																				if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_2 + 3), 0) then
																					break
																				end
																				reg_0 = FUNC_LIST[460](loc_2, 7, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1556))
																				if reg_0 ~= 0 then
																					desired = 15
																					break
																				end
																				loc_8 = rt_load_i32(memory_at_0, loc_4)
																				loc_7 = rt_load_i32(memory_at_0, loc_3)
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																				end
																				break
																			end
																			loc_2 = 1
																			loc_3 = rt_add_i32(rt_shl_i32((if loc_7 ~= loc_8 then 1 else rt_shr_i32(loc_6, 16)), 2), loc_1)
																			desired = 4
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																		loc_7 = rt_load_i32(memory_at_0, loc_3)
																		loc_2 = rt_load_i32(memory_at_0, loc_7 + 8)
																		loc_8 = rt_load_i32(memory_at_0, loc_4)
																		if loc_2 ~= rt_load_i32(memory_at_0, loc_8 + 8) then
																			break
																		end
																		while true do
																			while true do
																				if loc_2 == 0 then
																					break
																				end
																				if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_2 + 3), 0) then
																					break
																				end
																				reg_0 = FUNC_LIST[460](loc_2, 7, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1556))
																				loc_2 = reg_0
																				if loc_2 ~= 0 then
																					desired = 16
																					break
																				end
																				loc_8 = rt_load_i32(memory_at_0, loc_4)
																				loc_7 = rt_load_i32(memory_at_0, loc_3)
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																				end
																				break
																			end
																			loc_2 = 1
																			loc_3 = rt_add_i32(rt_shl_i32((if loc_7 ~= loc_8 then 1 else rt_shr_i32(loc_6, 16)), 2), loc_1)
																			desired = 4
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																		if rt_load_i32(memory_at_0, loc_2 + 12) ~= 7 then
																			break
																		end
																		if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_2) + 3) == 0 then
																			break
																		end
																		loc_7 = rt_load_i32(memory_at_0, loc_0 + 8)
																		rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_2))
																		rt_store_i64(memory_at_0, loc_7 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
																		rt_store_i64(memory_at_0, loc_7 + 24, rt_load_i64(memory_at_0, loc_3 + 8))
																		rt_store_i64(memory_at_0, loc_7 + 16, rt_load_i64(memory_at_0, loc_3))
																		rt_store_i64(memory_at_0, loc_7 + 40, rt_load_i64(memory_at_0, loc_4 + 8))
																		rt_store_i64(memory_at_0, loc_7 + 32, rt_load_i64(memory_at_0, loc_4))
																		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_7, 48))
																		rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_1)
																		loc_4 = rt_sub_i32(loc_7, loc_5)
																		FUNC_LIST[607](loc_0, 2, rt_shr_i32(loc_4, 4))
																		loc_2 = 1
																		loc_3 = 1
																		while true do
																			while true do
																				while true do
																					loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																					loc_4 = rt_add_i32(loc_5, loc_4)
																					if not br_map[20] then
																						br_map[20] = (function()
																							return { [0] = 2, 0, }
																						end)()
																					end
																					temp = br_map[20][rt_load_i32(memory_at_0, loc_4 + 12)] or 1
																					if temp < 1 then
																						break
																					elseif temp > 1 then
																						desired = 16
																						break
																					else
																						desired = 17
																						break
																					end
																				end
																				if desired then
																					if desired == 17 then
																						desired = nil
																					end
																					break
																				end
																				if rt_load_i32(memory_at_0, loc_4) == 0 then
																					desired = 16
																					break
																				end
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																				end
																				break
																			end
																			loc_3 = rt_shr_i32(loc_6, 16)
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																		loc_3 = rt_add_i32(rt_shl_i32(loc_3, 2), loc_1)
																		desired = 4
																		break
																	end
																	if desired then
																		break
																	end
																	rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_1)
																	loc_2 = 1
																	reg_2 = FUNC_LIST[594](loc_0, loc_3, loc_4)
																	loc_3 = rt_add_i32(rt_shl_i32((if reg_2 ~= 1 then 1 else rt_shr_i32(loc_6, 16)), 2), loc_1)
																	loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																	desired = 4
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
															end
															loc_3 = rt_add_i32(loc_1, 8)
															loc_2 = 1
															desired = 4
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														loc_2 = rt_add_i32(loc_1, 4)
														loc_3 = 0
														while true do
															while true do
																while true do
																	loc_1 = rt_load_i32(memory_at_0, loc_1)
																	loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																	if not br_map[21] then
																		br_map[21] = (function()
																			return { [0] = 1, 0, }
																		end)()
																	end
																	temp = br_map[21][rt_load_i32(memory_at_0, loc_4 + 12)] or 2
																	if temp < 1 then
																		break
																	elseif temp > 1 then
																		desired = 13
																		break
																	else
																		desired = 14
																		break
																	end
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																if rt_load_i32(memory_at_0, loc_4) ~= 0 then
																	desired = 13
																	break
																end
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															loc_3 = rt_shr_i32(loc_1, 16)
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														loc_3 = rt_add_i32(rt_shl_i32(loc_3, 2), loc_2)
														desired = 5
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_3 = rt_add_i32(loc_1, 4)
													while true do
														while true do
															while true do
																loc_2 = rt_load_i32(memory_at_0, loc_1)
																loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																loc_1 = rt_load_i32(memory_at_0, loc_4 + 12)
																if not br_map[22] then
																	br_map[22] = (function()
																		return { [0] = 2, 0, }
																	end)()
																end
																temp = br_map[22][loc_1] or 1
																if temp < 1 then
																	break
																elseif temp > 1 then
																	desired = 12
																	break
																else
																	desired = 13
																	break
																end
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															if rt_load_i32(memory_at_0, loc_4) ~= 0 then
																break
															end
															loc_1 = 0
															desired = 12
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														loc_1 = rt_shr_i32(loc_2, 16)
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_3 = rt_add_i32(rt_shl_i32(loc_1, 2), loc_3)
													desired = 5
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_3 = rt_add_i32(rt_add_i32(rt_shl_i32(rt_load_i32_i16(memory_at_0, loc_1 + 2), 2), loc_1), 4)
												desired = 5
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_4 = rt_load_i32(memory_at_0, loc_0 + 20)
											loc_3 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1700)
											if loc_3 ~= 0 then
												while true do
													rt_store_i32(memory_at_0, loc_4 + 12, rt_add_i32(loc_1, 4))
													TABLE_LIST[0].data[loc_3](loc_0, 4294967295)
													loc_4 = rt_load_i32(memory_at_0, loc_0 + 20)
													if rt_load_i32_u8(memory_at_0, loc_0 + 3) ~= 0 then
														desired = 9
														break
													end
													reg_0 = rt_load_i32(memory_at_0, loc_0 + 12)
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											else
												while true do
													reg_0 = loc_5
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											loc_5 = reg_0
											loc_1 = rt_load_i32(memory_at_0, loc_1)
											loc_3 = rt_add_i32(loc_5, bit_and(rt_shr_u32(loc_1, 4), 4080))
											while true do
												loc_1 = bit_and(rt_shr_u32(loc_1, 16), 255)
												if loc_1 == 0 then
													while true do
														reg_0 = rt_load_i32(memory_at_0, loc_0 + 8)
														desired = 10
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												reg_0 = rt_sub_i32(rt_add_i32(rt_shl_i32(loc_1, 4), loc_3), 16)
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_2 = reg_0
											loc_1 = rt_load_i32(memory_at_0, loc_4 + 4)
											loc_7 = rt_load_i32(memory_at_0, loc_4 + 16)
											if loc_7 == 0 then
												while true do
													loc_5 = loc_7
													desired = 8
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											loc_5 = loc_7
											if loc_2 <= loc_3 then
												desired = 8
												break
											end
											while true do
												rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_3))
												rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
												loc_1 = rt_add_i32(loc_1, 16)
												loc_5 = rt_sub_i32(loc_5, 1)
												if loc_5 == 0 then
													desired = 8
													break
												end
												loc_3 = rt_add_i32(loc_3, 16)
												if loc_3 < loc_2 then
													continue
												end
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											desired = 8
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										rt_store_i32(memory_at_0, loc_4 + 12, rt_sub_i32(rt_load_i32(memory_at_0, loc_4 + 12), 4))
										desired = 7
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_8 = rt_sub_i32(loc_4, 24)
									while true do
										if rt_le_i32(loc_5, 0) then
											break
										end
										while true do
											loc_6 = bit_and(loc_5, 7)
											if loc_6 ~= 0 then
												while true do
													loc_3 = loc_5
													loc_2 = 0
													while true do
														rt_store_i32(memory_at_0, loc_1 + 12, 0)
														loc_1 = rt_add_i32(loc_1, 16)
														loc_3 = rt_sub_i32(loc_3, 1)
														loc_2 = rt_add_i32(loc_2, 1)
														if loc_6 ~= loc_2 then
															continue
														end
														break
													end
													if desired then
														break
													end
													desired = 9
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											loc_3 = loc_5
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										if loc_5 < 8 then
											break
										end
										while true do
											rt_store_i32(memory_at_0, loc_1 + 124, 0)
											rt_store_i32(memory_at_0, loc_1 + 108, 0)
											rt_store_i32(memory_at_0, loc_1 + 92, 0)
											rt_store_i32(memory_at_0, loc_1 + 76, 0)
											rt_store_i32(memory_at_0, loc_1 + 60, 0)
											rt_store_i32(memory_at_0, loc_1 + 44, 0)
											rt_store_i32(memory_at_0, loc_1 + 28, 0)
											rt_store_i32(memory_at_0, loc_1 + 12, 0)
											loc_1 = rt_add_i32(loc_1, 128)
											loc_5 = rt_sub_i32(loc_3, 9)
											loc_3 = rt_sub_i32(loc_3, 8)
											if loc_5 < 4294967294 then
												continue
											end
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									rt_store_i32(memory_at_0, loc_0 + 20, loc_8)
									loc_5 = rt_load_i32(memory_at_0, loc_8)
									rt_store_i32(memory_at_0, loc_0 + 12, loc_5)
									reg_0 = loc_0
									if loc_7 ~= 4294967295 then
										while true do
											reg_1 = rt_load_i32(memory_at_0, rt_sub_i32(loc_4, 16))
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									else
										while true do
											reg_1 = loc_1
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_1 = reg_1
									rt_store_i32(memory_at_0, reg_0 + 8, loc_1)
									loc_2 = 1
									if bit_and(rt_load_i32_u8(memory_at_0, loc_4 + 20), 1) ~= 0 then
										break
									end
									loc_3 = rt_load_i32(memory_at_0, rt_sub_i32(loc_4, 12))
									loc_13 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, rt_sub_i32(loc_4, 20)))
									loc_12 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_13 + 16) + 8)
									desired = 4
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								GLOBAL_LIST[0].value = rt_sub_i32(loc_15, 4294967232)
								desired = 0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_7 = rt_sub_i32(loc_9, 24)
							while true do
								if rt_le_i32(loc_2, 0) then
									break
								end
								while true do
									loc_6 = bit_and(loc_2, 7)
									if loc_6 ~= 0 then
										while true do
											loc_5 = loc_2
											loc_4 = 0
											while true do
												rt_store_i32(memory_at_0, loc_1 + 12, 0)
												loc_1 = rt_add_i32(loc_1, 16)
												loc_5 = rt_sub_i32(loc_5, 1)
												loc_4 = rt_add_i32(loc_4, 1)
												if loc_6 ~= loc_4 then
													continue
												end
												break
											end
											if desired then
												break
											end
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_5 = loc_2
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if loc_2 < 8 then
									break
								end
								while true do
									rt_store_i32(memory_at_0, loc_1 + 124, 0)
									rt_store_i32(memory_at_0, loc_1 + 108, 0)
									rt_store_i32(memory_at_0, loc_1 + 92, 0)
									rt_store_i32(memory_at_0, loc_1 + 76, 0)
									rt_store_i32(memory_at_0, loc_1 + 60, 0)
									rt_store_i32(memory_at_0, loc_1 + 44, 0)
									rt_store_i32(memory_at_0, loc_1 + 28, 0)
									rt_store_i32(memory_at_0, loc_1 + 12, 0)
									loc_1 = rt_add_i32(loc_1, 128)
									loc_2 = rt_sub_i32(loc_5, 9)
									loc_5 = rt_sub_i32(loc_5, 8)
									if loc_2 < 4294967294 then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							rt_store_i32(memory_at_0, loc_0 + 20, loc_7)
							loc_5 = rt_load_i32(memory_at_0, loc_7)
							rt_store_i32(memory_at_0, loc_0 + 12, loc_5)
							reg_0 = loc_0
							if loc_8 >= 16777216 then
								while true do
									reg_1 = rt_load_i32(memory_at_0, rt_sub_i32(loc_9, 16))
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							else
								while true do
									reg_1 = loc_1
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_1 = reg_1
							rt_store_i32(memory_at_0, reg_0 + 8, loc_1)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_2 = 1
						continue
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[67](loc_0, rt_add_i32(loc_3, 16), rt_load_i32(memory_at_0, loc_6))
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
		FUNC_LIST[59](loc_0, loc_1, 2341)
		error("out of code bounds")
	end
end
FUNC_LIST[580] = --[[ void luau_execute<false>(lua_State*) ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = 0
	local loc_22 = 0.0
	local loc_23 = 0.0
	local loc_24 = 0.0
	local loc_25 = 0.0
	local loc_26 = 0.0
	local reg_0
	local reg_1
	local reg_2
	local desired
	local br_map = {}
	while true do
		loc_14 = rt_add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_14
		while true do
			while true do
				while true do
					loc_1 = rt_load_i32(memory_at_0, loc_0 + 20)
					if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 20), 4) ~= 0 then
						while true do
							reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1748)](loc_0, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1 + 4)) + 16))
							if reg_0 == 0 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					while true do
						loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
						loc_3 = rt_load_i32(memory_at_0, loc_0 + 20)
						loc_1 = rt_load_i32(memory_at_0, loc_3 + 12)
						loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
						loc_12 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3 + 4))
						loc_11 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_12 + 16) + 8)
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		while true do
																			while true do
																				while true do
																					while true do
																						while true do
																							while true do
																								while true do
																									while true do
																										while true do
																											while true do
																												while true do
																													while true do
																														while true do
																															while true do
																																while true do
																																	while true do
																																		while true do
																																			while true do
																																				while true do
																																					while true do
																																						while true do
																																							while true do
																																								while true do
																																									while true do
																																										while true do
																																											while true do
																																												while true do
																																													while true do
																																														while true do
																																															while true do
																																																while true do
																																																	while true do
																																																		while true do
																																																			while true do
																																																				while true do
																																																					while true do
																																																						while true do
																																																							while true do
																																																								while true do
																																																									while true do
																																																										while true do
																																																											while true do
																																																												while true do
																																																													while true do
																																																														while true do
																																																															while true do
																																																																while true do
																																																																	while true do
																																																																		while true do
																																																																			while true do
																																																																				while true do
																																																																					while true do
																																																																						while true do
																																																																							while true do
																																																																								while true do
																																																																									while true do
																																																																										while true do
																																																																											while true do
																																																																												while true do
																																																																													while true do
																																																																														while true do
																																																																															while true do
																																																																																while true do
																																																																																	while true do
																																																																																		while true do
																																																																																			while true do
																																																																																				while true do
																																																																																					while true do
																																																																																						while true do
																																																																																							while true do
																																																																																								while true do
																																																																																									while true do
																																																																																										while true do
																																																																																											while true do
																																																																																												while true do
																																																																																													while true do
																																																																																														while true do
																																																																																															if not br_map[1] then
																																																																																																br_map[1] = (function()
																																																																																																	return { [0] = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 84, 83, 82, 81, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, }
																																																																																																end)()
																																																																																															end
																																																																																															temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_2, 2), 12368)), 2)] or 20
																																																																																															if temp < 41 then
																																																																																																if temp < 20 then
																																																																																																	if temp < 10 then
																																																																																																		if temp < 5 then
																																																																																																			if temp < 2 then
																																																																																																				if temp < 1 then
																																																																																																					break
																																																																																																				else
																																																																																																					desired = 92
																																																																																																					break
																																																																																																				end
																																																																																																			elseif temp > 2 then
																																																																																																				if temp < 4 then
																																																																																																					desired = 90
																																																																																																					break
																																																																																																				else
																																																																																																					desired = 89
																																																																																																					break
																																																																																																				end
																																																																																																			else
																																																																																																				desired = 91
																																																																																																				break
																																																																																																			end
																																																																																																		elseif temp > 5 then
																																																																																																			if temp < 8 then
																																																																																																				if temp < 7 then
																																																																																																					desired = 87
																																																																																																					break
																																																																																																				else
																																																																																																					desired = 86
																																																																																																					break
																																																																																																				end
																																																																																																			elseif temp > 8 then
																																																																																																				desired = 84
																																																																																																				break
																																																																																																			else
																																																																																																				desired = 85
																																																																																																				break
																																																																																																			end
																																																																																																		else
																																																																																																			desired = 88
																																																																																																			break
																																																																																																		end
																																																																																																	elseif temp > 10 then
																																																																																																		if temp < 15 then
																																																																																																			if temp < 13 then
																																																																																																				if temp < 12 then
																																																																																																					desired = 82
																																																																																																					break
																																																																																																				else
																																																																																																					desired = 81
																																																																																																					break
																																																																																																				end
																																																																																																			elseif temp > 13 then
																																																																																																				desired = 79
																																																																																																				break
																																																																																																			else
																																																																																																				desired = 80
																																																																																																				break
																																																																																																			end
																																																																																																		elseif temp > 15 then
																																																																																																			if temp < 18 then
																																																																																																				if temp < 17 then
																																																																																																					desired = 77
																																																																																																					break
																																																																																																				else
																																																																																																					desired = 76
																																																																																																					break
																																																																																																				end
																																																																																																			elseif temp > 18 then
																																																																																																				desired = 74
																																																																																																				break
																																																																																																			else
																																																																																																				desired = 75
																																																																																																				break
																																																																																																			end
																																																																																																		else
																																																																																																			desired = 78
																																																																																																			break
																																																																																																		end
																																																																																																	else
																																																																																																		desired = 83
																																																																																																		break
																																																																																																	end
																																																																																																elseif temp > 20 then
																																																																																																	if temp < 31 then
																																																																																																		if temp < 26 then
																																																																																																			if temp < 23 then
																																																																																																				if temp < 22 then
																																																																																																					desired = 72
																																																																																																					break
																																																																																																				else
																																																																																																					desired = 71
																																																																																																					break
																																																																																																				end
																																																																																																			elseif temp > 23 then
																																																																																																				if temp < 25 then
																																																																																																					desired = 69
																																																																																																					break
																																																																																																				else
																																																																																																					desired = 68
																																																																																																					break
																																																																																																				end
																																																																																																			else
																																																																																																				desired = 70
																																																																																																				break
																																																																																																			end
																																																																																																		elseif temp > 26 then
																																																																																																			if temp < 29 then
																																																																																																				if temp < 28 then
																																																																																																					desired = 66
																																																																																																					break
																																																																																																				else
																																																																																																					desired = 65
																																																																																																					break
																																																																																																				end
																																																																																																			elseif temp > 29 then
																																																																																																				desired = 63
																																																																																																				break
																																																																																																			else
																																																																																																				desired = 64
																																																																																																				break
																																																																																																			end
																																																																																																		else
																																																																																																			desired = 67
																																																																																																			break
																																																																																																		end
																																																																																																	elseif temp > 31 then
																																																																																																		if temp < 36 then
																																																																																																			if temp < 34 then
																																																																																																				if temp < 33 then
																																																																																																					desired = 61
																																																																																																					break
																																																																																																				else
																																																																																																					desired = 60
																																																																																																					break
																																																																																																				end
																																																																																																			elseif temp > 34 then
																																																																																																				desired = 58
																																																																																																				break
																																																																																																			else
																																																																																																				desired = 59
																																																																																																				break
																																																																																																			end
																																																																																																		elseif temp > 36 then
																																																																																																			if temp < 39 then
																																																																																																				if temp < 38 then
																																																																																																					desired = 56
																																																																																																					break
																																																																																																				else
																																																																																																					desired = 55
																																																																																																					break
																																																																																																				end
																																																																																																			elseif temp > 39 then
																																																																																																				desired = 53
																																																																																																				break
																																																																																																			else
																																																																																																				desired = 54
																																																																																																				break
																																																																																																			end
																																																																																																		else
																																																																																																			desired = 57
																																																																																																			break
																																																																																																		end
																																																																																																	else
																																																																																																		desired = 62
																																																																																																		break
																																																																																																	end
																																																																																																else
																																																																																																	desired = 73
																																																																																																	break
																																																																																																end
																																																																																															elseif temp > 41 then
																																																																																																if temp < 62 then
																																																																																																	if temp < 52 then
																																																																																																		if temp < 47 then
																																																																																																			if temp < 44 then
																																																																																																				if temp < 43 then
																																																																																																					desired = 51
																																																																																																					break
																																																																																																				else
																																																																																																					desired = 50
																																																																																																					break
																																																																																																				end
																																																																																																			elseif temp > 44 then
																																																																																																				if temp < 46 then
																																																																																																					desired = 48
																																																																																																					break
																																																																																																				else
																																																																																																					desired = 47
																																																																																																					break
																																																																																																				end
																																																																																																			else
																																																																																																				desired = 49
																																																																																																				break
																																																																																																			end
																																																																																																		elseif temp > 47 then
																																																																																																			if temp < 50 then
																																																																																																				if temp < 49 then
																																																																																																					desired = 45
																																																																																																					break
																																																																																																				else
																																																																																																					desired = 44
																																																																																																					break
																																																																																																				end
																																																																																																			elseif temp > 50 then
																																																																																																				desired = 42
																																																																																																				break
																																																																																																			else
																																																																																																				desired = 43
																																																																																																				break
																																																																																																			end
																																																																																																		else
																																																																																																			desired = 46
																																																																																																			break
																																																																																																		end
																																																																																																	elseif temp > 52 then
																																																																																																		if temp < 57 then
																																																																																																			if temp < 55 then
																																																																																																				if temp < 54 then
																																																																																																					desired = 40
																																																																																																					break
																																																																																																				else
																																																																																																					desired = 39
																																																																																																					break
																																																																																																				end
																																																																																																			elseif temp > 55 then
																																																																																																				desired = 37
																																																																																																				break
																																																																																																			else
																																																																																																				desired = 38
																																																																																																				break
																																																																																																			end
																																																																																																		elseif temp > 57 then
																																																																																																			if temp < 60 then
																																																																																																				if temp < 59 then
																																																																																																					desired = 35
																																																																																																					break
																																																																																																				else
																																																																																																					desired = 34
																																																																																																					break
																																																																																																				end
																																																																																																			elseif temp > 60 then
																																																																																																				desired = 32
																																																																																																				break
																																																																																																			else
																																																																																																				desired = 33
																																																																																																				break
																																																																																																			end
																																																																																																		else
																																																																																																			desired = 36
																																																																																																			break
																																																																																																		end
																																																																																																	else
																																																																																																		desired = 41
																																																																																																		break
																																																																																																	end
																																																																																																elseif temp > 62 then
																																																																																																	if temp < 73 then
																																																																																																		if temp < 68 then
																																																																																																			if temp < 65 then
																																																																																																				if temp < 64 then
																																																																																																					desired = 30
																																																																																																					break
																																																																																																				else
																																																																																																					desired = 29
																																																																																																					break
																																																																																																				end
																																																																																																			elseif temp > 65 then
																																																																																																				if temp < 67 then
																																																																																																					desired = 27
																																																																																																					break
																																																																																																				else
																																																																																																					desired = 26
																																																																																																					break
																																																																																																				end
																																																																																																			else
																																																																																																				desired = 28
																																																																																																				break
																																																																																																			end
																																																																																																		elseif temp > 68 then
																																																																																																			if temp < 71 then
																																																																																																				if temp < 70 then
																																																																																																					desired = 24
																																																																																																					break
																																																																																																				else
																																																																																																					desired = 23
																																																																																																					break
																																																																																																				end
																																																																																																			elseif temp > 71 then
																																																																																																				desired = 21
																																																																																																				break
																																																																																																			else
																																																																																																				desired = 22
																																																																																																				break
																																																																																																			end
																																																																																																		else
																																																																																																			desired = 25
																																																																																																			break
																																																																																																		end
																																																																																																	elseif temp > 73 then
																																																																																																		if temp < 78 then
																																																																																																			if temp < 76 then
																																																																																																				if temp < 75 then
																																																																																																					desired = 19
																																																																																																					break
																																																																																																				else
																																																																																																					desired = 18
																																																																																																					break
																																																																																																				end
																																																																																																			elseif temp > 76 then
																																																																																																				desired = 16
																																																																																																				break
																																																																																																			else
																																																																																																				desired = 17
																																																																																																				break
																																																																																																			end
																																																																																																		elseif temp > 78 then
																																																																																																			if temp < 83 then
																																																																																																				if temp < 82 then
																																																																																																					desired = 12
																																																																																																					break
																																																																																																				else
																																																																																																					desired = 11
																																																																																																					break
																																																																																																				end
																																																																																																			elseif temp > 83 then
																																																																																																				desired = 9
																																																																																																				break
																																																																																																			else
																																																																																																				desired = 10
																																																																																																				break
																																																																																																			end
																																																																																																		else
																																																																																																			desired = 15
																																																																																																			break
																																																																																																		end
																																																																																																	else
																																																																																																		desired = 20
																																																																																																		break
																																																																																																	end
																																																																																																else
																																																																																																	desired = 31
																																																																																																	break
																																																																																																end
																																																																																															else
																																																																																																desired = 52
																																																																																																break
																																																																																															end
																																																																																														end
																																																																																														if desired then
																																																																																															if desired == 92 then
																																																																																																desired = nil
																																																																																															end
																																																																																															break
																																																																																														end
																																																																																														rt_store_i32(memory_at_0, rt_add_i32(rt_shl_i32(rt_load_i32_u8(memory_at_0, loc_1 + 1), 4), loc_5) + 12, 0)
																																																																																														loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 4)
																																																																																														loc_1 = rt_add_i32(loc_1, 4)
																																																																																														desired = 5
																																																																																														break
																																																																																													end
																																																																																													if desired then
																																																																																														if desired == 91 then
																																																																																															desired = nil
																																																																																														end
																																																																																														break
																																																																																													end
																																																																																													loc_2 = rt_load_i32(memory_at_0, loc_1)
																																																																																													loc_3 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																																																																													rt_store_i32(memory_at_0, loc_3 + 12, 1)
																																																																																													rt_store_i32(memory_at_0, loc_3, bit_and(rt_shr_u32(loc_2, 16), 255))
																																																																																													loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 22), 1020), loc_1)
																																																																																													loc_1 = rt_add_i32(loc_2, 4)
																																																																																													loc_2 = rt_load_i32_u8(memory_at_0, loc_2 + 4)
																																																																																													desired = 5
																																																																																													break
																																																																																												end
																																																																																												if desired then
																																																																																													if desired == 90 then
																																																																																														desired = nil
																																																																																													end
																																																																																													break
																																																																																												end
																																																																																												loc_2 = rt_load_i32(memory_at_0, loc_1)
																																																																																												loc_3 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																																																																												rt_store_i32(memory_at_0, loc_3 + 12, 3)
																																																																																												rt_store_f64(memory_at_0, loc_3, rt_convert_f64_i32(rt_shr_i32(loc_2, 16)))
																																																																																												loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 4)
																																																																																												loc_1 = rt_add_i32(loc_1, 4)
																																																																																												desired = 5
																																																																																												break
																																																																																											end
																																																																																											if desired then
																																																																																												if desired == 89 then
																																																																																													desired = nil
																																																																																												end
																																																																																												break
																																																																																											end
																																																																																											loc_2 = rt_load_i32(memory_at_0, loc_1)
																																																																																											loc_3 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																																																																											loc_2 = rt_add_i32(rt_shl_i32(rt_shr_i32(loc_2, 16), 4), loc_11)
																																																																																											rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_2))
																																																																																											rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
																																																																																											loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 4)
																																																																																											loc_1 = rt_add_i32(loc_1, 4)
																																																																																											desired = 5
																																																																																											break
																																																																																										end
																																																																																										if desired then
																																																																																											if desired == 88 then
																																																																																												desired = nil
																																																																																											end
																																																																																											break
																																																																																										end
																																																																																										loc_2 = rt_load_i32(memory_at_0, loc_1)
																																																																																										loc_3 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																																																																										loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5)
																																																																																										rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_2))
																																																																																										rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
																																																																																										loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 4)
																																																																																										loc_1 = rt_add_i32(loc_1, 4)
																																																																																										desired = 5
																																																																																										break
																																																																																									end
																																																																																									if desired then
																																																																																										if desired == 87 then
																																																																																											desired = nil
																																																																																										end
																																																																																										break
																																																																																									end
																																																																																									loc_3 = rt_add_i32(loc_1, 8)
																																																																																									loc_7 = rt_add_i32(rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 4), 4), loc_11)
																																																																																									loc_2 = rt_load_i32(memory_at_0, loc_1)
																																																																																									loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																																																																									while true do
																																																																																										loc_6 = rt_load_i32(memory_at_0, loc_12 + 12)
																																																																																										loc_8 = bit_and(rt_load_i32_u8(memory_at_0, loc_6 + 7), rt_shr_u32(loc_2, 24))
																																																																																										loc_2 = rt_add_i32(rt_load_i32(memory_at_0, loc_6 + 24), rt_shl_i32(loc_8, 5))
																																																																																										if bit_and(rt_load_i32(memory_at_0, loc_2 + 28), 15) ~= 5 then
																																																																																											break
																																																																																										end
																																																																																										if rt_load_i32(memory_at_0, loc_2 + 16) ~= rt_load_i32(memory_at_0, loc_7) then
																																																																																											break
																																																																																										end
																																																																																										if rt_load_i32(memory_at_0, loc_2 + 12) == 0 then
																																																																																											break
																																																																																										end
																																																																																										rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_2))
																																																																																										rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
																																																																																										loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																																																																										loc_1 = loc_3
																																																																																										desired = 5
																																																																																										break
																																																																																									end
																																																																																									if desired then
																																																																																										if desired == 87 then
																																																																																											desired = nil
																																																																																										end
																																																																																										break
																																																																																									end
																																																																																									rt_store_i32(memory_at_0, loc_14 + 60, 6)
																																																																																									rt_store_i32(memory_at_0, loc_14 + 48, loc_6)
																																																																																									rt_store_i32(memory_at_0, loc_0 + 52, loc_8)
																																																																																									rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																																									FUNC_LIST[588](loc_0, rt_add_i32(loc_14, 48), loc_7, loc_4)
																																																																																									loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																																									rt_store_i32_n8(memory_at_0, loc_1 + 3, rt_load_i32_u8(memory_at_0, loc_0 + 52))
																																																																																									loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 8)
																																																																																									loc_1 = loc_3
																																																																																									desired = 5
																																																																																									break
																																																																																								end
																																																																																								if desired then
																																																																																									if desired == 86 then
																																																																																										desired = nil
																																																																																									end
																																																																																									break
																																																																																								end
																																																																																								loc_6 = rt_add_i32(loc_1, 8)
																																																																																								loc_7 = rt_add_i32(rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 4), 4), loc_11)
																																																																																								loc_2 = rt_load_i32(memory_at_0, loc_1)
																																																																																								loc_3 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																																																																								while true do
																																																																																									loc_4 = rt_load_i32(memory_at_0, loc_12 + 12)
																																																																																									loc_8 = bit_and(rt_load_i32_u8(memory_at_0, loc_4 + 7), rt_shr_u32(loc_2, 24))
																																																																																									loc_2 = rt_add_i32(rt_load_i32(memory_at_0, loc_4 + 24), rt_shl_i32(loc_8, 5))
																																																																																									if bit_and(rt_load_i32(memory_at_0, loc_2 + 28), 15) ~= 5 then
																																																																																										break
																																																																																									end
																																																																																									if rt_load_i32(memory_at_0, loc_2 + 16) ~= rt_load_i32(memory_at_0, loc_7) then
																																																																																										break
																																																																																									end
																																																																																									if rt_load_i32(memory_at_0, loc_2 + 12) == 0 then
																																																																																										break
																																																																																									end
																																																																																									if rt_load_i32_u8(memory_at_0, loc_4 + 4) ~= 0 then
																																																																																										break
																																																																																									end
																																																																																									rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_3))
																																																																																									rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
																																																																																									while true do
																																																																																										if rt_lt_i32(rt_load_i32(memory_at_0, loc_3 + 12), 5) then
																																																																																											break
																																																																																										end
																																																																																										if bit_and(rt_load_i32_u8(memory_at_0, loc_4 + 1), 4) == 0 then
																																																																																											break
																																																																																										end
																																																																																										loc_1 = rt_load_i32(memory_at_0, loc_3)
																																																																																										if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) == 0 then
																																																																																											break
																																																																																										end
																																																																																										FUNC_LIST[50](loc_0, loc_4, loc_1)
																																																																																										break
																																																																																									end
																																																																																									if desired then
																																																																																										if desired == 87 then
																																																																																											desired = nil
																																																																																										end
																																																																																										break
																																																																																									end
																																																																																									loc_2 = rt_load_i32_u8(memory_at_0, loc_6)
																																																																																									loc_1 = loc_6
																																																																																									desired = 5
																																																																																									break
																																																																																								end
																																																																																								if desired then
																																																																																									if desired == 86 then
																																																																																										desired = nil
																																																																																									end
																																																																																									break
																																																																																								end
																																																																																								rt_store_i32(memory_at_0, loc_14 + 44, 6)
																																																																																								rt_store_i32(memory_at_0, loc_14 + 32, loc_4)
																																																																																								rt_store_i32(memory_at_0, loc_0 + 52, loc_8)
																																																																																								rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_6)
																																																																																								FUNC_LIST[589](loc_0, rt_add_i32(loc_14, 32), loc_7, loc_3)
																																																																																								loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																																								rt_store_i32_n8(memory_at_0, loc_1 + 3, rt_load_i32_u8(memory_at_0, loc_0 + 52))
																																																																																								loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 8)
																																																																																								loc_1 = loc_6
																																																																																								desired = 5
																																																																																								break
																																																																																							end
																																																																																							if desired then
																																																																																								if desired == 85 then
																																																																																									desired = nil
																																																																																								end
																																																																																								break
																																																																																							end
																																																																																							loc_3 = rt_add_i32(loc_1, 4)
																																																																																							loc_1 = rt_load_i32(memory_at_0, loc_1)
																																																																																							loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																																																																																							loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 12), 4080), loc_12)
																																																																																							loc_20 = loc_4
																																																																																							loc_1 = rt_add_i32(loc_20, 24)
																																																																																							reg_0 = loc_2
																																																																																							if rt_load_i32(memory_at_0, loc_4 + 36) == 12 then
																																																																																								while true do
																																																																																									reg_1 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_20 + 24) + 4)
																																																																																									break
																																																																																								end
																																																																																								if desired then
																																																																																									if desired == 85 then
																																																																																										desired = nil
																																																																																									end
																																																																																									break
																																																																																								end
																																																																																							else
																																																																																								while true do
																																																																																									reg_1 = loc_1
																																																																																									break
																																																																																								end
																																																																																								if desired then
																																																																																									if desired == 85 then
																																																																																										desired = nil
																																																																																									end
																																																																																									break
																																																																																								end
																																																																																							end
																																																																																							loc_1 = reg_1
																																																																																							rt_store_i64(memory_at_0, reg_0, rt_load_i64(memory_at_0, loc_1))
																																																																																							rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
																																																																																							loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																																																																							loc_1 = loc_3
																																																																																							desired = 5
																																																																																							break
																																																																																						end
																																																																																						if desired then
																																																																																							if desired == 84 then
																																																																																								desired = nil
																																																																																							end
																																																																																							break
																																																																																						end
																																																																																						loc_2 = rt_load_i32(memory_at_0, loc_1)
																																																																																						loc_4 = rt_load_i32(memory_at_0, rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_12) + 24)
																																																																																						loc_3 = rt_load_i32(memory_at_0, loc_4 + 4)
																																																																																						loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																																																																						rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_2))
																																																																																						rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
																																																																																						while true do
																																																																																							if rt_lt_i32(rt_load_i32(memory_at_0, loc_2 + 12), 5) then
																																																																																								break
																																																																																							end
																																																																																							if bit_and(rt_load_i32_u8(memory_at_0, loc_4 + 1), 4) == 0 then
																																																																																								break
																																																																																							end
																																																																																							loc_2 = rt_load_i32(memory_at_0, loc_2)
																																																																																							if bit_and(rt_load_i32_u8(memory_at_0, loc_2 + 1), 3) == 0 then
																																																																																								break
																																																																																							end
																																																																																							FUNC_LIST[49](loc_0, loc_4, loc_2)
																																																																																							break
																																																																																						end
																																																																																						if desired then
																																																																																							if desired == 84 then
																																																																																								desired = nil
																																																																																							end
																																																																																							break
																																																																																						end
																																																																																						loc_1 = rt_add_i32(loc_1, 4)
																																																																																						loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																																																																																						desired = 5
																																																																																						break
																																																																																					end
																																																																																					if desired then
																																																																																						if desired == 83 then
																																																																																							desired = nil
																																																																																						end
																																																																																						break
																																																																																					end
																																																																																					while true do
																																																																																						loc_2 = rt_load_i32(memory_at_0, loc_0 + 60)
																																																																																						if loc_2 == 0 then
																																																																																							break
																																																																																						end
																																																																																						reg_0 = rt_load_i32(memory_at_0, loc_2 + 4)
																																																																																						loc_2 = rt_add_i32(rt_shl_i32(rt_load_i32_u8(memory_at_0, loc_1 + 1), 4), loc_5)
																																																																																						if reg_0 < loc_2 then
																																																																																							break
																																																																																						end
																																																																																						FUNC_LIST[19](loc_0, loc_2)
																																																																																						break
																																																																																					end
																																																																																					if desired then
																																																																																						if desired == 83 then
																																																																																							desired = nil
																																																																																						end
																																																																																						break
																																																																																					end
																																																																																					loc_1 = rt_add_i32(loc_1, 4)
																																																																																					loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																																																																																					desired = 5
																																																																																					break
																																																																																				end
																																																																																				if desired then
																																																																																					if desired == 82 then
																																																																																						desired = nil
																																																																																					end
																																																																																					break
																																																																																				end
																																																																																				loc_4 = rt_load_i32(memory_at_0, loc_1)
																																																																																				loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_4, 4), 4080), loc_5)
																																																																																				loc_3 = rt_load_i32(memory_at_0, loc_12 + 12)
																																																																																				while true do
																																																																																					loc_4 = rt_add_i32(rt_shl_i32(rt_shr_i32(loc_4, 16), 4), loc_11)
																																																																																					if rt_load_i32(memory_at_0, loc_4 + 12) == 0 then
																																																																																						break
																																																																																					end
																																																																																					if rt_load_i32_u8(memory_at_0, loc_3 + 5) == 0 then
																																																																																						break
																																																																																					end
																																																																																					rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_4))
																																																																																					rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
																																																																																					loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 8)
																																																																																					loc_1 = rt_add_i32(loc_1, 8)
																																																																																					desired = 5
																																																																																					break
																																																																																				end
																																																																																				if desired then
																																																																																					if desired == 82 then
																																																																																						desired = nil
																																																																																					end
																																																																																					break
																																																																																				end
																																																																																				loc_5 = rt_load_i32(memory_at_0, loc_1 + 4)
																																																																																				loc_4 = rt_add_i32(loc_1, 8)
																																																																																				rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_4)
																																																																																				FUNC_LIST[583](loc_0, loc_3, loc_11, loc_2, loc_5, 0)
																																																																																				loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 8)
																																																																																				loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																																				loc_1 = loc_4
																																																																																				desired = 5
																																																																																				break
																																																																																			end
																																																																																			if desired then
																																																																																				if desired == 81 then
																																																																																					desired = nil
																																																																																				end
																																																																																				break
																																																																																			end
																																																																																			loc_3 = rt_add_i32(loc_1, 8)
																																																																																			loc_8 = rt_add_i32(rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 4), 4), loc_11)
																																																																																			loc_2 = rt_load_i32(memory_at_0, loc_1)
																																																																																			loc_9 = bit_and(rt_shr_u32(loc_2, 8), 255)
																																																																																			loc_4 = rt_add_i32(rt_shl_i32(loc_9, 4), loc_5)
																																																																																			while true do
																																																																																				while true do
																																																																																					while true do
																																																																																						while true do
																																																																																							while true do
																																																																																								while true do
																																																																																									loc_6 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5)
																																																																																									loc_7 = rt_load_i32(memory_at_0, loc_6 + 12)
																																																																																									if loc_7 ~= 6 then
																																																																																										while true do
																																																																																											if loc_7 ~= 8 then
																																																																																												desired = 86
																																																																																												break
																																																																																											end
																																																																																											loc_7 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_6) + 8)
																																																																																											if loc_7 == 0 then
																																																																																												desired = 87
																																																																																												break
																																																																																											end
																																																																																											if bit_and(rt_load_i32_u8(memory_at_0, loc_7 + 3), 1) ~= 0 then
																																																																																												desired = 87
																																																																																												break
																																																																																											end
																																																																																											reg_0 = FUNC_LIST[460](loc_7, 0, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1528))
																																																																																											loc_7 = reg_0
																																																																																											if loc_7 == 0 then
																																																																																												desired = 87
																																																																																												break
																																																																																											end
																																																																																											if rt_load_i32(memory_at_0, loc_7 + 12) ~= 7 then
																																																																																												desired = 87
																																																																																												break
																																																																																											end
																																																																																											if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_7) + 3) == 0 then
																																																																																												desired = 87
																																																																																												break
																																																																																											end
																																																																																											loc_5 = rt_load_i32(memory_at_0, loc_0 + 8)
																																																																																											rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_7))
																																																																																											rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_7 + 8))
																																																																																											rt_store_i64(memory_at_0, loc_5 + 24, rt_load_i64(memory_at_0, loc_6 + 8))
																																																																																											rt_store_i64(memory_at_0, loc_5 + 16, rt_load_i64(memory_at_0, loc_6))
																																																																																											rt_store_i64(memory_at_0, loc_5 + 40, rt_load_i64(memory_at_0, loc_8 + 8))
																																																																																											rt_store_i64(memory_at_0, loc_5 + 32, rt_load_i64(memory_at_0, loc_8))
																																																																																											rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_5, 48))
																																																																																											rt_store_i32(memory_at_0, loc_0 + 52, rt_shr_u32(loc_2, 24))
																																																																																											rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																																											FUNC_LIST[607](loc_0, 2, loc_9)
																																																																																											desired = 83
																																																																																											break
																																																																																										end
																																																																																										if desired then
																																																																																											if desired == 87 then
																																																																																												desired = nil
																																																																																											end
																																																																																											break
																																																																																										end
																																																																																									end
																																																																																									while true do
																																																																																										loc_7 = rt_load_i32(memory_at_0, loc_6)
																																																																																										loc_9 = bit_and(rt_load_i32_u8(memory_at_0, loc_7 + 7), rt_shr_u32(loc_2, 24))
																																																																																										loc_2 = rt_add_i32(rt_load_i32(memory_at_0, loc_7 + 24), rt_shl_i32(loc_9, 5))
																																																																																										if bit_and(rt_load_i32(memory_at_0, loc_2 + 28), 15) ~= 5 then
																																																																																											break
																																																																																										end
																																																																																										if rt_load_i32(memory_at_0, loc_2 + 16) ~= rt_load_i32(memory_at_0, loc_8) then
																																																																																											break
																																																																																										end
																																																																																										if rt_load_i32(memory_at_0, loc_2 + 12) == 0 then
																																																																																											break
																																																																																										end
																																																																																										rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_2))
																																																																																										rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
																																																																																										desired = 85
																																																																																										break
																																																																																									end
																																																																																									if desired then
																																																																																										if desired == 87 then
																																																																																											desired = nil
																																																																																										end
																																																																																										break
																																																																																									end
																																																																																									if rt_load_i32(memory_at_0, loc_7 + 16) == 0 then
																																																																																										while true do
																																																																																											reg_0 = FUNC_LIST[426](loc_7, rt_load_i32(memory_at_0, loc_8))
																																																																																											loc_2 = reg_0
																																																																																											if loc_2 ~= 9344 then
																																																																																												while true do
																																																																																													rt_store_i32_n8(memory_at_0, loc_1 + 3, rt_shr_u32(rt_sub_i32(loc_2, rt_load_i32(memory_at_0, loc_7 + 24)), 5))
																																																																																													break
																																																																																												end
																																																																																												if desired then
																																																																																													break
																																																																																												end
																																																																																											end
																																																																																											rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_2))
																																																																																											rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
																																																																																											desired = 85
																																																																																											break
																																																																																										end
																																																																																										if desired then
																																																																																											if desired == 87 then
																																																																																												desired = nil
																																																																																											end
																																																																																											break
																																																																																										end
																																																																																									end
																																																																																									rt_store_i32(memory_at_0, loc_0 + 52, loc_9)
																																																																																									rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																																									FUNC_LIST[588](loc_0, loc_6, loc_8, loc_4)
																																																																																									desired = 83
																																																																																									break
																																																																																								end
																																																																																								if desired then
																																																																																									if desired == 86 then
																																																																																										desired = nil
																																																																																									end
																																																																																									break
																																																																																								end
																																																																																								loc_7 = rt_load_i32(memory_at_0, loc_6 + 12)
																																																																																								break
																																																																																							end
																																																																																							if desired then
																																																																																								if desired == 85 then
																																																																																									desired = nil
																																																																																								end
																																																																																								break
																																																																																							end
																																																																																							if loc_7 ~= 4 then
																																																																																								desired = 82
																																																																																								break
																																																																																							end
																																																																																							loc_7 = rt_load_i32(memory_at_0, loc_8)
																																																																																							loc_10 = rt_sub_i32(bit_or(rt_load_i32_i8(memory_at_0, loc_7 + 20), 32), 120)
																																																																																							if loc_10 > 2 then
																																																																																								desired = 84
																																																																																								break
																																																																																							end
																																																																																							if rt_load_i32_u8(memory_at_0, loc_7 + 21) ~= 0 then
																																																																																								desired = 84
																																																																																								break
																																																																																							end
																																																																																							loc_25 = rt_load_f32(memory_at_0, rt_add_i32(rt_shl_i32(loc_10, 2), loc_6))
																																																																																							rt_store_i32(memory_at_0, loc_4 + 12, 3)
																																																																																							rt_store_f64(memory_at_0, loc_4, no_op(loc_25))
																																																																																							break
																																																																																						end
																																																																																						if desired then
																																																																																							if desired == 84 then
																																																																																								desired = nil
																																																																																							end
																																																																																							break
																																																																																						end
																																																																																						loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																																																																						loc_1 = loc_3
																																																																																						desired = 5
																																																																																						break
																																																																																					end
																																																																																					if desired then
																																																																																						if desired == 83 then
																																																																																							desired = nil
																																																																																						end
																																																																																						break
																																																																																					end
																																																																																					loc_7 = rt_load_i32(memory_at_0, loc_0 + 16)
																																																																																					loc_5 = rt_load_i32(memory_at_0, loc_7 + 1456)
																																																																																					if loc_5 == 0 then
																																																																																						desired = 82
																																																																																						break
																																																																																					end
																																																																																					if bit_and(rt_load_i32_u8(memory_at_0, loc_5 + 3), 1) ~= 0 then
																																																																																						desired = 82
																																																																																						break
																																																																																					end
																																																																																					reg_0 = FUNC_LIST[460](loc_5, 0, rt_load_i32(memory_at_0, loc_7 + 1528))
																																																																																					loc_5 = reg_0
																																																																																					if loc_5 == 0 then
																																																																																						desired = 82
																																																																																						break
																																																																																					end
																																																																																					if rt_load_i32(memory_at_0, loc_5 + 12) ~= 7 then
																																																																																						desired = 82
																																																																																						break
																																																																																					end
																																																																																					if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_5) + 3) == 0 then
																																																																																						desired = 82
																																																																																						break
																																																																																					end
																																																																																					loc_4 = rt_load_i32(memory_at_0, loc_0 + 8)
																																																																																					rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_5))
																																																																																					rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
																																																																																					rt_store_i64(memory_at_0, loc_4 + 24, rt_load_i64(memory_at_0, loc_6 + 8))
																																																																																					rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_6))
																																																																																					rt_store_i64(memory_at_0, loc_4 + 40, rt_load_i64(memory_at_0, loc_8 + 8))
																																																																																					rt_store_i64(memory_at_0, loc_4 + 32, rt_load_i64(memory_at_0, loc_8))
																																																																																					rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_4, 48))
																																																																																					rt_store_i32(memory_at_0, loc_0 + 52, rt_shr_u32(loc_2, 24))
																																																																																					rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																																					FUNC_LIST[607](loc_0, 2, loc_9)
																																																																																					break
																																																																																				end
																																																																																				if desired then
																																																																																					if desired == 82 then
																																																																																						desired = nil
																																																																																					end
																																																																																					break
																																																																																				end
																																																																																				loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																																				rt_store_i32_n8(memory_at_0, loc_1 + 3, rt_load_i32_u8(memory_at_0, loc_0 + 52))
																																																																																				loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 8)
																																																																																				loc_1 = loc_3
																																																																																				desired = 5
																																																																																				break
																																																																																			end
																																																																																			if desired then
																																																																																				if desired == 81 then
																																																																																					desired = nil
																																																																																				end
																																																																																				break
																																																																																			end
																																																																																			rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																																			FUNC_LIST[588](loc_0, loc_6, loc_8, loc_4)
																																																																																			loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																																																																			loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																																			loc_1 = loc_3
																																																																																			desired = 5
																																																																																			break
																																																																																		end
																																																																																		if desired then
																																																																																			if desired == 80 then
																																																																																				desired = nil
																																																																																			end
																																																																																			break
																																																																																		end
																																																																																		loc_6 = rt_add_i32(loc_1, 8)
																																																																																		loc_8 = rt_add_i32(rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 4), 4), loc_11)
																																																																																		loc_2 = rt_load_i32(memory_at_0, loc_1)
																																																																																		loc_3 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																																																																		while true do
																																																																																			while true do
																																																																																				loc_7 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5)
																																																																																				loc_4 = rt_load_i32(memory_at_0, loc_7 + 12)
																																																																																				if loc_4 ~= 6 then
																																																																																					while true do
																																																																																						if loc_4 ~= 8 then
																																																																																							desired = 81
																																																																																							break
																																																																																						end
																																																																																						loc_5 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_7) + 8)
																																																																																						if loc_5 == 0 then
																																																																																							desired = 81
																																																																																							break
																																																																																						end
																																																																																						if bit_and(rt_load_i32_u8(memory_at_0, loc_5 + 3), 2) ~= 0 then
																																																																																							desired = 81
																																																																																							break
																																																																																						end
																																																																																						reg_0 = FUNC_LIST[460](loc_5, 1, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1532))
																																																																																						loc_5 = reg_0
																																																																																						if loc_5 == 0 then
																																																																																							desired = 81
																																																																																							break
																																																																																						end
																																																																																						if rt_load_i32(memory_at_0, loc_5 + 12) ~= 7 then
																																																																																							desired = 81
																																																																																							break
																																																																																						end
																																																																																						if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_5) + 3) == 0 then
																																																																																							desired = 81
																																																																																							break
																																																																																						end
																																																																																						loc_4 = rt_load_i32(memory_at_0, loc_0 + 8)
																																																																																						rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_5))
																																																																																						rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
																																																																																						rt_store_i64(memory_at_0, loc_4 + 24, rt_load_i64(memory_at_0, loc_7 + 8))
																																																																																						rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_7))
																																																																																						rt_store_i64(memory_at_0, loc_4 + 40, rt_load_i64(memory_at_0, loc_8 + 8))
																																																																																						rt_store_i64(memory_at_0, loc_4 + 32, rt_load_i64(memory_at_0, loc_8))
																																																																																						rt_store_i64(memory_at_0, loc_4 + 56, rt_load_i64(memory_at_0, loc_3 + 8))
																																																																																						rt_store_i64(memory_at_0, loc_4 + 48, rt_load_i64(memory_at_0, loc_3))
																																																																																						rt_store_i32(memory_at_0, loc_0 + 8, rt_sub_i32(loc_4, 4294967232))
																																																																																						rt_store_i32(memory_at_0, loc_0 + 52, rt_shr_u32(loc_2, 24))
																																																																																						rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_6)
																																																																																						FUNC_LIST[607](loc_0, 3, 4294967295)
																																																																																						desired = 82
																																																																																						break
																																																																																					end
																																																																																					if desired then
																																																																																						if desired == 82 then
																																																																																							desired = nil
																																																																																						end
																																																																																						break
																																																																																					end
																																																																																				end
																																																																																				while true do
																																																																																					while true do
																																																																																						while true do
																																																																																							loc_4 = rt_load_i32(memory_at_0, loc_7)
																																																																																							loc_9 = bit_and(rt_load_i32_u8(memory_at_0, loc_4 + 7), rt_shr_u32(loc_2, 24))
																																																																																							loc_2 = rt_add_i32(rt_load_i32(memory_at_0, loc_4 + 24), rt_shl_i32(loc_9, 5))
																																																																																							if bit_and(rt_load_i32(memory_at_0, loc_2 + 28), 15) ~= 5 then
																																																																																								break
																																																																																							end
																																																																																							if rt_load_i32(memory_at_0, loc_2 + 16) ~= rt_load_i32(memory_at_0, loc_8) then
																																																																																								break
																																																																																							end
																																																																																							if rt_load_i32(memory_at_0, loc_2 + 12) == 0 then
																																																																																								break
																																																																																							end
																																																																																							if rt_load_i32_u8(memory_at_0, loc_4 + 4) ~= 0 then
																																																																																								break
																																																																																							end
																																																																																							rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_3))
																																																																																							rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
																																																																																							if rt_lt_i32(rt_load_i32(memory_at_0, loc_3 + 12), 5) then
																																																																																								desired = 84
																																																																																								break
																																																																																							end
																																																																																							if bit_and(rt_load_i32_u8(memory_at_0, loc_4 + 1), 4) == 0 then
																																																																																								desired = 84
																																																																																								break
																																																																																							end
																																																																																							loc_1 = rt_load_i32(memory_at_0, loc_3)
																																																																																							if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) == 0 then
																																																																																								desired = 84
																																																																																								break
																																																																																							end
																																																																																							FUNC_LIST[50](loc_0, loc_4, loc_1)
																																																																																							desired = 84
																																																																																							break
																																																																																						end
																																																																																						if desired then
																																																																																							if desired == 84 then
																																																																																								desired = nil
																																																																																							end
																																																																																							break
																																																																																						end
																																																																																						loc_2 = rt_load_i32(memory_at_0, loc_4 + 16)
																																																																																						if loc_2 ~= 0 then
																																																																																							while true do
																																																																																								if bit_and(rt_load_i32_u8(memory_at_0, loc_2 + 3), 2) == 0 then
																																																																																									desired = 83
																																																																																									break
																																																																																								end
																																																																																								break
																																																																																							end
																																																																																							if desired then
																																																																																								if desired == 84 then
																																																																																									desired = nil
																																																																																								end
																																																																																								break
																																																																																							end
																																																																																						end
																																																																																						if rt_load_i32_u8(memory_at_0, loc_4 + 4) ~= 0 then
																																																																																							desired = 83
																																																																																							break
																																																																																						end
																																																																																						rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_6)
																																																																																						reg_1 = FUNC_LIST[432](loc_0, loc_4, rt_load_i32(memory_at_0, loc_8))
																																																																																						reg_0 = loc_1
																																																																																						loc_1 = reg_1
																																																																																						rt_store_i32_n8(memory_at_0, reg_0 + 3, rt_shr_u32(rt_sub_i32(loc_1, rt_load_i32(memory_at_0, loc_4 + 24)), 5))
																																																																																						rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
																																																																																						rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_3))
																																																																																						if rt_lt_i32(rt_load_i32(memory_at_0, loc_3 + 12), 5) then
																																																																																							break
																																																																																						end
																																																																																						if bit_and(rt_load_i32_u8(memory_at_0, loc_4 + 1), 4) == 0 then
																																																																																							break
																																																																																						end
																																																																																						loc_1 = rt_load_i32(memory_at_0, loc_3)
																																																																																						if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) == 0 then
																																																																																							break
																																																																																						end
																																																																																						FUNC_LIST[50](loc_0, loc_4, loc_1)
																																																																																						break
																																																																																					end
																																																																																					if desired then
																																																																																						if desired == 83 then
																																																																																							desired = nil
																																																																																						end
																																																																																						break
																																																																																					end
																																																																																					loc_2 = rt_load_i32_u8(memory_at_0, loc_6)
																																																																																					loc_1 = loc_6
																																																																																					desired = 5
																																																																																					break
																																																																																				end
																																																																																				if desired then
																																																																																					if desired == 82 then
																																																																																						desired = nil
																																																																																					end
																																																																																					break
																																																																																				end
																																																																																				rt_store_i32(memory_at_0, loc_0 + 52, loc_9)
																																																																																				rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_6)
																																																																																				FUNC_LIST[589](loc_0, loc_7, loc_8, loc_3)
																																																																																				break
																																																																																			end
																																																																																			if desired then
																																																																																				if desired == 81 then
																																																																																					desired = nil
																																																																																				end
																																																																																				break
																																																																																			end
																																																																																			loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																																			rt_store_i32_n8(memory_at_0, loc_1 + 3, rt_load_i32_u8(memory_at_0, loc_0 + 52))
																																																																																			loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 8)
																																																																																			loc_1 = loc_6
																																																																																			desired = 5
																																																																																			break
																																																																																		end
																																																																																		if desired then
																																																																																			if desired == 80 then
																																																																																				desired = nil
																																																																																			end
																																																																																			break
																																																																																		end
																																																																																		rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_6)
																																																																																		FUNC_LIST[589](loc_0, loc_7, loc_8, loc_3)
																																																																																		loc_2 = rt_load_i32_u8(memory_at_0, loc_6)
																																																																																		loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																																		loc_1 = loc_6
																																																																																		desired = 5
																																																																																		break
																																																																																	end
																																																																																	if desired then
																																																																																		if desired == 79 then
																																																																																			desired = nil
																																																																																		end
																																																																																		break
																																																																																	end
																																																																																	loc_3 = rt_add_i32(loc_1, 4)
																																																																																	loc_1 = rt_load_i32(memory_at_0, loc_1)
																																																																																	loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 20), 4080), loc_5)
																																																																																	loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																																																																																	while true do
																																																																																		loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 12), 4080), loc_5)
																																																																																		if rt_load_i32(memory_at_0, loc_1 + 12) ~= 6 then
																																																																																			break
																																																																																		end
																																																																																		if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
																																																																																			break
																																																																																		end
																																																																																		while true do
																																																																																			loc_22 = rt_load_f64(memory_at_0, loc_2)
																																																																																			if math_abs(loc_22) < 2.147483648e9 then
																																																																																				while true do
																																																																																					reg_0 = rt_truncate_f64(loc_22)
																																																																																					desired = 81
																																																																																					break
																																																																																				end
																																																																																				if desired then
																																																																																					if desired == 81 then
																																																																																						desired = nil
																																																																																					end
																																																																																					break
																																																																																				end
																																																																																			end
																																																																																			reg_0 = 2147483648
																																																																																			break
																																																																																		end
																																																																																		if desired then
																																																																																			if desired == 80 then
																																																																																				desired = nil
																																																																																			end
																																																																																			break
																																																																																		end
																																																																																		loc_6 = reg_0
																																																																																		loc_8 = rt_sub_i32(loc_6, 1)
																																																																																		loc_7 = rt_load_i32(memory_at_0, loc_1)
																																																																																		if loc_8 >= rt_load_i32(memory_at_0, loc_7 + 8) then
																																																																																			break
																																																																																		end
																																																																																		if rt_convert_f64_i32(loc_6) ~= loc_22 then
																																																																																			break
																																																																																		end
																																																																																		if rt_load_i32(memory_at_0, loc_7 + 16) ~= 0 then
																																																																																			break
																																																																																		end
																																																																																		loc_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_7 + 20), rt_shl_i32(loc_8, 4))
																																																																																		rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_1))
																																																																																		rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
																																																																																		loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																																																																		loc_1 = loc_3
																																																																																		desired = 5
																																																																																		break
																																																																																	end
																																																																																	if desired then
																																																																																		if desired == 79 then
																																																																																			desired = nil
																																																																																		end
																																																																																		break
																																																																																	end
																																																																																	rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																																	FUNC_LIST[588](loc_0, loc_1, loc_2, loc_4)
																																																																																	loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																																																																	loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																																	loc_1 = loc_3
																																																																																	desired = 5
																																																																																	break
																																																																																end
																																																																																if desired then
																																																																																	if desired == 78 then
																																																																																		desired = nil
																																																																																	end
																																																																																	break
																																																																																end
																																																																																loc_3 = rt_add_i32(loc_1, 4)
																																																																																loc_1 = rt_load_i32(memory_at_0, loc_1)
																																																																																loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 20), 4080), loc_5)
																																																																																loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																																																																																while true do
																																																																																	loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 12), 4080), loc_5)
																																																																																	if rt_load_i32(memory_at_0, loc_1 + 12) ~= 6 then
																																																																																		break
																																																																																	end
																																																																																	if rt_load_i32(memory_at_0, loc_4 + 12) ~= 3 then
																																																																																		break
																																																																																	end
																																																																																	while true do
																																																																																		loc_22 = rt_load_f64(memory_at_0, loc_4)
																																																																																		if math_abs(loc_22) < 2.147483648e9 then
																																																																																			while true do
																																																																																				reg_0 = rt_truncate_f64(loc_22)
																																																																																				desired = 80
																																																																																				break
																																																																																			end
																																																																																			if desired then
																																																																																				if desired == 80 then
																																																																																					desired = nil
																																																																																				end
																																																																																				break
																																																																																			end
																																																																																		end
																																																																																		reg_0 = 2147483648
																																																																																		break
																																																																																	end
																																																																																	if desired then
																																																																																		if desired == 79 then
																																																																																			desired = nil
																																																																																		end
																																																																																		break
																																																																																	end
																																																																																	loc_7 = reg_0
																																																																																	loc_8 = rt_sub_i32(loc_7, 1)
																																																																																	loc_6 = rt_load_i32(memory_at_0, loc_1)
																																																																																	if loc_8 >= rt_load_i32(memory_at_0, loc_6 + 8) then
																																																																																		break
																																																																																	end
																																																																																	if rt_load_i32(memory_at_0, loc_6 + 16) ~= 0 then
																																																																																		break
																																																																																	end
																																																																																	if rt_convert_f64_i32(loc_7) ~= loc_22 then
																																																																																		break
																																																																																	end
																																																																																	if rt_load_i32_u8(memory_at_0, loc_6 + 4) ~= 0 then
																																																																																		break
																																																																																	end
																																																																																	loc_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_6 + 20), rt_shl_i32(loc_8, 4))
																																																																																	rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_2))
																																																																																	rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
																																																																																	while true do
																																																																																		if rt_lt_i32(rt_load_i32(memory_at_0, loc_2 + 12), 5) then
																																																																																			break
																																																																																		end
																																																																																		if bit_and(rt_load_i32_u8(memory_at_0, loc_6 + 1), 4) == 0 then
																																																																																			break
																																																																																		end
																																																																																		loc_1 = rt_load_i32(memory_at_0, loc_2)
																																																																																		if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) == 0 then
																																																																																			break
																																																																																		end
																																																																																		FUNC_LIST[50](loc_0, loc_6, loc_1)
																																																																																		break
																																																																																	end
																																																																																	if desired then
																																																																																		if desired == 79 then
																																																																																			desired = nil
																																																																																		end
																																																																																		break
																																																																																	end
																																																																																	loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																																																																	loc_1 = loc_3
																																																																																	desired = 5
																																																																																	break
																																																																																end
																																																																																if desired then
																																																																																	if desired == 78 then
																																																																																		desired = nil
																																																																																	end
																																																																																	break
																																																																																end
																																																																																rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																																FUNC_LIST[589](loc_0, loc_1, loc_4, loc_2)
																																																																																loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																																																																loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																																loc_1 = loc_3
																																																																																desired = 5
																																																																																break
																																																																															end
																																																																															if desired then
																																																																																if desired == 77 then
																																																																																	desired = nil
																																																																																end
																																																																																break
																																																																															end
																																																																															loc_3 = rt_add_i32(loc_1, 4)
																																																																															loc_1 = rt_load_i32(memory_at_0, loc_1)
																																																																															loc_2 = rt_shr_u32(loc_1, 24)
																																																																															loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																																																																															while true do
																																																																																loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 12), 4080), loc_5)
																																																																																if rt_load_i32(memory_at_0, loc_1 + 12) ~= 6 then
																																																																																	break
																																																																																end
																																																																																loc_6 = rt_load_i32(memory_at_0, loc_1)
																																																																																if rt_load_i32(memory_at_0, loc_6 + 8) <= loc_2 then
																																																																																	break
																																																																																end
																																																																																if rt_load_i32(memory_at_0, loc_6 + 16) ~= 0 then
																																																																																	break
																																																																																end
																																																																																loc_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_6 + 20), rt_shl_i32(loc_2, 4))
																																																																																rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_1))
																																																																																rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
																																																																																loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																																																																loc_1 = loc_3
																																																																																desired = 5
																																																																																break
																																																																															end
																																																																															if desired then
																																																																																if desired == 77 then
																																																																																	desired = nil
																																																																																end
																																																																																break
																																																																															end
																																																																															rt_store_i32(memory_at_0, loc_14 + 28, 3)
																																																																															rt_store_f64(memory_at_0, loc_14 + 16, no_op(rt_add_i32(loc_2, 1)))
																																																																															rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																															FUNC_LIST[588](loc_0, loc_1, rt_add_i32(loc_14, 16), loc_4)
																																																																															loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																																																															loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																															loc_1 = loc_3
																																																																															desired = 5
																																																																															break
																																																																														end
																																																																														if desired then
																																																																															if desired == 76 then
																																																																																desired = nil
																																																																															end
																																																																															break
																																																																														end
																																																																														loc_3 = rt_add_i32(loc_1, 4)
																																																																														loc_2 = rt_load_i32(memory_at_0, loc_1)
																																																																														loc_4 = rt_shr_u32(loc_2, 24)
																																																																														loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																																																														while true do
																																																																															loc_6 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5)
																																																																															if rt_load_i32(memory_at_0, loc_6 + 12) ~= 6 then
																																																																																break
																																																																															end
																																																																															loc_2 = rt_load_i32(memory_at_0, loc_6)
																																																																															if rt_load_i32(memory_at_0, loc_2 + 8) <= loc_4 then
																																																																																break
																																																																															end
																																																																															if rt_load_i32(memory_at_0, loc_2 + 16) ~= 0 then
																																																																																break
																																																																															end
																																																																															if rt_load_i32_u8(memory_at_0, loc_2 + 4) ~= 0 then
																																																																																break
																																																																															end
																																																																															loc_4 = rt_add_i32(rt_load_i32(memory_at_0, loc_2 + 20), rt_shl_i32(loc_4, 4))
																																																																															rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_1))
																																																																															rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
																																																																															while true do
																																																																																if rt_lt_i32(rt_load_i32(memory_at_0, loc_1 + 12), 5) then
																																																																																	break
																																																																																end
																																																																																if bit_and(rt_load_i32_u8(memory_at_0, loc_2 + 1), 4) == 0 then
																																																																																	break
																																																																																end
																																																																																loc_1 = rt_load_i32(memory_at_0, loc_1)
																																																																																if bit_and(rt_load_i32_u8(memory_at_0, loc_1 + 1), 3) == 0 then
																																																																																	break
																																																																																end
																																																																																FUNC_LIST[50](loc_0, loc_2, loc_1)
																																																																																break
																																																																															end
																																																																															if desired then
																																																																																if desired == 77 then
																																																																																	desired = nil
																																																																																end
																																																																																break
																																																																															end
																																																																															loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																																																															loc_1 = loc_3
																																																																															desired = 5
																																																																															break
																																																																														end
																																																																														if desired then
																																																																															if desired == 76 then
																																																																																desired = nil
																																																																															end
																																																																															break
																																																																														end
																																																																														rt_store_i32(memory_at_0, loc_14 + 12, 3)
																																																																														rt_store_f64(memory_at_0, loc_14, no_op(rt_add_i32(loc_4, 1)))
																																																																														rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																														FUNC_LIST[589](loc_0, loc_6, loc_14, loc_1)
																																																																														loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																																																														loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																														loc_1 = loc_3
																																																																														desired = 5
																																																																														break
																																																																													end
																																																																													if desired then
																																																																														if desired == 75 then
																																																																															desired = nil
																																																																														end
																																																																														break
																																																																													end
																																																																													loc_3 = rt_load_i32(memory_at_0, loc_1)
																																																																													loc_4 = rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_12 + 16) + 16), rt_shl_i32(rt_shr_i32(loc_3, 16), 2)))
																																																																													loc_1 = rt_add_i32(loc_1, 4)
																																																																													rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_1)
																																																																													reg_0 = FUNC_LIST[15](loc_0, rt_load_i32_u8(memory_at_0, loc_4 + 3), rt_load_i32(memory_at_0, loc_12 + 12), loc_4)
																																																																													loc_2 = reg_0
																																																																													loc_3 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 4), 4080), loc_5)
																																																																													rt_store_i32(memory_at_0, loc_3 + 12, 7)
																																																																													rt_store_i32(memory_at_0, loc_3, loc_2)
																																																																													if rt_load_i32_u8(memory_at_0, loc_4 + 3) ~= 0 then
																																																																														while true do
																																																																															loc_6 = rt_add_i32(loc_2, 24)
																																																																															loc_8 = rt_add_i32(loc_12, 24)
																																																																															loc_2 = 0
																																																																															while true do
																																																																																while true do
																																																																																	while true do
																																																																																		while true do
																																																																																			while true do
																																																																																				loc_3 = rt_load_i32(memory_at_0, loc_1)
																																																																																				if not br_map[2] then
																																																																																					br_map[2] = (function()
																																																																																						return { [0] = 1, 2, }
																																																																																					end)()
																																																																																				end
																																																																																				temp = br_map[2][rt_sub_i32(bit_and(rt_shr_u32(loc_3, 8), 255), 1)] or 0
																																																																																				if temp < 1 then
																																																																																					break
																																																																																				elseif temp > 1 then
																																																																																					desired = 79
																																																																																					break
																																																																																				else
																																																																																					desired = 80
																																																																																					break
																																																																																				end
																																																																																			end
																																																																																			if desired then
																																																																																				if desired == 80 then
																																																																																					desired = nil
																																																																																				end
																																																																																				break
																																																																																			end
																																																																																			loc_7 = rt_add_i32(rt_shl_i32(loc_2, 4), loc_6)
																																																																																			loc_3 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 12), 4080), loc_5)
																																																																																			rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_3))
																																																																																			rt_store_i64(memory_at_0, loc_7 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
																																																																																			desired = 78
																																																																																			break
																																																																																		end
																																																																																		if desired then
																																																																																			if desired == 79 then
																																																																																				desired = nil
																																																																																			end
																																																																																			break
																																																																																		end
																																																																																		reg_0 = FUNC_LIST[17](loc_0, rt_add_i32(bit_and(rt_shr_u32(loc_3, 12), 4080), loc_5))
																																																																																		loc_3 = reg_0
																																																																																		loc_7 = rt_add_i32(rt_shl_i32(loc_2, 4), loc_6)
																																																																																		rt_store_i32(memory_at_0, loc_7 + 12, 12)
																																																																																		rt_store_i32(memory_at_0, loc_7, loc_3)
																																																																																		desired = 78
																																																																																		break
																																																																																	end
																																																																																	if desired then
																																																																																		if desired == 78 then
																																																																																			desired = nil
																																																																																		end
																																																																																		break
																																																																																	end
																																																																																	loc_7 = rt_add_i32(rt_shl_i32(loc_2, 4), loc_6)
																																																																																	loc_3 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 12), 4080), loc_8)
																																																																																	rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_3))
																																																																																	rt_store_i64(memory_at_0, loc_7 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
																																																																																	break
																																																																																end
																																																																																if desired then
																																																																																	if desired == 77 then
																																																																																		desired = nil
																																																																																		continue
																																																																																	end
																																																																																	break
																																																																																end
																																																																																loc_1 = rt_add_i32(loc_1, 4)
																																																																																loc_2 = rt_add_i32(loc_2, 1)
																																																																																if loc_2 < rt_load_i32_u8(memory_at_0, loc_4 + 3) then
																																																																																	continue
																																																																																end
																																																																																break
																																																																															end
																																																																															if desired then
																																																																																break
																																																																															end
																																																																															break
																																																																														end
																																																																														if desired then
																																																																															if desired == 75 then
																																																																																desired = nil
																																																																															end
																																																																															break
																																																																														end
																																																																													end
																																																																													rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_1)
																																																																													loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
																																																																													if rt_load_i32(memory_at_0, loc_2 + 40) < rt_load_i32(memory_at_0, loc_2 + 36) then
																																																																														desired = 14
																																																																														break
																																																																													end
																																																																													reg_0 = FUNC_LIST[42](loc_0, 1)
																																																																													desired = 14
																																																																													break
																																																																												end
																																																																												if desired then
																																																																													if desired == 74 then
																																																																														desired = nil
																																																																													end
																																																																													break
																																																																												end
																																																																												loc_7 = rt_add_i32(loc_1, 8)
																																																																												loc_6 = rt_add_i32(rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 4), 4), loc_11)
																																																																												loc_4 = rt_load_i32(memory_at_0, loc_1)
																																																																												loc_13 = bit_and(rt_shr_u32(loc_4, 8), 255)
																																																																												loc_3 = rt_add_i32(rt_shl_i32(loc_13, 4), loc_5)
																																																																												while true do
																																																																													while true do
																																																																														while true do
																																																																															while true do
																																																																																while true do
																																																																																	loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_4, 12), 4080), loc_5)
																																																																																	loc_8 = rt_load_i32(memory_at_0, loc_2 + 12)
																																																																																	if loc_8 ~= 6 then
																																																																																		while true do
																																																																																			if loc_8 ~= 8 then
																																																																																				desired = 79
																																																																																				break
																																																																																			end
																																																																																			reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_2), 8)
																																																																																			desired = 78
																																																																																			break
																																																																																		end
																																																																																		if desired then
																																																																																			if desired == 79 then
																																																																																				desired = nil
																																																																																			end
																																																																																			break
																																																																																		end
																																																																																	end
																																																																																	while true do
																																																																																		loc_8 = rt_load_i32(memory_at_0, loc_2)
																																																																																		loc_15 = rt_load_i32(memory_at_0, loc_6)
																																																																																		loc_9 = rt_add_i32(rt_load_i32(memory_at_0, loc_8 + 24), rt_shl_i32(bit_and(rt_load_i32(memory_at_0, loc_15 + 12), bit_xor(rt_shl_i32(4294967295, rt_load_i32_u8(memory_at_0, loc_8 + 6)), 4294967295)), 5))
																																																																																		loc_10 = rt_load_i32(memory_at_0, loc_9 + 28)
																																																																																		if bit_and(loc_10, 15) ~= 5 then
																																																																																			break
																																																																																		end
																																																																																		if loc_15 ~= rt_load_i32(memory_at_0, loc_9 + 16) then
																																																																																			break
																																																																																		end
																																																																																		if rt_load_i32(memory_at_0, loc_9 + 12) == 0 then
																																																																																			break
																																																																																		end
																																																																																		rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_2))
																																																																																		rt_store_i64(memory_at_0, loc_3 + 24, rt_load_i64(memory_at_0, loc_2 + 8))
																																																																																		rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_9))
																																																																																		rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_9 + 8))
																																																																																		desired = 75
																																																																																		break
																																																																																	end
																																																																																	if desired then
																																																																																		if desired == 79 then
																																																																																			desired = nil
																																																																																		end
																																																																																		break
																																																																																	end
																																																																																	while true do
																																																																																		if loc_10 > 15 then
																																																																																			break
																																																																																		end
																																																																																		loc_8 = rt_load_i32(memory_at_0, loc_8 + 16)
																																																																																		if loc_8 == 0 then
																																																																																			break
																																																																																		end
																																																																																		if bit_and(rt_load_i32_u8(memory_at_0, loc_8 + 3), 1) ~= 0 then
																																																																																			break
																																																																																		end
																																																																																		reg_0 = FUNC_LIST[460](loc_8, 0, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1528))
																																																																																		loc_8 = reg_0
																																																																																		if loc_8 == 0 then
																																																																																			break
																																																																																		end
																																																																																		if rt_load_i32(memory_at_0, loc_8 + 12) ~= 6 then
																																																																																			break
																																																																																		end
																																																																																		loc_8 = rt_load_i32(memory_at_0, loc_8)
																																																																																		loc_9 = rt_load_i32(memory_at_0, loc_8 + 24)
																																																																																		if loc_9 == 0 then
																																																																																			break
																																																																																		end
																																																																																		loc_8 = rt_add_i32(rt_shl_i32(bit_and(rt_load_i32_u8(memory_at_0, loc_8 + 7), rt_shr_u32(loc_4, 24)), 5), loc_9)
																																																																																		if bit_and(rt_load_i32(memory_at_0, loc_8 + 28), 15) ~= 5 then
																																																																																			break
																																																																																		end
																																																																																		if rt_load_i32(memory_at_0, loc_8 + 16) ~= rt_load_i32(memory_at_0, loc_6) then
																																																																																			break
																																																																																		end
																																																																																		if rt_load_i32(memory_at_0, loc_8 + 12) == 0 then
																																																																																			break
																																																																																		end
																																																																																		rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_2))
																																																																																		rt_store_i64(memory_at_0, loc_3 + 24, rt_load_i64(memory_at_0, loc_2 + 8))
																																																																																		rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_8))
																																																																																		rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_8 + 8))
																																																																																		desired = 75
																																																																																		break
																																																																																	end
																																																																																	if desired then
																																																																																		if desired == 79 then
																																																																																			desired = nil
																																																																																		end
																																																																																		break
																																																																																	end
																																																																																	rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_2))
																																																																																	rt_store_i64(memory_at_0, loc_3 + 24, rt_load_i64(memory_at_0, loc_2 + 8))
																																																																																	rt_store_i32(memory_at_0, loc_0 + 52, rt_shr_u32(loc_4, 24))
																																																																																	rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_7)
																																																																																	FUNC_LIST[588](loc_0, loc_2, loc_6, loc_3)
																																																																																	loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																																	rt_store_i32_n8(memory_at_0, loc_1 + 3, rt_load_i32_u8(memory_at_0, loc_0 + 52))
																																																																																	loc_1 = loc_7
																																																																																	loc_2 = rt_add_i32(rt_shl_i32(loc_13, 4), loc_5)
																																																																																	if rt_load_i32(memory_at_0, loc_2 + 12) ~= 0 then
																																																																																		desired = 74
																																																																																		break
																																																																																	end
																																																																																	desired = 2
																																																																																	break
																																																																																end
																																																																																if desired then
																																																																																	if desired == 78 then
																																																																																		desired = nil
																																																																																	end
																																																																																	break
																																																																																end
																																																																																reg_0 = rt_add_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 16), rt_shl_i32(loc_8, 2)), 1440)
																																																																																break
																																																																															end
																																																																															if desired then
																																																																																if desired == 77 then
																																																																																	desired = nil
																																																																																end
																																																																																break
																																																																															end
																																																																															loc_8 = reg_0
																																																																															loc_8 = rt_load_i32(memory_at_0, loc_8)
																																																																															if loc_8 == 0 then
																																																																																break
																																																																															end
																																																																															loc_9 = rt_load_i32_u8(memory_at_0, loc_8 + 3)
																																																																															if bit_and(loc_9, 8) ~= 0 then
																																																																																while true do
																																																																																	reg_0 = loc_9
																																																																																	break
																																																																																end
																																																																																if desired then
																																																																																	if desired == 77 then
																																																																																		desired = nil
																																																																																	end
																																																																																	break
																																																																																end
																																																																															else
																																																																																while true do
																																																																																	reg_0 = FUNC_LIST[460](loc_8, 3, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1540))
																																																																																	loc_9 = reg_0
																																																																																	if loc_9 ~= 0 then
																																																																																		desired = 76
																																																																																		break
																																																																																	end
																																																																																	reg_0 = rt_load_i32_u8(memory_at_0, loc_8 + 3)
																																																																																	break
																																																																																end
																																																																																if desired then
																																																																																	if desired == 77 then
																																																																																		desired = nil
																																																																																	end
																																																																																	break
																																																																																end
																																																																															end
																																																																															loc_9 = reg_0
																																																																															if bit_and(loc_9, 1) ~= 0 then
																																																																																break
																																																																															end
																																																																															reg_0 = FUNC_LIST[460](loc_8, 0, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1528))
																																																																															loc_8 = reg_0
																																																																															if loc_8 == 0 then
																																																																																break
																																																																															end
																																																																															if rt_load_i32(memory_at_0, loc_8 + 12) ~= 6 then
																																																																																break
																																																																															end
																																																																															while true do
																																																																																loc_8 = rt_load_i32(memory_at_0, loc_8)
																																																																																reg_0 = rt_load_i32(memory_at_0, loc_8 + 24)
																																																																																loc_8 = bit_and(rt_load_i32_u8(memory_at_0, loc_8 + 7), rt_shr_u32(loc_4, 24))
																																																																																loc_4 = rt_add_i32(reg_0, rt_shl_i32(loc_8, 5))
																																																																																if bit_and(rt_load_i32(memory_at_0, loc_4 + 28), 15) ~= 5 then
																																																																																	break
																																																																																end
																																																																																if rt_load_i32(memory_at_0, loc_4 + 16) ~= rt_load_i32(memory_at_0, loc_6) then
																																																																																	break
																																																																																end
																																																																																if rt_load_i32(memory_at_0, loc_4 + 12) == 0 then
																																																																																	break
																																																																																end
																																																																																rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_2))
																																																																																rt_store_i64(memory_at_0, loc_3 + 24, rt_load_i64(memory_at_0, loc_2 + 8))
																																																																																rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_4))
																																																																																rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
																																																																																desired = 75
																																																																																break
																																																																															end
																																																																															if desired then
																																																																																if desired == 77 then
																																																																																	desired = nil
																																																																																end
																																																																																break
																																																																															end
																																																																															rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_2))
																																																																															rt_store_i64(memory_at_0, loc_3 + 24, rt_load_i64(memory_at_0, loc_2 + 8))
																																																																															rt_store_i32(memory_at_0, loc_0 + 52, loc_8)
																																																																															rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_7)
																																																																															FUNC_LIST[588](loc_0, loc_2, loc_6, loc_3)
																																																																															loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																															rt_store_i32_n8(memory_at_0, loc_1 + 3, rt_load_i32_u8(memory_at_0, loc_0 + 52))
																																																																															loc_1 = loc_7
																																																																															loc_2 = rt_add_i32(rt_shl_i32(loc_13, 4), loc_5)
																																																																															if rt_load_i32(memory_at_0, loc_2 + 12) ~= 0 then
																																																																																desired = 74
																																																																																break
																																																																															end
																																																																															desired = 2
																																																																															break
																																																																														end
																																																																														if desired then
																																																																															if desired == 76 then
																																																																																desired = nil
																																																																															end
																																																																															break
																																																																														end
																																																																														rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_2))
																																																																														rt_store_i64(memory_at_0, loc_3 + 24, rt_load_i64(memory_at_0, loc_2 + 8))
																																																																														rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_7)
																																																																														FUNC_LIST[588](loc_0, loc_2, loc_6, loc_3)
																																																																														loc_1 = loc_7
																																																																														loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																														loc_2 = rt_add_i32(loc_5, rt_shl_i32(loc_13, 4))
																																																																														if rt_load_i32(memory_at_0, loc_2 + 12) ~= 0 then
																																																																															desired = 74
																																																																															break
																																																																														end
																																																																														desired = 2
																																																																														break
																																																																													end
																																																																													if desired then
																																																																														if desired == 75 then
																																																																															desired = nil
																																																																														end
																																																																														break
																																																																													end
																																																																													rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_2))
																																																																													rt_store_i64(memory_at_0, loc_3 + 24, rt_load_i64(memory_at_0, loc_2 + 8))
																																																																													rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_9))
																																																																													rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_9 + 8))
																																																																													rt_store_i32(memory_at_0, loc_0 + 68, rt_load_i32(memory_at_0, loc_6))
																																																																													break
																																																																												end
																																																																												if desired then
																																																																													if desired == 74 then
																																																																														desired = nil
																																																																													end
																																																																													break
																																																																												end
																																																																												loc_1 = loc_7
																																																																												break
																																																																											end
																																																																											if desired then
																																																																												if desired == 73 then
																																																																													desired = nil
																																																																												end
																																																																												break
																																																																											end
																																																																											loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1700)
																																																																											if loc_2 ~= 0 then
																																																																												while true do
																																																																													rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, rt_add_i32(loc_1, 4))
																																																																													TABLE_LIST[0].data[loc_2](loc_0, 4294967295)
																																																																													if rt_load_i32_u8(memory_at_0, loc_0 + 3) ~= 0 then
																																																																														desired = 8
																																																																														break
																																																																													end
																																																																													reg_0 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																													break
																																																																												end
																																																																												if desired then
																																																																													if desired == 73 then
																																																																														desired = nil
																																																																													end
																																																																													break
																																																																												end
																																																																											else
																																																																												while true do
																																																																													reg_0 = loc_5
																																																																													break
																																																																												end
																																																																												if desired then
																																																																													if desired == 73 then
																																																																														desired = nil
																																																																													end
																																																																													break
																																																																												end
																																																																											end
																																																																											loc_5 = reg_0
																																																																											loc_7 = rt_load_i32(memory_at_0, loc_1)
																																																																											loc_5 = rt_add_i32(loc_5, bit_and(rt_shr_u32(loc_7, 4), 4080))
																																																																											loc_2 = bit_and(rt_shr_u32(loc_7, 16), 255)
																																																																											loc_6 = (if loc_2 ~= 0 then rt_add_i32(loc_5, rt_shl_i32(loc_2, 4)) else rt_load_i32(memory_at_0, loc_0 + 8))
																																																																											loc_1 = rt_add_i32(loc_1, 4)
																																																																											loc_2 = rt_shr_u32(loc_7, 24)
																																																																											if rt_load_i32(memory_at_0, loc_5 + 12) ~= 7 then
																																																																												while true do
																																																																													rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_1)
																																																																													FUNC_LIST[608](loc_0, loc_5)
																																																																													reg_0 = rt_add_i32(loc_6, 16)
																																																																													break
																																																																												end
																																																																												if desired then
																																																																													if desired == 73 then
																																																																														desired = nil
																																																																													end
																																																																													break
																																																																												end
																																																																											else
																																																																												while true do
																																																																													reg_0 = loc_6
																																																																													break
																																																																												end
																																																																												if desired then
																																																																													if desired == 73 then
																																																																														desired = nil
																																																																													end
																																																																													break
																																																																												end
																																																																											end
																																																																											loc_6 = reg_0
																																																																											loc_3 = rt_sub_i32(loc_2, 1)
																																																																											loc_8 = rt_add_i32(loc_5, 16)
																																																																											loc_4 = rt_load_i32(memory_at_0, loc_5)
																																																																											loc_2 = rt_load_i32(memory_at_0, loc_0 + 20)
																																																																											rt_store_i32(memory_at_0, loc_2 + 12, loc_1)
																																																																											while true do
																																																																												if loc_2 == rt_load_i32(memory_at_0, loc_0 + 32) then
																																																																													while true do
																																																																														reg_0 = FUNC_LIST[83](loc_0)
																																																																														loc_2 = reg_0
																																																																														desired = 74
																																																																														break
																																																																													end
																																																																													if desired then
																																																																														if desired == 74 then
																																																																															desired = nil
																																																																														end
																																																																														break
																																																																													end
																																																																												end
																																																																												loc_2 = rt_add_i32(loc_2, 24)
																																																																												rt_store_i32(memory_at_0, loc_0 + 20, loc_2)
																																																																												break
																																																																											end
																																																																											if desired then
																																																																												if desired == 73 then
																																																																													desired = nil
																																																																												end
																																																																												break
																																																																											end
																																																																											rt_store_i32(memory_at_0, loc_2, loc_8)
																																																																											rt_store_i32(memory_at_0, loc_2 + 4, loc_5)
																																																																											loc_5 = rt_load_i32_u8(memory_at_0, loc_4 + 5)
																																																																											rt_store_i32(memory_at_0, loc_2 + 20, 0)
																																																																											rt_store_i32(memory_at_0, loc_2 + 12, 0)
																																																																											rt_store_i32(memory_at_0, loc_2 + 16, loc_3)
																																																																											loc_9 = rt_shl_i32(loc_5, 4)
																																																																											rt_store_i32(memory_at_0, loc_2 + 8, rt_add_i32(loc_9, loc_6))
																																																																											rt_store_i32(memory_at_0, loc_0 + 8, loc_6)
																																																																											rt_store_i32(memory_at_0, loc_0 + 12, loc_8)
																																																																											if rt_le_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 24), loc_6), loc_9) then
																																																																												while true do
																																																																													FUNC_LIST[82](loc_0, loc_5)
																																																																													break
																																																																												end
																																																																												if desired then
																																																																													if desired == 73 then
																																																																														desired = nil
																																																																													end
																																																																													break
																																																																												end
																																																																											end
																																																																											loc_6 = rt_load_i32(memory_at_0, loc_4 + 16)
																																																																											if rt_load_i32_u8(memory_at_0, loc_4 + 3) == 0 then
																																																																												while true do
																																																																													loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
																																																																													loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																													loc_3 = rt_add_i32(loc_5, rt_shl_i32(rt_load_i32_u8(memory_at_0, loc_6 + 4), 4))
																																																																													if loc_1 < loc_3 then
																																																																														while true do
																																																																															while true do
																																																																																rt_store_i32(memory_at_0, loc_1 + 12, 0)
																																																																																loc_1 = rt_add_i32(loc_1, 16)
																																																																																if loc_3 > loc_1 then
																																																																																	continue
																																																																																end
																																																																																break
																																																																															end
																																																																															if desired then
																																																																																break
																																																																															end
																																																																															break
																																																																														end
																																																																														if desired then
																																																																															break
																																																																														end
																																																																													end
																																																																													reg_0 = loc_0
																																																																													if rt_load_i32_u8(memory_at_0, loc_6 + 5) ~= 0 then
																																																																														while true do
																																																																															reg_1 = loc_1
																																																																															break
																																																																														end
																																																																														if desired then
																																																																															break
																																																																														end
																																																																													else
																																																																														while true do
																																																																															reg_1 = rt_load_i32(memory_at_0, loc_2 + 8)
																																																																															break
																																																																														end
																																																																														if desired then
																																																																															break
																																																																														end
																																																																													end
																																																																													loc_1 = reg_1
																																																																													rt_store_i32(memory_at_0, reg_0 + 8, loc_1)
																																																																													loc_11 = rt_load_i32(memory_at_0, loc_6 + 8)
																																																																													loc_1 = rt_load_i32(memory_at_0, loc_6 + 20)
																																																																													loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																																																																													loc_12 = loc_4
																																																																													desired = 5
																																																																													break
																																																																												end
																																																																												if desired then
																																																																													if desired == 73 then
																																																																														desired = nil
																																																																													end
																																																																													break
																																																																												end
																																																																											end
																																																																											reg_0 = TABLE_LIST[0].data[loc_6](loc_0)
																																																																											loc_5 = reg_0
																																																																											if rt_lt_i32(loc_5, 0) then
																																																																												desired = 3
																																																																												break
																																																																											end
																																																																											loc_9 = rt_load_i32(memory_at_0, loc_0 + 20)
																																																																											loc_2 = rt_load_i32(memory_at_0, loc_9 + 4)
																																																																											if loc_3 == 0 then
																																																																												desired = 6
																																																																												break
																																																																											end
																																																																											if loc_5 == 0 then
																																																																												desired = 6
																																																																												break
																																																																											end
																																																																											loc_4 = rt_load_i32(memory_at_0, loc_0 + 8)
																																																																											loc_5 = rt_sub_i32(loc_4, rt_shl_i32(loc_5, 4))
																																																																											while true do
																																																																												rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_5))
																																																																												rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
																																																																												loc_2 = rt_add_i32(loc_2, 16)
																																																																												loc_3 = rt_sub_i32(loc_3, 1)
																																																																												if loc_3 == 0 then
																																																																													desired = 6
																																																																													break
																																																																												end
																																																																												loc_5 = rt_add_i32(loc_5, 16)
																																																																												if loc_4 > loc_5 then
																																																																													continue
																																																																												end
																																																																												break
																																																																											end
																																																																											if desired then
																																																																												if desired == 73 then
																																																																													desired = nil
																																																																												end
																																																																												break
																																																																											end
																																																																											desired = 6
																																																																											break
																																																																										end
																																																																										if desired then
																																																																											if desired == 72 then
																																																																												desired = nil
																																																																											end
																																																																											break
																																																																										end
																																																																										loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 4)
																																																																										loc_1 = rt_add_i32(loc_1, 4)
																																																																										desired = 5
																																																																										break
																																																																									end
																																																																									if desired then
																																																																										if desired == 71 then
																																																																											desired = nil
																																																																										end
																																																																										break
																																																																									end
																																																																									loc_4 = rt_add_i32(loc_1, 4)
																																																																									loc_3 = rt_load_i32(memory_at_0, loc_1 + 4)
																																																																									loc_2 = 0
																																																																									loc_1 = rt_load_i32(memory_at_0, loc_1)
																																																																									loc_6 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																																																																									if rt_load_i32(memory_at_0, loc_6 + 12) == 5 then
																																																																										while true do
																																																																											reg_0 = (if rt_load_i32(memory_at_0, loc_6) == rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(bit_and(loc_3, 16777215), 4), loc_11)) then 1 else 0)
																																																																											break
																																																																										end
																																																																										if desired then
																																																																											if desired == 71 then
																																																																												desired = nil
																																																																											end
																																																																											break
																																																																										end
																																																																									else
																																																																										while true do
																																																																											reg_0 = loc_2
																																																																											break
																																																																										end
																																																																										if desired then
																																																																											if desired == 71 then
																																																																												desired = nil
																																																																											end
																																																																											break
																																																																										end
																																																																									end
																																																																									loc_2 = reg_0
																																																																									loc_1 = rt_add_i32(rt_shl_i32((if rt_shr_u32(loc_3, 31) == loc_2 then 1 else rt_shr_i32(loc_1, 16)), 2), loc_4)
																																																																									loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																																																																									desired = 5
																																																																									break
																																																																								end
																																																																								if desired then
																																																																									if desired == 70 then
																																																																										desired = nil
																																																																									end
																																																																									break
																																																																								end
																																																																								loc_4 = rt_add_i32(loc_1, 4)
																																																																								loc_3 = rt_load_i32(memory_at_0, loc_1 + 4)
																																																																								loc_2 = 0
																																																																								loc_1 = rt_load_i32(memory_at_0, loc_1)
																																																																								loc_6 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																																																																								if rt_load_i32(memory_at_0, loc_6 + 12) == 3 then
																																																																									while true do
																																																																										reg_0 = (if rt_load_f64(memory_at_0, loc_6) == rt_load_f64(memory_at_0, rt_add_i32(rt_shl_i32(bit_and(loc_3, 16777215), 4), loc_11)) then 1 else 0)
																																																																										break
																																																																									end
																																																																									if desired then
																																																																										if desired == 70 then
																																																																											desired = nil
																																																																										end
																																																																										break
																																																																									end
																																																																								else
																																																																									while true do
																																																																										reg_0 = loc_2
																																																																										break
																																																																									end
																																																																									if desired then
																																																																										if desired == 70 then
																																																																											desired = nil
																																																																										end
																																																																										break
																																																																									end
																																																																								end
																																																																								loc_2 = reg_0
																																																																								loc_1 = rt_add_i32(rt_shl_i32((if rt_shr_u32(loc_3, 31) == loc_2 then 1 else rt_shr_i32(loc_1, 16)), 2), loc_4)
																																																																								loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																																																																								desired = 5
																																																																								break
																																																																							end
																																																																							if desired then
																																																																								if desired == 69 then
																																																																									desired = nil
																																																																								end
																																																																								break
																																																																							end
																																																																							loc_4 = rt_add_i32(loc_1, 4)
																																																																							loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
																																																																							loc_3 = 0
																																																																							loc_1 = rt_load_i32(memory_at_0, loc_1)
																																																																							loc_6 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																																																																							if rt_load_i32(memory_at_0, loc_6 + 12) == 1 then
																																																																								while true do
																																																																									reg_0 = (if rt_load_i32(memory_at_0, loc_6) == bit_and(loc_2, 1) then 1 else 0)
																																																																									break
																																																																								end
																																																																								if desired then
																																																																									if desired == 69 then
																																																																										desired = nil
																																																																									end
																																																																									break
																																																																								end
																																																																							else
																																																																								while true do
																																																																									reg_0 = loc_3
																																																																									break
																																																																								end
																																																																								if desired then
																																																																									if desired == 69 then
																																																																										desired = nil
																																																																									end
																																																																									break
																																																																								end
																																																																							end
																																																																							loc_3 = reg_0
																																																																							loc_1 = rt_add_i32(rt_shl_i32((if rt_shr_u32(loc_2, 31) == loc_3 then 1 else rt_shr_i32(loc_1, 16)), 2), loc_4)
																																																																							loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																																																																							desired = 5
																																																																							break
																																																																						end
																																																																						if desired then
																																																																							if desired == 68 then
																																																																								desired = nil
																																																																							end
																																																																							break
																																																																						end
																																																																						loc_2 = rt_load_i32(memory_at_0, loc_1)
																																																																						loc_1 = rt_add_i32(rt_add_i32(loc_1, 4), rt_shl_i32((if rt_ge_i32(bit_xor(rt_load_i32(memory_at_0, loc_1 + 4), rt_sub_i32(rt_load_i32(memory_at_0, rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5) + 12), 1)), 0) then 1 else rt_shr_i32(loc_2, 16)), 2))
																																																																						loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																																																																						desired = 5
																																																																						break
																																																																					end
																																																																					if desired then
																																																																						if desired == 67 then
																																																																							desired = nil
																																																																						end
																																																																						break
																																																																					end
																																																																					loc_2 = rt_load_i32(memory_at_0, loc_12 + 16)
																																																																					loc_2 = rt_load_i32_u8(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_2 + 56), rt_shr_i32(rt_sub_i32(loc_1, rt_load_i32(memory_at_0, loc_2 + 12)), 2)))
																																																																					loc_3 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1716)
																																																																					if loc_3 == 0 then
																																																																						desired = 5
																																																																						break
																																																																					end
																																																																					rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_1)
																																																																					FUNC_LIST[577](loc_0, loc_3, 0)
																																																																					if rt_load_i32_u8(memory_at_0, loc_0 + 3) ~= 0 then
																																																																						desired = 3
																																																																						break
																																																																					end
																																																																					loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																					desired = 5
																																																																					break
																																																																				end
																																																																				if desired then
																																																																					if desired == 66 then
																																																																						desired = nil
																																																																					end
																																																																					break
																																																																				end
																																																																				loc_3 = rt_add_i32(loc_1, 8)
																																																																				while true do
																																																																					if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_12 + 12) + 5) == 0 then
																																																																						break
																																																																					end
																																																																					loc_4 = rt_load_i32(memory_at_0, loc_1)
																																																																					loc_7 = rt_add_i32(bit_and(rt_shr_u32(loc_4, 22), 1020), loc_3)
																																																																					loc_2 = rt_load_i32(memory_at_0, rt_sub_i32(loc_7, 4))
																																																																					loc_6 = rt_load_i32(memory_at_0, loc_1 + 4)
																																																																					rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																					loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
																																																																					loc_8 = rt_add_i32(rt_shl_i32(bit_and(loc_6, 255), 4), loc_5)
																																																																					rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_8))
																																																																					rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_8 + 8))
																																																																					loc_6 = rt_add_i32(bit_and(rt_shr_u32(loc_6, 4), 4080), loc_5)
																																																																					rt_store_i64(memory_at_0, loc_1 + 16, rt_load_i64(memory_at_0, loc_6))
																																																																					rt_store_i64(memory_at_0, loc_1 + 24, rt_load_i64(memory_at_0, loc_6 + 8))
																																																																					loc_6 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																																																					reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_add_i32(bit_and(rt_shr_u32(loc_4, 6), 1020), 10320))](loc_0, loc_6, rt_add_i32(bit_and(rt_shr_u32(loc_4, 12), 4080), loc_5), rt_sub_i32(rt_shr_u32(loc_2, 24), 1), loc_1, 3)
																																																																					loc_1 = reg_0
																																																																					if rt_lt_i32(loc_1, 0) then
																																																																						break
																																																																					end
																																																																					if loc_2 <= 16777215 then
																																																																						while true do
																																																																							rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_shl_i32(loc_1, 4), loc_6))
																																																																							break
																																																																						end
																																																																						if desired then
																																																																							if desired == 67 then
																																																																								desired = nil
																																																																							end
																																																																							break
																																																																						end
																																																																					end
																																																																					loc_2 = rt_load_i32_u8(memory_at_0, loc_7)
																																																																					loc_1 = loc_7
																																																																					desired = 5
																																																																					break
																																																																				end
																																																																				if desired then
																																																																					if desired == 66 then
																																																																						desired = nil
																																																																					end
																																																																					break
																																																																				end
																																																																				loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																																																				loc_1 = loc_3
																																																																				desired = 5
																																																																				break
																																																																			end
																																																																			if desired then
																																																																				if desired == 65 then
																																																																					desired = nil
																																																																				end
																																																																				break
																																																																			end
																																																																			loc_3 = rt_add_i32(loc_1, 8)
																																																																			while true do
																																																																				if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_12 + 12) + 5) == 0 then
																																																																					break
																																																																				end
																																																																				loc_4 = rt_load_i32(memory_at_0, loc_1)
																																																																				loc_6 = rt_add_i32(bit_and(rt_shr_u32(loc_4, 22), 1020), loc_3)
																																																																				loc_2 = rt_load_i32(memory_at_0, rt_sub_i32(loc_6, 4))
																																																																				loc_1 = rt_load_i32(memory_at_0, loc_1 + 4)
																																																																				rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																				loc_7 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																																																				reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_add_i32(bit_and(rt_shr_u32(loc_4, 6), 1020), 10320))](loc_0, loc_7, rt_add_i32(bit_and(rt_shr_u32(loc_4, 12), 4080), loc_5), rt_sub_i32(rt_shr_u32(loc_2, 24), 1), rt_add_i32(rt_shl_i32(loc_1, 4), loc_11), 2)
																																																																				loc_1 = reg_0
																																																																				if rt_lt_i32(loc_1, 0) then
																																																																					break
																																																																				end
																																																																				if loc_2 <= 16777215 then
																																																																					while true do
																																																																						rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_shl_i32(loc_1, 4), loc_7))
																																																																						break
																																																																					end
																																																																					if desired then
																																																																						if desired == 66 then
																																																																							desired = nil
																																																																						end
																																																																						break
																																																																					end
																																																																				end
																																																																				loc_2 = rt_load_i32_u8(memory_at_0, loc_6)
																																																																				loc_1 = loc_6
																																																																				desired = 5
																																																																				break
																																																																			end
																																																																			if desired then
																																																																				if desired == 65 then
																																																																					desired = nil
																																																																				end
																																																																				break
																																																																			end
																																																																			loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																																																			loc_1 = loc_3
																																																																			desired = 5
																																																																			break
																																																																		end
																																																																		if desired then
																																																																			if desired == 64 then
																																																																				desired = nil
																																																																			end
																																																																			break
																																																																		end
																																																																		loc_3 = rt_add_i32(loc_1, 8)
																																																																		while true do
																																																																			if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_12 + 12) + 5) == 0 then
																																																																				break
																																																																			end
																																																																			loc_4 = rt_load_i32(memory_at_0, loc_1)
																																																																			loc_6 = rt_add_i32(bit_and(rt_shr_u32(loc_4, 22), 1020), loc_3)
																																																																			loc_2 = rt_load_i32(memory_at_0, rt_sub_i32(loc_6, 4))
																																																																			loc_1 = rt_load_i32(memory_at_0, loc_1 + 4)
																																																																			rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																			loc_7 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																																																			reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_add_i32(bit_and(rt_shr_u32(loc_4, 6), 1020), 10320))](loc_0, loc_7, rt_add_i32(bit_and(rt_shr_u32(loc_4, 12), 4080), loc_5), rt_sub_i32(rt_shr_u32(loc_2, 24), 1), rt_add_i32(rt_shl_i32(loc_1, 4), loc_5), 2)
																																																																			loc_1 = reg_0
																																																																			if rt_lt_i32(loc_1, 0) then
																																																																				break
																																																																			end
																																																																			if loc_2 <= 16777215 then
																																																																				while true do
																																																																					rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_shl_i32(loc_1, 4), loc_7))
																																																																					break
																																																																				end
																																																																				if desired then
																																																																					if desired == 65 then
																																																																						desired = nil
																																																																					end
																																																																					break
																																																																				end
																																																																			end
																																																																			loc_2 = rt_load_i32_u8(memory_at_0, loc_6)
																																																																			loc_1 = loc_6
																																																																			desired = 5
																																																																			break
																																																																		end
																																																																		if desired then
																																																																			if desired == 64 then
																																																																				desired = nil
																																																																			end
																																																																			break
																																																																		end
																																																																		loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																																																		loc_1 = loc_3
																																																																		desired = 5
																																																																		break
																																																																	end
																																																																	if desired then
																																																																		if desired == 63 then
																																																																			desired = nil
																																																																		end
																																																																		break
																																																																	end
																																																																	loc_3 = rt_add_i32(loc_1, 4)
																																																																	while true do
																																																																		if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_12 + 12) + 5) == 0 then
																																																																			break
																																																																		end
																																																																		loc_2 = rt_load_i32(memory_at_0, loc_1)
																																																																		loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 22), 1020), loc_3)
																																																																		loc_1 = rt_load_i32(memory_at_0, loc_4)
																																																																		rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																		loc_6 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																																																																		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_add_i32(bit_and(rt_shr_u32(loc_2, 6), 1020), 10320))](loc_0, loc_6, rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5), rt_sub_i32(rt_shr_u32(loc_1, 24), 1), 0, 1)
																																																																		loc_2 = reg_0
																																																																		if rt_lt_i32(loc_2, 0) then
																																																																			break
																																																																		end
																																																																		if loc_1 <= 16777215 then
																																																																			while true do
																																																																				rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_shl_i32(loc_2, 4), loc_6))
																																																																				break
																																																																			end
																																																																			if desired then
																																																																				if desired == 64 then
																																																																					desired = nil
																																																																				end
																																																																				break
																																																																			end
																																																																		end
																																																																		loc_1 = rt_add_i32(loc_4, 4)
																																																																		loc_2 = rt_load_i32_u8(memory_at_0, loc_4 + 4)
																																																																		desired = 5
																																																																		break
																																																																	end
																																																																	if desired then
																																																																		if desired == 63 then
																																																																			desired = nil
																																																																		end
																																																																		break
																																																																	end
																																																																	loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																																																	loc_1 = loc_3
																																																																	desired = 5
																																																																	break
																																																																end
																																																																if desired then
																																																																	if desired == 62 then
																																																																		desired = nil
																																																																	end
																																																																	break
																																																																end
																																																																loc_3 = rt_add_i32(loc_1, 4)
																																																																loc_2 = rt_load_i32(memory_at_0, loc_1)
																																																																loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_11)
																																																																loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																																																while true do
																																																																	while true do
																																																																		loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 20), 4080), loc_5)
																																																																		loc_6 = rt_load_i32(memory_at_0, loc_2 + 12)
																																																																		if loc_6 ~= 3 then
																																																																			while true do
																																																																				if loc_6 ~= 4 then
																																																																					desired = 63
																																																																					break
																																																																				end
																																																																				loc_25 = no_op(rt_load_f64(memory_at_0, loc_4))
																																																																				rt_store_f32(memory_at_0, loc_1, (loc_25 / rt_load_f32(memory_at_0, loc_2)))
																																																																				rt_store_f32(memory_at_0, loc_1 + 4, (loc_25 / rt_load_f32(memory_at_0, loc_2 + 4)))
																																																																				loc_26 = rt_load_f32(memory_at_0, loc_2 + 8)
																																																																				rt_store_i32(memory_at_0, loc_1 + 12, 4)
																																																																				rt_store_f32(memory_at_0, loc_1 + 8, (loc_25 / loc_26))
																																																																				desired = 64
																																																																				break
																																																																			end
																																																																			if desired then
																																																																				if desired == 64 then
																																																																					desired = nil
																																																																				end
																																																																				break
																																																																			end
																																																																		end
																																																																		loc_22 = rt_load_f64(memory_at_0, loc_2)
																																																																		loc_23 = rt_load_f64(memory_at_0, loc_4)
																																																																		rt_store_i32(memory_at_0, loc_1 + 12, 3)
																																																																		rt_store_f64(memory_at_0, loc_1, (loc_23 / loc_22))
																																																																		break
																																																																	end
																																																																	if desired then
																																																																		if desired == 63 then
																																																																			desired = nil
																																																																		end
																																																																		break
																																																																	end
																																																																	loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																																																	loc_1 = loc_3
																																																																	desired = 5
																																																																	break
																																																																end
																																																																if desired then
																																																																	if desired == 62 then
																																																																		desired = nil
																																																																	end
																																																																	break
																																																																end
																																																																rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																																FUNC_LIST[600](loc_0, loc_1, loc_4, loc_2)
																																																																loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																																																loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																																loc_1 = loc_3
																																																																desired = 5
																																																																break
																																																															end
																																																															if desired then
																																																																if desired == 61 then
																																																																	desired = nil
																																																																end
																																																																break
																																																															end
																																																															loc_3 = rt_add_i32(loc_1, 4)
																																																															loc_1 = rt_load_i32(memory_at_0, loc_1)
																																																															loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 12), 4080), loc_11)
																																																															loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																																																															loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 20), 4080), loc_5)
																																																															if rt_load_i32(memory_at_0, loc_1 + 12) == 3 then
																																																																while true do
																																																																	loc_22 = rt_load_f64(memory_at_0, loc_1)
																																																																	loc_23 = rt_load_f64(memory_at_0, loc_4)
																																																																	rt_store_i32(memory_at_0, loc_2 + 12, 3)
																																																																	rt_store_f64(memory_at_0, loc_2, (loc_23 - loc_22))
																																																																	loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																																																	loc_1 = loc_3
																																																																	desired = 5
																																																																	break
																																																																end
																																																																if desired then
																																																																	if desired == 61 then
																																																																		desired = nil
																																																																	end
																																																																	break
																																																																end
																																																															end
																																																															rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																															FUNC_LIST[598](loc_0, loc_2, loc_4, loc_1)
																																																															loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																																															loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																															loc_1 = loc_3
																																																															desired = 5
																																																															break
																																																														end
																																																														if desired then
																																																															if desired == 60 then
																																																																desired = nil
																																																															end
																																																															break
																																																														end
																																																														error("out of code bounds")
																																																													end
																																																													if desired then
																																																														if desired == 59 then
																																																															desired = nil
																																																														end
																																																														break
																																																													end
																																																													loc_2 = rt_load_i32(memory_at_0, loc_1)
																																																													loc_3 = rt_shr_i32(loc_2, 8)
																																																													rt_store_i32(memory_at_0, loc_1, bit_or(rt_shl_i32(rt_add_i32(loc_3, (if rt_lt_i32(loc_3, 8388607) then 1 else 0)), 8), bit_and(loc_2, 255)))
																																																													loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 4)
																																																													loc_1 = rt_add_i32(loc_1, 4)
																																																													desired = 5
																																																													break
																																																												end
																																																												if desired then
																																																													if desired == 58 then
																																																														desired = nil
																																																													end
																																																													break
																																																												end
																																																												loc_3 = rt_add_i32(loc_1, 4)
																																																												loc_7 = rt_load_i32(memory_at_0, loc_1)
																																																												loc_6 = rt_add_i32(loc_3, bit_and(rt_shr_u32(loc_7, 22), 1020))
																																																												loc_2 = rt_load_i32(memory_at_0, loc_6)
																																																												loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																																												loc_4 = bit_and(rt_shr_u32(loc_2, 16), 255)
																																																												if loc_4 ~= 0 then
																																																													while true do
																																																														reg_0 = loc_4
																																																														break
																																																													end
																																																													if desired then
																																																														if desired == 58 then
																																																															desired = nil
																																																														end
																																																														break
																																																													end
																																																												else
																																																													while true do
																																																														reg_0 = rt_shr_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), loc_1), 4)
																																																														break
																																																													end
																																																													if desired then
																																																														if desired == 58 then
																																																															desired = nil
																																																														end
																																																														break
																																																													end
																																																												end
																																																												loc_4 = reg_0
																																																												while true do
																																																													if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_12 + 12) + 5) == 0 then
																																																														break
																																																													end
																																																													rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																																													reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(bit_and(rt_shr_u32(loc_7, 8), 255), 2), 10320))](loc_0, loc_1, rt_add_i32(loc_1, 16), rt_sub_i32(rt_shr_u32(loc_2, 24), 1), rt_add_i32(loc_1, 32), rt_sub_i32(loc_4, 1))
																																																													loc_4 = reg_0
																																																													if rt_lt_i32(loc_4, 0) then
																																																														break
																																																													end
																																																													reg_0 = loc_0
																																																													if loc_2 <= 16777215 then
																																																														while true do
																																																															reg_1 = rt_add_i32(rt_shl_i32(loc_4, 4), loc_1)
																																																															break
																																																														end
																																																														if desired then
																																																															if desired == 59 then
																																																																desired = nil
																																																															end
																																																															break
																																																														end
																																																													else
																																																														while true do
																																																															reg_1 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 8)
																																																															break
																																																														end
																																																														if desired then
																																																															if desired == 59 then
																																																																desired = nil
																																																															end
																																																															break
																																																														end
																																																													end
																																																													loc_1 = reg_1
																																																													rt_store_i32(memory_at_0, reg_0 + 8, loc_1)
																																																													loc_1 = rt_add_i32(loc_6, 4)
																																																													loc_2 = rt_load_i32_u8(memory_at_0, loc_6 + 4)
																																																													desired = 5
																																																													break
																																																												end
																																																												if desired then
																																																													if desired == 58 then
																																																														desired = nil
																																																													end
																																																													break
																																																												end
																																																												loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																																												loc_1 = loc_3
																																																												desired = 5
																																																												break
																																																											end
																																																											if desired then
																																																												if desired == 57 then
																																																													desired = nil
																																																												end
																																																												break
																																																											end
																																																											loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1700)
																																																											if loc_2 ~= 0 then
																																																												while true do
																																																													rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, rt_add_i32(loc_1, 4))
																																																													TABLE_LIST[0].data[loc_2](loc_0, 4294967295)
																																																													if rt_load_i32_u8(memory_at_0, loc_0 + 3) ~= 0 then
																																																														desired = 8
																																																														break
																																																													end
																																																													reg_0 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																													break
																																																												end
																																																												if desired then
																																																													if desired == 57 then
																																																														desired = nil
																																																													end
																																																													break
																																																												end
																																																											else
																																																												while true do
																																																													reg_0 = loc_5
																																																													break
																																																												end
																																																												if desired then
																																																													if desired == 57 then
																																																														desired = nil
																																																													end
																																																													break
																																																												end
																																																											end
																																																											loc_5 = reg_0
																																																											loc_1 = rt_add_i32(rt_add_i32(rt_shl_i32(rt_shr_i32(rt_load_i32(memory_at_0, loc_1), 8), 2), loc_1), 4)
																																																											loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																																																											desired = 5
																																																											break
																																																										end
																																																										if desired then
																																																											if desired == 56 then
																																																												desired = nil
																																																											end
																																																											break
																																																										end
																																																										loc_2 = rt_add_i32(rt_shl_i32(rt_load_i32_u8(memory_at_0, loc_1 + 1), 4), loc_5)
																																																										loc_3 = rt_add_i32(rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 4), 4), loc_11)
																																																										rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_3))
																																																										rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
																																																										loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 8)
																																																										loc_1 = rt_add_i32(loc_1, 8)
																																																										desired = 5
																																																										break
																																																									end
																																																									if desired then
																																																										if desired == 55 then
																																																											desired = nil
																																																										end
																																																										break
																																																									end
																																																									loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1700)
																																																									if loc_2 ~= 0 then
																																																										while true do
																																																											rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, rt_add_i32(loc_1, 4))
																																																											TABLE_LIST[0].data[loc_2](loc_0, 4294967295)
																																																											if rt_load_i32_u8(memory_at_0, loc_0 + 3) ~= 0 then
																																																												desired = 8
																																																												break
																																																											end
																																																											reg_0 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																											break
																																																										end
																																																										if desired then
																																																											if desired == 55 then
																																																												desired = nil
																																																											end
																																																											break
																																																										end
																																																									else
																																																										while true do
																																																											reg_0 = loc_5
																																																											break
																																																										end
																																																										if desired then
																																																											if desired == 55 then
																																																												desired = nil
																																																											end
																																																											break
																																																										end
																																																									end
																																																									loc_5 = reg_0
																																																									loc_1 = rt_add_i32(rt_add_i32(rt_shl_i32(rt_load_i32_i16(memory_at_0, loc_1 + 2), 2), loc_1), 4)
																																																									loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																																																									desired = 5
																																																									break
																																																								end
																																																								if desired then
																																																									if desired == 54 then
																																																										desired = nil
																																																									end
																																																									break
																																																								end
																																																								loc_2 = rt_load_i32(memory_at_0, loc_1)
																																																								loc_9 = rt_add_i32(loc_1, 4)
																																																								rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_9)
																																																								loc_5 = rt_load_i32(memory_at_0, loc_0 + 8)
																																																								loc_1 = rt_shr_u32(loc_2, 8)
																																																								loc_2 = bit_and(loc_1, 255)
																																																								loc_3 = rt_add_i32(loc_2, rt_load_i32_u8(memory_at_0, loc_12 + 5))
																																																								if rt_le_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 24), loc_5), rt_shl_i32(loc_3, 4)) then
																																																									while true do
																																																										FUNC_LIST[82](loc_0, loc_3)
																																																										reg_0 = rt_load_i32(memory_at_0, loc_0 + 8)
																																																										break
																																																									end
																																																									if desired then
																																																										if desired == 54 then
																																																											desired = nil
																																																										end
																																																										break
																																																									end
																																																								else
																																																									while true do
																																																										reg_0 = loc_5
																																																										break
																																																									end
																																																									if desired then
																																																										if desired == 54 then
																																																											desired = nil
																																																										end
																																																										break
																																																									end
																																																								end
																																																								loc_5 = reg_0
																																																								while true do
																																																									if loc_2 == 0 then
																																																										break
																																																									end
																																																									loc_4 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																									loc_10 = bit_and(loc_1, 1)
																																																									loc_1 = 0
																																																									if loc_2 ~= 1 then
																																																										while true do
																																																											loc_8 = rt_sub_i32(loc_2, loc_10)
																																																											loc_6 = 0
																																																											while true do
																																																												loc_2 = rt_shl_i32(loc_1, 4)
																																																												loc_7 = rt_add_i32(loc_2, loc_5)
																																																												loc_3 = rt_add_i32(loc_2, loc_4)
																																																												rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_3))
																																																												rt_store_i64(memory_at_0, loc_7 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
																																																												rt_store_i32(memory_at_0, loc_3 + 12, 0)
																																																												loc_2 = bit_or(loc_2, 16)
																																																												loc_3 = rt_add_i32(loc_2, loc_5)
																																																												loc_2 = rt_add_i32(loc_2, loc_4)
																																																												rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
																																																												rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_2))
																																																												rt_store_i32(memory_at_0, loc_2 + 12, 0)
																																																												loc_1 = rt_add_i32(loc_1, 2)
																																																												loc_6 = rt_add_i32(loc_6, 2)
																																																												if loc_8 ~= loc_6 then
																																																													continue
																																																												end
																																																												break
																																																											end
																																																											if desired then
																																																												break
																																																											end
																																																											break
																																																										end
																																																										if desired then
																																																											if desired == 55 then
																																																												desired = nil
																																																											end
																																																											break
																																																										end
																																																									end
																																																									if loc_10 == 0 then
																																																										break
																																																									end
																																																									loc_1 = rt_shl_i32(loc_1, 4)
																																																									loc_2 = rt_add_i32(loc_1, loc_5)
																																																									loc_1 = rt_add_i32(loc_1, loc_4)
																																																									rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
																																																									rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
																																																									rt_store_i32(memory_at_0, loc_1 + 12, 0)
																																																									break
																																																								end
																																																								if desired then
																																																									if desired == 54 then
																																																										desired = nil
																																																									end
																																																									break
																																																								end
																																																								loc_1 = rt_load_i32(memory_at_0, loc_0 + 20)
																																																								rt_store_i32(memory_at_0, loc_1, loc_5)
																																																								loc_2 = rt_add_i32(rt_shl_i32(rt_load_i32_u8(memory_at_0, loc_12 + 5), 4), loc_5)
																																																								rt_store_i32(memory_at_0, loc_1 + 8, loc_2)
																																																								rt_store_i32(memory_at_0, loc_0 + 8, loc_2)
																																																								rt_store_i32(memory_at_0, loc_0 + 12, loc_5)
																																																								loc_2 = rt_load_i32_u8(memory_at_0, loc_9)
																																																								loc_1 = loc_9
																																																								desired = 5
																																																								break
																																																							end
																																																							if desired then
																																																								if desired == 53 then
																																																									desired = nil
																																																								end
																																																								break
																																																							end
																																																							loc_2 = rt_load_i32(memory_at_0, loc_1)
																																																							loc_4 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(rt_shr_i32(loc_2, 16), 4), loc_11))
																																																							loc_7 = rt_add_i32(loc_1, 4)
																																																							rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_7)
																																																							loc_9 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																																							loc_1 = rt_load_i32(memory_at_0, loc_12 + 12)
																																																							loc_3 = loc_4
																																																							if loc_1 ~= rt_load_i32(memory_at_0, loc_3 + 12) then
																																																								while true do
																																																									reg_0 = FUNC_LIST[15](loc_0, rt_load_i32_u8(memory_at_0, loc_3 + 4), loc_1, rt_load_i32(memory_at_0, loc_3 + 16))
																																																									break
																																																								end
																																																								if desired then
																																																									if desired == 53 then
																																																										desired = nil
																																																									end
																																																									break
																																																								end
																																																							else
																																																								while true do
																																																									reg_0 = loc_3
																																																									break
																																																								end
																																																								if desired then
																																																									if desired == 53 then
																																																										desired = nil
																																																									end
																																																									break
																																																								end
																																																							end
																																																							loc_3 = reg_0
																																																							rt_store_i32(memory_at_0, loc_9 + 12, 7)
																																																							rt_store_i32(memory_at_0, loc_9, loc_3)
																																																							while true do
																																																								if rt_load_i32_u8(memory_at_0, loc_4 + 4) == 0 then
																																																									while true do
																																																										loc_2 = 0
																																																										desired = 54
																																																										break
																																																									end
																																																									if desired then
																																																										if desired == 54 then
																																																											desired = nil
																																																										end
																																																										break
																																																									end
																																																								end
																																																								loc_8 = rt_add_i32(loc_12, 24)
																																																								loc_1 = 0
																																																								while true do
																																																									loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_1, 2), loc_7))
																																																									loc_2 = rt_add_i32((if bit_and(loc_2, 65280) ~= 0 then loc_8 else loc_5), bit_and(rt_shr_u32(loc_2, 12), 4080))
																																																									while true do
																																																										while true do
																																																											if loc_3 ~= loc_4 then
																																																												break
																																																											end
																																																											reg_0 = FUNC_LIST[363](rt_add_i32(rt_add_i32(rt_shl_i32(loc_1, 4), loc_3), 24), loc_2)
																																																											if reg_0 ~= 0 then
																																																												desired = 56
																																																												break
																																																											end
																																																											if rt_load_i32_u8(memory_at_0, loc_4 + 6) ~= 0 then
																																																												break
																																																											end
																																																											reg_0 = FUNC_LIST[15](loc_0, rt_load_i32_u8(memory_at_0, loc_4 + 4), rt_load_i32(memory_at_0, loc_12 + 12), rt_load_i32(memory_at_0, loc_4 + 16))
																																																											loc_3 = reg_0
																																																											rt_store_i32(memory_at_0, loc_9 + 12, 7)
																																																											rt_store_i32(memory_at_0, loc_9, loc_3)
																																																											loc_1 = 4294967295
																																																											desired = 56
																																																											break
																																																										end
																																																										if desired then
																																																											if desired == 56 then
																																																												desired = nil
																																																											end
																																																											break
																																																										end
																																																										loc_6 = rt_add_i32(rt_shl_i32(loc_1, 4), loc_3)
																																																										rt_store_i64(memory_at_0, loc_6 + 32, rt_load_i64(memory_at_0, loc_2 + 8))
																																																										rt_store_i64(memory_at_0, loc_6 + 24, rt_load_i64(memory_at_0, loc_2))
																																																										if rt_lt_i32(rt_load_i32(memory_at_0, loc_2 + 12), 5) then
																																																											break
																																																										end
																																																										if bit_and(rt_load_i32_u8(memory_at_0, loc_3 + 1), 4) == 0 then
																																																											break
																																																										end
																																																										loc_2 = rt_load_i32(memory_at_0, loc_2)
																																																										if bit_and(rt_load_i32_u8(memory_at_0, loc_2 + 1), 3) == 0 then
																																																											break
																																																										end
																																																										FUNC_LIST[49](loc_0, loc_3, loc_2)
																																																										break
																																																									end
																																																									if desired then
																																																										if desired == 55 then
																																																											desired = nil
																																																											continue
																																																										end
																																																										break
																																																									end
																																																									loc_1 = rt_add_i32(loc_1, 1)
																																																									loc_2 = rt_load_i32_u8(memory_at_0, loc_4 + 4)
																																																									if rt_lt_i32(loc_1, loc_2) then
																																																										continue
																																																									end
																																																									break
																																																								end
																																																								if desired then
																																																									if desired == 54 then
																																																										desired = nil
																																																									end
																																																									break
																																																								end
																																																								break
																																																							end
																																																							if desired then
																																																								if desired == 53 then
																																																									desired = nil
																																																								end
																																																								break
																																																							end
																																																							rt_store_i32_n8(memory_at_0, loc_3 + 6, 0)
																																																							if loc_3 ~= loc_4 then
																																																								while true do
																																																									rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_7)
																																																									loc_1 = rt_load_i32(memory_at_0, loc_0 + 16)
																																																									if rt_load_i32(memory_at_0, loc_1 + 40) >= rt_load_i32(memory_at_0, loc_1 + 36) then
																																																										while true do
																																																											reg_0 = FUNC_LIST[42](loc_0, 1)
																																																											reg_0 = rt_load_i32_u8(memory_at_0, loc_4 + 4)
																																																											break
																																																										end
																																																										if desired then
																																																											break
																																																										end
																																																									else
																																																										while true do
																																																											reg_0 = loc_2
																																																											break
																																																										end
																																																										if desired then
																																																											break
																																																										end
																																																									end
																																																									loc_2 = reg_0
																																																									reg_0 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																									break
																																																								end
																																																								if desired then
																																																									if desired == 53 then
																																																										desired = nil
																																																									end
																																																									break
																																																								end
																																																							else
																																																								while true do
																																																									reg_0 = loc_5
																																																									break
																																																								end
																																																								if desired then
																																																									if desired == 53 then
																																																										desired = nil
																																																									end
																																																									break
																																																								end
																																																							end
																																																							loc_5 = reg_0
																																																							loc_1 = rt_add_i32(rt_shl_i32(bit_and(loc_2, 255), 2), loc_7)
																																																							loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																																																							desired = 5
																																																							break
																																																						end
																																																						if desired then
																																																							if desired == 52 then
																																																								desired = nil
																																																							end
																																																							break
																																																						end
																																																						loc_2 = rt_load_i32(memory_at_0, loc_0 + 20)
																																																						loc_3 = rt_add_i32(bit_xor(rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_12 + 16) + 4), 4294967295), rt_shr_i32(rt_sub_i32(loc_5, rt_load_i32(memory_at_0, loc_2 + 4)), 4))
																																																						loc_16 = rt_add_i32(loc_1, 4)
																																																						while true do
																																																							loc_1 = rt_load_i32(memory_at_0, loc_1)
																																																							loc_19 = rt_shr_u32(loc_1, 16)
																																																							loc_18 = bit_and(loc_19, 255)
																																																							if loc_18 == 0 then
																																																								while true do
																																																									rt_store_i32(memory_at_0, loc_2 + 12, loc_16)
																																																									if rt_le_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 24), rt_load_i32(memory_at_0, loc_0 + 8)), rt_shl_i32(loc_3, 4)) then
																																																										while true do
																																																											FUNC_LIST[82](loc_0, loc_3)
																																																											break
																																																										end
																																																										if desired then
																																																											break
																																																										end
																																																									end
																																																									loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																									loc_2 = rt_add_i32(loc_5, bit_and(rt_shr_u32(loc_1, 4), 4080))
																																																									while true do
																																																										if rt_le_i32(loc_3, 0) then
																																																											break
																																																										end
																																																										loc_13 = bit_and(loc_3, 3)
																																																										loc_4 = rt_sub_i32(loc_5, rt_shl_i32(loc_3, 4))
																																																										loc_7 = 0
																																																										loc_1 = 0
																																																										if loc_3 >= 4 then
																																																											while true do
																																																												loc_15 = bit_and(loc_3, 2147483644)
																																																												loc_8 = 0
																																																												while true do
																																																													loc_6 = rt_shl_i32(loc_1, 4)
																																																													loc_9 = rt_add_i32(loc_6, loc_2)
																																																													loc_10 = rt_add_i32(loc_4, loc_6)
																																																													rt_store_i64(memory_at_0, loc_9, rt_load_i64(memory_at_0, loc_10))
																																																													rt_store_i64(memory_at_0, loc_9 + 8, rt_load_i64(memory_at_0, loc_10 + 8))
																																																													loc_9 = bit_or(loc_6, 16)
																																																													loc_10 = rt_add_i32(loc_9, loc_2)
																																																													loc_9 = rt_add_i32(loc_4, loc_9)
																																																													rt_store_i64(memory_at_0, loc_10 + 8, rt_load_i64(memory_at_0, loc_9 + 8))
																																																													rt_store_i64(memory_at_0, loc_10, rt_load_i64(memory_at_0, loc_9))
																																																													loc_9 = bit_or(loc_6, 32)
																																																													loc_10 = rt_add_i32(loc_9, loc_2)
																																																													loc_9 = rt_add_i32(loc_4, loc_9)
																																																													rt_store_i64(memory_at_0, loc_10 + 8, rt_load_i64(memory_at_0, loc_9 + 8))
																																																													rt_store_i64(memory_at_0, loc_10, rt_load_i64(memory_at_0, loc_9))
																																																													loc_6 = bit_or(loc_6, 48)
																																																													loc_9 = rt_add_i32(loc_6, loc_2)
																																																													loc_6 = rt_add_i32(loc_4, loc_6)
																																																													rt_store_i64(memory_at_0, loc_9 + 8, rt_load_i64(memory_at_0, loc_6 + 8))
																																																													rt_store_i64(memory_at_0, loc_9, rt_load_i64(memory_at_0, loc_6))
																																																													loc_1 = rt_add_i32(loc_1, 4)
																																																													loc_8 = rt_add_i32(loc_8, 4)
																																																													if loc_15 ~= loc_8 then
																																																														continue
																																																													end
																																																													break
																																																												end
																																																												if desired then
																																																													break
																																																												end
																																																												break
																																																											end
																																																											if desired then
																																																												if desired == 55 then
																																																													desired = nil
																																																												end
																																																												break
																																																											end
																																																										end
																																																										if loc_13 == 0 then
																																																											break
																																																										end
																																																										while true do
																																																											loc_6 = rt_shl_i32(loc_1, 4)
																																																											loc_8 = rt_add_i32(loc_6, loc_2)
																																																											loc_6 = rt_add_i32(loc_4, loc_6)
																																																											rt_store_i64(memory_at_0, loc_8, rt_load_i64(memory_at_0, loc_6))
																																																											rt_store_i64(memory_at_0, loc_8 + 8, rt_load_i64(memory_at_0, loc_6 + 8))
																																																											loc_1 = rt_add_i32(loc_1, 1)
																																																											loc_7 = rt_add_i32(loc_7, 1)
																																																											if loc_13 ~= loc_7 then
																																																												continue
																																																											end
																																																											break
																																																										end
																																																										if desired then
																																																											if desired == 55 then
																																																												desired = nil
																																																											end
																																																											break
																																																										end
																																																										break
																																																									end
																																																									if desired then
																																																										break
																																																									end
																																																									rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(rt_shl_i32(loc_3, 4), loc_2))
																																																									desired = 53
																																																									break
																																																								end
																																																								if desired then
																																																									if desired == 53 then
																																																										desired = nil
																																																									end
																																																									break
																																																								end
																																																							end
																																																							loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																																																							while true do
																																																								loc_15 = rt_sub_i32(loc_18, 1)
																																																								loc_6 = (if rt_gt_i32(loc_3, loc_15) then loc_15 else loc_3)
																																																								if rt_le_i32(loc_6, 0) then
																																																									break
																																																								end
																																																								loc_13 = bit_and(loc_6, 3)
																																																								loc_4 = rt_sub_i32(loc_5, rt_shl_i32(loc_3, 4))
																																																								loc_7 = 0
																																																								loc_2 = 0
																																																								if loc_6 >= 4 then
																																																									while true do
																																																										loc_17 = bit_and(loc_6, 2147483644)
																																																										loc_8 = 0
																																																										while true do
																																																											loc_6 = rt_shl_i32(loc_2, 4)
																																																											loc_9 = rt_add_i32(loc_6, loc_1)
																																																											loc_10 = rt_add_i32(loc_4, loc_6)
																																																											rt_store_i64(memory_at_0, loc_9, rt_load_i64(memory_at_0, loc_10))
																																																											rt_store_i64(memory_at_0, loc_9 + 8, rt_load_i64(memory_at_0, loc_10 + 8))
																																																											loc_9 = bit_or(loc_6, 16)
																																																											loc_10 = rt_add_i32(loc_9, loc_1)
																																																											loc_9 = rt_add_i32(loc_4, loc_9)
																																																											rt_store_i64(memory_at_0, loc_10 + 8, rt_load_i64(memory_at_0, loc_9 + 8))
																																																											rt_store_i64(memory_at_0, loc_10, rt_load_i64(memory_at_0, loc_9))
																																																											loc_9 = bit_or(loc_6, 32)
																																																											loc_10 = rt_add_i32(loc_9, loc_1)
																																																											loc_9 = rt_add_i32(loc_4, loc_9)
																																																											rt_store_i64(memory_at_0, loc_10 + 8, rt_load_i64(memory_at_0, loc_9 + 8))
																																																											rt_store_i64(memory_at_0, loc_10, rt_load_i64(memory_at_0, loc_9))
																																																											loc_6 = bit_or(loc_6, 48)
																																																											loc_9 = rt_add_i32(loc_6, loc_1)
																																																											loc_6 = rt_add_i32(loc_4, loc_6)
																																																											rt_store_i64(memory_at_0, loc_9 + 8, rt_load_i64(memory_at_0, loc_6 + 8))
																																																											rt_store_i64(memory_at_0, loc_9, rt_load_i64(memory_at_0, loc_6))
																																																											loc_2 = rt_add_i32(loc_2, 4)
																																																											loc_8 = rt_add_i32(loc_8, 4)
																																																											if loc_17 ~= loc_8 then
																																																												continue
																																																											end
																																																											break
																																																										end
																																																										if desired then
																																																											break
																																																										end
																																																										break
																																																									end
																																																									if desired then
																																																										if desired == 54 then
																																																											desired = nil
																																																										end
																																																										break
																																																									end
																																																								end
																																																								if loc_13 == 0 then
																																																									break
																																																								end
																																																								while true do
																																																									loc_6 = rt_shl_i32(loc_2, 4)
																																																									loc_8 = rt_add_i32(loc_6, loc_1)
																																																									loc_6 = rt_add_i32(loc_4, loc_6)
																																																									rt_store_i64(memory_at_0, loc_8, rt_load_i64(memory_at_0, loc_6))
																																																									rt_store_i64(memory_at_0, loc_8 + 8, rt_load_i64(memory_at_0, loc_6 + 8))
																																																									loc_2 = rt_add_i32(loc_2, 1)
																																																									loc_7 = rt_add_i32(loc_7, 1)
																																																									if loc_13 ~= loc_7 then
																																																										continue
																																																									end
																																																									break
																																																								end
																																																								if desired then
																																																									if desired == 54 then
																																																										desired = nil
																																																									end
																																																									break
																																																								end
																																																								break
																																																							end
																																																							if desired then
																																																								if desired == 53 then
																																																									desired = nil
																																																								end
																																																								break
																																																							end
																																																							if rt_ge_i32(loc_3, loc_15) then
																																																								break
																																																							end
																																																							loc_6 = rt_sub_i32(rt_sub_i32(loc_18, loc_3), 2)
																																																							loc_2 = 0
																																																							loc_4 = bit_and(rt_add_i32(bit_xor(loc_3, 4294967295), loc_19), 7)
																																																							if loc_4 ~= 0 then
																																																								while true do
																																																									while true do
																																																										rt_store_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_3, 4), loc_1) + 12, 0)
																																																										loc_3 = rt_add_i32(loc_3, 1)
																																																										loc_2 = rt_add_i32(loc_2, 1)
																																																										if loc_4 ~= loc_2 then
																																																											continue
																																																										end
																																																										break
																																																									end
																																																									if desired then
																																																										break
																																																									end
																																																									break
																																																								end
																																																								if desired then
																																																									if desired == 53 then
																																																										desired = nil
																																																									end
																																																									break
																																																								end
																																																							end
																																																							if loc_6 < 7 then
																																																								break
																																																							end
																																																							while true do
																																																								loc_2 = rt_add_i32(rt_shl_i32(loc_3, 4), loc_1)
																																																								rt_store_i32(memory_at_0, loc_2 + 12, 0)
																																																								rt_store_i32(memory_at_0, loc_2 + 28, 0)
																																																								rt_store_i32(memory_at_0, loc_2 + 44, 0)
																																																								rt_store_i32(memory_at_0, loc_2 + 60, 0)
																																																								rt_store_i32(memory_at_0, loc_2 + 76, 0)
																																																								rt_store_i32(memory_at_0, loc_2 + 92, 0)
																																																								rt_store_i32(memory_at_0, loc_2 + 108, 0)
																																																								rt_store_i32(memory_at_0, loc_2 + 124, 0)
																																																								loc_3 = rt_add_i32(loc_3, 8)
																																																								if loc_15 ~= loc_3 then
																																																									continue
																																																								end
																																																								break
																																																							end
																																																							if desired then
																																																								if desired == 53 then
																																																									desired = nil
																																																								end
																																																								break
																																																							end
																																																							break
																																																						end
																																																						if desired then
																																																							if desired == 52 then
																																																								desired = nil
																																																							end
																																																							break
																																																						end
																																																						loc_2 = rt_load_i32_u8(memory_at_0, loc_16)
																																																						loc_1 = loc_16
																																																						desired = 5
																																																						break
																																																					end
																																																					if desired then
																																																						if desired == 51 then
																																																							desired = nil
																																																						end
																																																						break
																																																					end
																																																					loc_1 = rt_load_i32(memory_at_0, loc_12 + 16)
																																																					loc_2 = rt_load_i32(memory_at_0, loc_0 + 20)
																																																					rt_store_i32(memory_at_0, loc_2 + 20, 4)
																																																					rt_store_i32(memory_at_0, loc_2 + 12, rt_load_i32(memory_at_0, loc_1 + 12))
																																																					reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1748)](loc_0, loc_1)
																																																					if reg_0 == 1 then
																																																						desired = 4
																																																						break
																																																					end
																																																					desired = 3
																																																					break
																																																				end
																																																				if desired then
																																																					if desired == 50 then
																																																						desired = nil
																																																					end
																																																					break
																																																				end
																																																				loc_2 = rt_add_i32(loc_1, 4)
																																																				loc_3 = rt_load_i32(memory_at_0, loc_1)
																																																				loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 4), 4080), loc_5)
																																																				while true do
																																																					while true do
																																																						while true do
																																																							if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_12 + 12) + 5) == 0 then
																																																								break
																																																							end
																																																							if rt_load_i32(memory_at_0, loc_1 + 28) ~= 6 then
																																																								break
																																																							end
																																																							if rt_load_i32(memory_at_0, loc_1 + 44) ~= 0 then
																																																								break
																																																							end
																																																							rt_store_i64(memory_at_0, loc_1 + 40, rt_i64_from_u32(128, 2))
																																																							rt_store_i32(memory_at_0, loc_1 + 32, 0)
																																																							rt_store_i32(memory_at_0, loc_1 + 12, 0)
																																																							desired = 52
																																																							break
																																																						end
																																																						if desired then
																																																							if desired == 52 then
																																																								desired = nil
																																																							end
																																																							break
																																																						end
																																																						if rt_load_i32(memory_at_0, loc_1 + 12) ~= 7 then
																																																							desired = 51
																																																							break
																																																						end
																																																						break
																																																					end
																																																					if desired then
																																																						if desired == 51 then
																																																							desired = nil
																																																						end
																																																						break
																																																					end
																																																					loc_1 = rt_add_i32(rt_shl_i32(rt_shr_i32(loc_3, 16), 2), loc_2)
																																																					loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																																																					desired = 5
																																																					break
																																																				end
																																																				if desired then
																																																					if desired == 50 then
																																																						desired = nil
																																																					end
																																																					break
																																																				end
																																																				desired = 1
																																																				break
																																																			end
																																																			if desired then
																																																				if desired == 49 then
																																																					desired = nil
																																																				end
																																																				break
																																																			end
																																																			loc_2 = rt_add_i32(loc_1, 4)
																																																			loc_3 = rt_load_i32(memory_at_0, loc_1)
																																																			loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 4), 4080), loc_5)
																																																			while true do
																																																				while true do
																																																					while true do
																																																						if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_12 + 12) + 5) == 0 then
																																																							break
																																																						end
																																																						if rt_load_i32(memory_at_0, loc_1 + 28) ~= 6 then
																																																							break
																																																						end
																																																						if rt_load_i32(memory_at_0, loc_1 + 44) ~= 3 then
																																																							break
																																																						end
																																																						if rt_load_f64(memory_at_0, loc_1 + 32) ~= 0e0 then
																																																							break
																																																						end
																																																						rt_store_i64(memory_at_0, loc_1 + 40, rt_i64_from_u32(128, 2))
																																																						rt_store_i32(memory_at_0, loc_1 + 32, 0)
																																																						rt_store_i32(memory_at_0, loc_1 + 12, 0)
																																																						desired = 51
																																																						break
																																																					end
																																																					if desired then
																																																						if desired == 51 then
																																																							desired = nil
																																																						end
																																																						break
																																																					end
																																																					if rt_load_i32(memory_at_0, loc_1 + 12) ~= 7 then
																																																						desired = 50
																																																						break
																																																					end
																																																					break
																																																				end
																																																				if desired then
																																																					if desired == 50 then
																																																						desired = nil
																																																					end
																																																					break
																																																				end
																																																				loc_1 = rt_add_i32(rt_shl_i32(rt_shr_i32(loc_3, 16), 2), loc_2)
																																																				loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																																																				desired = 5
																																																				break
																																																			end
																																																			if desired then
																																																				if desired == 49 then
																																																					desired = nil
																																																				end
																																																				break
																																																			end
																																																			desired = 1
																																																			break
																																																		end
																																																		if desired then
																																																			if desired == 48 then
																																																				desired = nil
																																																			end
																																																			break
																																																		end
																																																		loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1700)
																																																		if loc_2 ~= 0 then
																																																			while true do
																																																				rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, rt_add_i32(loc_1, 4))
																																																				TABLE_LIST[0].data[loc_2](loc_0, 4294967295)
																																																				if rt_load_i32_u8(memory_at_0, loc_0 + 3) ~= 0 then
																																																					desired = 8
																																																					break
																																																				end
																																																				reg_0 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																				break
																																																			end
																																																			if desired then
																																																				if desired == 48 then
																																																					desired = nil
																																																				end
																																																				break
																																																			end
																																																		else
																																																			while true do
																																																				reg_0 = loc_5
																																																				break
																																																			end
																																																			if desired then
																																																				if desired == 48 then
																																																					desired = nil
																																																				end
																																																				break
																																																			end
																																																		end
																																																		loc_5 = reg_0
																																																		loc_6 = rt_add_i32(loc_1, 4)
																																																		loc_4 = rt_load_i32(memory_at_0, loc_1 + 4)
																																																		while true do
																																																			loc_8 = rt_load_i32(memory_at_0, loc_1)
																																																			loc_3 = rt_shl_i32(bit_and(rt_shr_u32(loc_8, 8), 255), 4)
																																																			loc_2 = rt_add_i32(loc_3, loc_5)
																																																			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 0 then
																																																				break
																																																			end
																																																			if rt_load_i32(memory_at_0, loc_2 + 28) ~= 6 then
																																																				break
																																																			end
																																																			loc_10 = rt_load_i32(memory_at_0, loc_2 + 16)
																																																			loc_7 = rt_load_i32(memory_at_0, loc_10 + 8)
																																																			while true do
																																																				if rt_lt_i32(loc_4, 3) then
																																																					break
																																																				end
																																																				loc_13 = rt_add_i32(loc_2, 60)
																																																				loc_9 = rt_sub_i32(loc_4, 2)
																																																				loc_16 = bit_and(loc_9, 3)
																																																				loc_3 = 2
																																																				if rt_sub_i32(loc_4, 3) >= 3 then
																																																					while true do
																																																						loc_18 = rt_add_i32(loc_13, 48)
																																																						loc_19 = rt_add_i32(loc_13, 32)
																																																						loc_21 = bit_and(loc_9, 4294967292)
																																																						loc_15 = 0
																																																						while true do
																																																							loc_9 = rt_shl_i32(loc_3, 4)
																																																							loc_17 = rt_add_i32(loc_9, loc_13)
																																																							rt_store_i32(memory_at_0, loc_17, 0)
																																																							rt_store_i32(memory_at_0, loc_17 + 16, 0)
																																																							rt_store_i32(memory_at_0, rt_add_i32(loc_9, loc_19), 0)
																																																							rt_store_i32(memory_at_0, rt_add_i32(loc_9, loc_18), 0)
																																																							loc_3 = rt_add_i32(loc_3, 4)
																																																							loc_15 = rt_add_i32(loc_15, 4)
																																																							if loc_21 ~= loc_15 then
																																																								continue
																																																							end
																																																							break
																																																						end
																																																						if desired then
																																																							break
																																																						end
																																																						break
																																																					end
																																																					if desired then
																																																						if desired == 50 then
																																																							desired = nil
																																																						end
																																																						break
																																																					end
																																																				end
																																																				loc_9 = 0
																																																				if loc_16 == 0 then
																																																					break
																																																				end
																																																				while true do
																																																					rt_store_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_3, 4), loc_13), 0)
																																																					loc_3 = rt_add_i32(loc_3, 1)
																																																					loc_9 = rt_add_i32(loc_9, 1)
																																																					if loc_16 ~= loc_9 then
																																																						continue
																																																					end
																																																					break
																																																				end
																																																				if desired then
																																																					if desired == 50 then
																																																						desired = nil
																																																					end
																																																					break
																																																				end
																																																				break
																																																			end
																																																			if desired then
																																																				if desired == 49 then
																																																					desired = nil
																																																				end
																																																				break
																																																			end
																																																			loc_3 = rt_load_i32(memory_at_0, loc_2 + 32)
																																																			while true do
																																																				if rt_ge_i32(loc_4, 0) then
																																																					break
																																																				end
																																																				if loc_3 < loc_7 then
																																																					while true do
																																																						if rt_load_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_10 + 20), rt_shl_i32(loc_3, 4)) + 12) ~= 0 then
																																																							desired = 50
																																																							break
																																																						end
																																																						break
																																																					end
																																																					if desired then
																																																						if desired == 50 then
																																																							desired = nil
																																																						end
																																																						break
																																																					end
																																																				end
																																																				loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 8)
																																																				loc_1 = rt_add_i32(loc_1, 8)
																																																				desired = 5
																																																				break
																																																			end
																																																			if desired then
																																																				if desired == 49 then
																																																					desired = nil
																																																				end
																																																				break
																																																			end
																																																			if loc_3 < loc_7 then
																																																				while true do
																																																					loc_9 = rt_load_i32(memory_at_0, loc_10 + 20)
																																																					while true do
																																																						loc_4 = rt_add_i32(loc_3, 1)
																																																						loc_3 = rt_add_i32(rt_shl_i32(loc_3, 4), loc_9)
																																																						if rt_load_i32(memory_at_0, loc_3 + 12) ~= 0 then
																																																							while true do
																																																								rt_store_i32(memory_at_0, loc_2 + 60, 3)
																																																								rt_store_i64(memory_at_0, loc_2 + 40, rt_i64_from_u32(128, 2))
																																																								rt_store_i32(memory_at_0, loc_2 + 32, loc_4)
																																																								rt_store_f64(memory_at_0, loc_2 + 48, rt_convert_f64_i32(loc_4))
																																																								rt_store_i64(memory_at_0, loc_2 + 72, rt_load_i64(memory_at_0, loc_3 + 8))
																																																								rt_store_i64(memory_at_0, loc_2 + 64, rt_load_i64(memory_at_0, loc_3))
																																																								loc_1 = rt_add_i32(rt_shl_i32(rt_shr_i32(loc_8, 16), 2), loc_6)
																																																								loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																																																								desired = 5
																																																								break
																																																							end
																																																							if desired then
																																																								if desired == 51 then
																																																									desired = nil
																																																									continue
																																																								end
																																																								break
																																																							end
																																																						end
																																																						loc_3 = loc_4
																																																						if loc_7 ~= loc_3 then
																																																							continue
																																																						end
																																																						break
																																																					end
																																																					if desired then
																																																						break
																																																					end
																																																					reg_0 = loc_7
																																																					break
																																																				end
																																																				if desired then
																																																					if desired == 49 then
																																																						desired = nil
																																																					end
																																																					break
																																																				end
																																																			else
																																																				while true do
																																																					reg_0 = loc_3
																																																					break
																																																				end
																																																				if desired then
																																																					if desired == 49 then
																																																						desired = nil
																																																					end
																																																					break
																																																				end
																																																			end
																																																			loc_3 = reg_0
																																																			loc_4 = rt_sub_i32(loc_3, loc_7)
																																																			loc_9 = rt_load_i32_u8(memory_at_0, loc_10 + 6)
																																																			if rt_shr_u32(loc_4, loc_9) == 0 then
																																																				while true do
																																																					loc_10 = rt_load_i32(memory_at_0, loc_10 + 24)
																																																					while true do
																																																						loc_3 = rt_add_i32(loc_3, 1)
																																																						loc_4 = rt_add_i32(rt_shl_i32(loc_4, 5), loc_10)
																																																						if rt_load_i32(memory_at_0, loc_4 + 12) ~= 0 then
																																																							while true do
																																																								rt_store_i64(memory_at_0, loc_2 + 40, rt_i64_from_u32(128, 2))
																																																								rt_store_i32(memory_at_0, loc_2 + 32, loc_3)
																																																								rt_store_i64(memory_at_0, loc_2 + 48, rt_load_i64(memory_at_0, loc_4 + 16))
																																																								rt_store_i32(memory_at_0, loc_2 + 56, rt_load_i32(memory_at_0, loc_4 + 24))
																																																								rt_store_i32(memory_at_0, loc_2 + 60, bit_and(rt_load_i32(memory_at_0, loc_4 + 28), 15))
																																																								rt_store_i64(memory_at_0, loc_2 + 72, rt_load_i64(memory_at_0, loc_4 + 8))
																																																								rt_store_i64(memory_at_0, loc_2 + 64, rt_load_i64(memory_at_0, loc_4))
																																																								loc_1 = rt_add_i32(rt_shl_i32(rt_shr_i32(loc_8, 16), 2), loc_6)
																																																								loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																																																								desired = 5
																																																								break
																																																							end
																																																							if desired then
																																																								if desired == 51 then
																																																									desired = nil
																																																									continue
																																																								end
																																																								break
																																																							end
																																																						end
																																																						loc_4 = rt_sub_i32(loc_3, loc_7)
																																																						if rt_shr_u32(loc_4, loc_9) == 0 then
																																																							continue
																																																						end
																																																						break
																																																					end
																																																					if desired then
																																																						break
																																																					end
																																																					break
																																																				end
																																																				if desired then
																																																					if desired == 49 then
																																																						desired = nil
																																																					end
																																																					break
																																																				end
																																																			end
																																																			loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 8)
																																																			loc_1 = rt_add_i32(loc_1, 8)
																																																			desired = 5
																																																			break
																																																		end
																																																		if desired then
																																																			if desired == 48 then
																																																				desired = nil
																																																			end
																																																			break
																																																		end
																																																		rt_store_i64(memory_at_0, loc_2 + 80, rt_load_i64(memory_at_0, loc_2 + 32))
																																																		rt_store_i64(memory_at_0, loc_2 + 64, rt_load_i64(memory_at_0, loc_2 + 16))
																																																		rt_store_i64(memory_at_0, loc_2 + 48, rt_load_i64(memory_at_0, loc_2))
																																																		rt_store_i64(memory_at_0, loc_2 + 56, rt_load_i64(memory_at_0, loc_2 + 8))
																																																		rt_store_i64(memory_at_0, loc_2 + 72, rt_load_i64(memory_at_0, loc_2 + 24))
																																																		rt_store_i64(memory_at_0, loc_2 + 88, rt_load_i64(memory_at_0, loc_2 + 40))
																																																		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_2, 96))
																																																		rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_6)
																																																		FUNC_LIST[85](loc_0, rt_add_i32(loc_2, 48), bit_and(loc_4, 255))
																																																		rt_store_i32(memory_at_0, loc_0 + 8, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 8))
																																																		loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																		loc_1 = rt_add_i32(loc_3, loc_5)
																																																		rt_store_i64(memory_at_0, loc_1 + 40, rt_load_i64(memory_at_0, loc_1 + 56))
																																																		rt_store_i64(memory_at_0, loc_1 + 32, rt_load_i64(memory_at_0, loc_1 + 48))
																																																		loc_1 = rt_add_i32(rt_shl_i32((if rt_load_i32(memory_at_0, loc_1 + 60) ~= 0 then rt_shr_i32(loc_8, 16) else 1), 2), loc_6)
																																																		loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																																																		desired = 5
																																																		break
																																																	end
																																																	if desired then
																																																		if desired == 47 then
																																																			desired = nil
																																																		end
																																																		break
																																																	end
																																																	loc_2 = rt_add_i32(loc_1, 4)
																																																	loc_3 = 16
																																																	while true do
																																																		while true do
																																																			while true do
																																																				while true do
																																																					while true do
																																																						loc_4 = rt_load_i32(memory_at_0, loc_1)
																																																						loc_6 = bit_and(rt_shr_u32(loc_4, 8), 255)
																																																						loc_1 = rt_add_i32(rt_shl_i32(loc_6, 4), loc_5)
																																																						if not br_map[3] then
																																																							br_map[3] = (function()
																																																								return { [0] = 1, 2, 0, }
																																																							end)()
																																																						end
																																																						temp = br_map[3][rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 12), 6)] or 4
																																																						if temp < 2 then
																																																							if temp < 1 then
																																																								break
																																																							else
																																																								desired = 51
																																																								break
																																																							end
																																																						elseif temp > 2 then
																																																							desired = 48
																																																							break
																																																						else
																																																							desired = 50
																																																							break
																																																						end
																																																					end
																																																					if desired then
																																																						if desired == 51 then
																																																							desired = nil
																																																						end
																																																						break
																																																					end
																																																					loc_3 = 8
																																																					break
																																																				end
																																																				if desired then
																																																					if desired == 50 then
																																																						desired = nil
																																																					end
																																																					break
																																																				end
																																																				while true do
																																																					while true do
																																																						loc_3 = rt_load_i32(memory_at_0, rt_add_i32(loc_3, rt_load_i32(memory_at_0, loc_1)))
																																																						if loc_3 == 0 then
																																																							break
																																																						end
																																																						loc_7 = rt_load_i32_u8(memory_at_0, loc_3 + 3)
																																																						if bit_and(loc_7, 32) ~= 0 then
																																																							while true do
																																																								reg_0 = loc_7
																																																								break
																																																							end
																																																							if desired then
																																																								if desired == 52 then
																																																									desired = nil
																																																								end
																																																								break
																																																							end
																																																						else
																																																							while true do
																																																								reg_0 = FUNC_LIST[460](loc_3, 5, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1548))
																																																								loc_7 = reg_0
																																																								if loc_7 ~= 0 then
																																																									desired = 51
																																																									break
																																																								end
																																																								reg_0 = rt_load_i32_u8(memory_at_0, loc_3 + 3)
																																																								break
																																																							end
																																																							if desired then
																																																								if desired == 52 then
																																																									desired = nil
																																																								end
																																																								break
																																																							end
																																																						end
																																																						loc_7 = reg_0
																																																						if bit_and(loc_7, 16) ~= 0 then
																																																							break
																																																						end
																																																						reg_0 = FUNC_LIST[460](loc_3, 4, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1544))
																																																						if reg_0 ~= 0 then
																																																							desired = 50
																																																							break
																																																						end
																																																						break
																																																					end
																																																					if desired then
																																																						if desired == 51 then
																																																							desired = nil
																																																						end
																																																						break
																																																					end
																																																					if rt_load_i32(memory_at_0, loc_1 + 12) ~= 6 then
																																																						desired = 48
																																																						break
																																																					end
																																																					rt_store_i64(memory_at_0, loc_1 + 40, rt_i64_from_u32(128, 2))
																																																					rt_store_i32(memory_at_0, loc_1 + 32, 0)
																																																					rt_store_i64(memory_at_0, loc_1 + 16, rt_load_i64(memory_at_0, loc_1))
																																																					rt_store_i64(memory_at_0, loc_1 + 24, rt_load_i64(memory_at_0, loc_1 + 8))
																																																					rt_store_i32(memory_at_0, loc_1 + 12, 0)
																																																					desired = 50
																																																					break
																																																				end
																																																				if desired then
																																																					if desired == 50 then
																																																						desired = nil
																																																					end
																																																					break
																																																				end
																																																				rt_store_i64(memory_at_0, loc_1 + 16, rt_load_i64(memory_at_0, loc_1))
																																																				loc_5 = rt_add_i32(loc_1, 8)
																																																				rt_store_i64(memory_at_0, loc_1 + 24, rt_load_i64(memory_at_0, loc_5))
																																																				rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_7 + 8))
																																																				rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_7))
																																																				rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_1, 32))
																																																				rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_2)
																																																				FUNC_LIST[85](loc_0, loc_1, 3)
																																																				loc_1 = rt_load_i32(memory_at_0, loc_0 + 20)
																																																				rt_store_i32(memory_at_0, loc_0 + 8, rt_load_i32(memory_at_0, loc_1 + 8))
																																																				loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																				loc_3 = rt_add_i32(loc_5, rt_shl_i32(loc_6, 4))
																																																				if rt_load_i32(memory_at_0, loc_3 + 12) == 0 then
																																																					desired = 49
																																																					break
																																																				end
																																																				break
																																																			end
																																																			if desired then
																																																				if desired == 49 then
																																																					desired = nil
																																																				end
																																																				break
																																																			end
																																																			loc_1 = rt_add_i32(rt_shl_i32(rt_shr_i32(loc_4, 16), 2), loc_2)
																																																			loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																																																			desired = 5
																																																			break
																																																		end
																																																		if desired then
																																																			if desired == 48 then
																																																				desired = nil
																																																			end
																																																			break
																																																		end
																																																		rt_store_i32(memory_at_0, loc_1 + 12, loc_2)
																																																		FUNC_LIST[59](loc_0, loc_3, 2975)
																																																		error("out of code bounds")
																																																	end
																																																	if desired then
																																																		if desired == 47 then
																																																			desired = nil
																																																		end
																																																		break
																																																	end
																																																	desired = 1
																																																	break
																																																end
																																																if desired then
																																																	if desired == 46 then
																																																		desired = nil
																																																	end
																																																	break
																																																end
																																																loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1700)
																																																if loc_2 ~= 0 then
																																																	while true do
																																																		rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, rt_add_i32(loc_1, 4))
																																																		TABLE_LIST[0].data[loc_2](loc_0, 4294967295)
																																																		if rt_load_i32_u8(memory_at_0, loc_0 + 3) ~= 0 then
																																																			desired = 8
																																																			break
																																																		end
																																																		reg_0 = rt_load_i32(memory_at_0, loc_0 + 12)
																																																		break
																																																	end
																																																	if desired then
																																																		if desired == 46 then
																																																			desired = nil
																																																		end
																																																		break
																																																	end
																																																else
																																																	while true do
																																																		reg_0 = loc_5
																																																		break
																																																	end
																																																	if desired then
																																																		if desired == 46 then
																																																			desired = nil
																																																		end
																																																		break
																																																	end
																																																end
																																																loc_5 = reg_0
																																																loc_3 = rt_load_i32(memory_at_0, loc_1)
																																																loc_2 = rt_add_i32(loc_5, bit_and(rt_shr_u32(loc_3, 4), 4080))
																																																rt_store_i32(memory_at_0, loc_2 + 44, 3)
																																																loc_22 = rt_load_f64(memory_at_0, loc_2 + 16)
																																																loc_23 = (loc_22 + rt_load_f64(memory_at_0, loc_2 + 32))
																																																rt_store_f64(memory_at_0, loc_2 + 32, loc_23)
																																																loc_1 = rt_add_i32(loc_1, 4)
																																																loc_24 = rt_load_f64(memory_at_0, loc_2)
																																																while true do
																																																	while true do
																																																		if loc_22 > 0e0 then
																																																			while true do
																																																				if loc_23 <= loc_24 then
																																																					desired = 48
																																																					break
																																																				end
																																																				desired = 47
																																																				break
																																																			end
																																																			if desired then
																																																				if desired == 48 then
																																																					desired = nil
																																																				end
																																																				break
																																																			end
																																																		end
																																																		if (if loc_23 >= loc_24 then 1 else 0) == 0 then
																																																			desired = 47
																																																			break
																																																		end
																																																		break
																																																	end
																																																	if desired then
																																																		if desired == 47 then
																																																			desired = nil
																																																		end
																																																		break
																																																	end
																																																	loc_1 = rt_add_i32(rt_shl_i32(rt_shr_i32(loc_3, 16), 2), loc_1)
																																																	break
																																																end
																																																if desired then
																																																	if desired == 46 then
																																																		desired = nil
																																																	end
																																																	break
																																																end
																																																loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																																																desired = 5
																																																break
																																															end
																																															if desired then
																																																if desired == 45 then
																																																	desired = nil
																																																end
																																																break
																																															end
																																															loc_2 = rt_add_i32(loc_1, 4)
																																															while true do
																																																while true do
																																																	loc_3 = rt_load_i32(memory_at_0, loc_1)
																																																	loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 4), 4080), loc_5)
																																																	if rt_load_i32(memory_at_0, loc_1 + 12) ~= 3 then
																																																		break
																																																	end
																																																	if rt_load_i32(memory_at_0, loc_1 + 28) ~= 3 then
																																																		break
																																																	end
																																																	if rt_load_i32(memory_at_0, loc_1 + 44) == 3 then
																																																		desired = 46
																																																		break
																																																	end
																																																	break
																																																end
																																																if desired then
																																																	if desired == 46 then
																																																		desired = nil
																																																	end
																																																	break
																																																end
																																																rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_2)
																																																FUNC_LIST[606](loc_0, loc_1, rt_add_i32(loc_1, 16), rt_add_i32(loc_1, 32))
																																																break
																																															end
																																															if desired then
																																																if desired == 45 then
																																																	desired = nil
																																																end
																																																break
																																															end
																																															loc_22 = rt_load_f64(memory_at_0, loc_1 + 32)
																																															loc_23 = rt_load_f64(memory_at_0, loc_1)
																																															while true do
																																																while true do
																																																	if rt_load_f64(memory_at_0, loc_1 + 16) > 0e0 then
																																																		while true do
																																																			if (if loc_22 <= loc_23 then 1 else 0) == 0 then
																																																				desired = 47
																																																				break
																																																			end
																																																			reg_0 = 0
																																																			desired = 46
																																																			break
																																																		end
																																																		if desired then
																																																			if desired == 47 then
																																																				desired = nil
																																																			end
																																																			break
																																																		end
																																																	end
																																																	if (if loc_22 >= loc_23 then 1 else 0) == 0 then
																																																		break
																																																	end
																																																	reg_0 = 0
																																																	desired = 46
																																																	break
																																																end
																																																if desired then
																																																	if desired == 46 then
																																																		desired = nil
																																																	end
																																																	break
																																																end
																																																reg_0 = rt_shr_i32(loc_3, 16)
																																																break
																																															end
																																															if desired then
																																																if desired == 45 then
																																																	desired = nil
																																																end
																																																break
																																															end
																																															loc_1 = reg_0
																																															loc_1 = rt_add_i32(rt_shl_i32(loc_1, 2), loc_2)
																																															loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																																															desired = 5
																																															break
																																														end
																																														if desired then
																																															if desired == 44 then
																																																desired = nil
																																															end
																																															break
																																														end
																																														loc_2 = rt_load_i32(memory_at_0, loc_1)
																																														loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5)
																																														loc_6 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																														loc_7 = rt_load_i32(memory_at_0, loc_1 + 4)
																																														if loc_2 > 16777215 then
																																															while true do
																																																reg_0 = rt_sub_i32(rt_shr_u32(loc_2, 24), 1)
																																																break
																																															end
																																															if desired then
																																																if desired == 44 then
																																																	desired = nil
																																																end
																																																break
																																															end
																																														else
																																															while true do
																																																loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
																																																rt_store_i32(memory_at_0, loc_0 + 8, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 8))
																																																reg_0 = rt_shr_i32(rt_sub_i32(loc_2, loc_4), 4)
																																																break
																																															end
																																															if desired then
																																																if desired == 44 then
																																																	desired = nil
																																																end
																																																break
																																															end
																																														end
																																														loc_3 = reg_0
																																														if rt_load_i32(memory_at_0, loc_6 + 12) ~= 6 then
																																															desired = 3
																																															break
																																														end
																																														loc_1 = rt_add_i32(loc_1, 8)
																																														loc_2 = rt_sub_i32(rt_add_i32(loc_3, loc_7), 1)
																																														loc_16 = rt_load_i32(memory_at_0, loc_6)
																																														if rt_gt_i32(loc_2, rt_load_i32(memory_at_0, loc_16 + 8)) then
																																															while true do
																																																rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_1)
																																																FUNC_LIST[417](loc_0, loc_16, loc_2)
																																																break
																																															end
																																															if desired then
																																																if desired == 44 then
																																																	desired = nil
																																																end
																																																break
																																															end
																																														end
																																														while true do
																																															if rt_le_i32(loc_3, 0) then
																																																break
																																															end
																																															loc_13 = bit_and(loc_3, 3)
																																															loc_15 = rt_add_i32(rt_load_i32(memory_at_0, loc_16 + 20), rt_shl_i32(loc_7, 4))
																																															loc_6 = rt_sub_i32(loc_15, 16)
																																															loc_8 = 0
																																															loc_2 = 0
																																															if loc_3 >= 4 then
																																																while true do
																																																	loc_17 = bit_and(loc_3, 2147483644)
																																																	loc_9 = 0
																																																	while true do
																																																		loc_3 = rt_shl_i32(loc_2, 4)
																																																		loc_10 = rt_add_i32(loc_3, loc_6)
																																																		loc_7 = rt_add_i32(loc_3, loc_4)
																																																		rt_store_i64(memory_at_0, loc_10, rt_load_i64(memory_at_0, loc_7))
																																																		rt_store_i64(memory_at_0, loc_10 + 8, rt_load_i64(memory_at_0, loc_7 + 8))
																																																		loc_10 = rt_add_i32(loc_3, loc_15)
																																																		rt_store_i64(memory_at_0, loc_10 + 8, rt_load_i64(memory_at_0, loc_7 + 24))
																																																		rt_store_i64(memory_at_0, loc_10, rt_load_i64(memory_at_0, loc_7 + 16))
																																																		loc_7 = bit_or(loc_3, 32)
																																																		loc_10 = rt_add_i32(loc_7, loc_6)
																																																		loc_7 = rt_add_i32(loc_4, loc_7)
																																																		rt_store_i64(memory_at_0, loc_10 + 8, rt_load_i64(memory_at_0, loc_7 + 8))
																																																		rt_store_i64(memory_at_0, loc_10, rt_load_i64(memory_at_0, loc_7))
																																																		loc_3 = bit_or(loc_3, 48)
																																																		loc_7 = rt_add_i32(loc_3, loc_6)
																																																		loc_3 = rt_add_i32(loc_3, loc_4)
																																																		rt_store_i64(memory_at_0, loc_7 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
																																																		rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_3))
																																																		loc_2 = rt_add_i32(loc_2, 4)
																																																		loc_9 = rt_add_i32(loc_9, 4)
																																																		if loc_17 ~= loc_9 then
																																																			continue
																																																		end
																																																		break
																																																	end
																																																	if desired then
																																																		break
																																																	end
																																																	break
																																																end
																																																if desired then
																																																	if desired == 45 then
																																																		desired = nil
																																																	end
																																																	break
																																																end
																																															end
																																															if loc_13 == 0 then
																																																break
																																															end
																																															while true do
																																																loc_3 = rt_shl_i32(loc_2, 4)
																																																loc_7 = rt_add_i32(loc_3, loc_6)
																																																loc_3 = rt_add_i32(loc_3, loc_4)
																																																rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_3))
																																																rt_store_i64(memory_at_0, loc_7 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
																																																loc_2 = rt_add_i32(loc_2, 1)
																																																loc_8 = rt_add_i32(loc_8, 1)
																																																if loc_13 ~= loc_8 then
																																																	continue
																																																end
																																																break
																																															end
																																															if desired then
																																																if desired == 45 then
																																																	desired = nil
																																																end
																																																break
																																															end
																																															break
																																														end
																																														if desired then
																																															if desired == 44 then
																																																desired = nil
																																															end
																																															break
																																														end
																																														if bit_and(rt_load_i32_u8(memory_at_0, loc_16 + 1), 4) ~= 0 then
																																															while true do
																																																FUNC_LIST[51](loc_0, loc_16, rt_add_i32(loc_16, 28))
																																																break
																																															end
																																															if desired then
																																																if desired == 44 then
																																																	desired = nil
																																																end
																																																break
																																															end
																																														end
																																														loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																																														desired = 5
																																														break
																																													end
																																													if desired then
																																														if desired == 43 then
																																															desired = nil
																																														end
																																														break
																																													end
																																													loc_2 = rt_load_i32(memory_at_0, loc_1)
																																													loc_1 = rt_add_i32(loc_1, 4)
																																													rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_1)
																																													reg_0 = FUNC_LIST[434](loc_0, rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(rt_shr_i32(loc_2, 16), 4), loc_11)))
																																													loc_3 = reg_0
																																													loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																													rt_store_i32(memory_at_0, loc_2 + 12, 6)
																																													rt_store_i32(memory_at_0, loc_2, loc_3)
																																													rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_1)
																																													loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
																																													if rt_load_i32(memory_at_0, loc_2 + 40) >= rt_load_i32(memory_at_0, loc_2 + 36) then
																																														while true do
																																															reg_0 = FUNC_LIST[42](loc_0, 1)
																																															break
																																														end
																																														if desired then
																																															if desired == 43 then
																																																desired = nil
																																															end
																																															break
																																														end
																																													end
																																													loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																																													loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																													desired = 5
																																													break
																																												end
																																												if desired then
																																													if desired == 42 then
																																														desired = nil
																																													end
																																													break
																																												end
																																												loc_3 = rt_load_i32(memory_at_0, loc_1 + 4)
																																												loc_2 = rt_load_i32(memory_at_0, loc_1)
																																												loc_1 = rt_add_i32(loc_1, 8)
																																												rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_1)
																																												loc_4 = bit_and(rt_shr_u32(loc_2, 16), 255)
																																												reg_0 = FUNC_LIST[423](loc_0, loc_3, (if loc_4 ~= 0 then rt_shl_i32(1, rt_sub_i32(loc_4, 1)) else 0))
																																												loc_3 = reg_0
																																												loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																												rt_store_i32(memory_at_0, loc_2 + 12, 6)
																																												rt_store_i32(memory_at_0, loc_2, loc_3)
																																												rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_1)
																																												loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
																																												if rt_load_i32(memory_at_0, loc_2 + 40) >= rt_load_i32(memory_at_0, loc_2 + 36) then
																																													while true do
																																														reg_0 = FUNC_LIST[42](loc_0, 1)
																																														break
																																													end
																																													if desired then
																																														if desired == 42 then
																																															desired = nil
																																														end
																																														break
																																													end
																																												end
																																												loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																																												loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																												desired = 5
																																												break
																																											end
																																											if desired then
																																												if desired == 41 then
																																													desired = nil
																																												end
																																												break
																																											end
																																											loc_3 = rt_add_i32(loc_1, 4)
																																											loc_2 = rt_load_i32(memory_at_0, loc_1)
																																											loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																											while true do
																																												while true do
																																													loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5)
																																													loc_4 = rt_load_i32(memory_at_0, loc_2 + 12)
																																													if loc_4 ~= 6 then
																																														while true do
																																															if loc_4 ~= 5 then
																																																desired = 42
																																																break
																																															end
																																															loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2) + 16)
																																															rt_store_i32(memory_at_0, loc_1 + 12, 3)
																																															rt_store_f64(memory_at_0, loc_1, no_op(loc_2))
																																															desired = 43
																																															break
																																														end
																																														if desired then
																																															if desired == 43 then
																																																desired = nil
																																															end
																																															break
																																														end
																																													end
																																													loc_4 = rt_load_i32(memory_at_0, loc_2)
																																													loc_6 = rt_load_i32(memory_at_0, loc_4 + 16)
																																													if loc_6 ~= 0 then
																																														while true do
																																															if bit_and(rt_load_i32_u8(memory_at_0, loc_6 + 3), 64) == 0 then
																																																desired = 42
																																																break
																																															end
																																															break
																																														end
																																														if desired then
																																															if desired == 43 then
																																																desired = nil
																																															end
																																															break
																																														end
																																													end
																																													reg_0 = FUNC_LIST[433](loc_4)
																																													loc_2 = reg_0
																																													rt_store_i32(memory_at_0, loc_1 + 12, 3)
																																													rt_store_f64(memory_at_0, loc_1, rt_convert_f64_i32(loc_2))
																																													break
																																												end
																																												if desired then
																																													if desired == 42 then
																																														desired = nil
																																													end
																																													break
																																												end
																																												loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																												loc_1 = loc_3
																																												desired = 5
																																												break
																																											end
																																											if desired then
																																												if desired == 41 then
																																													desired = nil
																																												end
																																												break
																																											end
																																											rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																											FUNC_LIST[605](loc_0, loc_1, loc_2)
																																											loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																											loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																											loc_1 = loc_3
																																											desired = 5
																																											break
																																										end
																																										if desired then
																																											if desired == 40 then
																																												desired = nil
																																											end
																																											break
																																										end
																																										loc_3 = rt_add_i32(loc_1, 4)
																																										loc_2 = rt_load_i32(memory_at_0, loc_1)
																																										loc_6 = bit_and(rt_shr_u32(loc_2, 8), 255)
																																										loc_1 = rt_add_i32(rt_shl_i32(loc_6, 4), loc_5)
																																										while true do
																																											while true do
																																												while true do
																																													while true do
																																														while true do
																																															loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5)
																																															loc_4 = rt_load_i32(memory_at_0, loc_2 + 12)
																																															if loc_4 ~= 3 then
																																																while true do
																																																	if not br_map[4] then
																																																		br_map[4] = (function()
																																																			return { [0] = 1, 4, 4, 4, 3, }
																																																		end)()
																																																	end
																																																	temp = br_map[4][rt_sub_i32(loc_4, 4)] or 4
																																																	if temp < 3 then
																																																		desired = 45
																																																		break
																																																	elseif temp > 3 then
																																																		desired = 42
																																																		break
																																																	else
																																																		desired = 43
																																																		break
																																																	end
																																																end
																																																if desired then
																																																	if desired == 45 then
																																																		desired = nil
																																																	end
																																																	break
																																																end
																																															end
																																															loc_22 = rt_load_f64(memory_at_0, loc_2)
																																															rt_store_i32(memory_at_0, loc_1 + 12, 3)
																																															rt_store_f64(memory_at_0, loc_1, rt_neg_f64(loc_22))
																																															desired = 44
																																															break
																																														end
																																														if desired then
																																															if desired == 44 then
																																																desired = nil
																																															end
																																															break
																																														end
																																														rt_store_f32(memory_at_0, loc_1, rt_neg_f32(rt_load_f32(memory_at_0, loc_2)))
																																														rt_store_f32(memory_at_0, loc_1 + 4, rt_neg_f32(rt_load_f32(memory_at_0, loc_2 + 4)))
																																														loc_25 = rt_load_f32(memory_at_0, loc_2 + 8)
																																														rt_store_i32(memory_at_0, loc_1 + 12, 4)
																																														rt_store_f32(memory_at_0, loc_1 + 8, rt_neg_f32(loc_25))
																																														break
																																													end
																																													if desired then
																																														if desired == 43 then
																																															desired = nil
																																														end
																																														break
																																													end
																																													loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																													loc_1 = loc_3
																																													desired = 5
																																													break
																																												end
																																												if desired then
																																													if desired == 42 then
																																														desired = nil
																																													end
																																													break
																																												end
																																												reg_0 = FUNC_LIST[461](loc_0, loc_2, 15)
																																												loc_5 = reg_0
																																												if loc_5 == 0 then
																																													break
																																												end
																																												if rt_load_i32(memory_at_0, loc_5 + 12) ~= 7 then
																																													break
																																												end
																																												if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_5) + 3) == 0 then
																																													break
																																												end
																																												loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
																																												rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_5))
																																												rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
																																												rt_store_i64(memory_at_0, loc_1 + 24, rt_load_i64(memory_at_0, loc_2 + 8))
																																												rt_store_i64(memory_at_0, loc_1 + 16, rt_load_i64(memory_at_0, loc_2))
																																												rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_1, 32))
																																												rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																												FUNC_LIST[607](loc_0, 1, loc_6)
																																												desired = 41
																																												break
																																											end
																																											if desired then
																																												if desired == 41 then
																																													desired = nil
																																												end
																																												break
																																											end
																																											rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																											FUNC_LIST[604](loc_0, loc_1, loc_2, loc_2)
																																											break
																																										end
																																										if desired then
																																											if desired == 40 then
																																												desired = nil
																																											end
																																											break
																																										end
																																										loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																										loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																										loc_1 = loc_3
																																										desired = 5
																																										break
																																									end
																																									if desired then
																																										if desired == 39 then
																																											desired = nil
																																										end
																																										break
																																									end
																																									loc_2 = rt_load_i32(memory_at_0, loc_1)
																																									loc_1 = rt_add_i32(loc_1, 4)
																																									loc_3 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																									loc_4 = 1
																																									while true do
																																										while true do
																																											while true do
																																												loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5)
																																												if not br_map[5] then
																																													br_map[5] = (function()
																																														return { [0] = 2, 0, }
																																													end)()
																																												end
																																												temp = br_map[5][rt_load_i32(memory_at_0, loc_2 + 12)] or 1
																																												if temp < 1 then
																																													break
																																												elseif temp > 1 then
																																													desired = 40
																																													break
																																												else
																																													desired = 41
																																													break
																																												end
																																											end
																																											if desired then
																																												if desired == 41 then
																																													desired = nil
																																												end
																																												break
																																											end
																																											loc_4 = (if rt_load_i32(memory_at_0, loc_2) == 0 then 1 else 0)
																																											desired = 40
																																											break
																																										end
																																										if desired then
																																											if desired == 40 then
																																												desired = nil
																																											end
																																											break
																																										end
																																										loc_4 = 0
																																										break
																																									end
																																									if desired then
																																										if desired == 39 then
																																											desired = nil
																																										end
																																										break
																																									end
																																									rt_store_i32(memory_at_0, loc_3 + 12, 1)
																																									rt_store_i32(memory_at_0, loc_3, loc_4)
																																									loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																																									desired = 5
																																									break
																																								end
																																								if desired then
																																									if desired == 38 then
																																										desired = nil
																																									end
																																									break
																																								end
																																								loc_2 = rt_load_i32(memory_at_0, loc_1)
																																								loc_1 = rt_add_i32(loc_1, 4)
																																								rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_1)
																																								loc_5 = rt_shr_u32(loc_2, 24)
																																								loc_3 = bit_and(rt_shr_u32(loc_2, 16), 255)
																																								FUNC_LIST[595](loc_0, rt_add_i32(rt_sub_i32(loc_5, loc_3), 1), loc_5)
																																								loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																								loc_2 = rt_add_i32(loc_5, bit_and(rt_shr_u32(loc_2, 4), 4080))
																																								loc_5 = rt_add_i32(rt_shl_i32(loc_3, 4), loc_5)
																																								rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_5))
																																								rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
																																								rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_1)
																																								loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
																																								if rt_load_i32(memory_at_0, loc_2 + 40) >= rt_load_i32(memory_at_0, loc_2 + 36) then
																																									while true do
																																										reg_0 = FUNC_LIST[42](loc_0, 1)
																																										break
																																									end
																																									if desired then
																																										if desired == 38 then
																																											desired = nil
																																										end
																																										break
																																									end
																																								end
																																								loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																																								loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																								desired = 5
																																								break
																																							end
																																							if desired then
																																								if desired == 37 then
																																									desired = nil
																																								end
																																								break
																																							end
																																							loc_2 = rt_load_i32(memory_at_0, loc_1)
																																							loc_1 = rt_add_i32(loc_1, 4)
																																							loc_3 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 20), 4080), loc_11)
																																							loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																							while true do
																																								while true do
																																									while true do
																																										loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5)
																																										if not br_map[6] then
																																											br_map[6] = (function()
																																												return { [0] = 2, 0, }
																																											end)()
																																										end
																																										temp = br_map[6][rt_load_i32(memory_at_0, loc_2 + 12)] or 1
																																										if temp < 1 then
																																											break
																																										elseif temp > 1 then
																																											desired = 38
																																											break
																																										else
																																											desired = 39
																																											break
																																										end
																																									end
																																									if desired then
																																										if desired == 39 then
																																											desired = nil
																																										end
																																										break
																																									end
																																									if rt_load_i32(memory_at_0, loc_2) == 0 then
																																										desired = 38
																																										break
																																									end
																																									break
																																								end
																																								if desired then
																																									if desired == 38 then
																																										desired = nil
																																									end
																																									break
																																								end
																																								loc_3 = loc_2
																																								break
																																							end
																																							if desired then
																																								if desired == 37 then
																																									desired = nil
																																								end
																																								break
																																							end
																																							rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_3))
																																							rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
																																							loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																																							desired = 5
																																							break
																																						end
																																						if desired then
																																							if desired == 36 then
																																								desired = nil
																																							end
																																							break
																																						end
																																						loc_3 = rt_load_i32(memory_at_0, loc_1)
																																						loc_1 = rt_add_i32(loc_1, 4)
																																						loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 4), 4080), loc_5)
																																						while true do
																																							while true do
																																								while true do
																																									loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 12), 4080), loc_5)
																																									if not br_map[7] then
																																										br_map[7] = (function()
																																											return { [0] = 2, 0, }
																																										end)()
																																									end
																																									temp = br_map[7][rt_load_i32(memory_at_0, loc_2 + 12)] or 1
																																									if temp < 1 then
																																										break
																																									elseif temp > 1 then
																																										desired = 37
																																										break
																																									else
																																										desired = 38
																																										break
																																									end
																																								end
																																								if desired then
																																									if desired == 38 then
																																										desired = nil
																																									end
																																									break
																																								end
																																								if rt_load_i32(memory_at_0, loc_2) == 0 then
																																									desired = 37
																																									break
																																								end
																																								break
																																							end
																																							if desired then
																																								if desired == 37 then
																																									desired = nil
																																								end
																																								break
																																							end
																																							loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 20), 4080), loc_11)
																																							break
																																						end
																																						if desired then
																																							if desired == 36 then
																																								desired = nil
																																							end
																																							break
																																						end
																																						rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_2))
																																						rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
																																						loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																																						desired = 5
																																						break
																																					end
																																					if desired then
																																						if desired == 35 then
																																							desired = nil
																																						end
																																						break
																																					end
																																					loc_2 = rt_load_i32(memory_at_0, loc_1)
																																					loc_1 = rt_add_i32(loc_1, 4)
																																					loc_3 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 20), 4080), loc_5)
																																					loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 4), 4080), loc_5)
																																					while true do
																																						while true do
																																							while true do
																																								loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5)
																																								if not br_map[8] then
																																									br_map[8] = (function()
																																										return { [0] = 2, 0, }
																																									end)()
																																								end
																																								temp = br_map[8][rt_load_i32(memory_at_0, loc_2 + 12)] or 1
																																								if temp < 1 then
																																									break
																																								elseif temp > 1 then
																																									desired = 36
																																									break
																																								else
																																									desired = 37
																																									break
																																								end
																																							end
																																							if desired then
																																								if desired == 37 then
																																									desired = nil
																																								end
																																								break
																																							end
																																							if rt_load_i32(memory_at_0, loc_2) == 0 then
																																								desired = 36
																																								break
																																							end
																																							break
																																						end
																																						if desired then
																																							if desired == 36 then
																																								desired = nil
																																							end
																																							break
																																						end
																																						loc_3 = loc_2
																																						break
																																					end
																																					if desired then
																																						if desired == 35 then
																																							desired = nil
																																						end
																																						break
																																					end
																																					rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_3))
																																					rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
																																					loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																																					desired = 5
																																					break
																																				end
																																				if desired then
																																					if desired == 34 then
																																						desired = nil
																																					end
																																					break
																																				end
																																				loc_3 = rt_load_i32(memory_at_0, loc_1)
																																				loc_1 = rt_add_i32(loc_1, 4)
																																				loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 4), 4080), loc_5)
																																				while true do
																																					while true do
																																						while true do
																																							loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 12), 4080), loc_5)
																																							if not br_map[9] then
																																								br_map[9] = (function()
																																									return { [0] = 2, 0, }
																																								end)()
																																							end
																																							temp = br_map[9][rt_load_i32(memory_at_0, loc_2 + 12)] or 1
																																							if temp < 1 then
																																								break
																																							elseif temp > 1 then
																																								desired = 35
																																								break
																																							else
																																								desired = 36
																																								break
																																							end
																																						end
																																						if desired then
																																							if desired == 36 then
																																								desired = nil
																																							end
																																							break
																																						end
																																						if rt_load_i32(memory_at_0, loc_2) == 0 then
																																							desired = 35
																																							break
																																						end
																																						break
																																					end
																																					if desired then
																																						if desired == 35 then
																																							desired = nil
																																						end
																																						break
																																					end
																																					loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 20), 4080), loc_5)
																																					break
																																				end
																																				if desired then
																																					if desired == 34 then
																																						desired = nil
																																					end
																																					break
																																				end
																																				rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_2))
																																				rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
																																				loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																																				desired = 5
																																				break
																																			end
																																			if desired then
																																				if desired == 33 then
																																					desired = nil
																																				end
																																				break
																																			end
																																			loc_3 = rt_add_i32(loc_1, 4)
																																			loc_1 = rt_load_i32(memory_at_0, loc_1)
																																			loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 20), 4080), loc_11)
																																			loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																																			loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 12), 4080), loc_5)
																																			if rt_load_i32(memory_at_0, loc_1 + 12) == 3 then
																																				while true do
																																					while true do
																																						loc_22 = rt_load_f64(memory_at_0, loc_1)
																																						loc_23 = rt_load_f64(memory_at_0, loc_4)
																																						reg_0 = (loc_22 * loc_22)
																																						if loc_23 == 2e0 then
																																							break
																																						end
																																						reg_0 = math_sqrt(loc_22)
																																						if loc_23 == 5e-1 then
																																							break
																																						end
																																						reg_0 = (loc_22 * (loc_22 * loc_22))
																																						if loc_23 == 3e0 then
																																							break
																																						end
																																						reg_0 = FUNC_LIST[642](loc_22, loc_23)
																																						break
																																					end
																																					if desired then
																																						break
																																					end
																																					loc_22 = reg_0
																																					rt_store_i32(memory_at_0, loc_2 + 12, 3)
																																					rt_store_f64(memory_at_0, loc_2, loc_22)
																																					loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																					loc_1 = loc_3
																																					desired = 5
																																					break
																																				end
																																				if desired then
																																					if desired == 33 then
																																						desired = nil
																																					end
																																					break
																																				end
																																			end
																																			rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																			FUNC_LIST[603](loc_0, loc_2, loc_1, loc_4)
																																			loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																			loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																			loc_1 = loc_3
																																			desired = 5
																																			break
																																		end
																																		if desired then
																																			if desired == 32 then
																																				desired = nil
																																			end
																																			break
																																		end
																																		loc_3 = rt_add_i32(loc_1, 4)
																																		loc_1 = rt_load_i32(memory_at_0, loc_1)
																																		loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 20), 4080), loc_11)
																																		loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																																		loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 12), 4080), loc_5)
																																		if rt_load_i32(memory_at_0, loc_1 + 12) == 3 then
																																			while true do
																																				loc_22 = rt_load_f64(memory_at_0, loc_4)
																																				loc_23 = rt_load_f64(memory_at_0, loc_1)
																																				rt_store_i32(memory_at_0, loc_2 + 12, 3)
																																				rt_store_f64(memory_at_0, loc_2, (loc_23 - (loc_22 * math_floor((loc_23 / loc_22)))))
																																				loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																				loc_1 = loc_3
																																				desired = 5
																																				break
																																			end
																																			if desired then
																																				if desired == 32 then
																																					desired = nil
																																				end
																																				break
																																			end
																																		end
																																		rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																		FUNC_LIST[602](loc_0, loc_2, loc_1, loc_4)
																																		loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																		loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																		loc_1 = loc_3
																																		desired = 5
																																		break
																																	end
																																	if desired then
																																		if desired == 31 then
																																			desired = nil
																																		end
																																		break
																																	end
																																	loc_3 = rt_add_i32(loc_1, 4)
																																	loc_2 = rt_load_i32(memory_at_0, loc_1)
																																	loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 20), 4080), loc_11)
																																	loc_7 = bit_and(rt_shr_u32(loc_2, 8), 255)
																																	loc_1 = rt_add_i32(rt_shl_i32(loc_7, 4), loc_5)
																																	while true do
																																		while true do
																																			while true do
																																				while true do
																																					while true do
																																						loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5)
																																						loc_6 = rt_load_i32(memory_at_0, loc_2 + 12)
																																						if loc_6 ~= 3 then
																																							while true do
																																								if not br_map[10] then
																																									br_map[10] = (function()
																																										return { [0] = 1, 4, 4, 4, 3, }
																																									end)()
																																								end
																																								temp = br_map[10][rt_sub_i32(loc_6, 4)] or 4
																																								if temp < 3 then
																																									desired = 36
																																									break
																																								elseif temp > 3 then
																																									desired = 33
																																									break
																																								else
																																									desired = 34
																																									break
																																								end
																																							end
																																							if desired then
																																								if desired == 36 then
																																									desired = nil
																																								end
																																								break
																																							end
																																						end
																																						loc_22 = rt_load_f64(memory_at_0, loc_4)
																																						loc_23 = rt_load_f64(memory_at_0, loc_2)
																																						rt_store_i32(memory_at_0, loc_1 + 12, 3)
																																						rt_store_f64(memory_at_0, loc_1, math_floor((loc_23 / loc_22)))
																																						desired = 35
																																						break
																																					end
																																					if desired then
																																						if desired == 35 then
																																							desired = nil
																																						end
																																						break
																																					end
																																					loc_22 = no_op(no_op(rt_load_f64(memory_at_0, loc_4)))
																																					rt_store_f32(memory_at_0, loc_1, no_op(math_floor((no_op(rt_load_f32(memory_at_0, loc_2)) / loc_22))))
																																					rt_store_f32(memory_at_0, loc_1 + 4, no_op(math_floor((no_op(rt_load_f32(memory_at_0, loc_2 + 4)) / loc_22))))
																																					loc_25 = rt_load_f32(memory_at_0, loc_2 + 8)
																																					rt_store_i32(memory_at_0, loc_1 + 12, 4)
																																					rt_store_f32(memory_at_0, loc_1 + 8, no_op(math_floor((no_op(loc_25) / loc_22))))
																																					break
																																				end
																																				if desired then
																																					if desired == 34 then
																																						desired = nil
																																					end
																																					break
																																				end
																																				loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																				loc_1 = loc_3
																																				desired = 5
																																				break
																																			end
																																			if desired then
																																				if desired == 33 then
																																					desired = nil
																																				end
																																				break
																																			end
																																			reg_0 = FUNC_LIST[461](loc_0, loc_2, 12)
																																			loc_5 = reg_0
																																			if loc_5 == 0 then
																																				break
																																			end
																																			if rt_load_i32(memory_at_0, loc_5 + 12) ~= 7 then
																																				break
																																			end
																																			if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_5) + 3) == 0 then
																																				break
																																			end
																																			loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
																																			rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_5))
																																			rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
																																			rt_store_i64(memory_at_0, loc_1 + 24, rt_load_i64(memory_at_0, loc_2 + 8))
																																			rt_store_i64(memory_at_0, loc_1 + 16, rt_load_i64(memory_at_0, loc_2))
																																			rt_store_i64(memory_at_0, loc_1 + 40, rt_load_i64(memory_at_0, loc_4 + 8))
																																			rt_store_i64(memory_at_0, loc_1 + 32, rt_load_i64(memory_at_0, loc_4))
																																			rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_1, 48))
																																			rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																			FUNC_LIST[607](loc_0, 2, loc_7)
																																			desired = 32
																																			break
																																		end
																																		if desired then
																																			if desired == 32 then
																																				desired = nil
																																			end
																																			break
																																		end
																																		rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																		FUNC_LIST[601](loc_0, loc_1, loc_2, loc_4)
																																		break
																																	end
																																	if desired then
																																		if desired == 31 then
																																			desired = nil
																																		end
																																		break
																																	end
																																	loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																	loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																	loc_1 = loc_3
																																	desired = 5
																																	break
																																end
																																if desired then
																																	if desired == 30 then
																																		desired = nil
																																	end
																																	break
																																end
																																loc_3 = rt_add_i32(loc_1, 4)
																																loc_2 = rt_load_i32(memory_at_0, loc_1)
																																loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 20), 4080), loc_11)
																																loc_7 = bit_and(rt_shr_u32(loc_2, 8), 255)
																																loc_1 = rt_add_i32(rt_shl_i32(loc_7, 4), loc_5)
																																while true do
																																	while true do
																																		while true do
																																			while true do
																																				while true do
																																					loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5)
																																					loc_6 = rt_load_i32(memory_at_0, loc_2 + 12)
																																					if loc_6 ~= 3 then
																																						while true do
																																							if not br_map[11] then
																																								br_map[11] = (function()
																																									return { [0] = 1, 4, 4, 4, 3, }
																																								end)()
																																							end
																																							temp = br_map[11][rt_sub_i32(loc_6, 4)] or 4
																																							if temp < 3 then
																																								desired = 35
																																								break
																																							elseif temp > 3 then
																																								desired = 32
																																								break
																																							else
																																								desired = 33
																																								break
																																							end
																																						end
																																						if desired then
																																							if desired == 35 then
																																								desired = nil
																																							end
																																							break
																																						end
																																					end
																																					loc_22 = rt_load_f64(memory_at_0, loc_4)
																																					loc_23 = rt_load_f64(memory_at_0, loc_2)
																																					rt_store_i32(memory_at_0, loc_1 + 12, 3)
																																					rt_store_f64(memory_at_0, loc_1, (loc_23 / loc_22))
																																					desired = 34
																																					break
																																				end
																																				if desired then
																																					if desired == 34 then
																																						desired = nil
																																					end
																																					break
																																				end
																																				loc_25 = no_op(rt_load_f64(memory_at_0, loc_4))
																																				rt_store_f32(memory_at_0, loc_1, (rt_load_f32(memory_at_0, loc_2) / loc_25))
																																				rt_store_f32(memory_at_0, loc_1 + 4, (rt_load_f32(memory_at_0, loc_2 + 4) / loc_25))
																																				loc_26 = rt_load_f32(memory_at_0, loc_2 + 8)
																																				rt_store_i32(memory_at_0, loc_1 + 12, 4)
																																				rt_store_f32(memory_at_0, loc_1 + 8, (loc_26 / loc_25))
																																				break
																																			end
																																			if desired then
																																				if desired == 33 then
																																					desired = nil
																																				end
																																				break
																																			end
																																			loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																			loc_1 = loc_3
																																			desired = 5
																																			break
																																		end
																																		if desired then
																																			if desired == 32 then
																																				desired = nil
																																			end
																																			break
																																		end
																																		reg_0 = FUNC_LIST[461](loc_0, loc_2, 11)
																																		loc_5 = reg_0
																																		if loc_5 == 0 then
																																			break
																																		end
																																		if rt_load_i32(memory_at_0, loc_5 + 12) ~= 7 then
																																			break
																																		end
																																		if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_5) + 3) == 0 then
																																			break
																																		end
																																		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
																																		rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_5))
																																		rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
																																		rt_store_i64(memory_at_0, loc_1 + 24, rt_load_i64(memory_at_0, loc_2 + 8))
																																		rt_store_i64(memory_at_0, loc_1 + 16, rt_load_i64(memory_at_0, loc_2))
																																		rt_store_i64(memory_at_0, loc_1 + 40, rt_load_i64(memory_at_0, loc_4 + 8))
																																		rt_store_i64(memory_at_0, loc_1 + 32, rt_load_i64(memory_at_0, loc_4))
																																		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_1, 48))
																																		rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																		FUNC_LIST[607](loc_0, 2, loc_7)
																																		desired = 31
																																		break
																																	end
																																	if desired then
																																		if desired == 31 then
																																			desired = nil
																																		end
																																		break
																																	end
																																	rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																	FUNC_LIST[600](loc_0, loc_1, loc_2, loc_4)
																																	break
																																end
																																if desired then
																																	if desired == 30 then
																																		desired = nil
																																	end
																																	break
																																end
																																loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																																loc_1 = loc_3
																																desired = 5
																																break
																															end
																															if desired then
																																if desired == 29 then
																																	desired = nil
																																end
																																break
																															end
																															loc_3 = rt_add_i32(loc_1, 4)
																															loc_2 = rt_load_i32(memory_at_0, loc_1)
																															loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 20), 4080), loc_11)
																															loc_7 = bit_and(rt_shr_u32(loc_2, 8), 255)
																															loc_1 = rt_add_i32(rt_shl_i32(loc_7, 4), loc_5)
																															while true do
																																while true do
																																	while true do
																																		while true do
																																			while true do
																																				loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5)
																																				loc_6 = rt_load_i32(memory_at_0, loc_2 + 12)
																																				if loc_6 ~= 3 then
																																					while true do
																																						if not br_map[12] then
																																							br_map[12] = (function()
																																								return { [0] = 1, 4, 4, 4, 3, }
																																							end)()
																																						end
																																						temp = br_map[12][rt_sub_i32(loc_6, 4)] or 4
																																						if temp < 3 then
																																							desired = 34
																																							break
																																						elseif temp > 3 then
																																							desired = 31
																																							break
																																						else
																																							desired = 32
																																							break
																																						end
																																					end
																																					if desired then
																																						if desired == 34 then
																																							desired = nil
																																						end
																																						break
																																					end
																																				end
																																				loc_22 = rt_load_f64(memory_at_0, loc_4)
																																				loc_23 = rt_load_f64(memory_at_0, loc_2)
																																				rt_store_i32(memory_at_0, loc_1 + 12, 3)
																																				rt_store_f64(memory_at_0, loc_1, (loc_23 * loc_22))
																																				desired = 33
																																				break
																																			end
																																			if desired then
																																				if desired == 33 then
																																					desired = nil
																																				end
																																				break
																																			end
																																			loc_25 = no_op(rt_load_f64(memory_at_0, loc_4))
																																			rt_store_f32(memory_at_0, loc_1, (rt_load_f32(memory_at_0, loc_2) * loc_25))
																																			rt_store_f32(memory_at_0, loc_1 + 4, (rt_load_f32(memory_at_0, loc_2 + 4) * loc_25))
																																			loc_26 = rt_load_f32(memory_at_0, loc_2 + 8)
																																			rt_store_i32(memory_at_0, loc_1 + 12, 4)
																																			rt_store_f32(memory_at_0, loc_1 + 8, (loc_26 * loc_25))
																																			break
																																		end
																																		if desired then
																																			if desired == 32 then
																																				desired = nil
																																			end
																																			break
																																		end
																																		loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																		loc_1 = loc_3
																																		desired = 5
																																		break
																																	end
																																	if desired then
																																		if desired == 31 then
																																			desired = nil
																																		end
																																		break
																																	end
																																	reg_0 = FUNC_LIST[461](loc_0, loc_2, 10)
																																	loc_5 = reg_0
																																	if loc_5 == 0 then
																																		break
																																	end
																																	if rt_load_i32(memory_at_0, loc_5 + 12) ~= 7 then
																																		break
																																	end
																																	if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_5) + 3) == 0 then
																																		break
																																	end
																																	loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
																																	rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_5))
																																	rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
																																	rt_store_i64(memory_at_0, loc_1 + 24, rt_load_i64(memory_at_0, loc_2 + 8))
																																	rt_store_i64(memory_at_0, loc_1 + 16, rt_load_i64(memory_at_0, loc_2))
																																	rt_store_i64(memory_at_0, loc_1 + 40, rt_load_i64(memory_at_0, loc_4 + 8))
																																	rt_store_i64(memory_at_0, loc_1 + 32, rt_load_i64(memory_at_0, loc_4))
																																	rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_1, 48))
																																	rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																	FUNC_LIST[607](loc_0, 2, loc_7)
																																	desired = 30
																																	break
																																end
																																if desired then
																																	if desired == 30 then
																																		desired = nil
																																	end
																																	break
																																end
																																rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																																FUNC_LIST[599](loc_0, loc_1, loc_2, loc_4)
																																break
																															end
																															if desired then
																																if desired == 29 then
																																	desired = nil
																																end
																																break
																															end
																															loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																															loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																															loc_1 = loc_3
																															desired = 5
																															break
																														end
																														if desired then
																															if desired == 28 then
																																desired = nil
																															end
																															break
																														end
																														loc_3 = rt_add_i32(loc_1, 4)
																														loc_1 = rt_load_i32(memory_at_0, loc_1)
																														loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 20), 4080), loc_11)
																														loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																														loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 12), 4080), loc_5)
																														if rt_load_i32(memory_at_0, loc_1 + 12) == 3 then
																															while true do
																																loc_22 = rt_load_f64(memory_at_0, loc_4)
																																loc_23 = rt_load_f64(memory_at_0, loc_1)
																																rt_store_i32(memory_at_0, loc_2 + 12, 3)
																																rt_store_f64(memory_at_0, loc_2, (loc_23 - loc_22))
																																loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																																loc_1 = loc_3
																																desired = 5
																																break
																															end
																															if desired then
																																if desired == 28 then
																																	desired = nil
																																end
																																break
																															end
																														end
																														rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																														FUNC_LIST[598](loc_0, loc_2, loc_1, loc_4)
																														loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																														loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																														loc_1 = loc_3
																														desired = 5
																														break
																													end
																													if desired then
																														if desired == 27 then
																															desired = nil
																														end
																														break
																													end
																													loc_3 = rt_add_i32(loc_1, 4)
																													loc_1 = rt_load_i32(memory_at_0, loc_1)
																													loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 20), 4080), loc_11)
																													loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																													loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 12), 4080), loc_5)
																													if rt_load_i32(memory_at_0, loc_1 + 12) == 3 then
																														while true do
																															loc_22 = rt_load_f64(memory_at_0, loc_4)
																															loc_23 = rt_load_f64(memory_at_0, loc_1)
																															rt_store_i32(memory_at_0, loc_2 + 12, 3)
																															rt_store_f64(memory_at_0, loc_2, (loc_23 + loc_22))
																															loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																															loc_1 = loc_3
																															desired = 5
																															break
																														end
																														if desired then
																															if desired == 27 then
																																desired = nil
																															end
																															break
																														end
																													end
																													rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																													FUNC_LIST[597](loc_0, loc_2, loc_1, loc_4)
																													loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																													loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																													loc_1 = loc_3
																													desired = 5
																													break
																												end
																												if desired then
																													if desired == 26 then
																														desired = nil
																													end
																													break
																												end
																												loc_3 = rt_add_i32(loc_1, 4)
																												loc_1 = rt_load_i32(memory_at_0, loc_1)
																												loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 20), 4080), loc_5)
																												loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																												while true do
																													loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 12), 4080), loc_5)
																													if rt_load_i32(memory_at_0, loc_1 + 12) ~= 3 then
																														break
																													end
																													if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
																														break
																													end
																													loc_22 = rt_load_f64(memory_at_0, loc_2)
																													loc_23 = rt_load_f64(memory_at_0, loc_1)
																													rt_store_i32(memory_at_0, loc_4 + 12, 3)
																													reg_1 = FUNC_LIST[642](loc_23, loc_22)
																													rt_store_f64(memory_at_0, loc_4, reg_1)
																													loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																													loc_1 = loc_3
																													desired = 5
																													break
																												end
																												if desired then
																													if desired == 26 then
																														desired = nil
																													end
																													break
																												end
																												rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																												FUNC_LIST[603](loc_0, loc_4, loc_1, loc_2)
																												loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																												loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																												loc_1 = loc_3
																												desired = 5
																												break
																											end
																											if desired then
																												if desired == 25 then
																													desired = nil
																												end
																												break
																											end
																											loc_3 = rt_add_i32(loc_1, 4)
																											loc_1 = rt_load_i32(memory_at_0, loc_1)
																											loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 20), 4080), loc_5)
																											loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																											while true do
																												loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 12), 4080), loc_5)
																												if rt_load_i32(memory_at_0, loc_1 + 12) ~= 3 then
																													break
																												end
																												if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
																													break
																												end
																												loc_22 = rt_load_f64(memory_at_0, loc_2)
																												loc_23 = rt_load_f64(memory_at_0, loc_1)
																												rt_store_i32(memory_at_0, loc_4 + 12, 3)
																												rt_store_f64(memory_at_0, loc_4, (loc_23 - (loc_22 * math_floor((loc_23 / loc_22)))))
																												loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																												loc_1 = loc_3
																												desired = 5
																												break
																											end
																											if desired then
																												if desired == 25 then
																													desired = nil
																												end
																												break
																											end
																											rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																											FUNC_LIST[602](loc_0, loc_4, loc_1, loc_2)
																											loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																											loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																											loc_1 = loc_3
																											desired = 5
																											break
																										end
																										if desired then
																											if desired == 24 then
																												desired = nil
																											end
																											break
																										end
																										loc_3 = rt_add_i32(loc_1, 4)
																										loc_2 = rt_load_i32(memory_at_0, loc_1)
																										loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 20), 4080), loc_5)
																										loc_8 = bit_and(rt_shr_u32(loc_2, 8), 255)
																										loc_4 = rt_add_i32(rt_shl_i32(loc_8, 4), loc_5)
																										while true do
																											while true do
																												while true do
																													while true do
																														loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5)
																														loc_6 = rt_load_i32(memory_at_0, loc_2 + 12)
																														if loc_6 ~= 3 then
																															while true do
																																loc_7 = loc_2
																																if loc_6 ~= 4 then
																																	desired = 27
																																	break
																																end
																																if rt_load_i32(memory_at_0, loc_1 + 12) ~= 3 then
																																	desired = 26
																																	break
																																end
																																loc_22 = no_op(no_op(rt_load_f64(memory_at_0, loc_1)))
																																rt_store_f32(memory_at_0, loc_4, no_op(math_floor((no_op(rt_load_f32(memory_at_0, loc_2)) / loc_22))))
																																rt_store_f32(memory_at_0, loc_4 + 4, no_op(math_floor((no_op(rt_load_f32(memory_at_0, loc_2 + 4)) / loc_22))))
																																loc_25 = rt_load_f32(memory_at_0, loc_2 + 8)
																																rt_store_i32(memory_at_0, loc_4 + 12, 4)
																																rt_store_f32(memory_at_0, loc_4 + 8, no_op(math_floor((no_op(loc_25) / loc_22))))
																																desired = 28
																																break
																															end
																															if desired then
																																if desired == 28 then
																																	desired = nil
																																end
																																break
																															end
																														end
																														loc_7 = loc_1
																														loc_6 = rt_load_i32(memory_at_0, loc_1 + 12)
																														if loc_6 ~= 3 then
																															desired = 27
																															break
																														end
																														loc_22 = rt_load_f64(memory_at_0, loc_1)
																														loc_23 = rt_load_f64(memory_at_0, loc_2)
																														rt_store_i32(memory_at_0, loc_4 + 12, 3)
																														rt_store_f64(memory_at_0, loc_4, math_floor((loc_23 / loc_22)))
																														break
																													end
																													if desired then
																														if desired == 27 then
																															desired = nil
																														end
																														break
																													end
																													loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																													loc_1 = loc_3
																													desired = 5
																													break
																												end
																												if desired then
																													if desired == 26 then
																														desired = nil
																													end
																													break
																												end
																												if loc_6 ~= 8 then
																													break
																												end
																												reg_0 = FUNC_LIST[461](loc_0, loc_7, 12)
																												loc_5 = reg_0
																												if loc_5 == 0 then
																													break
																												end
																												if rt_load_i32(memory_at_0, loc_5 + 12) ~= 7 then
																													break
																												end
																												if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_5) + 3) == 0 then
																													break
																												end
																												loc_4 = rt_load_i32(memory_at_0, loc_0 + 8)
																												rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_5))
																												rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
																												rt_store_i64(memory_at_0, loc_4 + 24, rt_load_i64(memory_at_0, loc_2 + 8))
																												rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_2))
																												rt_store_i64(memory_at_0, loc_4 + 40, rt_load_i64(memory_at_0, loc_1 + 8))
																												rt_store_i64(memory_at_0, loc_4 + 32, rt_load_i64(memory_at_0, loc_1))
																												rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_4, 48))
																												rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																												FUNC_LIST[607](loc_0, 2, loc_8)
																												desired = 25
																												break
																											end
																											if desired then
																												if desired == 25 then
																													desired = nil
																												end
																												break
																											end
																											rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																											FUNC_LIST[601](loc_0, loc_4, loc_2, loc_1)
																											break
																										end
																										if desired then
																											if desired == 24 then
																												desired = nil
																											end
																											break
																										end
																										loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																										loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																										loc_1 = loc_3
																										desired = 5
																										break
																									end
																									if desired then
																										if desired == 23 then
																											desired = nil
																										end
																										break
																									end
																									loc_3 = rt_add_i32(loc_1, 4)
																									loc_4 = rt_load_i32(memory_at_0, loc_1)
																									loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_4, 20), 4080), loc_5)
																									loc_7 = bit_and(rt_shr_u32(loc_4, 8), 255)
																									loc_2 = rt_add_i32(rt_shl_i32(loc_7, 4), loc_5)
																									while true do
																										while true do
																											while true do
																												while true do
																													while true do
																														while true do
																															loc_6 = rt_add_i32(bit_and(rt_shr_u32(loc_4, 12), 4080), loc_5)
																															loc_4 = rt_load_i32(memory_at_0, loc_6 + 12)
																															if loc_4 ~= 3 then
																																while true do
																																	loc_8 = loc_6
																																	if loc_4 ~= 4 then
																																		desired = 26
																																		break
																																	end
																																	if not br_map[13] then
																																		br_map[13] = (function()
																																			return { [0] = 1, 2, }
																																		end)()
																																	end
																																	temp = br_map[13][rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 12), 3)] or 5
																																	if temp < 2 then
																																		desired = 29
																																		break
																																	elseif temp > 2 then
																																		desired = 25
																																		break
																																	else
																																		desired = 28
																																		break
																																	end
																																end
																																if desired then
																																	if desired == 29 then
																																		desired = nil
																																	end
																																	break
																																end
																															end
																															loc_4 = rt_load_i32(memory_at_0, loc_1 + 12)
																															if loc_4 ~= 3 then
																																while true do
																																	loc_8 = loc_1
																																	if loc_4 ~= 4 then
																																		desired = 26
																																		break
																																	end
																																	loc_25 = no_op(rt_load_f64(memory_at_0, loc_6))
																																	rt_store_f32(memory_at_0, loc_2, (loc_25 / rt_load_f32(memory_at_0, loc_1)))
																																	rt_store_f32(memory_at_0, loc_2 + 4, (loc_25 / rt_load_f32(memory_at_0, loc_1 + 4)))
																																	loc_26 = rt_load_f32(memory_at_0, loc_1 + 8)
																																	rt_store_i32(memory_at_0, loc_2 + 12, 4)
																																	rt_store_f32(memory_at_0, loc_2 + 8, (loc_25 / loc_26))
																																	desired = 27
																																	break
																																end
																																if desired then
																																	if desired == 29 then
																																		desired = nil
																																	end
																																	break
																																end
																															end
																															loc_22 = rt_load_f64(memory_at_0, loc_1)
																															loc_23 = rt_load_f64(memory_at_0, loc_6)
																															rt_store_i32(memory_at_0, loc_2 + 12, 3)
																															rt_store_f64(memory_at_0, loc_2, (loc_23 / loc_22))
																															desired = 27
																															break
																														end
																														if desired then
																															if desired == 28 then
																																desired = nil
																															end
																															break
																														end
																														loc_25 = no_op(rt_load_f64(memory_at_0, loc_1))
																														rt_store_f32(memory_at_0, loc_2, (rt_load_f32(memory_at_0, loc_6) / loc_25))
																														rt_store_f32(memory_at_0, loc_2 + 4, (rt_load_f32(memory_at_0, loc_6 + 4) / loc_25))
																														loc_26 = rt_load_f32(memory_at_0, loc_6 + 8)
																														rt_store_i32(memory_at_0, loc_2 + 12, 4)
																														rt_store_f32(memory_at_0, loc_2 + 8, (loc_26 / loc_25))
																														desired = 27
																														break
																													end
																													if desired then
																														if desired == 27 then
																															desired = nil
																														end
																														break
																													end
																													rt_store_f32(memory_at_0, loc_2, (rt_load_f32(memory_at_0, loc_6) / rt_load_f32(memory_at_0, loc_1)))
																													rt_store_f32(memory_at_0, loc_2 + 4, (rt_load_f32(memory_at_0, loc_6 + 4) / rt_load_f32(memory_at_0, loc_1 + 4)))
																													loc_25 = rt_load_f32(memory_at_0, loc_1 + 8)
																													loc_26 = rt_load_f32(memory_at_0, loc_6 + 8)
																													rt_store_i32(memory_at_0, loc_2 + 12, 4)
																													rt_store_f32(memory_at_0, loc_2 + 8, (loc_26 / loc_25))
																													break
																												end
																												if desired then
																													if desired == 26 then
																														desired = nil
																													end
																													break
																												end
																												loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																												loc_1 = loc_3
																												desired = 5
																												break
																											end
																											if desired then
																												if desired == 25 then
																													desired = nil
																												end
																												break
																											end
																											if loc_4 ~= 8 then
																												break
																											end
																											reg_0 = FUNC_LIST[461](loc_0, loc_8, 11)
																											loc_5 = reg_0
																											if loc_5 == 0 then
																												break
																											end
																											if rt_load_i32(memory_at_0, loc_5 + 12) ~= 7 then
																												break
																											end
																											if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_5) + 3) == 0 then
																												break
																											end
																											loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
																											rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_5))
																											rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
																											rt_store_i64(memory_at_0, loc_2 + 24, rt_load_i64(memory_at_0, loc_6 + 8))
																											rt_store_i64(memory_at_0, loc_2 + 16, rt_load_i64(memory_at_0, loc_6))
																											rt_store_i64(memory_at_0, loc_2 + 40, rt_load_i64(memory_at_0, loc_1 + 8))
																											rt_store_i64(memory_at_0, loc_2 + 32, rt_load_i64(memory_at_0, loc_1))
																											rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_2, 48))
																											rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																											FUNC_LIST[607](loc_0, 2, loc_7)
																											desired = 24
																											break
																										end
																										if desired then
																											if desired == 24 then
																												desired = nil
																											end
																											break
																										end
																										rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																										FUNC_LIST[600](loc_0, loc_2, loc_6, loc_1)
																										break
																									end
																									if desired then
																										if desired == 23 then
																											desired = nil
																										end
																										break
																									end
																									loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																									loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																									loc_1 = loc_3
																									desired = 5
																									break
																								end
																								if desired then
																									if desired == 22 then
																										desired = nil
																									end
																									break
																								end
																								loc_3 = rt_add_i32(loc_1, 4)
																								loc_4 = rt_load_i32(memory_at_0, loc_1)
																								loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_4, 20), 4080), loc_5)
																								loc_7 = bit_and(rt_shr_u32(loc_4, 8), 255)
																								loc_2 = rt_add_i32(rt_shl_i32(loc_7, 4), loc_5)
																								while true do
																									while true do
																										while true do
																											while true do
																												while true do
																													while true do
																														loc_6 = rt_add_i32(bit_and(rt_shr_u32(loc_4, 12), 4080), loc_5)
																														loc_4 = rt_load_i32(memory_at_0, loc_6 + 12)
																														if loc_4 ~= 3 then
																															while true do
																																loc_8 = loc_6
																																if loc_4 ~= 4 then
																																	desired = 25
																																	break
																																end
																																if not br_map[14] then
																																	br_map[14] = (function()
																																		return { [0] = 1, 2, }
																																	end)()
																																end
																																temp = br_map[14][rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 12), 3)] or 5
																																if temp < 2 then
																																	desired = 28
																																	break
																																elseif temp > 2 then
																																	desired = 24
																																	break
																																else
																																	desired = 27
																																	break
																																end
																															end
																															if desired then
																																if desired == 28 then
																																	desired = nil
																																end
																																break
																															end
																														end
																														loc_4 = rt_load_i32(memory_at_0, loc_1 + 12)
																														if loc_4 ~= 3 then
																															while true do
																																loc_8 = loc_1
																																if loc_4 ~= 4 then
																																	desired = 25
																																	break
																																end
																																loc_25 = no_op(rt_load_f64(memory_at_0, loc_6))
																																rt_store_f32(memory_at_0, loc_2, (rt_load_f32(memory_at_0, loc_1) * loc_25))
																																rt_store_f32(memory_at_0, loc_2 + 4, (rt_load_f32(memory_at_0, loc_1 + 4) * loc_25))
																																loc_26 = rt_load_f32(memory_at_0, loc_1 + 8)
																																rt_store_i32(memory_at_0, loc_2 + 12, 4)
																																rt_store_f32(memory_at_0, loc_2 + 8, (loc_26 * loc_25))
																																desired = 26
																																break
																															end
																															if desired then
																																if desired == 28 then
																																	desired = nil
																																end
																																break
																															end
																														end
																														loc_22 = rt_load_f64(memory_at_0, loc_1)
																														loc_23 = rt_load_f64(memory_at_0, loc_6)
																														rt_store_i32(memory_at_0, loc_2 + 12, 3)
																														rt_store_f64(memory_at_0, loc_2, (loc_23 * loc_22))
																														desired = 26
																														break
																													end
																													if desired then
																														if desired == 27 then
																															desired = nil
																														end
																														break
																													end
																													loc_25 = no_op(rt_load_f64(memory_at_0, loc_1))
																													rt_store_f32(memory_at_0, loc_2, (rt_load_f32(memory_at_0, loc_6) * loc_25))
																													rt_store_f32(memory_at_0, loc_2 + 4, (rt_load_f32(memory_at_0, loc_6 + 4) * loc_25))
																													loc_26 = rt_load_f32(memory_at_0, loc_6 + 8)
																													rt_store_i32(memory_at_0, loc_2 + 12, 4)
																													rt_store_f32(memory_at_0, loc_2 + 8, (loc_26 * loc_25))
																													desired = 26
																													break
																												end
																												if desired then
																													if desired == 26 then
																														desired = nil
																													end
																													break
																												end
																												rt_store_f32(memory_at_0, loc_2, (rt_load_f32(memory_at_0, loc_6) * rt_load_f32(memory_at_0, loc_1)))
																												rt_store_f32(memory_at_0, loc_2 + 4, (rt_load_f32(memory_at_0, loc_6 + 4) * rt_load_f32(memory_at_0, loc_1 + 4)))
																												loc_25 = rt_load_f32(memory_at_0, loc_1 + 8)
																												loc_26 = rt_load_f32(memory_at_0, loc_6 + 8)
																												rt_store_i32(memory_at_0, loc_2 + 12, 4)
																												rt_store_f32(memory_at_0, loc_2 + 8, (loc_26 * loc_25))
																												break
																											end
																											if desired then
																												if desired == 25 then
																													desired = nil
																												end
																												break
																											end
																											loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																											loc_1 = loc_3
																											desired = 5
																											break
																										end
																										if desired then
																											if desired == 24 then
																												desired = nil
																											end
																											break
																										end
																										if loc_4 ~= 8 then
																											break
																										end
																										reg_0 = FUNC_LIST[461](loc_0, loc_8, 10)
																										loc_5 = reg_0
																										if loc_5 == 0 then
																											break
																										end
																										if rt_load_i32(memory_at_0, loc_5 + 12) ~= 7 then
																											break
																										end
																										if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_5) + 3) == 0 then
																											break
																										end
																										loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
																										rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_5))
																										rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
																										rt_store_i64(memory_at_0, loc_2 + 24, rt_load_i64(memory_at_0, loc_6 + 8))
																										rt_store_i64(memory_at_0, loc_2 + 16, rt_load_i64(memory_at_0, loc_6))
																										rt_store_i64(memory_at_0, loc_2 + 40, rt_load_i64(memory_at_0, loc_1 + 8))
																										rt_store_i64(memory_at_0, loc_2 + 32, rt_load_i64(memory_at_0, loc_1))
																										rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_2, 48))
																										rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																										FUNC_LIST[607](loc_0, 2, loc_7)
																										desired = 23
																										break
																									end
																									if desired then
																										if desired == 23 then
																											desired = nil
																										end
																										break
																									end
																									rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																									FUNC_LIST[599](loc_0, loc_2, loc_6, loc_1)
																									break
																								end
																								if desired then
																									if desired == 22 then
																										desired = nil
																									end
																									break
																								end
																								loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																								loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																								loc_1 = loc_3
																								desired = 5
																								break
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							loc_3 = rt_add_i32(loc_1, 4)
																							loc_2 = rt_load_i32(memory_at_0, loc_1)
																							loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 20), 4080), loc_5)
																							loc_7 = bit_and(rt_shr_u32(loc_2, 8), 255)
																							loc_4 = rt_add_i32(rt_shl_i32(loc_7, 4), loc_5)
																							while true do
																								while true do
																									while true do
																										while true do
																											while true do
																												loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5)
																												loc_6 = rt_load_i32(memory_at_0, loc_2 + 12)
																												if loc_6 ~= 3 then
																													while true do
																														if not br_map[15] then
																															br_map[15] = (function()
																																return { [0] = 1, 4, 4, 4, 3, }
																															end)()
																														end
																														temp = br_map[15][rt_sub_i32(loc_6, 4)] or 4
																														if temp < 3 then
																															desired = 26
																															break
																														elseif temp > 3 then
																															desired = 23
																															break
																														else
																															desired = 24
																															break
																														end
																													end
																													if desired then
																														if desired == 26 then
																															desired = nil
																														end
																														break
																													end
																												end
																												if rt_load_i32(memory_at_0, loc_1 + 12) ~= 3 then
																													desired = 23
																													break
																												end
																												loc_22 = rt_load_f64(memory_at_0, loc_1)
																												loc_23 = rt_load_f64(memory_at_0, loc_2)
																												rt_store_i32(memory_at_0, loc_4 + 12, 3)
																												rt_store_f64(memory_at_0, loc_4, (loc_23 - loc_22))
																												desired = 25
																												break
																											end
																											if desired then
																												if desired == 25 then
																													desired = nil
																												end
																												break
																											end
																											if rt_load_i32(memory_at_0, loc_1 + 12) ~= 4 then
																												desired = 23
																												break
																											end
																											rt_store_f32(memory_at_0, loc_4, (rt_load_f32(memory_at_0, loc_2) - rt_load_f32(memory_at_0, loc_1)))
																											rt_store_f32(memory_at_0, loc_4 + 4, (rt_load_f32(memory_at_0, loc_2 + 4) - rt_load_f32(memory_at_0, loc_1 + 4)))
																											loc_25 = rt_load_f32(memory_at_0, loc_1 + 8)
																											loc_26 = rt_load_f32(memory_at_0, loc_2 + 8)
																											rt_store_i32(memory_at_0, loc_4 + 12, 4)
																											rt_store_f32(memory_at_0, loc_4 + 8, (loc_26 - loc_25))
																											break
																										end
																										if desired then
																											if desired == 24 then
																												desired = nil
																											end
																											break
																										end
																										loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																										loc_1 = loc_3
																										desired = 5
																										break
																									end
																									if desired then
																										if desired == 23 then
																											desired = nil
																										end
																										break
																									end
																									reg_0 = FUNC_LIST[461](loc_0, loc_2, 9)
																									loc_5 = reg_0
																									if loc_5 == 0 then
																										break
																									end
																									if rt_load_i32(memory_at_0, loc_5 + 12) ~= 7 then
																										break
																									end
																									if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_5) + 3) == 0 then
																										break
																									end
																									loc_4 = rt_load_i32(memory_at_0, loc_0 + 8)
																									rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_5))
																									rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
																									rt_store_i64(memory_at_0, loc_4 + 24, rt_load_i64(memory_at_0, loc_2 + 8))
																									rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_2))
																									rt_store_i64(memory_at_0, loc_4 + 40, rt_load_i64(memory_at_0, loc_1 + 8))
																									rt_store_i64(memory_at_0, loc_4 + 32, rt_load_i64(memory_at_0, loc_1))
																									rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_4, 48))
																									rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																									FUNC_LIST[607](loc_0, 2, loc_7)
																									desired = 22
																									break
																								end
																								if desired then
																									if desired == 22 then
																										desired = nil
																									end
																									break
																								end
																								rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																								FUNC_LIST[598](loc_0, loc_4, loc_2, loc_1)
																								break
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																							loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																							loc_1 = loc_3
																							desired = 5
																							break
																						end
																						if desired then
																							if desired == 20 then
																								desired = nil
																							end
																							break
																						end
																						loc_3 = rt_add_i32(loc_1, 4)
																						loc_2 = rt_load_i32(memory_at_0, loc_1)
																						loc_1 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 20), 4080), loc_5)
																						loc_7 = bit_and(rt_shr_u32(loc_2, 8), 255)
																						loc_4 = rt_add_i32(rt_shl_i32(loc_7, 4), loc_5)
																						while true do
																							while true do
																								while true do
																									while true do
																										while true do
																											loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 12), 4080), loc_5)
																											loc_6 = rt_load_i32(memory_at_0, loc_2 + 12)
																											if loc_6 ~= 3 then
																												while true do
																													if not br_map[16] then
																														br_map[16] = (function()
																															return { [0] = 1, 4, 4, 4, 3, }
																														end)()
																													end
																													temp = br_map[16][rt_sub_i32(loc_6, 4)] or 4
																													if temp < 3 then
																														desired = 25
																														break
																													elseif temp > 3 then
																														desired = 22
																														break
																													else
																														desired = 23
																														break
																													end
																												end
																												if desired then
																													if desired == 25 then
																														desired = nil
																													end
																													break
																												end
																											end
																											if rt_load_i32(memory_at_0, loc_1 + 12) ~= 3 then
																												desired = 22
																												break
																											end
																											loc_22 = rt_load_f64(memory_at_0, loc_1)
																											loc_23 = rt_load_f64(memory_at_0, loc_2)
																											rt_store_i32(memory_at_0, loc_4 + 12, 3)
																											rt_store_f64(memory_at_0, loc_4, (loc_23 + loc_22))
																											desired = 24
																											break
																										end
																										if desired then
																											if desired == 24 then
																												desired = nil
																											end
																											break
																										end
																										if rt_load_i32(memory_at_0, loc_1 + 12) ~= 4 then
																											desired = 22
																											break
																										end
																										rt_store_f32(memory_at_0, loc_4, (rt_load_f32(memory_at_0, loc_2) + rt_load_f32(memory_at_0, loc_1)))
																										rt_store_f32(memory_at_0, loc_4 + 4, (rt_load_f32(memory_at_0, loc_2 + 4) + rt_load_f32(memory_at_0, loc_1 + 4)))
																										loc_25 = rt_load_f32(memory_at_0, loc_1 + 8)
																										loc_26 = rt_load_f32(memory_at_0, loc_2 + 8)
																										rt_store_i32(memory_at_0, loc_4 + 12, 4)
																										rt_store_f32(memory_at_0, loc_4 + 8, (loc_26 + loc_25))
																										break
																									end
																									if desired then
																										if desired == 23 then
																											desired = nil
																										end
																										break
																									end
																									loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																									loc_1 = loc_3
																									desired = 5
																									break
																								end
																								if desired then
																									if desired == 22 then
																										desired = nil
																									end
																									break
																								end
																								reg_0 = FUNC_LIST[461](loc_0, loc_2, 8)
																								loc_5 = reg_0
																								if loc_5 == 0 then
																									break
																								end
																								if rt_load_i32(memory_at_0, loc_5 + 12) ~= 7 then
																									break
																								end
																								if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_5) + 3) == 0 then
																									break
																								end
																								loc_4 = rt_load_i32(memory_at_0, loc_0 + 8)
																								rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_5))
																								rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
																								rt_store_i64(memory_at_0, loc_4 + 24, rt_load_i64(memory_at_0, loc_2 + 8))
																								rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_2))
																								rt_store_i64(memory_at_0, loc_4 + 40, rt_load_i64(memory_at_0, loc_1 + 8))
																								rt_store_i64(memory_at_0, loc_4 + 32, rt_load_i64(memory_at_0, loc_1))
																								rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_4, 48))
																								rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																								FUNC_LIST[607](loc_0, 2, loc_7)
																								desired = 21
																								break
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																							FUNC_LIST[597](loc_0, loc_4, loc_2, loc_1)
																							break
																						end
																						if desired then
																							if desired == 20 then
																								desired = nil
																							end
																							break
																						end
																						loc_2 = rt_load_i32_u8(memory_at_0, loc_3)
																						loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																						loc_1 = loc_3
																						desired = 5
																						break
																					end
																					if desired then
																						if desired == 19 then
																							desired = nil
																						end
																						break
																					end
																					loc_3 = rt_add_i32(loc_1, 4)
																					loc_2 = rt_add_i32(rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 4), 4), loc_5)
																					while true do
																						loc_1 = rt_load_i32(memory_at_0, loc_1)
																						loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																						loc_6 = rt_load_i32(memory_at_0, loc_4 + 12)
																						if loc_6 ~= 3 then
																							while true do
																								if loc_6 ~= 5 then
																									desired = 20
																									break
																								end
																								if rt_load_i32(memory_at_0, loc_2 + 12) ~= 5 then
																									desired = 20
																									break
																								end
																								reg_2 = FUNC_LIST[590](rt_load_i32(memory_at_0, loc_4), rt_load_i32(memory_at_0, loc_2))
																								loc_1 = rt_add_i32(rt_shl_i32((if rt_lt_i32(reg_2, 0) then 1 else rt_shr_i32(loc_1, 16)), 2), loc_3)
																								loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																								desired = 5
																								break
																							end
																							if desired then
																								if desired == 20 then
																									desired = nil
																								end
																								break
																							end
																						end
																						if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
																							break
																						end
																						loc_1 = rt_add_i32(rt_shl_i32((if rt_load_f64(memory_at_0, loc_4) < rt_load_f64(memory_at_0, loc_2) then 1 else rt_shr_i32(loc_1, 16)), 2), loc_3)
																						loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																						desired = 5
																						break
																					end
																					if desired then
																						if desired == 19 then
																							desired = nil
																						end
																						break
																					end
																					rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																					reg_2 = FUNC_LIST[591](loc_0, loc_4, loc_2)
																					loc_1 = rt_add_i32(rt_shl_i32((if reg_2 ~= 0 then 1 else rt_shr_i32(loc_1, 16)), 2), loc_3)
																					desired = 14
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				loc_3 = rt_add_i32(loc_1, 4)
																				loc_2 = rt_add_i32(rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 4), 4), loc_5)
																				while true do
																					loc_1 = rt_load_i32(memory_at_0, loc_1)
																					loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																					loc_6 = rt_load_i32(memory_at_0, loc_4 + 12)
																					if loc_6 ~= 3 then
																						while true do
																							if loc_6 ~= 5 then
																								desired = 19
																								break
																							end
																							if rt_load_i32(memory_at_0, loc_2 + 12) ~= 5 then
																								desired = 19
																								break
																							end
																							reg_2 = FUNC_LIST[590](rt_load_i32(memory_at_0, loc_4), rt_load_i32(memory_at_0, loc_2))
																							loc_1 = rt_add_i32(rt_shl_i32((if rt_ge_i32(reg_2, 0) then 1 else rt_shr_i32(loc_1, 16)), 2), loc_3)
																							loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																							desired = 5
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																					end
																					if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
																						break
																					end
																					loc_1 = rt_add_i32(rt_shl_i32((if rt_load_f64(memory_at_0, loc_4) < rt_load_f64(memory_at_0, loc_2) then rt_shr_i32(loc_1, 16) else 1), 2), loc_3)
																					loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																					desired = 5
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																				reg_2 = FUNC_LIST[591](loc_0, loc_4, loc_2)
																				loc_1 = rt_add_i32(rt_shl_i32((if reg_2 ~= 1 then 1 else rt_shr_i32(loc_1, 16)), 2), loc_3)
																				desired = 14
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			loc_3 = rt_add_i32(loc_1, 4)
																			loc_2 = rt_add_i32(rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 4), 4), loc_5)
																			while true do
																				loc_1 = rt_load_i32(memory_at_0, loc_1)
																				loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																				loc_6 = rt_load_i32(memory_at_0, loc_4 + 12)
																				if loc_6 ~= 3 then
																					while true do
																						if loc_6 ~= 5 then
																							desired = 18
																							break
																						end
																						if rt_load_i32(memory_at_0, loc_2 + 12) ~= 5 then
																							desired = 18
																							break
																						end
																						reg_2 = FUNC_LIST[590](rt_load_i32(memory_at_0, loc_4), rt_load_i32(memory_at_0, loc_2))
																						loc_1 = rt_add_i32(rt_shl_i32((if rt_le_i32(reg_2, 0) then 1 else rt_shr_i32(loc_1, 16)), 2), loc_3)
																						loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																						desired = 5
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																				end
																				if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
																					break
																				end
																				loc_1 = rt_add_i32(rt_shl_i32((if rt_load_f64(memory_at_0, loc_4) <= rt_load_f64(memory_at_0, loc_2) then 1 else rt_shr_i32(loc_1, 16)), 2), loc_3)
																				loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																				desired = 5
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																			reg_2 = FUNC_LIST[593](loc_0, loc_4, loc_2)
																			loc_1 = rt_add_i32(rt_shl_i32((if reg_2 ~= 0 then 1 else rt_shr_i32(loc_1, 16)), 2), loc_3)
																			desired = 14
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		loc_3 = rt_add_i32(loc_1, 4)
																		loc_2 = rt_add_i32(rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 4), 4), loc_5)
																		while true do
																			loc_1 = rt_load_i32(memory_at_0, loc_1)
																			loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																			loc_6 = rt_load_i32(memory_at_0, loc_4 + 12)
																			if loc_6 ~= 3 then
																				while true do
																					if loc_6 ~= 5 then
																						desired = 17
																						break
																					end
																					if rt_load_i32(memory_at_0, loc_2 + 12) ~= 5 then
																						desired = 17
																						break
																					end
																					reg_2 = FUNC_LIST[590](rt_load_i32(memory_at_0, loc_4), rt_load_i32(memory_at_0, loc_2))
																					loc_1 = rt_add_i32(rt_shl_i32((if rt_gt_i32(reg_2, 0) then 1 else rt_shr_i32(loc_1, 16)), 2), loc_3)
																					loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																					desired = 5
																					break
																				end
																				if desired then
																					if desired == 17 then
																						desired = nil
																					end
																					break
																				end
																			end
																			if rt_load_i32(memory_at_0, loc_2 + 12) ~= 3 then
																				break
																			end
																			loc_1 = rt_add_i32(rt_shl_i32((if rt_load_f64(memory_at_0, loc_4) <= rt_load_f64(memory_at_0, loc_2) then rt_shr_i32(loc_1, 16) else 1), 2), loc_3)
																			loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																			desired = 5
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_3)
																		reg_2 = FUNC_LIST[593](loc_0, loc_4, loc_2)
																		loc_1 = rt_add_i32(rt_shl_i32((if reg_2 ~= 1 then 1 else rt_shr_i32(loc_1, 16)), 2), loc_3)
																		desired = 14
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	loc_2 = rt_add_i32(loc_1, 4)
																	loc_3 = rt_load_i32(memory_at_0, loc_1)
																	loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 4), 4080), loc_5)
																	loc_7 = rt_load_i32(memory_at_0, loc_4 + 12)
																	loc_6 = rt_add_i32(rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 4), 4), loc_5)
																	if loc_7 == rt_load_i32(memory_at_0, loc_6 + 12) then
																		while true do
																			while true do
																				while true do
																					while true do
																						while true do
																							while true do
																								while true do
																									while true do
																										while true do
																											while true do
																												if not br_map[17] then
																													br_map[17] = (function()
																														return { [0] = 1, 2, 3, 4, 5, 6, 5, 7, 5, 5, }
																													end)()
																												end
																												temp = br_map[17][rt_sub_i32(loc_7, 1)] or 0
																												if temp < 4 then
																													if temp < 2 then
																														if temp < 1 then
																															break
																														else
																															desired = 24
																															break
																														end
																													elseif temp > 2 then
																														desired = 22
																														break
																													else
																														desired = 23
																														break
																													end
																												elseif temp > 4 then
																													if temp < 6 then
																														desired = 20
																														break
																													elseif temp > 6 then
																														desired = 18
																														break
																													else
																														desired = 19
																														break
																													end
																												else
																													desired = 21
																													break
																												end
																											end
																											if desired then
																												if desired == 24 then
																													desired = nil
																												end
																												break
																											end
																											loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 8)
																											loc_1 = rt_add_i32(loc_1, 8)
																											desired = 5
																											break
																										end
																										if desired then
																											if desired == 23 then
																												desired = nil
																											end
																											break
																										end
																										loc_1 = rt_add_i32(rt_shl_i32((if rt_load_i32(memory_at_0, loc_4) == rt_load_i32(memory_at_0, loc_6) then 1 else rt_shr_i32(loc_3, 16)), 2), loc_2)
																										loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																										desired = 5
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																									while true do
																										if rt_load_i32(memory_at_0, loc_4) == rt_load_i32(memory_at_0, loc_6) then
																											while true do
																												loc_1 = 1
																												reg_0 = loc_1
																												if rt_load_i32(memory_at_0, loc_4 + 8) == rt_load_i32(memory_at_0, loc_6 + 8) then
																													desired = 23
																													break
																												end
																												break
																											end
																											if desired then
																												if desired == 23 then
																													desired = nil
																												end
																												break
																											end
																										end
																										reg_0 = rt_shr_i32(loc_3, 16)
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																									loc_1 = reg_0
																									loc_1 = rt_add_i32(rt_shl_i32(loc_1, 2), loc_2)
																									loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																									desired = 5
																									break
																								end
																								if desired then
																									if desired == 21 then
																										desired = nil
																									end
																									break
																								end
																								loc_1 = rt_add_i32(rt_shl_i32((if rt_load_f64(memory_at_0, loc_4) == rt_load_f64(memory_at_0, loc_6) then 1 else rt_shr_i32(loc_3, 16)), 2), loc_2)
																								loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																								desired = 5
																								break
																							end
																							if desired then
																								if desired == 20 then
																									desired = nil
																								end
																								break
																							end
																							while true do
																								while true do
																									if rt_load_f32(memory_at_0, loc_4) == rt_load_f32(memory_at_0, loc_6) then
																										while true do
																											if rt_load_f32(memory_at_0, loc_4 + 4) == rt_load_f32(memory_at_0, loc_6 + 4) then
																												desired = 22
																												break
																											end
																											break
																										end
																										if desired then
																											if desired == 22 then
																												desired = nil
																											end
																											break
																										end
																									end
																									reg_0 = rt_shr_i32(loc_3, 16)
																									desired = 21
																									break
																								end
																								if desired then
																									if desired == 21 then
																										desired = nil
																									end
																									break
																								end
																								reg_0 = (if rt_load_f32(memory_at_0, loc_4 + 8) == rt_load_f32(memory_at_0, loc_6 + 8) then 1 else rt_shr_i32(loc_3, 16))
																								break
																							end
																							if desired then
																								if desired == 20 then
																									desired = nil
																								end
																								break
																							end
																							loc_1 = reg_0
																							loc_1 = rt_add_i32(rt_shl_i32(loc_1, 2), loc_2)
																							loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																							desired = 5
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																						loc_1 = rt_add_i32(rt_shl_i32((if rt_load_i32(memory_at_0, loc_4) == rt_load_i32(memory_at_0, loc_6) then 1 else rt_shr_i32(loc_3, 16)), 2), loc_2)
																						loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																						desired = 5
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																					loc_7 = rt_load_i32(memory_at_0, loc_4)
																					loc_1 = rt_load_i32(memory_at_0, loc_7 + 16)
																					loc_8 = rt_load_i32(memory_at_0, loc_6)
																					if loc_1 ~= rt_load_i32(memory_at_0, loc_8 + 16) then
																						desired = 17
																						break
																					end
																					while true do
																						if loc_1 == 0 then
																							break
																						end
																						if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_1 + 3), 0) then
																							break
																						end
																						reg_0 = FUNC_LIST[460](loc_1, 7, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1556))
																						if reg_0 ~= 0 then
																							desired = 17
																							break
																						end
																						loc_8 = rt_load_i32(memory_at_0, loc_6)
																						loc_7 = rt_load_i32(memory_at_0, loc_4)
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																					loc_1 = rt_add_i32(rt_shl_i32((if loc_7 == loc_8 then 1 else rt_shr_i32(loc_3, 16)), 2), loc_2)
																					loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																					desired = 5
																					break
																				end
																				if desired then
																					if desired == 17 then
																						desired = nil
																					end
																					break
																				end
																				loc_7 = rt_load_i32(memory_at_0, loc_4)
																				loc_1 = rt_load_i32(memory_at_0, loc_7 + 8)
																				loc_8 = rt_load_i32(memory_at_0, loc_6)
																				if loc_1 ~= rt_load_i32(memory_at_0, loc_8 + 8) then
																					break
																				end
																				while true do
																					while true do
																						if loc_1 == 0 then
																							break
																						end
																						if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_1 + 3), 0) then
																							break
																						end
																						reg_0 = FUNC_LIST[460](loc_1, 7, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1556))
																						loc_1 = reg_0
																						if loc_1 ~= 0 then
																							desired = 18
																							break
																						end
																						loc_8 = rt_load_i32(memory_at_0, loc_6)
																						loc_7 = rt_load_i32(memory_at_0, loc_4)
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																					loc_1 = rt_add_i32(rt_shl_i32((if loc_7 == loc_8 then 1 else rt_shr_i32(loc_3, 16)), 2), loc_2)
																					loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																					desired = 5
																					break
																				end
																				if desired then
																					if desired == 17 then
																						desired = nil
																					end
																					break
																				end
																				if rt_load_i32(memory_at_0, loc_1 + 12) ~= 7 then
																					break
																				end
																				if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 3) == 0 then
																					break
																				end
																				loc_7 = rt_load_i32(memory_at_0, loc_0 + 8)
																				rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_1))
																				rt_store_i64(memory_at_0, loc_7 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
																				rt_store_i64(memory_at_0, loc_7 + 24, rt_load_i64(memory_at_0, loc_4 + 8))
																				rt_store_i64(memory_at_0, loc_7 + 16, rt_load_i64(memory_at_0, loc_4))
																				rt_store_i64(memory_at_0, loc_7 + 40, rt_load_i64(memory_at_0, loc_6 + 8))
																				rt_store_i64(memory_at_0, loc_7 + 32, rt_load_i64(memory_at_0, loc_6))
																				rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_7, 48))
																				rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_2)
																				loc_4 = rt_sub_i32(loc_7, loc_5)
																				FUNC_LIST[607](loc_0, 2, rt_shr_i32(loc_4, 4))
																				loc_1 = 1
																				while true do
																					while true do
																						while true do
																							loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																							loc_4 = rt_add_i32(loc_5, loc_4)
																							if not br_map[18] then
																								br_map[18] = (function()
																									return { [0] = 1, 0, }
																								end)()
																							end
																							temp = br_map[18][rt_load_i32(memory_at_0, loc_4 + 12)] or 2
																							if temp < 1 then
																								break
																							elseif temp > 1 then
																								desired = 18
																								break
																							else
																								desired = 19
																								break
																							end
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																						if rt_load_i32(memory_at_0, loc_4) ~= 0 then
																							desired = 18
																							break
																						end
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																					loc_1 = rt_shr_i32(loc_3, 16)
																					break
																				end
																				if desired then
																					if desired == 17 then
																						desired = nil
																					end
																					break
																				end
																				loc_1 = rt_add_i32(rt_shl_i32(loc_1, 2), loc_2)
																				loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																				desired = 5
																				break
																			end
																			if desired then
																				break
																			end
																			rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_2)
																			reg_2 = FUNC_LIST[594](loc_0, loc_4, loc_6)
																			loc_1 = rt_add_i32(rt_shl_i32((if reg_2 ~= 0 then 1 else rt_shr_i32(loc_3, 16)), 2), loc_2)
																			desired = 14
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																	end
																	loc_1 = rt_add_i32(rt_shl_i32(rt_shr_i32(loc_3, 16), 2), loc_2)
																	loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																	desired = 5
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																loc_6 = rt_load_i32(memory_at_0, loc_1)
																loc_2 = rt_add_i32(bit_and(rt_shr_u32(loc_6, 4), 4080), loc_5)
																loc_4 = rt_load_i32(memory_at_0, loc_2 + 12)
																loc_3 = rt_add_i32(rt_shl_i32(rt_load_i32(memory_at_0, loc_1 + 4), 4), loc_5)
																if loc_4 ~= rt_load_i32(memory_at_0, loc_3 + 12) then
																	desired = 13
																	break
																end
																loc_1 = rt_add_i32(loc_1, 4)
																while true do
																	while true do
																		while true do
																			while true do
																				while true do
																					while true do
																						while true do
																							while true do
																								while true do
																									if not br_map[19] then
																										br_map[19] = (function()
																											return { [0] = 1, 2, 3, 4, 5, 6, 5, 7, 5, 5, }
																										end)()
																									end
																									temp = br_map[19][rt_sub_i32(loc_4, 1)] or 0
																									if temp < 4 then
																										if temp < 2 then
																											if temp < 1 then
																												break
																											else
																												desired = 22
																												break
																											end
																										elseif temp > 2 then
																											desired = 20
																											break
																										else
																											desired = 21
																											break
																										end
																									elseif temp > 4 then
																										if temp < 6 then
																											desired = 18
																											break
																										elseif temp > 6 then
																											desired = 16
																											break
																										else
																											desired = 17
																											break
																										end
																									else
																										desired = 19
																										break
																									end
																								end
																								if desired then
																									if desired == 22 then
																										desired = nil
																									end
																									break
																								end
																								loc_1 = rt_add_i32(rt_shl_i32(rt_shr_i32(loc_6, 16), 2), loc_1)
																								loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																								desired = 5
																								break
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							loc_1 = rt_add_i32(rt_shl_i32((if rt_load_i32(memory_at_0, loc_2) ~= rt_load_i32(memory_at_0, loc_3) then 1 else rt_shr_i32(loc_6, 16)), 2), loc_1)
																							loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																							desired = 5
																							break
																						end
																						if desired then
																							if desired == 20 then
																								desired = nil
																							end
																							break
																						end
																						loc_4 = 1
																						if rt_load_i32(memory_at_0, loc_2) == rt_load_i32(memory_at_0, loc_3) then
																							while true do
																								reg_0 = (if rt_load_i32(memory_at_0, loc_2 + 8) ~= rt_load_i32(memory_at_0, loc_3 + 8) then 1 else rt_shr_i32(loc_6, 16))
																								break
																							end
																							if desired then
																								if desired == 20 then
																									desired = nil
																								end
																								break
																							end
																						else
																							while true do
																								reg_0 = loc_4
																								break
																							end
																							if desired then
																								if desired == 20 then
																									desired = nil
																								end
																								break
																							end
																						end
																						loc_4 = reg_0
																						loc_1 = rt_add_i32(rt_shl_i32(loc_4, 2), loc_1)
																						loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																						desired = 5
																						break
																					end
																					if desired then
																						if desired == 19 then
																							desired = nil
																						end
																						break
																					end
																					loc_1 = rt_add_i32(rt_shl_i32((if rt_load_f64(memory_at_0, loc_2) ~= rt_load_f64(memory_at_0, loc_3) then 1 else rt_shr_i32(loc_6, 16)), 2), loc_1)
																					loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																					desired = 5
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				loc_4 = 1
																				while true do
																					if rt_load_f32(memory_at_0, loc_2) ~= rt_load_f32(memory_at_0, loc_3) then
																						break
																					end
																					if rt_load_f32(memory_at_0, loc_2 + 4) ~= rt_load_f32(memory_at_0, loc_3 + 4) then
																						break
																					end
																					loc_4 = (if rt_load_f32(memory_at_0, loc_2 + 8) ~= rt_load_f32(memory_at_0, loc_3 + 8) then 1 else rt_shr_i32(loc_6, 16))
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				loc_1 = rt_add_i32(rt_shl_i32(loc_4, 2), loc_1)
																				loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																				desired = 5
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			loc_1 = rt_add_i32(rt_shl_i32((if rt_load_i32(memory_at_0, loc_2) ~= rt_load_i32(memory_at_0, loc_3) then 1 else rt_shr_i32(loc_6, 16)), 2), loc_1)
																			loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																			desired = 5
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		loc_7 = rt_load_i32(memory_at_0, loc_2)
																		loc_4 = rt_load_i32(memory_at_0, loc_7 + 16)
																		loc_8 = rt_load_i32(memory_at_0, loc_3)
																		if loc_4 ~= rt_load_i32(memory_at_0, loc_8 + 16) then
																			desired = 15
																			break
																		end
																		while true do
																			if loc_4 == 0 then
																				break
																			end
																			if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_4 + 3), 0) then
																				break
																			end
																			reg_0 = FUNC_LIST[460](loc_4, 7, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1556))
																			if reg_0 ~= 0 then
																				desired = 15
																				break
																			end
																			loc_8 = rt_load_i32(memory_at_0, loc_3)
																			loc_7 = rt_load_i32(memory_at_0, loc_2)
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		loc_1 = rt_add_i32(rt_shl_i32((if loc_7 ~= loc_8 then 1 else rt_shr_i32(loc_6, 16)), 2), loc_1)
																		loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																		desired = 5
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	loc_7 = rt_load_i32(memory_at_0, loc_2)
																	loc_4 = rt_load_i32(memory_at_0, loc_7 + 8)
																	loc_8 = rt_load_i32(memory_at_0, loc_3)
																	if loc_4 ~= rt_load_i32(memory_at_0, loc_8 + 8) then
																		break
																	end
																	while true do
																		while true do
																			if loc_4 == 0 then
																				break
																			end
																			if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_4 + 3), 0) then
																				break
																			end
																			reg_0 = FUNC_LIST[460](loc_4, 7, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1556))
																			loc_4 = reg_0
																			if loc_4 ~= 0 then
																				desired = 16
																				break
																			end
																			loc_8 = rt_load_i32(memory_at_0, loc_3)
																			loc_7 = rt_load_i32(memory_at_0, loc_2)
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		loc_1 = rt_add_i32(rt_shl_i32((if loc_7 ~= loc_8 then 1 else rt_shr_i32(loc_6, 16)), 2), loc_1)
																		loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																		desired = 5
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	if rt_load_i32(memory_at_0, loc_4 + 12) ~= 7 then
																		break
																	end
																	if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_4) + 3) == 0 then
																		break
																	end
																	loc_7 = rt_load_i32(memory_at_0, loc_0 + 8)
																	rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_4))
																	rt_store_i64(memory_at_0, loc_7 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
																	rt_store_i64(memory_at_0, loc_7 + 24, rt_load_i64(memory_at_0, loc_2 + 8))
																	rt_store_i64(memory_at_0, loc_7 + 16, rt_load_i64(memory_at_0, loc_2))
																	rt_store_i64(memory_at_0, loc_7 + 40, rt_load_i64(memory_at_0, loc_3 + 8))
																	rt_store_i64(memory_at_0, loc_7 + 32, rt_load_i64(memory_at_0, loc_3))
																	rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_7, 48))
																	rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_1)
																	loc_3 = rt_sub_i32(loc_7, loc_5)
																	FUNC_LIST[607](loc_0, 2, rt_shr_i32(loc_3, 4))
																	loc_2 = 1
																	while true do
																		while true do
																			while true do
																				loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
																				loc_3 = rt_add_i32(loc_5, loc_3)
																				if not br_map[20] then
																					br_map[20] = (function()
																						return { [0] = 2, 0, }
																					end)()
																				end
																				temp = br_map[20][rt_load_i32(memory_at_0, loc_3 + 12)] or 1
																				if temp < 1 then
																					break
																				elseif temp > 1 then
																					desired = 16
																					break
																				else
																					desired = 17
																					break
																				end
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			if rt_load_i32(memory_at_0, loc_3) == 0 then
																				desired = 16
																				break
																			end
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		loc_2 = rt_shr_i32(loc_6, 16)
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	loc_1 = rt_add_i32(rt_shl_i32(loc_2, 2), loc_1)
																	loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
																	desired = 5
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_1)
																reg_2 = FUNC_LIST[594](loc_0, loc_2, loc_3)
																loc_1 = rt_add_i32(rt_shl_i32((if reg_2 ~= 1 then 1 else rt_shr_i32(loc_6, 16)), 2), loc_1)
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
															loc_5 = rt_load_i32(memory_at_0, loc_0 + 12)
															desired = 5
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 8)
														loc_1 = rt_add_i32(loc_1, 8)
														desired = 5
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_3 = rt_add_i32(loc_1, 4)
													loc_2 = 0
													while true do
														while true do
															while true do
																loc_1 = rt_load_i32(memory_at_0, loc_1)
																loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_1, 4), 4080), loc_5)
																if not br_map[21] then
																	br_map[21] = (function()
																		return { [0] = 1, 0, }
																	end)()
																end
																temp = br_map[21][rt_load_i32(memory_at_0, loc_4 + 12)] or 2
																if temp < 1 then
																	break
																elseif temp > 1 then
																	desired = 12
																	break
																else
																	desired = 13
																	break
																end
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															if rt_load_i32(memory_at_0, loc_4) ~= 0 then
																desired = 12
																break
															end
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														loc_2 = rt_shr_i32(loc_1, 16)
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_1 = rt_add_i32(rt_shl_i32(loc_2, 2), loc_3)
													loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
													desired = 5
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_2 = rt_add_i32(loc_1, 4)
												while true do
													while true do
														while true do
															loc_3 = rt_load_i32(memory_at_0, loc_1)
															loc_4 = rt_add_i32(bit_and(rt_shr_u32(loc_3, 4), 4080), loc_5)
															loc_1 = rt_load_i32(memory_at_0, loc_4 + 12)
															if not br_map[22] then
																br_map[22] = (function()
																	return { [0] = 2, 0, }
																end)()
															end
															temp = br_map[22][loc_1] or 1
															if temp < 1 then
																break
															elseif temp > 1 then
																desired = 11
																break
															else
																desired = 12
																break
															end
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														if rt_load_i32(memory_at_0, loc_4) ~= 0 then
															break
														end
														loc_1 = 0
														desired = 11
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_1 = rt_shr_i32(loc_3, 16)
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_1 = rt_add_i32(rt_shl_i32(loc_1, 2), loc_2)
												loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
												desired = 5
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_1 = rt_add_i32(rt_add_i32(rt_shl_i32(rt_load_i32_i16(memory_at_0, loc_1 + 2), 2), loc_1), 4)
											loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
											desired = 5
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_2 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1700)
										if loc_2 ~= 0 then
											while true do
												rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, rt_add_i32(loc_1, 4))
												TABLE_LIST[0].data[loc_2](loc_0, 4294967295)
												if rt_load_i32_u8(memory_at_0, loc_0 + 3) ~= 0 then
													desired = 8
													break
												end
												reg_0 = rt_load_i32(memory_at_0, loc_0 + 12)
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										else
											while true do
												reg_0 = loc_5
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_5 = reg_0
										loc_1 = rt_load_i32(memory_at_0, loc_1)
										loc_2 = rt_add_i32(loc_5, bit_and(rt_shr_u32(loc_1, 4), 4080))
										while true do
											loc_1 = bit_and(rt_shr_u32(loc_1, 16), 255)
											if loc_1 == 0 then
												while true do
													reg_0 = rt_load_i32(memory_at_0, loc_0 + 8)
													desired = 9
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											reg_0 = rt_sub_i32(rt_add_i32(rt_shl_i32(loc_1, 4), loc_2), 16)
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_3 = reg_0
										loc_6 = rt_load_i32(memory_at_0, loc_0 + 20)
										loc_1 = rt_load_i32(memory_at_0, loc_6 + 4)
										loc_7 = rt_load_i32(memory_at_0, loc_6 + 16)
										if loc_7 == 0 then
											while true do
												loc_5 = loc_7
												desired = 7
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_5 = loc_7
										if loc_2 >= loc_3 then
											desired = 7
											break
										end
										while true do
											rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_2))
											rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
											loc_1 = rt_add_i32(loc_1, 16)
											loc_5 = rt_sub_i32(loc_5, 1)
											if loc_5 == 0 then
												desired = 7
												break
											end
											loc_2 = rt_add_i32(loc_2, 16)
											if loc_2 < loc_3 then
												continue
											end
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										desired = 7
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_1 = rt_load_i32(memory_at_0, loc_0 + 20)
									rt_store_i32(memory_at_0, loc_1 + 12, rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 12), 4))
									desired = 3
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_8 = rt_sub_i32(loc_6, 24)
								while true do
									if rt_le_i32(loc_5, 0) then
										break
									end
									while true do
										loc_4 = bit_and(loc_5, 7)
										if loc_4 ~= 0 then
											while true do
												loc_2 = loc_5
												loc_3 = 0
												while true do
													rt_store_i32(memory_at_0, loc_1 + 12, 0)
													loc_1 = rt_add_i32(loc_1, 16)
													loc_2 = rt_sub_i32(loc_2, 1)
													loc_3 = rt_add_i32(loc_3, 1)
													if loc_4 ~= loc_3 then
														continue
													end
													break
												end
												if desired then
													break
												end
												desired = 8
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_2 = loc_5
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if loc_5 < 8 then
										break
									end
									while true do
										rt_store_i32(memory_at_0, loc_1 + 124, 0)
										rt_store_i32(memory_at_0, loc_1 + 108, 0)
										rt_store_i32(memory_at_0, loc_1 + 92, 0)
										rt_store_i32(memory_at_0, loc_1 + 76, 0)
										rt_store_i32(memory_at_0, loc_1 + 60, 0)
										rt_store_i32(memory_at_0, loc_1 + 44, 0)
										rt_store_i32(memory_at_0, loc_1 + 28, 0)
										rt_store_i32(memory_at_0, loc_1 + 12, 0)
										loc_1 = rt_add_i32(loc_1, 128)
										loc_5 = rt_sub_i32(loc_2, 9)
										loc_2 = rt_sub_i32(loc_2, 8)
										if loc_5 < 4294967294 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								rt_store_i32(memory_at_0, loc_0 + 20, loc_8)
								loc_5 = rt_load_i32(memory_at_0, loc_8)
								rt_store_i32(memory_at_0, loc_0 + 12, loc_5)
								reg_0 = loc_0
								if loc_7 ~= 4294967295 then
									while true do
										reg_1 = rt_load_i32(memory_at_0, rt_sub_i32(loc_6, 16))
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								else
									while true do
										reg_1 = loc_1
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_1 = reg_1
								rt_store_i32(memory_at_0, reg_0 + 8, loc_1)
								if bit_and(rt_load_i32_u8(memory_at_0, loc_6 + 20), 1) ~= 0 then
									desired = 3
									break
								end
								loc_12 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, rt_sub_i32(loc_6, 20)))
								loc_3 = rt_load_i32(memory_at_0, loc_12 + 16)
								if bit_and(rt_load_i32_u8(memory_at_0, rt_sub_i32(loc_6, 4)), 4) ~= 0 then
									while true do
										reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1748)](loc_0, loc_3)
										if reg_0 == 1 then
											desired = 4
											break
										end
										desired = 3
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_1 = rt_load_i32(memory_at_0, rt_sub_i32(loc_6, 12))
								loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
								loc_11 = rt_load_i32(memory_at_0, loc_3 + 8)
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							loc_8 = rt_sub_i32(loc_9, 24)
							while true do
								if rt_le_i32(loc_3, 0) then
									break
								end
								while true do
									loc_6 = bit_and(loc_3, 7)
									if loc_6 ~= 0 then
										while true do
											loc_5 = loc_3
											loc_4 = 0
											while true do
												rt_store_i32(memory_at_0, loc_2 + 12, 0)
												loc_2 = rt_add_i32(loc_2, 16)
												loc_5 = rt_sub_i32(loc_5, 1)
												loc_4 = rt_add_i32(loc_4, 1)
												if loc_6 ~= loc_4 then
													continue
												end
												break
											end
											if desired then
												break
											end
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_5 = loc_3
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if loc_3 < 8 then
									break
								end
								while true do
									rt_store_i32(memory_at_0, loc_2 + 124, 0)
									rt_store_i32(memory_at_0, loc_2 + 108, 0)
									rt_store_i32(memory_at_0, loc_2 + 92, 0)
									rt_store_i32(memory_at_0, loc_2 + 76, 0)
									rt_store_i32(memory_at_0, loc_2 + 60, 0)
									rt_store_i32(memory_at_0, loc_2 + 44, 0)
									rt_store_i32(memory_at_0, loc_2 + 28, 0)
									rt_store_i32(memory_at_0, loc_2 + 12, 0)
									loc_2 = rt_add_i32(loc_2, 128)
									loc_3 = rt_sub_i32(loc_5, 9)
									loc_5 = rt_sub_i32(loc_5, 8)
									if loc_3 < 4294967294 then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							rt_store_i32(memory_at_0, loc_0 + 20, loc_8)
							loc_5 = rt_load_i32(memory_at_0, loc_8)
							rt_store_i32(memory_at_0, loc_0 + 12, loc_5)
							reg_0 = loc_0
							if loc_7 >= 16777216 then
								while true do
									reg_1 = rt_load_i32(memory_at_0, rt_sub_i32(loc_9, 16))
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							else
								while true do
									reg_1 = loc_2
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							loc_2 = reg_1
							rt_store_i32(memory_at_0, reg_0 + 8, loc_2)
							loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
							continue
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				GLOBAL_LIST[0].value = rt_sub_i32(loc_14, 4294967232)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[67](loc_0, rt_add_i32(loc_2, 16), rt_load_i32(memory_at_0, loc_6))
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 20) + 12, loc_2)
		FUNC_LIST[59](loc_0, loc_1, 2341)
		error("out of code bounds")
	end
end
FUNC_LIST[581] = --[[ luau_precall(lua_State*, lua_TValue*, int) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		if rt_load_i32(memory_at_0, loc_1 + 12) ~= 7 then
			while true do
				FUNC_LIST[608](loc_0, loc_1)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_5 = rt_load_i32(memory_at_0, loc_1)
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 20)
			if loc_3 == rt_load_i32(memory_at_0, loc_0 + 32) then
				while true do
					reg_0 = FUNC_LIST[83](loc_0)
					loc_3 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = rt_add_i32(loc_3, 24)
			rt_store_i32(memory_at_0, loc_0 + 20, loc_3)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32(memory_at_0, loc_3 + 4, loc_1)
		loc_6 = rt_add_i32(loc_1, 16)
		rt_store_i32(memory_at_0, loc_3, loc_6)
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
		loc_4 = rt_load_i32_u8(memory_at_0, loc_5 + 5)
		rt_store_i32(memory_at_0, loc_3 + 20, 0)
		rt_store_i32(memory_at_0, loc_3 + 12, 0)
		rt_store_i32(memory_at_0, loc_3 + 16, loc_2)
		loc_7 = rt_shl_i32(loc_4, 4)
		rt_store_i32(memory_at_0, loc_3 + 8, rt_add_i32(loc_7, loc_1))
		rt_store_i32(memory_at_0, loc_0 + 12, loc_6)
		if rt_le_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 24), loc_1), loc_7) then
			while true do
				FUNC_LIST[82](loc_0, loc_4)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_4 = rt_load_i32(memory_at_0, loc_5 + 16)
		while true do
			if rt_load_i32_u8(memory_at_0, loc_5 + 3) == 0 then
				while true do
					loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
					loc_2 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(rt_load_i32_u8(memory_at_0, loc_4 + 4), 4))
					if loc_1 < loc_2 then
						while true do
							while true do
								rt_store_i32(memory_at_0, loc_1 + 12, 0)
								loc_1 = rt_add_i32(loc_1, 16)
								if loc_2 > loc_1 then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							break
						end
					end
					reg_0 = loc_0
					if rt_load_i32_u8(memory_at_0, loc_4 + 5) ~= 0 then
						while true do
							reg_1 = loc_1
							break
						end
						if desired then
							break
						end
					else
						while true do
							reg_1 = rt_load_i32(memory_at_0, loc_3 + 8)
							break
						end
						if desired then
							break
						end
					end
					loc_1 = reg_1
					rt_store_i32(memory_at_0, reg_0 + 8, loc_1)
					rt_store_i32(memory_at_0, loc_3 + 12, rt_load_i32(memory_at_0, loc_4 + 12))
					loc_6 = 0
					if rt_load_i32(memory_at_0, loc_4 + 28) == 0 then
						desired = 1
						break
					end
					if rt_load_i32(memory_at_0, loc_4 + 24) == 0 then
						desired = 1
						break
					end
					rt_store_i32(memory_at_0, loc_3 + 20, 4)
					reg_0 = 0
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = TABLE_LIST[0].data[loc_4](loc_0)
			loc_3 = reg_0
			if rt_lt_i32(loc_3, 0) then
				while true do
					reg_0 = 2
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = rt_load_i32(memory_at_0, loc_0 + 20)
			loc_1 = rt_load_i32(memory_at_0, loc_4 + 4)
			while true do
				if loc_2 == 0 then
					break
				end
				if loc_3 == 0 then
					break
				end
				loc_5 = rt_load_i32(memory_at_0, loc_0 + 8)
				loc_3 = rt_sub_i32(loc_5, rt_shl_i32(loc_3, 4))
				while true do
					rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_3))
					rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
					loc_1 = rt_add_i32(loc_1, 16)
					loc_2 = rt_sub_i32(loc_2, 1)
					if loc_2 == 0 then
						desired = 2
						break
					end
					loc_3 = rt_add_i32(loc_3, 16)
					if loc_5 > loc_3 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_7 = rt_sub_i32(loc_4, 24)
			loc_6 = 1
			while true do
				if rt_le_i32(loc_2, 0) then
					break
				end
				while true do
					loc_4 = bit_and(loc_2, 7)
					if loc_4 == 0 then
						while true do
							loc_3 = loc_2
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_5 = 0
					loc_3 = loc_2
					while true do
						rt_store_i32(memory_at_0, loc_1 + 12, 0)
						loc_1 = rt_add_i32(loc_1, 16)
						loc_3 = rt_sub_i32(loc_3, 1)
						loc_5 = rt_add_i32(loc_5, 1)
						if loc_4 ~= loc_5 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_2 < 8 then
					break
				end
				while true do
					rt_store_i32(memory_at_0, loc_1 + 124, 0)
					rt_store_i32(memory_at_0, loc_1 + 108, 0)
					rt_store_i32(memory_at_0, loc_1 + 92, 0)
					rt_store_i32(memory_at_0, loc_1 + 76, 0)
					rt_store_i32(memory_at_0, loc_1 + 60, 0)
					rt_store_i32(memory_at_0, loc_1 + 44, 0)
					rt_store_i32(memory_at_0, loc_1 + 28, 0)
					rt_store_i32(memory_at_0, loc_1 + 12, 0)
					loc_1 = rt_add_i32(loc_1, 128)
					loc_2 = rt_sub_i32(loc_3, 9)
					loc_3 = rt_sub_i32(loc_3, 8)
					if loc_2 < 4294967294 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_0 + 20, loc_7)
			loc_3 = rt_load_i32(memory_at_0, loc_7)
			rt_store_i32(memory_at_0, loc_0 + 8, loc_1)
			rt_store_i32(memory_at_0, loc_0 + 12, loc_3)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[582] = --[[ luau_poscall(lua_State*, lua_TValue*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 20)
		loc_2 = rt_load_i32(memory_at_0, loc_4 + 4)
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_4 + 16)
			if loc_3 == 0 then
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 8)
			if loc_5 <= loc_1 then
				break
			end
			while true do
				rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
				rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
				loc_2 = rt_add_i32(loc_2, 16)
				loc_3 = rt_sub_i32(loc_3, 1)
				if loc_3 == 0 then
					desired = 1
					break
				end
				loc_1 = rt_add_i32(loc_1, 16)
				if loc_5 > loc_1 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		loc_6 = rt_sub_i32(loc_4, 24)
		while true do
			if rt_le_i32(loc_3, 0) then
				break
			end
			while true do
				loc_7 = bit_and(loc_3, 7)
				if loc_7 == 0 then
					while true do
						loc_1 = loc_3
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_5 = 0
				loc_1 = loc_3
				while true do
					rt_store_i32(memory_at_0, loc_2 + 12, 0)
					loc_2 = rt_add_i32(loc_2, 16)
					loc_1 = rt_sub_i32(loc_1, 1)
					loc_5 = rt_add_i32(loc_5, 1)
					if loc_7 ~= loc_5 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_3 < 8 then
				break
			end
			while true do
				rt_store_i32(memory_at_0, loc_2 + 124, 0)
				rt_store_i32(memory_at_0, loc_2 + 108, 0)
				rt_store_i32(memory_at_0, loc_2 + 92, 0)
				rt_store_i32(memory_at_0, loc_2 + 76, 0)
				rt_store_i32(memory_at_0, loc_2 + 60, 0)
				rt_store_i32(memory_at_0, loc_2 + 44, 0)
				rt_store_i32(memory_at_0, loc_2 + 28, 0)
				rt_store_i32(memory_at_0, loc_2 + 12, 0)
				loc_2 = rt_add_i32(loc_2, 128)
				loc_3 = rt_sub_i32(loc_1, 9)
				loc_1 = rt_sub_i32(loc_1, 8)
				if loc_3 < 4294967294 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		rt_store_i32(memory_at_0, loc_0 + 20, loc_6)
		rt_store_i32(memory_at_0, loc_0 + 12, rt_load_i32(memory_at_0, loc_6))
		reg_0 = loc_0
		if rt_load_i32(memory_at_0, loc_4 + 16) ~= 4294967295 then
			while true do
				reg_1 = rt_load_i32(memory_at_0, rt_sub_i32(loc_4, 16))
				break
			end
		else
			while true do
				reg_1 = loc_2
				break
			end
		end
		loc_2 = reg_1
		rt_store_i32(memory_at_0, reg_0 + 8, loc_2)
		break
	end
end
FUNC_LIST[583] = --[[ luaV_getimport(lua_State*, Table*, lua_TValue*, lua_TValue*, unsigned int, bool) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0
	local desired
	while true do
		loc_6 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_6
		loc_7 = rt_load_i32(memory_at_0, loc_0 + 28)
		rt_store_i32(memory_at_0, loc_6 + 12, 6)
		rt_store_i32(memory_at_0, loc_6, loc_1)
		FUNC_LIST[588](loc_0, loc_6, rt_add_i32(bit_and(rt_shr_u32(loc_4, 16), 16368), loc_2), loc_3)
		while true do
			if rt_ge_i32(loc_4, 0) then
				break
			end
			loc_1 = rt_sub_i32(loc_3, loc_7)
			loc_3 = rt_add_i32(loc_1, rt_load_i32(memory_at_0, loc_0 + 28))
			if loc_5 ~= 0 then
				while true do
					if rt_load_i32(memory_at_0, loc_3 + 12) == 0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[588](loc_0, loc_3, rt_add_i32(rt_shl_i32(bit_and(rt_shr_u32(loc_4, 10), 1023), 4), loc_2), loc_3)
			if loc_4 < 3221225472 then
				break
			end
			loc_3 = rt_add_i32(loc_1, rt_load_i32(memory_at_0, loc_0 + 28))
			if loc_5 ~= 0 then
				while true do
					if rt_load_i32(memory_at_0, loc_3 + 12) == 0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[588](loc_0, loc_3, rt_add_i32(rt_shl_i32(bit_and(loc_4, 1023), 4), loc_2), loc_3)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_6, 16)
		break
	end
end
FUNC_LIST[584] = --[[ luau_load ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = 0
	local loc_22 = 0
	local loc_23 = 0
	local loc_24 = 0
	local loc_25 = 0
	local loc_26 = 0
	local loc_27 = 0
	local loc_28 = 0
	local loc_29 = 0
	local loc_30 = 0
	local loc_31 = 0
	local loc_32 = 0
	local loc_33 = 0
	local loc_34 = 0
	local loc_35 = 0
	local loc_36 = 0
	local loc_37 = 0
	local loc_38 = 0
	local loc_39 = 0
	local loc_40 = 0
	local loc_41 = 0.0
	local loc_42 = 0.0
	local loc_43 = 0.0
	local loc_44 = 0.0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local desired
	local br_map = {}
	while true do
		loc_10 = rt_sub_i32(GLOBAL_LIST[0].value, 320)
		GLOBAL_LIST[0].value = loc_10
		while true do
			loc_17 = rt_load_i32_u8(memory_at_0, loc_2)
			if loc_17 == 0 then
				while true do
					loc_4 = 1
					reg_3 = FUNC_LIST[649](loc_1)
					reg_0 = FUNC_LIST[368](rt_add_i32(loc_10, 48), 256, loc_1, reg_3)
					loc_1 = reg_0
					rt_store_i32(memory_at_0, loc_10 + 8, rt_add_i32(loc_2, 1))
					rt_store_i32(memory_at_0, loc_10 + 4, rt_sub_i32(loc_3, 1))
					rt_store_i32(memory_at_0, loc_10, loc_1)
					reg_0 = FUNC_LIST[148](loc_0, 2064, loc_10)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if bit_and(rt_sub_i32(loc_17, 7), 255) <= 251 then
				while true do
					reg_3 = FUNC_LIST[649](loc_1)
					reg_0 = FUNC_LIST[368](rt_add_i32(loc_10, 48), 256, loc_1, reg_3)
					loc_1 = reg_0
					rt_store_i32(memory_at_0, loc_10 + 28, loc_17)
					rt_store_i64(memory_at_0, loc_10 + 20, rt_i64_from_u32(3, 6))
					rt_store_i32(memory_at_0, loc_10 + 16, loc_1)
					reg_0 = FUNC_LIST[148](loc_0, 5941, rt_add_i32(loc_10, 16))
					loc_4 = 1
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_18 = rt_load_i32(memory_at_0, loc_0 + 16)
			loc_23 = rt_load_i32(memory_at_0, loc_18 + 36)
			if rt_load_i32(memory_at_0, loc_18 + 40) >= loc_23 then
				while true do
					reg_0 = FUNC_LIST[42](loc_0, 1)
					loc_18 = rt_load_i32(memory_at_0, loc_0 + 16)
					reg_0 = rt_load_i32(memory_at_0, loc_18 + 36)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_23
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_23 = reg_0
			rt_store_i32(memory_at_0, loc_18 + 36, 4294967295)
			if loc_4 ~= 0 then
				while true do
					reg_0 = FUNC_LIST[95](loc_0, loc_4)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = rt_add_i32(loc_0, 56)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = reg_0
			loc_24 = rt_load_i32(memory_at_0, loc_4)
			reg_2 = FUNC_LIST[649](loc_1)
			reg_0 = FUNC_LIST[387](loc_0, loc_1, reg_2)
			loc_25 = reg_0
			loc_4 = 1
			while true do
				while true do
					if loc_17 < 4 then
						break
					end
					loc_4 = 2
					loc_14 = rt_load_i32_u8(memory_at_0, loc_2 + 1)
					if bit_and(rt_sub_i32(loc_14, 4), 255) > 252 then
						break
					end
					reg_3 = FUNC_LIST[649](loc_1)
					reg_0 = FUNC_LIST[368](rt_add_i32(loc_10, 48), 256, loc_1, reg_3)
					loc_1 = reg_0
					rt_store_i32(memory_at_0, loc_10 + 44, loc_14)
					rt_store_i64(memory_at_0, loc_10 + 36, rt_i64_from_u32(1, 3))
					rt_store_i32(memory_at_0, loc_10 + 32, loc_1)
					reg_0 = FUNC_LIST[148](loc_0, 5878, rt_add_i32(loc_10, 32))
					loc_4 = 1
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = 0
				while true do
					loc_5 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_2, loc_4))
					loc_7 = bit_or(loc_7, rt_shl_i32(bit_and(loc_5, 127), loc_3))
					loc_1 = rt_add_i32(loc_4, 1)
					loc_4 = loc_1
					loc_3 = rt_add_i32(loc_3, 7)
					if rt_lt_i32(loc_5, 0) then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					while true do
						if loc_7 >= 1073741824 then
							break
						end
						loc_26 = rt_shl_i32(loc_7, 2)
						reg_0 = FUNC_LIST[352](loc_0, loc_26, 0)
						loc_19 = reg_0
						if loc_7 ~= 0 then
							while true do
								while true do
									loc_4 = 0
									loc_3 = 0
									while true do
										loc_5 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_1, loc_2))
										loc_3 = bit_or(loc_3, rt_shl_i32(bit_and(loc_5, 127), loc_4))
										loc_6 = rt_add_i32(loc_1, 1)
										loc_1 = loc_6
										loc_4 = rt_add_i32(loc_4, 7)
										if rt_lt_i32(loc_5, 0) then
											continue
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
									reg_1 = FUNC_LIST[387](loc_0, rt_add_i32(loc_2, loc_6), loc_3)
									rt_store_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_8, 2), loc_19), reg_1)
									loc_1 = rt_add_i32(loc_3, loc_6)
									loc_8 = rt_add_i32(loc_8, 1)
									if loc_7 ~= loc_8 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						while true do
							if loc_14 ~= 3 then
								while true do
									loc_4 = loc_1
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							rt_store_i64(memory_at_0, loc_10 + 72, rt_i64_from_u32(117901063, 117901063))
							rt_store_i64(memory_at_0, rt_sub_i32(loc_10, 4294967232), rt_i64_from_u32(117901063, 117901063))
							rt_store_i64(memory_at_0, loc_10 + 56, rt_i64_from_u32(117901063, 117901063))
							rt_store_i64(memory_at_0, loc_10 + 48, rt_i64_from_u32(117901063, 117901063))
							loc_4 = rt_add_i32(loc_1, 1)
							loc_7 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_1, loc_2))
							if loc_7 == 0 then
								break
							end
							loc_8 = rt_sub_i32(loc_19, 4)
							while true do
								loc_3 = loc_4
								loc_1 = 0
								loc_4 = 0
								while true do
									loc_5 = loc_3
									loc_3 = rt_add_i32(loc_5, 1)
									loc_6 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_2, loc_5))
									loc_4 = bit_or(loc_4, rt_shl_i32(bit_and(loc_6, 127), loc_1))
									loc_1 = rt_add_i32(loc_1, 7)
									if rt_lt_i32(loc_6, 0) then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
										continue
									end
									break
								end
								if loc_4 ~= 0 then
									while true do
										reg_0 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_4, 2), loc_8))
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								else
									while true do
										reg_0 = 0
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
								end
								loc_1 = reg_0
								while true do
									loc_4 = bit_and(loc_7, 255)
									if loc_4 > 32 then
										break
									end
									loc_6 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1760)
									if loc_6 == 0 then
										break
									end
									reg_1 = TABLE_LIST[0].data[loc_6](loc_0, rt_add_i32(loc_1, 20), rt_load_i32(memory_at_0, loc_1 + 16))
									rt_store_i32_n8(memory_at_0, rt_add_i32(loc_4, loc_10) + 47, reg_1)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
										continue
									end
									break
								end
								loc_4 = rt_add_i32(loc_5, 2)
								loc_7 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, loc_3))
								if loc_7 ~= 0 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_1 = 0
						while true do
							loc_3 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_2, loc_4))
							loc_15 = bit_or(loc_15, rt_shl_i32(bit_and(loc_3, 127), loc_1))
							loc_6 = rt_add_i32(loc_4, 1)
							loc_4 = loc_6
							loc_1 = rt_add_i32(loc_1, 7)
							if rt_lt_i32(loc_3, 0) then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_15 >= 1073741824 then
							break
						end
						loc_27 = rt_shl_i32(loc_15, 2)
						reg_0 = FUNC_LIST[352](loc_0, loc_27, 0)
						loc_16 = reg_0
						if loc_15 == 0 then
							desired = 3
							break
						end
						loc_20 = rt_sub_i32(loc_19, 4)
						loc_28 = rt_add_i32(loc_2, 3)
						loc_29 = rt_add_i32(loc_2, 2)
						loc_30 = rt_add_i32(loc_2, 1)
						loc_31 = rt_add_i32(loc_2, 12)
						loc_32 = rt_add_i32(loc_2, 8)
						loc_33 = rt_add_i32(loc_2, 4)
						loc_34 = rt_add_i32(loc_2, 9)
						loc_35 = rt_add_i32(loc_2, 5)
						loc_36 = (if loc_14 ~= 1 then 1 else 0)
						loc_37 = (if bit_and(loc_14, 254) ~= 2 then 1 else 0)
						while true do
							reg_0 = FUNC_LIST[14](loc_0)
							loc_8 = reg_0
							rt_store_i32(memory_at_0, loc_8 + 104, loc_21)
							rt_store_i32(memory_at_0, loc_8 + 48, loc_25)
							rt_store_i32_n8(memory_at_0, loc_8 + 6, rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, loc_6)))
							rt_store_i32_n8(memory_at_0, loc_8 + 4, rt_load_i32_u8(memory_at_0, rt_add_i32(loc_6, loc_30)))
							rt_store_i32_n8(memory_at_0, loc_8 + 3, rt_load_i32_u8(memory_at_0, rt_add_i32(loc_6, loc_29)))
							rt_store_i32_n8(memory_at_0, loc_8 + 5, rt_load_i32_u8(memory_at_0, rt_add_i32(loc_6, loc_28)))
							loc_4 = rt_add_i32(loc_6, 4)
							while true do
								if loc_17 < 4 then
									break
								end
								rt_store_i32_n8(memory_at_0, loc_8 + 7, rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, loc_4)))
								loc_4 = rt_add_i32(loc_6, 5)
								loc_1 = 0
								if loc_36 == 0 then
									while true do
										loc_3 = 0
										while true do
											loc_5 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_2, loc_4))
											loc_3 = bit_or(loc_3, rt_shl_i32(bit_and(loc_5, 127), loc_1))
											loc_6 = rt_add_i32(loc_4, 1)
											loc_4 = loc_6
											loc_1 = rt_add_i32(loc_1, 7)
											if rt_lt_i32(loc_5, 0) then
												continue
											end
											break
										end
										if desired then
											break
										end
										if loc_3 ~= 0 then
											while true do
												loc_4 = (if loc_3 > 127 then 4 else 3)
												loc_5 = rt_add_i32(loc_3, loc_4)
												reg_0 = FUNC_LIST[352](loc_0, loc_5, rt_load_i32_u8(memory_at_0, loc_8 + 2))
												loc_1 = reg_0
												rt_store_i32(memory_at_0, loc_8 + 108, loc_5)
												rt_store_i32(memory_at_0, loc_8 + 60, loc_1)
												while true do
													if loc_3 >= 128 then
														while true do
															rt_store_i32_n8(memory_at_0, loc_1, bit_or(loc_3, 128))
															rt_store_i32_n8(memory_at_0, rt_load_i32(memory_at_0, loc_8 + 60) + 1, rt_shr_u32(loc_3, 7))
															loc_5 = 2
															reg_0 = 3
															desired = 9
															break
														end
														if desired then
															if desired == 9 then
																desired = nil
															end
															break
														end
													end
													rt_store_i32_n8(memory_at_0, loc_1, loc_3)
													loc_5 = 1
													reg_0 = 2
													break
												end
												if desired then
													break
												end
												loc_1 = reg_0
												rt_store_i32_n8(memory_at_0, rt_add_i32(loc_5, rt_load_i32(memory_at_0, loc_8 + 60)), 0)
												rt_store_i32_n8(memory_at_0, rt_add_i32(loc_1, rt_load_i32(memory_at_0, loc_8 + 60)), 0)
												reg_0 = FUNC_LIST[609](rt_add_i32(loc_4, rt_load_i32(memory_at_0, loc_8 + 60)), rt_add_i32(loc_2, loc_6), loc_3)
												break
											end
											if desired then
												break
											end
										end
										loc_4 = rt_add_i32(loc_3, loc_6)
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_3 = 0
								if loc_37 ~= 0 then
									break
								end
								while true do
									loc_5 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_2, loc_4))
									loc_3 = bit_or(loc_3, rt_shl_i32(bit_and(loc_5, 127), loc_1))
									loc_6 = rt_add_i32(loc_4, 1)
									loc_4 = loc_6
									loc_1 = rt_add_i32(loc_1, 7)
									if rt_lt_i32(loc_5, 0) then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if loc_3 == 0 then
									while true do
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								reg_0 = FUNC_LIST[352](loc_0, loc_3, rt_load_i32_u8(memory_at_0, loc_8 + 2))
								loc_1 = reg_0
								rt_store_i32(memory_at_0, loc_8 + 108, loc_3)
								rt_store_i32(memory_at_0, loc_8 + 60, loc_1)
								reg_0 = FUNC_LIST[609](loc_1, rt_add_i32(loc_2, loc_6), loc_3)
								loc_4 = rt_add_i32(loc_3, loc_6)
								if loc_14 ~= 3 then
									break
								end
								loc_5 = rt_load_i32(memory_at_0, loc_8 + 60)
								loc_6 = 0
								loc_3 = 0
								loc_7 = 0
								loc_12 = 0
								while true do
									loc_9 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_3, loc_5))
									loc_12 = bit_or(loc_12, rt_shl_i32(bit_and(loc_9, 127), loc_7))
									loc_1 = rt_add_i32(loc_3, 1)
									loc_3 = loc_1
									loc_7 = rt_add_i32(loc_7, 7)
									if rt_lt_i32(loc_9, 0) then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_11 = 0
								while true do
									loc_13 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_1, loc_5))
									loc_11 = bit_or(loc_11, rt_shl_i32(bit_and(loc_13, 127), loc_6))
									loc_3 = 0
									loc_7 = rt_add_i32(loc_1, 1)
									loc_1 = loc_7
									loc_6 = rt_add_i32(loc_6, 7)
									loc_9 = 0
									if rt_lt_i32(loc_13, 0) then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								while true do
									loc_1 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_5, loc_7))
									loc_9 = bit_or(loc_9, rt_shl_i32(bit_and(loc_1, 127), loc_3))
									loc_6 = rt_add_i32(loc_7, 1)
									loc_7 = loc_6
									loc_3 = rt_add_i32(loc_3, 7)
									if rt_lt_i32(loc_1, 0) then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if loc_12 ~= 0 then
									while true do
										while true do
											if loc_12 < 3 then
												break
											end
											loc_22 = rt_add_i32(loc_5, loc_6)
											loc_1 = 2
											if loc_12 ~= 3 then
												while true do
													loc_38 = rt_sub_i32(bit_and(loc_12, 4294967294), 4)
													loc_3 = 0
													while true do
														loc_7 = rt_add_i32(loc_1, loc_22)
														loc_13 = rt_add_i32(rt_load_i32_u8(memory_at_0, loc_7), 4294967232)
														if loc_13 <= 31 then
															while true do
																rt_store_i32_n8(memory_at_0, loc_7, rt_load_i32_u8(memory_at_0, rt_add_i32(loc_13, rt_add_i32(loc_10, 48))))
																break
															end
															if desired then
																if desired == 10 then
																	desired = nil
																	continue
																end
																break
															end
														end
														loc_39 = loc_7
														loc_7 = rt_add_i32(loc_39, 1)
														loc_13 = rt_add_i32(rt_load_i32_u8(memory_at_0, loc_7), 4294967232)
														if loc_13 <= 31 then
															while true do
																rt_store_i32_n8(memory_at_0, loc_39 + 1, rt_load_i32_u8(memory_at_0, rt_add_i32(loc_13, rt_add_i32(loc_10, 48))))
																break
															end
															if desired then
																if desired == 10 then
																	desired = nil
																	continue
																end
																break
															end
														end
														loc_1 = rt_add_i32(loc_1, 2)
														loc_7 = (if loc_3 == loc_38 then 1 else 0)
														loc_3 = rt_add_i32(loc_3, 2)
														if loc_7 == 0 then
															continue
														end
														break
													end
													if desired then
														break
													end
													break
												end
												if desired then
													if desired == 8 then
														desired = nil
													end
													break
												end
											end
											if bit_and(loc_12, 1) == 0 then
												break
											end
											loc_1 = rt_add_i32(loc_1, loc_22)
											loc_3 = rt_add_i32(rt_load_i32_u8(memory_at_0, loc_1), 4294967232)
											if loc_3 > 31 then
												break
											end
											rt_store_i32_n8(memory_at_0, loc_1, rt_load_i32_u8(memory_at_0, rt_add_i32(loc_3, rt_add_i32(loc_10, 48))))
											break
										end
										if desired then
											break
										end
										reg_0 = rt_add_i32(loc_6, loc_12)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								else
									while true do
										reg_0 = loc_6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_6 = reg_0
								if loc_11 ~= 0 then
									while true do
										loc_13 = rt_add_i32(loc_5, loc_6)
										loc_1 = 0
										if loc_11 ~= 1 then
											while true do
												loc_22 = bit_and(loc_11, 4294967294)
												loc_7 = 0
												while true do
													loc_3 = rt_add_i32(loc_1, loc_13)
													loc_12 = rt_add_i32(rt_load_i32_u8(memory_at_0, loc_3), 4294967232)
													if loc_12 <= 31 then
														while true do
															rt_store_i32_n8(memory_at_0, loc_3, rt_load_i32_u8(memory_at_0, rt_add_i32(loc_12, rt_add_i32(loc_10, 48))))
															break
														end
														if desired then
															if desired == 9 then
																desired = nil
																continue
															end
															break
														end
													end
													loc_40 = loc_3
													loc_3 = rt_add_i32(loc_40, 1)
													loc_12 = rt_add_i32(rt_load_i32_u8(memory_at_0, loc_3), 4294967232)
													if loc_12 <= 31 then
														while true do
															rt_store_i32_n8(memory_at_0, loc_40 + 1, rt_load_i32_u8(memory_at_0, rt_add_i32(loc_12, rt_add_i32(loc_10, 48))))
															break
														end
														if desired then
															if desired == 9 then
																desired = nil
																continue
															end
															break
														end
													end
													loc_1 = rt_add_i32(loc_1, 2)
													loc_7 = rt_add_i32(loc_7, 2)
													if loc_22 ~= loc_7 then
														continue
													end
													break
												end
												if desired then
													break
												end
												break
											end
											if desired then
												break
											end
										end
										while true do
											if bit_and(loc_11, 1) == 0 then
												break
											end
											loc_1 = rt_add_i32(loc_1, loc_13)
											loc_3 = rt_add_i32(rt_load_i32_u8(memory_at_0, loc_1), 4294967232)
											if loc_3 > 31 then
												break
											end
											rt_store_i32_n8(memory_at_0, loc_1, rt_load_i32_u8(memory_at_0, rt_add_i32(loc_3, rt_add_i32(loc_10, 48))))
											break
										end
										if desired then
											break
										end
										reg_0 = rt_add_i32(loc_6, loc_11)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								else
									while true do
										reg_0 = loc_6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_6 = reg_0
								loc_7 = 0
								if loc_9 == 0 then
									break
								end
								while true do
									loc_1 = rt_add_i32(loc_5, loc_6)
									loc_3 = rt_add_i32(rt_load_i32_i8(memory_at_0, loc_1), 4294967232)
									if loc_3 <= 31 then
										while true do
											rt_store_i32_n8(memory_at_0, loc_1, rt_load_i32_u8(memory_at_0, rt_add_i32(loc_3, rt_add_i32(loc_10, 48))))
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
									end
									loc_3 = rt_add_i32(loc_6, 2)
									while true do
										loc_6 = rt_add_i32(loc_3, loc_5)
										loc_1 = rt_add_i32(loc_3, 1)
										loc_3 = loc_1
										if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_6), 0) then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
											continue
										end
										break
									end
									while true do
										loc_3 = rt_add_i32(loc_1, loc_5)
										loc_6 = rt_add_i32(loc_1, 1)
										loc_1 = loc_6
										if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_3), 0) then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
											continue
										end
										break
									end
									loc_7 = rt_add_i32(loc_7, 1)
									if loc_9 ~= loc_7 then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							loc_3 = 0
							loc_5 = 0
							while true do
								loc_6 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_2, loc_4))
								loc_5 = bit_or(loc_5, rt_shl_i32(bit_and(loc_6, 127), loc_3))
								loc_1 = rt_add_i32(loc_4, 1)
								loc_4 = loc_1
								loc_3 = rt_add_i32(loc_3, 7)
								if rt_lt_i32(loc_6, 0) then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							if loc_5 > 1073741823 then
								desired = 4
								break
							end
							reg_0 = FUNC_LIST[352](loc_0, rt_shl_i32(loc_5, 2), rt_load_i32_u8(memory_at_0, loc_8 + 2))
							loc_3 = reg_0
							rt_store_i32(memory_at_0, loc_8 + 72, loc_5)
							rt_store_i32(memory_at_0, loc_8 + 12, loc_3)
							loc_4 = 0
							if loc_5 ~= 0 then
								while true do
									while true do
										rt_store_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_4, 2), loc_3), rt_load_i32(memory_at_0, rt_add_i32(loc_1, loc_2)))
										loc_1 = rt_add_i32(loc_1, 4)
										loc_4 = rt_add_i32(loc_4, 1)
										if rt_lt_i32(loc_4, rt_load_i32(memory_at_0, loc_8 + 72)) then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							rt_store_i32(memory_at_0, loc_8 + 20, loc_3)
							loc_4 = 0
							loc_3 = 0
							while true do
								loc_5 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_1, loc_2))
								loc_3 = bit_or(loc_3, rt_shl_i32(bit_and(loc_5, 127), loc_4))
								loc_11 = rt_add_i32(loc_1, 1)
								loc_1 = loc_11
								loc_4 = rt_add_i32(loc_4, 7)
								if rt_lt_i32(loc_5, 0) then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							if loc_3 >= 268435456 then
								desired = 4
								break
							end
							reg_0 = FUNC_LIST[352](loc_0, rt_shl_i32(loc_3, 4), rt_load_i32_u8(memory_at_0, loc_8 + 2))
							loc_6 = reg_0
							rt_store_i32(memory_at_0, loc_8 + 88, loc_3)
							rt_store_i32(memory_at_0, loc_8 + 8, loc_6)
							while true do
								if loc_3 == 0 then
									while true do
										loc_4 = loc_11
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_5 = 0
								loc_4 = 0
								if loc_3 >= 8 then
									while true do
										loc_9 = bit_and(loc_3, 268435448)
										loc_7 = 0
										while true do
											loc_1 = rt_add_i32(rt_shl_i32(loc_4, 4), loc_6)
											rt_store_i32(memory_at_0, loc_1 + 12, 0)
											rt_store_i32(memory_at_0, loc_1 + 28, 0)
											rt_store_i32(memory_at_0, loc_1 + 44, 0)
											rt_store_i32(memory_at_0, loc_1 + 60, 0)
											rt_store_i32(memory_at_0, loc_1 + 76, 0)
											rt_store_i32(memory_at_0, loc_1 + 92, 0)
											rt_store_i32(memory_at_0, loc_1 + 108, 0)
											rt_store_i32(memory_at_0, loc_1 + 124, 0)
											loc_4 = rt_add_i32(loc_4, 8)
											loc_7 = rt_add_i32(loc_7, 8)
											if loc_9 ~= loc_7 then
												continue
											end
											break
										end
										if desired then
											break
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_1 = bit_and(loc_3, 7)
								if loc_1 ~= 0 then
									while true do
										while true do
											rt_store_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_4, 4), loc_6) + 12, 0)
											loc_4 = rt_add_i32(loc_4, 1)
											loc_5 = rt_add_i32(loc_5, 1)
											if loc_1 ~= loc_5 then
												continue
											end
											break
										end
										if desired then
											break
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_12 = 0
								while true do
									loc_4 = rt_add_i32(loc_11, 1)
									loc_1 = 0
									loc_6 = 0
									loc_3 = 0
									loc_7 = 0
									loc_5 = 0
									loc_9 = 0
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	if not br_map[1] then
																		br_map[1] = (function()
																			return { [0] = 0, 1, 3, 4, 5, 6, 2, }
																		end)()
																	end
																	temp = br_map[1][rt_sub_i32(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, loc_11)), 1)] or 7
																	if temp < 4 then
																		if temp < 2 then
																			if temp < 1 then
																				break
																			else
																				desired = 14
																				break
																			end
																		elseif temp > 2 then
																			desired = 12
																			break
																		else
																			desired = 13
																			break
																		end
																	elseif temp > 4 then
																		if temp < 6 then
																			desired = 10
																			break
																		elseif temp > 6 then
																			desired = 8
																			break
																		else
																			desired = 9
																			break
																		end
																	else
																		desired = 11
																		break
																	end
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																loc_1 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, loc_4))
																loc_4 = rt_add_i32(rt_load_i32(memory_at_0, loc_8 + 8), rt_shl_i32(loc_12, 4))
																rt_store_i32(memory_at_0, loc_4 + 12, 1)
																rt_store_i32(memory_at_0, loc_4, loc_1)
																loc_4 = rt_add_i32(loc_11, 2)
																desired = 8
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															loc_41 = rt_load_f64(memory_at_0, rt_add_i32(loc_2, loc_4))
															loc_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_8 + 8), rt_shl_i32(loc_12, 4))
															rt_store_i32(memory_at_0, loc_1 + 12, 3)
															rt_store_f64(memory_at_0, loc_1, loc_41)
															loc_4 = rt_add_i32(loc_11, 9)
															desired = 8
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														loc_42 = rt_load_f32(memory_at_0, rt_add_i32(loc_2, loc_4))
														loc_43 = rt_load_f32(memory_at_0, rt_add_i32(loc_11, loc_35))
														loc_44 = rt_load_f32(memory_at_0, rt_add_i32(loc_11, loc_34))
														loc_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_8 + 8), rt_shl_i32(loc_12, 4))
														rt_store_i32(memory_at_0, loc_1 + 12, 4)
														rt_store_f32(memory_at_0, loc_1 + 8, loc_44)
														rt_store_f32(memory_at_0, loc_1 + 4, loc_43)
														rt_store_f32(memory_at_0, loc_1, loc_42)
														loc_4 = rt_add_i32(loc_11, 17)
														desired = 8
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													while true do
														loc_3 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_2, loc_4))
														loc_6 = bit_or(loc_6, rt_shl_i32(bit_and(loc_3, 127), loc_1))
														loc_5 = rt_add_i32(loc_4, 1)
														loc_4 = loc_5
														loc_1 = rt_add_i32(loc_1, 7)
														if rt_lt_i32(loc_3, 0) then
															continue
														end
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													if loc_6 ~= 0 then
														while true do
															reg_0 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_6, 2), loc_20))
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													else
														while true do
															reg_0 = 0
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													loc_1 = reg_0
													loc_4 = rt_add_i32(rt_load_i32(memory_at_0, loc_8 + 8), rt_shl_i32(loc_12, 4))
													rt_store_i32(memory_at_0, loc_4 + 12, 5)
													rt_store_i32(memory_at_0, loc_4, loc_1)
													loc_4 = loc_5
													desired = 8
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_1 = rt_load_i32(memory_at_0, loc_8 + 8)
												rt_store_i32(memory_at_0, loc_10 + 316, rt_load_i32(memory_at_0, rt_add_i32(loc_2, loc_4)))
												rt_store_i32(memory_at_0, loc_10 + 312, loc_1)
												while true do
													if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 56) + 5) ~= 0 then
														while true do
															reg_0 = FUNC_LIST[105](loc_0)
															reg_0 = FUNC_LIST[93](loc_0, 282, rt_add_i32(loc_10, 312), rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_load_i32(memory_at_0, loc_0 + 28)), 0)
															loc_4 = reg_0
															loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
															if loc_4 == 0 then
																desired = 11
																break
															end
															rt_store_i32(memory_at_0, rt_sub_i32(loc_1, 4), 0)
															desired = 11
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
															end
															break
														end
													end
													loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
													rt_store_i32(memory_at_0, loc_1 + 12, 0)
													loc_1 = rt_add_i32(loc_1, 16)
													rt_store_i32(memory_at_0, loc_0 + 8, loc_1)
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_4 = rt_add_i32(loc_11, 5)
												loc_3 = rt_add_i32(rt_load_i32(memory_at_0, loc_8 + 8), rt_shl_i32(loc_12, 4))
												loc_1 = rt_sub_i32(loc_1, 16)
												rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_1))
												rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
												rt_store_i32(memory_at_0, loc_0 + 8, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16))
												desired = 8
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											while true do
												loc_5 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_2, loc_4))
												loc_7 = bit_or(loc_7, rt_shl_i32(bit_and(loc_5, 127), loc_3))
												loc_1 = rt_add_i32(loc_4, 1)
												loc_4 = loc_1
												loc_3 = rt_add_i32(loc_3, 7)
												if rt_lt_i32(loc_5, 0) then
													continue
												end
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											reg_0 = FUNC_LIST[423](loc_0, 0, loc_7)
											loc_11 = reg_0
											if rt_gt_i32(loc_7, 0) then
												while true do
													while true do
														loc_4 = 0
														loc_3 = 0
														while true do
															loc_5 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_1, loc_2))
															loc_3 = bit_or(loc_3, rt_shl_i32(bit_and(loc_5, 127), loc_4))
															loc_6 = rt_add_i32(loc_1, 1)
															loc_1 = loc_6
															loc_4 = rt_add_i32(loc_4, 7)
															if rt_lt_i32(loc_5, 0) then
																continue
															end
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
																continue
															end
															break
														end
														reg_0 = FUNC_LIST[428](loc_0, loc_11, rt_add_i32(rt_load_i32(memory_at_0, loc_8 + 8), rt_shl_i32(loc_3, 4)))
														loc_1 = reg_0
														rt_store_i32(memory_at_0, loc_1 + 12, 3)
														rt_store_i64(memory_at_0, loc_1, rt_i64_ZERO)
														loc_1 = loc_6
														loc_9 = rt_add_i32(loc_9, 1)
														if loc_7 ~= loc_9 then
															continue
														end
														break
													end
													if desired then
														break
													end
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											loc_4 = rt_add_i32(rt_load_i32(memory_at_0, loc_8 + 8), rt_shl_i32(loc_12, 4))
											rt_store_i32(memory_at_0, loc_4 + 12, 6)
											rt_store_i32(memory_at_0, loc_4, loc_11)
											loc_4 = loc_1
											desired = 8
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										while true do
											loc_1 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_2, loc_4))
											loc_9 = bit_or(loc_9, rt_shl_i32(bit_and(loc_1, 127), loc_5))
											loc_3 = rt_add_i32(loc_4, 1)
											loc_4 = loc_3
											loc_5 = rt_add_i32(loc_5, 7)
											if rt_lt_i32(loc_1, 0) then
												continue
											end
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_1 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_9, 2), loc_16))
										reg_0 = FUNC_LIST[15](loc_0, rt_load_i32_u8(memory_at_0, loc_1 + 3), loc_24, loc_1)
										loc_1 = reg_0
										rt_store_i32_n8(memory_at_0, loc_1 + 6, (if rt_load_i32_u8(memory_at_0, loc_1 + 4) ~= 0 then 1 else 0))
										loc_4 = rt_add_i32(rt_load_i32(memory_at_0, loc_8 + 8), rt_shl_i32(loc_12, 4))
										rt_store_i32(memory_at_0, loc_4 + 12, 7)
										rt_store_i32(memory_at_0, loc_4, loc_1)
										loc_4 = loc_3
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
											continue
										end
										break
									end
									loc_11 = loc_4
									loc_12 = rt_add_i32(loc_12, 1)
									if rt_lt_i32(loc_12, rt_load_i32(memory_at_0, loc_8 + 88)) then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							loc_3 = 0
							loc_7 = 0
							while true do
								loc_5 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_2, loc_4))
								loc_7 = bit_or(loc_7, rt_shl_i32(bit_and(loc_5, 127), loc_3))
								loc_1 = rt_add_i32(loc_4, 1)
								loc_4 = loc_1
								loc_3 = rt_add_i32(loc_3, 7)
								if rt_lt_i32(loc_5, 0) then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							if loc_7 >= 1073741824 then
								desired = 4
								break
							end
							reg_0 = FUNC_LIST[352](loc_0, rt_shl_i32(loc_7, 2), rt_load_i32_u8(memory_at_0, loc_8 + 2))
							loc_4 = reg_0
							rt_store_i32(memory_at_0, loc_8 + 76, loc_7)
							rt_store_i32(memory_at_0, loc_8 + 16, loc_4)
							loc_9 = 0
							if loc_7 ~= 0 then
								while true do
									while true do
										loc_4 = 0
										loc_3 = 0
										while true do
											loc_5 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_1, loc_2))
											loc_3 = bit_or(loc_3, rt_shl_i32(bit_and(loc_5, 127), loc_4))
											loc_6 = rt_add_i32(loc_1, 1)
											loc_1 = loc_6
											loc_4 = rt_add_i32(loc_4, 7)
											if rt_lt_i32(loc_5, 0) then
												continue
											end
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
										rt_store_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_8 + 16), rt_shl_i32(loc_9, 2)), rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_3, 2), loc_16)))
										loc_9 = rt_add_i32(loc_9, 1)
										if loc_7 ~= loc_9 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							loc_4 = 0
							loc_5 = 0
							while true do
								loc_6 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_1, loc_2))
								loc_5 = bit_or(loc_5, rt_shl_i32(bit_and(loc_6, 127), loc_4))
								loc_3 = rt_add_i32(loc_1, 1)
								loc_1 = loc_3
								loc_4 = rt_add_i32(loc_4, 7)
								if rt_lt_i32(loc_6, 0) then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							rt_store_i32(memory_at_0, loc_8 + 100, loc_5)
							loc_1 = 0
							loc_4 = 0
							while true do
								loc_5 = loc_3
								loc_3 = rt_add_i32(loc_5, 1)
								loc_6 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_2, loc_5))
								loc_4 = bit_or(loc_4, rt_shl_i32(bit_and(loc_6, 127), loc_1))
								loc_1 = rt_add_i32(loc_1, 7)
								if rt_lt_i32(loc_6, 0) then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							reg_0 = loc_8
							if loc_4 ~= 0 then
								while true do
									reg_1 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_4, 2), loc_20))
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							else
								while true do
									reg_1 = 0
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							loc_1 = reg_1
							rt_store_i32(memory_at_0, reg_0 + 52, loc_1)
							loc_1 = rt_add_i32(loc_5, 2)
							while true do
								if rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, loc_3)) == 0 then
									break
								end
								loc_1 = rt_load_i32_u8(memory_at_0, rt_add_i32(loc_1, loc_2))
								rt_store_i32(memory_at_0, loc_8 + 96, loc_1)
								loc_4 = rt_load_i32(memory_at_0, loc_8 + 72)
								loc_3 = bit_and(rt_add_i32(loc_4, 3), 4294967292)
								loc_9 = rt_shr_i32(rt_sub_i32(loc_4, 1), loc_1)
								loc_4 = rt_add_i32(rt_add_i32(loc_3, rt_shl_i32(loc_9, 2)), 4)
								reg_0 = FUNC_LIST[352](loc_0, loc_4, rt_load_i32_u8(memory_at_0, loc_8 + 2))
								loc_1 = reg_0
								rt_store_i32(memory_at_0, loc_8 + 92, loc_4)
								rt_store_i32(memory_at_0, loc_8 + 32, loc_1)
								rt_store_i32(memory_at_0, loc_8 + 36, rt_add_i32(loc_1, loc_3))
								loc_1 = rt_add_i32(loc_5, 3)
								loc_4 = 0
								loc_3 = 0
								if rt_gt_i32(rt_load_i32(memory_at_0, loc_8 + 72), 0) then
									while true do
										while true do
											loc_3 = rt_add_i32(rt_load_i32_u8(memory_at_0, rt_add_i32(loc_1, loc_2)), loc_3)
											rt_store_i32_n8(memory_at_0, rt_add_i32(loc_4, rt_load_i32(memory_at_0, loc_8 + 32)), loc_3)
											loc_1 = rt_add_i32(loc_1, 1)
											loc_4 = rt_add_i32(loc_4, 1)
											if rt_lt_i32(loc_4, rt_load_i32(memory_at_0, loc_8 + 72)) then
												continue
											end
											break
										end
										if desired then
											break
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								if rt_lt_i32(loc_9, 0) then
									break
								end
								loc_4 = rt_add_i32(loc_9, 1)
								loc_11 = bit_and(loc_4, 3)
								loc_7 = rt_load_i32(memory_at_0, loc_8 + 36)
								loc_6 = 0
								while true do
									if loc_9 < 3 then
										while true do
											loc_4 = 0
											loc_3 = 0
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_12 = bit_and(loc_4, 4294967292)
									loc_4 = 0
									loc_3 = 0
									loc_9 = 0
									while true do
										loc_5 = rt_add_i32(rt_shl_i32(loc_4, 2), loc_7)
										loc_3 = rt_add_i32(loc_3, rt_load_i32(memory_at_0, rt_add_i32(loc_1, loc_2)))
										rt_store_i32(memory_at_0, loc_5, loc_3)
										loc_3 = rt_add_i32(loc_3, rt_load_i32(memory_at_0, rt_add_i32(loc_1, loc_33)))
										rt_store_i32(memory_at_0, loc_5 + 4, loc_3)
										loc_3 = rt_add_i32(loc_3, rt_load_i32(memory_at_0, rt_add_i32(loc_1, loc_32)))
										rt_store_i32(memory_at_0, loc_5 + 8, loc_3)
										loc_3 = rt_add_i32(loc_3, rt_load_i32(memory_at_0, rt_add_i32(loc_1, loc_31)))
										rt_store_i32(memory_at_0, loc_5 + 12, loc_3)
										loc_4 = rt_add_i32(loc_4, 4)
										loc_1 = rt_add_i32(loc_1, 16)
										loc_9 = rt_add_i32(loc_9, 4)
										if loc_12 ~= loc_9 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if loc_11 == 0 then
									break
								end
								while true do
									loc_3 = rt_add_i32(loc_3, rt_load_i32(memory_at_0, rt_add_i32(loc_1, loc_2)))
									rt_store_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_4, 2), loc_7), loc_3)
									loc_4 = rt_add_i32(loc_4, 1)
									loc_1 = rt_add_i32(loc_1, 4)
									loc_6 = rt_add_i32(loc_6, 1)
									if loc_11 ~= loc_6 then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							loc_6 = rt_add_i32(loc_1, 1)
							loc_3 = 0
							loc_7 = 0
							while true do
								if rt_load_i32_u8(memory_at_0, rt_add_i32(loc_1, loc_2)) == 0 then
									break
								end
								while true do
									loc_1 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_2, loc_6))
									loc_7 = bit_or(loc_7, rt_shl_i32(bit_and(loc_1, 127), loc_3))
									loc_4 = rt_add_i32(loc_6, 1)
									loc_6 = loc_4
									loc_3 = rt_add_i32(loc_3, 7)
									if rt_lt_i32(loc_1, 0) then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if loc_7 > 268435455 then
									desired = 4
									break
								end
								reg_0 = FUNC_LIST[352](loc_0, rt_shl_i32(loc_7, 4), rt_load_i32_u8(memory_at_0, loc_8 + 2))
								loc_12 = reg_0
								rt_store_i32(memory_at_0, loc_8 + 80, loc_7)
								rt_store_i32(memory_at_0, loc_8 + 40, loc_12)
								loc_11 = 0
								if loc_7 ~= 0 then
									while true do
										while true do
											loc_3 = 0
											loc_5 = 0
											while true do
												loc_6 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_2, loc_4))
												loc_5 = bit_or(loc_5, rt_shl_i32(bit_and(loc_6, 127), loc_3))
												loc_1 = rt_add_i32(loc_4, 1)
												loc_4 = loc_1
												loc_3 = rt_add_i32(loc_3, 7)
												if rt_lt_i32(loc_6, 0) then
													continue
												end
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
													continue
												end
												break
											end
											loc_4 = 0
											loc_3 = 0
											loc_9 = rt_add_i32(rt_shl_i32(loc_11, 4), loc_12)
											reg_0 = loc_9
											if loc_5 ~= 0 then
												while true do
													reg_1 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_5, 2), loc_20))
													break
												end
												if desired then
													if desired == 8 then
														desired = nil
														continue
													end
													break
												end
											else
												while true do
													reg_1 = loc_3
													break
												end
												if desired then
													if desired == 8 then
														desired = nil
														continue
													end
													break
												end
											end
											loc_3 = reg_1
											rt_store_i32(memory_at_0, reg_0, loc_3)
											loc_5 = 0
											while true do
												loc_6 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_1, loc_2))
												loc_5 = bit_or(loc_5, rt_shl_i32(bit_and(loc_6, 127), loc_4))
												loc_3 = rt_add_i32(loc_1, 1)
												loc_1 = loc_3
												loc_4 = rt_add_i32(loc_4, 7)
												if rt_lt_i32(loc_6, 0) then
													continue
												end
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
													continue
												end
												break
											end
											rt_store_i32(memory_at_0, loc_9 + 4, loc_5)
											loc_1 = 0
											loc_4 = 0
											while true do
												loc_5 = loc_3
												loc_3 = rt_add_i32(loc_5, 1)
												loc_6 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_2, loc_5))
												loc_4 = bit_or(loc_4, rt_shl_i32(bit_and(loc_6, 127), loc_1))
												loc_1 = rt_add_i32(loc_1, 7)
												if rt_lt_i32(loc_6, 0) then
													continue
												end
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
													continue
												end
												break
											end
											rt_store_i32(memory_at_0, loc_9 + 8, loc_4)
											rt_store_i32_n8(memory_at_0, loc_9 + 12, rt_load_i32_u8(memory_at_0, rt_add_i32(loc_2, loc_3)))
											loc_4 = rt_add_i32(loc_5, 2)
											loc_11 = rt_add_i32(loc_11, 1)
											if loc_7 ~= loc_11 then
												continue
											end
											break
										end
										if desired then
											break
										end
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_1 = 0
								loc_7 = 0
								while true do
									loc_3 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_2, loc_4))
									loc_7 = bit_or(loc_7, rt_shl_i32(bit_and(loc_3, 127), loc_1))
									loc_6 = rt_add_i32(loc_4, 1)
									loc_4 = loc_6
									loc_1 = rt_add_i32(loc_1, 7)
									if rt_lt_i32(loc_3, 0) then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if loc_7 >= 1073741824 then
									desired = 4
									break
								end
								reg_0 = FUNC_LIST[352](loc_0, rt_shl_i32(loc_7, 2), rt_load_i32_u8(memory_at_0, loc_8 + 2))
								loc_1 = reg_0
								rt_store_i32(memory_at_0, loc_8 + 84, loc_7)
								rt_store_i32(memory_at_0, loc_8 + 44, loc_1)
								loc_9 = 0
								if loc_7 == 0 then
									break
								end
								while true do
									loc_1 = loc_6
									loc_4 = 0
									loc_3 = 0
									while true do
										loc_5 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_1, loc_2))
										loc_3 = bit_or(loc_3, rt_shl_i32(bit_and(loc_5, 127), loc_4))
										loc_6 = rt_add_i32(loc_1, 1)
										loc_1 = loc_6
										loc_4 = rt_add_i32(loc_4, 7)
										if rt_lt_i32(loc_5, 0) then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
											continue
										end
										break
									end
									reg_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_8 + 44), rt_shl_i32(loc_9, 2))
									if loc_3 ~= 0 then
										while true do
											reg_1 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_3, 2), loc_20))
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
									else
										while true do
											reg_1 = 0
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
									end
									loc_1 = reg_1
									rt_store_i32(memory_at_0, reg_0, loc_1)
									loc_9 = rt_add_i32(loc_9, 1)
									if loc_7 ~= loc_9 then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							rt_store_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_21, 2), loc_16), loc_8)
							loc_21 = rt_add_i32(loc_21, 1)
							if loc_21 ~= loc_15 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[351](loc_0)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_1 = 0
				loc_4 = 0
				while true do
					loc_3 = rt_load_i32_i8(memory_at_0, rt_add_i32(loc_2, loc_6))
					loc_4 = bit_or(loc_4, rt_shl_i32(bit_and(loc_3, 127), loc_1))
					loc_6 = rt_add_i32(loc_6, 1)
					loc_1 = rt_add_i32(loc_1, 7)
					if rt_lt_i32(loc_3, 0) then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_1 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_4, 2), loc_16))
				if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 1), 4) ~= 0 then
					while true do
						FUNC_LIST[51](loc_0, loc_0, rt_sub_i32(loc_0, 4294967232))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_4 = 0
				reg_0 = FUNC_LIST[15](loc_0, 0, loc_24, loc_1)
				loc_1 = reg_0
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
				rt_store_i32(memory_at_0, loc_2 + 12, 7)
				rt_store_i32(memory_at_0, loc_2, loc_1)
				loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
				reg_0 = loc_0
				if rt_le_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 24), loc_1), 16) then
					while true do
						FUNC_LIST[82](loc_0, 1)
						reg_1 = rt_load_i32(memory_at_0, loc_0 + 8)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_1 = loc_1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_1 = reg_1
				rt_store_i32(memory_at_0, reg_0 + 8, rt_add_i32(loc_1, 16))
				FUNC_LIST[355](loc_0, loc_16, loc_27, 0)
				FUNC_LIST[355](loc_0, loc_19, loc_26, 0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_18 + 36, loc_23)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_10, 320)
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[585] = --[[ resolveImportSafe(lua_State*, Table*, lua_TValue*, unsigned int)::ResolveImport::run(lua_State*, void*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
		if rt_le_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 24), loc_2), 16) then
			while true do
				FUNC_LIST[82](loc_0, 1)
				reg_0 = rt_load_i32(memory_at_0, loc_0 + 8)
				break
			end
		else
			while true do
				reg_0 = loc_2
				break
			end
		end
		loc_2 = reg_0
		rt_store_i32(memory_at_0, loc_2 + 12, 0)
		rt_store_i32(memory_at_0, loc_0 + 8, rt_add_i32(loc_2, 16))
		FUNC_LIST[583](loc_0, rt_load_i32(memory_at_0, loc_0 + 56), rt_load_i32(memory_at_0, loc_1), loc_2, rt_load_i32(memory_at_0, loc_1 + 4), 1)
		break
	end
end
FUNC_LIST[586] = --[[ luaV_tonumber(lua_TValue const*, lua_TValue*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0.0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		while true do
			while true do
				while true do
					if not br_map[1] then
						br_map[1] = (function()
							return { [0] = 2, 1, 0, }
						end)()
					end
					temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 12), 3)] or 1
					if temp < 1 then
						break
					elseif temp > 1 then
						desired = 1
						break
					else
						desired = 2
						break
					end
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_0), 20), rt_add_i32(loc_2, 8))
				if reg_0 == 0 then
					break
				end
				loc_3 = rt_load_f64(memory_at_0, loc_2 + 8)
				rt_store_i32(memory_at_0, loc_1 + 12, 3)
				rt_store_f64(memory_at_0, loc_1, loc_3)
				loc_0 = loc_1
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_0 = 0
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[587] = --[[ luaV_tostring(lua_State*, lua_TValue*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local reg_1
	local reg_2
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_3
		if rt_load_i32(memory_at_0, loc_1 + 12) == 3 then
			while true do
				reg_2 = FUNC_LIST[361](loc_3, rt_load_f64(memory_at_0, loc_1))
				reg_0 = FUNC_LIST[387](loc_0, loc_3, rt_sub_i32(reg_2, loc_3))
				loc_2 = reg_0
				rt_store_i32(memory_at_0, loc_1 + 12, 5)
				rt_store_i32(memory_at_0, loc_1, loc_2)
				reg_0 = 1
				break
			end
		else
			while true do
				reg_0 = loc_2
				break
			end
		end
		loc_2 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 48)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[588] = --[[ luaV_gettable(lua_State*, lua_TValue const*, lua_TValue*, lua_TValue*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_4 = rt_load_i32(memory_at_0, loc_1 + 12)
		while true do
			while true do
				while true do
					while true do
						while true do
							if loc_4 == 6 then
								while true do
									loc_5 = rt_load_i32(memory_at_0, loc_1)
									reg_0 = FUNC_LIST[427](loc_5, loc_2)
									loc_4 = reg_0
									if loc_4 ~= 9344 then
										while true do
											rt_store_i32(memory_at_0, loc_0 + 52, rt_shr_i32(rt_sub_i32(loc_4, rt_load_i32(memory_at_0, loc_5 + 24)), 5))
											break
										end
										if desired then
											break
										end
									end
									if rt_load_i32(memory_at_0, loc_4 + 12) ~= 0 then
										desired = 2
										break
									end
									loc_5 = rt_load_i32(memory_at_0, loc_5 + 16)
									if loc_5 == 0 then
										desired = 2
										break
									end
									if bit_and(rt_load_i32_u8(memory_at_0, loc_5 + 3), 1) ~= 0 then
										desired = 2
										break
									end
									reg_0 = FUNC_LIST[460](loc_5, 0, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1528))
									loc_5 = reg_0
									if loc_5 == 0 then
										desired = 2
										break
									end
									loc_4 = rt_load_i32(memory_at_0, loc_5 + 12)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							reg_0 = FUNC_LIST[461](loc_0, loc_1, 0)
							loc_5 = reg_0
							loc_4 = rt_load_i32(memory_at_0, loc_5 + 12)
							if loc_4 == 0 then
								desired = 1
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						if loc_4 ~= 7 then
							while true do
								loc_1 = loc_5
								loc_6 = rt_add_i32(loc_6, 1)
								if loc_6 == 100 then
									desired = 3
									break
								end
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_6 = rt_load_i32(memory_at_0, loc_0 + 28)
					loc_4 = rt_load_i32(memory_at_0, loc_0 + 8)
					rt_store_i64(memory_at_0, loc_4, rt_load_i64(memory_at_0, loc_5))
					rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
					loc_4 = rt_load_i32(memory_at_0, loc_0 + 8)
					rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_1))
					rt_store_i64(memory_at_0, loc_4 + 24, rt_load_i64(memory_at_0, loc_1 + 8))
					loc_4 = rt_load_i32(memory_at_0, loc_0 + 8)
					rt_store_i64(memory_at_0, loc_4 + 32, rt_load_i64(memory_at_0, loc_2))
					rt_store_i64(memory_at_0, loc_4 + 40, rt_load_i64(memory_at_0, loc_2 + 8))
					loc_4 = rt_load_i32(memory_at_0, loc_0 + 8)
					reg_0 = loc_0
					if rt_le_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 24), loc_4), 48) then
						while true do
							FUNC_LIST[82](loc_0, 3)
							reg_1 = rt_load_i32(memory_at_0, loc_0 + 8)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_1 = loc_4
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_4 = reg_1
					rt_store_i32(memory_at_0, reg_0 + 8, rt_add_i32(loc_4, 48))
					FUNC_LIST[85](loc_0, loc_4, 1)
					loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16)
					rt_store_i32(memory_at_0, loc_0 + 8, loc_4)
					loc_5 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 28), rt_sub_i32(loc_3, loc_6))
					rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
					rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_4))
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[60](loc_0, 2566, 0)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_4))
			rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[66](loc_0, loc_1, loc_2)
		error("out of code bounds")
	end
end
FUNC_LIST[589] = --[[ luaV_settable(lua_State*, lua_TValue const*, lua_TValue*, lua_TValue*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_6 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_6
		while true do
			while true do
				while true do
					while true do
						while true do
							if rt_load_i32(memory_at_0, loc_1 + 12) ~= 6 then
								while true do
									reg_0 = FUNC_LIST[461](loc_0, loc_1, 1)
									loc_4 = reg_0
									loc_5 = rt_load_i32(memory_at_0, loc_4 + 12)
									if loc_5 ~= 0 then
										desired = 5
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_5 = rt_load_i32(memory_at_0, loc_1)
							reg_0 = FUNC_LIST[427](loc_5, loc_2)
							loc_7 = reg_0
							if rt_load_i32(memory_at_0, loc_7 + 12) ~= 0 then
								desired = 3
								break
							end
							loc_4 = rt_load_i32(memory_at_0, loc_5 + 16)
							if loc_4 == 0 then
								desired = 3
								break
							end
							if bit_and(rt_load_i32_u8(memory_at_0, loc_4 + 3), 2) ~= 0 then
								desired = 3
								break
							end
							reg_0 = FUNC_LIST[460](loc_4, 1, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1532))
							loc_4 = reg_0
							if loc_4 == 0 then
								desired = 3
								break
							end
							loc_5 = rt_load_i32(memory_at_0, loc_4 + 12)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_5 == 7 then
							desired = 2
							break
						end
						rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
						rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_4))
						loc_1 = 1
						while true do
							while true do
								if rt_load_i32(memory_at_0, loc_6 + 12) == 6 then
									while true do
										loc_5 = rt_load_i32(memory_at_0, loc_6)
										reg_0 = FUNC_LIST[427](loc_5, loc_2)
										loc_7 = reg_0
										if rt_load_i32(memory_at_0, loc_7 + 12) ~= 0 then
											desired = 3
											break
										end
										loc_4 = rt_load_i32(memory_at_0, loc_5 + 16)
										if loc_4 == 0 then
											desired = 3
											break
										end
										if bit_and(rt_load_i32_u8(memory_at_0, loc_4 + 3), 2) ~= 0 then
											desired = 3
											break
										end
										reg_0 = FUNC_LIST[460](loc_4, 1, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1532))
										loc_4 = reg_0
										if loc_4 == 0 then
											desired = 3
											break
										end
										loc_5 = rt_load_i32(memory_at_0, loc_4 + 12)
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								reg_0 = FUNC_LIST[461](loc_0, loc_6, 1)
								loc_4 = reg_0
								loc_5 = rt_load_i32(memory_at_0, loc_4 + 12)
								if loc_5 ~= 0 then
									break
								end
								loc_1 = loc_6
								desired = 4
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							if loc_5 == 7 then
								while true do
									loc_1 = loc_6
									desired = 2
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
							rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_4))
							loc_1 = rt_add_i32(loc_1, 1)
							if loc_1 ~= 100 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[60](loc_0, 2523, 0)
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[66](loc_0, loc_1, loc_2)
					error("out of code bounds")
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if rt_load_i32_u8(memory_at_0, loc_5 + 4) == 0 then
					while true do
						rt_store_i32_n8(memory_at_0, loc_5 + 3, 0)
						reg_0 = loc_0
						if loc_7 == 9344 then
							while true do
								reg_1 = FUNC_LIST[429](loc_0, loc_5, loc_2)
								break
							end
							if desired then
								break
							end
						else
							while true do
								reg_1 = loc_7
								break
							end
							if desired then
								break
							end
						end
						loc_7 = reg_1
						rt_store_i32(memory_at_0, reg_0 + 52, rt_shr_i32(rt_sub_i32(loc_7, rt_load_i32(memory_at_0, loc_5 + 24)), 5))
						rt_store_i64(memory_at_0, loc_7 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
						rt_store_i64(memory_at_0, loc_7, rt_load_i64(memory_at_0, loc_3))
						if rt_lt_i32(rt_load_i32(memory_at_0, loc_3 + 12), 5) then
							desired = 1
							break
						end
						if bit_and(rt_load_i32_u8(memory_at_0, loc_5 + 1), 4) == 0 then
							desired = 1
							break
						end
						loc_4 = rt_load_i32(memory_at_0, loc_3)
						if bit_and(rt_load_i32_u8(memory_at_0, loc_4 + 1), 3) == 0 then
							desired = 1
							break
						end
						FUNC_LIST[50](loc_0, loc_5, loc_4)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[68](loc_0)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = rt_load_i32(memory_at_0, loc_0 + 8)
			rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_4))
			rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
			loc_4 = rt_load_i32(memory_at_0, loc_0 + 8)
			rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, loc_1))
			rt_store_i64(memory_at_0, loc_4 + 24, rt_load_i64(memory_at_0, loc_1 + 8))
			loc_4 = rt_load_i32(memory_at_0, loc_0 + 8)
			rt_store_i64(memory_at_0, loc_4 + 32, rt_load_i64(memory_at_0, loc_2))
			rt_store_i64(memory_at_0, loc_4 + 40, rt_load_i64(memory_at_0, loc_2 + 8))
			loc_4 = rt_load_i32(memory_at_0, loc_0 + 8)
			rt_store_i64(memory_at_0, loc_4 + 48, rt_load_i64(memory_at_0, loc_3))
			rt_store_i64(memory_at_0, loc_4 + 56, rt_load_i64(memory_at_0, loc_3 + 8))
			loc_4 = rt_load_i32(memory_at_0, loc_0 + 8)
			reg_0 = loc_0
			if rt_le_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 24), loc_4), 64) then
				while true do
					FUNC_LIST[82](loc_0, 4)
					reg_1 = rt_load_i32(memory_at_0, loc_0 + 8)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_1 = loc_4
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = reg_1
			rt_store_i32(memory_at_0, reg_0 + 8, rt_sub_i32(loc_4, 4294967232))
			FUNC_LIST[85](loc_0, loc_4, 0)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_6, 16)
		break
	end
end
FUNC_LIST[590] = --[[ luaV_strcmp(TString const*, TString const*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		if loc_0 == loc_1 then
			while true do
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_2 = rt_load_i32_u8(memory_at_0, loc_0 + 20)
		loc_3 = rt_load_i32_u8(memory_at_0, loc_1 + 20)
		if loc_2 ~= loc_3 then
			while true do
				reg_0 = rt_sub_i32(loc_2, loc_3)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = rt_add_i32(loc_0, 20)
		loc_0 = rt_load_i32(memory_at_0, loc_0 + 16)
		reg_1 = rt_add_i32(loc_1, 20)
		loc_1 = rt_load_i32(memory_at_0, loc_1 + 16)
		loc_2 = (if loc_0 < loc_1 then 1 else 0)
		reg_0 = FUNC_LIST[685](reg_0, reg_1, (if loc_2 ~= 0 then loc_0 else loc_1))
		loc_3 = reg_0
		reg_0 = (if loc_3 ~= 0 then loc_3 else rt_sub_i32((if loc_0 > loc_1 then 1 else 0), loc_2))
		break
	end
	return reg_0
end
FUNC_LIST[591] = --[[ luaV_lessthan(lua_State*, lua_TValue const*, lua_TValue const*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_1 + 12)
			if loc_3 == rt_load_i32(memory_at_0, loc_2 + 12) then
				while true do
					if loc_3 == 3 then
						desired = 1
						break
					end
					if loc_3 == 5 then
						while true do
							reg_0 = FUNC_LIST[590](rt_load_i32(memory_at_0, loc_1), rt_load_i32(memory_at_0, loc_2))
							reg_0 = rt_shr_u32(reg_0, 31)
							desired = 0
							break
						end
						if desired then
							break
						end
					end
					reg_0 = FUNC_LIST[592](loc_0, loc_1, loc_2, 16, 1)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[65](loc_0, loc_1, loc_2, 16)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = (if rt_load_f64(memory_at_0, loc_1) < rt_load_f64(memory_at_0, loc_2) then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[592] = --[[ call_orderTM(lua_State*, lua_TValue const*, lua_TValue const*, TMS, bool) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				reg_0 = FUNC_LIST[461](loc_0, loc_1, loc_3)
				loc_5 = reg_0
				if rt_load_i32(memory_at_0, loc_5 + 12) == 0 then
					while true do
						if loc_4 ~= 0 then
							desired = 2
							break
						end
						reg_0 = 4294967295
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = FUNC_LIST[461](loc_0, loc_2, loc_3)
				reg_0 = FUNC_LIST[363](loc_5, reg_1)
				if reg_0 ~= 0 then
					desired = 1
					break
				end
				if loc_4 ~= 0 then
					break
				end
				reg_0 = 4294967295
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[65](loc_0, loc_1, loc_2, loc_3)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 28)
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_5))
		rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
		loc_5 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i64(memory_at_0, loc_5 + 16, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_5 + 24, rt_load_i64(memory_at_0, loc_1 + 8))
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i64(memory_at_0, loc_1 + 32, rt_load_i64(memory_at_0, loc_2))
		rt_store_i64(memory_at_0, loc_1 + 40, rt_load_i64(memory_at_0, loc_2 + 8))
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
		reg_0 = loc_0
		if rt_le_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 24), loc_1), 48) then
			while true do
				FUNC_LIST[82](loc_0, 3)
				reg_1 = rt_load_i32(memory_at_0, loc_0 + 8)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_1 = loc_1
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_1 = reg_1
		rt_store_i32(memory_at_0, reg_0 + 8, rt_add_i32(loc_1, 48))
		FUNC_LIST[85](loc_0, loc_1, 1)
		loc_1 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16)
		rt_store_i32(memory_at_0, loc_0 + 8, loc_1)
		loc_3 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 28), rt_sub_i32(loc_3, loc_4))
		rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_1))
		while true do
			while true do
				while true do
					loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
					loc_0 = rt_load_i32(memory_at_0, loc_1 + 12)
					if not br_map[1] then
						br_map[1] = (function()
							return { [0] = 2, 0, }
						end)()
					end
					temp = br_map[1][loc_0] or 1
					if temp < 1 then
						break
					elseif temp > 1 then
						desired = 1
						break
					else
						desired = 2
						break
					end
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = (if rt_load_i32(memory_at_0, loc_1) ~= 0 then 1 else 0)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_0 = 1
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[593] = --[[ luaV_lessequal(lua_State*, lua_TValue const*, lua_TValue const*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_1 + 12)
		if loc_3 == rt_load_i32(memory_at_0, loc_2 + 12) then
			while true do
				while true do
					while true do
						while true do
							while true do
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 0, 2, 1, }
									end)()
								end
								temp = br_map[1][rt_sub_i32(loc_3, 3)] or 2
								if temp < 1 then
									break
								elseif temp > 1 then
									desired = 3
									break
								else
									desired = 4
									break
								end
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							reg_0 = (if rt_load_f64(memory_at_0, loc_1) <= rt_load_f64(memory_at_0, loc_2) then 1 else 0)
							desired = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						while true do
							loc_1 = rt_load_i32(memory_at_0, loc_1)
							loc_2 = rt_load_i32(memory_at_0, loc_2)
							reg_0 = 0
							if loc_1 == loc_2 then
								break
							end
							loc_3 = rt_load_i32_u8(memory_at_0, loc_1 + 20)
							loc_0 = rt_load_i32_u8(memory_at_0, loc_2 + 20)
							if loc_3 ~= loc_0 then
								while true do
									reg_0 = rt_sub_i32(loc_3, loc_0)
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							reg_0 = rt_add_i32(loc_1, 20)
							loc_1 = rt_load_i32(memory_at_0, loc_1 + 16)
							reg_1 = rt_add_i32(loc_2, 20)
							loc_2 = rt_load_i32(memory_at_0, loc_2 + 16)
							loc_3 = (if loc_1 < loc_2 then 1 else 0)
							reg_0 = FUNC_LIST[685](reg_0, reg_1, (if loc_3 ~= 0 then loc_1 else loc_2))
							loc_0 = reg_0
							reg_0 = (if loc_0 ~= 0 then loc_0 else rt_sub_i32((if loc_1 > loc_2 then 1 else 0), loc_3))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						loc_2 = reg_0
						reg_0 = (if rt_le_i32(loc_2, 0) then 1 else 0)
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[592](loc_0, loc_1, loc_2, 17, 0)
					loc_3 = reg_0
					if loc_3 == 4294967295 then
						while true do
							reg_0 = FUNC_LIST[592](loc_0, loc_2, loc_1, 16, 0)
							loc_3 = reg_0
							if loc_3 == 4294967295 then
								desired = 2
								break
							end
							reg_0 = (if loc_3 == 0 then 1 else 0)
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = loc_3
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					loc_3 = reg_0
					reg_0 = loc_3
					desired = 0
					break
				end
				if desired then
					break
				end
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[65](loc_0, loc_1, loc_2, 17)
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[594] = --[[ luaV_equalval(lua_State*, lua_TValue const*, lua_TValue const*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_3 = 1
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										if not br_map[1] then
											br_map[1] = (function()
												return { [0] = 6, 7, 2, 0, 1, 7, 4, 7, 3, }
											end)()
										end
										temp = br_map[1][rt_load_i32(memory_at_0, loc_1 + 12)] or 7
										if temp < 3 then
											if temp < 1 then
												break
											elseif temp > 1 then
												desired = 6
												break
											else
												desired = 7
												break
											end
										elseif temp > 3 then
											if temp < 6 then
												desired = 4
												break
											elseif temp > 6 then
												desired = 1
												break
											else
												desired = 2
												break
											end
										else
											desired = 5
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									reg_0 = (if rt_load_f64(memory_at_0, loc_1) == rt_load_f64(memory_at_0, loc_2) then 1 else 0)
									desired = 0
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_3 = 0
								if rt_load_f32(memory_at_0, loc_1) ~= rt_load_f32(memory_at_0, loc_2) then
									desired = 2
									break
								end
								if rt_load_f32(memory_at_0, loc_1 + 4) ~= rt_load_f32(memory_at_0, loc_2 + 4) then
									desired = 2
									break
								end
								reg_0 = (if rt_load_f32(memory_at_0, loc_1 + 8) == rt_load_f32(memory_at_0, loc_2 + 8) then 1 else 0)
								desired = 0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if rt_load_i32(memory_at_0, loc_1) ~= rt_load_i32(memory_at_0, loc_2) then
								while true do
									reg_0 = 0
									desired = 0
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							reg_0 = (if rt_load_i32(memory_at_0, loc_1 + 8) == rt_load_i32(memory_at_0, loc_2 + 8) then 1 else 0)
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							loc_3 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 8)
							if loc_3 == 0 then
								break
							end
							if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_3 + 3), 0) then
								break
							end
							loc_4 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2) + 8)
							reg_0 = FUNC_LIST[460](loc_3, 7, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1556))
							loc_5 = reg_0
							if loc_5 == 0 then
								break
							end
							if loc_3 == loc_4 then
								desired = 3
								break
							end
							if loc_4 == 0 then
								break
							end
							if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_4 + 3), 0) then
								break
							end
							reg_0 = FUNC_LIST[460](loc_4, 7, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1556))
							loc_3 = reg_0
							if loc_3 == 0 then
								break
							end
							reg_0 = FUNC_LIST[363](loc_5, loc_3)
							if reg_0 ~= 0 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						loc_3 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 16)
						if loc_3 == 0 then
							break
						end
						if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_3 + 3), 0) then
							break
						end
						loc_4 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2) + 16)
						reg_0 = FUNC_LIST[460](loc_3, 7, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1556))
						loc_5 = reg_0
						if loc_5 == 0 then
							break
						end
						if loc_3 == loc_4 then
							desired = 3
							break
						end
						if loc_4 == 0 then
							break
						end
						if rt_lt_i32(rt_load_i32_i8(memory_at_0, loc_4 + 3), 0) then
							break
						end
						reg_0 = FUNC_LIST[460](loc_4, 7, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1556))
						loc_3 = reg_0
						if loc_3 == 0 then
							break
						end
						reg_0 = FUNC_LIST[363](loc_5, loc_3)
						if reg_0 ~= 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_4 = rt_load_i32(memory_at_0, loc_0 + 28)
				loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
				rt_store_i64(memory_at_0, loc_3, rt_load_i64(memory_at_0, loc_5))
				rt_store_i64(memory_at_0, loc_3 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
				loc_5 = rt_load_i32(memory_at_0, loc_0 + 8)
				rt_store_i64(memory_at_0, loc_5 + 16, rt_load_i64(memory_at_0, loc_1))
				rt_store_i64(memory_at_0, loc_5 + 24, rt_load_i64(memory_at_0, loc_1 + 8))
				loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
				rt_store_i64(memory_at_0, loc_1 + 32, rt_load_i64(memory_at_0, loc_2))
				rt_store_i64(memory_at_0, loc_1 + 40, rt_load_i64(memory_at_0, loc_2 + 8))
				loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
				reg_0 = loc_0
				if rt_le_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 24), loc_1), 48) then
					while true do
						FUNC_LIST[82](loc_0, 3)
						reg_1 = rt_load_i32(memory_at_0, loc_0 + 8)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_1 = loc_1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_1 = reg_1
				rt_store_i32(memory_at_0, reg_0 + 8, rt_add_i32(loc_1, 48))
				FUNC_LIST[85](loc_0, loc_1, 1)
				loc_1 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16)
				rt_store_i32(memory_at_0, loc_0 + 8, loc_1)
				loc_2 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 28), rt_sub_i32(loc_3, loc_4))
				rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
				rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_1))
				loc_3 = 0
				while true do
					while true do
						loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
						if not br_map[2] then
							br_map[2] = (function()
								return { [0] = 2, 0, }
							end)()
						end
						temp = br_map[2][rt_load_i32(memory_at_0, loc_1 + 12)] or 1
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 2
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = (if rt_load_i32(memory_at_0, loc_1) ~= 0 then 1 else 0)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = loc_3
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = (if rt_load_i32(memory_at_0, loc_1) == rt_load_i32(memory_at_0, loc_2) then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[595] = --[[ luaV_concat(lua_State*, int, int) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local desired
	local br_map = {}
	while true do
		loc_6 = rt_sub_i32(GLOBAL_LIST[0].value, 512)
		GLOBAL_LIST[0].value = loc_6
		while true do
			loc_3 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 12), rt_shl_i32(loc_2, 4))
			loc_5 = rt_sub_i32(loc_3, 16)
			while true do
				while true do
					while true do
						while true do
							while true do
								loc_8 = rt_sub_i32(loc_3, 4)
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 0, 1, 0, }
									end)()
								end
								temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_8), 3)] or 1
								if temp < 1 then
									break
								else
									desired = 5
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if not br_map[2] then
								br_map[2] = (function()
									return { [0] = 1, 0, 2, }
								end)()
							end
							temp = br_map[2][rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 12), 3)] or 0
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 3
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_4 = 1
						reg_0 = FUNC_LIST[596](loc_0, loc_5, loc_3, loc_5, 18)
						if reg_0 ~= 0 then
							desired = 2
							break
						end
						FUNC_LIST[63](loc_0, loc_5, loc_3)
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_2 = FUNC_LIST[361](loc_6, rt_load_f64(memory_at_0, loc_3))
					reg_0 = FUNC_LIST[387](loc_0, loc_6, rt_sub_i32(reg_2, loc_6))
					loc_4 = reg_0
					rt_store_i32(memory_at_0, loc_3 + 12, 5)
					rt_store_i32(memory_at_0, loc_3, loc_4)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_4 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3) + 16)
				if loc_4 ~= 0 then
					while true do
						loc_8 = rt_add_i32(loc_3, 16)
						loc_7 = 1
						while true do
							while true do
								if rt_le_i32(loc_1, 1) then
									break
								end
								while true do
									loc_5 = rt_sub_i32(loc_8, rt_shl_i32(loc_7, 4))
									loc_3 = rt_sub_i32(loc_5, 16)
									while true do
										while true do
											loc_5 = rt_sub_i32(loc_5, 4)
											if not br_map[3] then
												br_map[3] = (function()
													return { [0] = 0, 3, 1, }
												end)()
											end
											temp = br_map[3][rt_sub_i32(rt_load_i32(memory_at_0, loc_5), 3)] or 3
											if temp < 1 then
												break
											elseif temp > 1 then
												desired = 5
												break
											else
												desired = 7
												break
											end
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
										reg_3 = FUNC_LIST[361](loc_6, rt_load_f64(memory_at_0, loc_3))
										reg_1 = FUNC_LIST[387](loc_0, loc_6, rt_sub_i32(reg_3, loc_6))
										rt_store_i32(memory_at_0, loc_3, reg_1)
										rt_store_i32(memory_at_0, loc_5, 5)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
											continue
										end
										break
									end
									loc_3 = rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3) + 16)
									if loc_3 > rt_sub_i32(1073741824, loc_4) then
										desired = 4
										break
									end
									loc_4 = rt_add_i32(loc_3, loc_4)
									loc_7 = rt_add_i32(loc_7, 1)
									if loc_1 ~= loc_7 then
										continue
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								loc_7 = loc_1
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							loc_3 = 0
							loc_9 = loc_6
							loc_10 = 0
							if loc_4 >= 512 then
								while true do
									reg_0 = FUNC_LIST[385](loc_0, loc_4)
									loc_10 = reg_0
									reg_0 = rt_add_i32(loc_10, 20)
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							else
								while true do
									reg_0 = loc_9
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							loc_9 = reg_0
							loc_4 = loc_7
							while true do
								loc_5 = rt_load_i32(memory_at_0, rt_sub_i32(loc_8, rt_shl_i32(loc_4, 4)))
								reg_1 = rt_add_i32(loc_5, 20)
								loc_5 = rt_load_i32(memory_at_0, loc_5 + 16)
								reg_0 = FUNC_LIST[609](rt_add_i32(loc_3, loc_9), reg_1, loc_5)
								loc_3 = rt_add_i32(loc_3, loc_5)
								loc_5 = (if rt_gt_i32(loc_4, 1) then 1 else 0)
								loc_4 = rt_sub_i32(loc_4, 1)
								if loc_5 ~= 0 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							loc_4 = rt_sub_i32(loc_8, rt_shl_i32(loc_7, 4))
							while true do
								if loc_3 <= 511 then
									while true do
										reg_0 = FUNC_LIST[387](loc_0, loc_9, loc_3)
										desired = 5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								reg_0 = FUNC_LIST[386](loc_0, loc_10)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							loc_3 = reg_0
							rt_store_i32(memory_at_0, loc_4 + 12, 5)
							rt_store_i32(memory_at_0, loc_4, loc_3)
							loc_4 = rt_sub_i32(loc_7, 1)
							desired = 2
							break
						end
						if desired then
							break
						end
						FUNC_LIST[60](loc_0, 1503, 0)
						error("out of code bounds")
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_4 = 1
				if rt_load_i32(memory_at_0, loc_8) ~= 3 then
					break
				end
				reg_3 = FUNC_LIST[361](loc_6, rt_load_f64(memory_at_0, loc_5))
				reg_1 = FUNC_LIST[387](loc_0, loc_6, rt_sub_i32(reg_3, loc_6))
				rt_store_i32(memory_at_0, loc_5, reg_1)
				rt_store_i32(memory_at_0, loc_8, 5)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			loc_2 = rt_sub_i32(loc_2, loc_4)
			loc_1 = rt_sub_i32(loc_1, loc_4)
			if rt_gt_i32(loc_1, 1) then
				continue
			end
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_6, 512)
		break
	end
end
FUNC_LIST[596] = --[[ call_binTM(lua_State*, lua_TValue const*, lua_TValue const*, lua_TValue*, TMS) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			reg_0 = FUNC_LIST[461](loc_0, loc_1, loc_4)
			loc_5 = reg_0
			if rt_load_i32(memory_at_0, loc_5 + 12) ~= 0 then
				break
			end
			reg_0 = FUNC_LIST[461](loc_0, loc_2, loc_4)
			loc_5 = reg_0
			if rt_load_i32(memory_at_0, loc_5 + 12) ~= 0 then
				break
			end
			reg_0 = 0
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 28)
		loc_6 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i64(memory_at_0, loc_6, rt_load_i64(memory_at_0, loc_5))
		rt_store_i64(memory_at_0, loc_6 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
		loc_5 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i64(memory_at_0, loc_5 + 16, rt_load_i64(memory_at_0, loc_1))
		rt_store_i64(memory_at_0, loc_5 + 24, rt_load_i64(memory_at_0, loc_1 + 8))
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
		rt_store_i64(memory_at_0, loc_1 + 32, rt_load_i64(memory_at_0, loc_2))
		rt_store_i64(memory_at_0, loc_1 + 40, rt_load_i64(memory_at_0, loc_2 + 8))
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 8)
		reg_0 = loc_0
		if rt_le_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 24), loc_1), 48) then
			while true do
				FUNC_LIST[82](loc_0, 3)
				reg_1 = rt_load_i32(memory_at_0, loc_0 + 8)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_1 = loc_1
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_1 = reg_1
		rt_store_i32(memory_at_0, reg_0 + 8, rt_add_i32(loc_1, 48))
		FUNC_LIST[85](loc_0, loc_1, 1)
		loc_1 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16)
		rt_store_i32(memory_at_0, loc_0 + 8, loc_1)
		loc_0 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 28), rt_sub_i32(loc_3, loc_4))
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_1 + 8))
		rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_1))
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[597] = --[[ void luaV_doarithimpl<(TMS)8>(lua_State*, lua_TValue*, lua_TValue const*, lua_TValue const*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_7 = rt_load_i32(memory_at_0, loc_3 + 12)
		loc_5 = (if loc_7 == 4 then loc_3 else 0)
		while true do
			while true do
				reg_0 = loc_1
				while true do
					while true do
						loc_8 = rt_load_i32(memory_at_0, loc_2 + 12)
						loc_6 = (if loc_8 == 4 then loc_2 else 0)
						if loc_6 == 0 then
							break
						end
						if loc_5 == 0 then
							break
						end
						rt_store_f32(memory_at_0, loc_1, (rt_load_f32(memory_at_0, loc_6) + rt_load_f32(memory_at_0, loc_5)))
						rt_store_f32(memory_at_0, loc_1 + 4, (rt_load_f32(memory_at_0, loc_6 + 4) + rt_load_f32(memory_at_0, loc_5 + 4)))
						rt_store_f32(memory_at_0, loc_1 + 8, (rt_load_f32(memory_at_0, loc_6 + 8) + rt_load_f32(memory_at_0, loc_5 + 8)))
						reg_1 = 4
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_6 ~= 0 then
							while true do
								if loc_7 == 3 then
									desired = 4
									break
								end
								if loc_7 ~= 5 then
									desired = 4
									break
								end
								reg_1 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_3), 20), rt_add_i32(loc_4, 8))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_8 == 3 then
							break
						end
						if loc_5 == 0 then
							break
						end
						if loc_8 ~= 5 then
							break
						end
						reg_1 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_2), 20), rt_add_i32(loc_4, 8))
						if reg_1 == 0 then
							break
						end
						rt_store_f64(memory_at_0, loc_4, rt_load_f64(memory_at_0, loc_4 + 8))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_5 = loc_2
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 1, 3, 0, }
								end)()
							end
							temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_2 + 12), 3)] or 3
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 2
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_1 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_2), 20), rt_add_i32(loc_4, 8))
						if reg_1 == 0 then
							desired = 2
							break
						end
						rt_store_f64(memory_at_0, loc_4, rt_load_f64(memory_at_0, loc_4 + 8))
						loc_5 = loc_4
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_6 = loc_3
					while true do
						while true do
							if not br_map[2] then
								br_map[2] = (function()
									return { [0] = 1, 3, 0, }
								end)()
							end
							temp = br_map[2][rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 12), 3)] or 3
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 2
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_6 = rt_add_i32(loc_4, 8)
						reg_1 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_3), 20), rt_add_i32(loc_4, 8))
						if reg_1 == 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_f64(memory_at_0, loc_1, (rt_load_f64(memory_at_0, loc_5) + rt_load_f64(memory_at_0, loc_6)))
					reg_1 = 3
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = reg_1
				rt_store_i32(memory_at_0, reg_0 + 12, loc_2)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[596](loc_0, loc_2, loc_3, loc_1, 8)
			if reg_0 ~= 0 then
				break
			end
			FUNC_LIST[64](loc_0, loc_2, loc_3, 8)
			error("out of code bounds")
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[598] = --[[ void luaV_doarithimpl<(TMS)9>(lua_State*, lua_TValue*, lua_TValue const*, lua_TValue const*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_7 = rt_load_i32(memory_at_0, loc_3 + 12)
		loc_5 = (if loc_7 == 4 then loc_3 else 0)
		while true do
			while true do
				reg_0 = loc_1
				while true do
					while true do
						loc_8 = rt_load_i32(memory_at_0, loc_2 + 12)
						loc_6 = (if loc_8 == 4 then loc_2 else 0)
						if loc_6 == 0 then
							break
						end
						if loc_5 == 0 then
							break
						end
						rt_store_f32(memory_at_0, loc_1, (rt_load_f32(memory_at_0, loc_6) - rt_load_f32(memory_at_0, loc_5)))
						rt_store_f32(memory_at_0, loc_1 + 4, (rt_load_f32(memory_at_0, loc_6 + 4) - rt_load_f32(memory_at_0, loc_5 + 4)))
						rt_store_f32(memory_at_0, loc_1 + 8, (rt_load_f32(memory_at_0, loc_6 + 8) - rt_load_f32(memory_at_0, loc_5 + 8)))
						reg_1 = 4
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_6 ~= 0 then
							while true do
								if loc_7 == 3 then
									desired = 4
									break
								end
								if loc_7 ~= 5 then
									desired = 4
									break
								end
								reg_1 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_3), 20), rt_add_i32(loc_4, 8))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_8 == 3 then
							break
						end
						if loc_5 == 0 then
							break
						end
						if loc_8 ~= 5 then
							break
						end
						reg_1 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_2), 20), rt_add_i32(loc_4, 8))
						if reg_1 == 0 then
							break
						end
						rt_store_f64(memory_at_0, loc_4, rt_load_f64(memory_at_0, loc_4 + 8))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_5 = loc_2
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 1, 3, 0, }
								end)()
							end
							temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_2 + 12), 3)] or 3
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 2
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_1 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_2), 20), rt_add_i32(loc_4, 8))
						if reg_1 == 0 then
							desired = 2
							break
						end
						rt_store_f64(memory_at_0, loc_4, rt_load_f64(memory_at_0, loc_4 + 8))
						loc_5 = loc_4
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_6 = loc_3
					while true do
						while true do
							if not br_map[2] then
								br_map[2] = (function()
									return { [0] = 1, 3, 0, }
								end)()
							end
							temp = br_map[2][rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 12), 3)] or 3
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 2
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_6 = rt_add_i32(loc_4, 8)
						reg_1 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_3), 20), rt_add_i32(loc_4, 8))
						if reg_1 == 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_f64(memory_at_0, loc_1, (rt_load_f64(memory_at_0, loc_5) - rt_load_f64(memory_at_0, loc_6)))
					reg_1 = 3
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = reg_1
				rt_store_i32(memory_at_0, reg_0 + 12, loc_2)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[596](loc_0, loc_2, loc_3, loc_1, 9)
			if reg_0 ~= 0 then
				break
			end
			FUNC_LIST[64](loc_0, loc_2, loc_3, 9)
			error("out of code bounds")
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[599] = --[[ void luaV_doarithimpl<(TMS)10>(lua_State*, lua_TValue*, lua_TValue const*, lua_TValue const*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0.0
	local loc_10 = 0.0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_7 = rt_load_i32(memory_at_0, loc_3 + 12)
		loc_5 = (if loc_7 == 4 then loc_3 else 0)
		while true do
			while true do
				while true do
					while true do
						while true do
							loc_8 = rt_load_i32(memory_at_0, loc_2 + 12)
							loc_6 = (if loc_8 == 4 then loc_2 else 0)
							if loc_6 == 0 then
								break
							end
							if loc_5 == 0 then
								break
							end
							rt_store_f32(memory_at_0, loc_1, (rt_load_f32(memory_at_0, loc_6) * rt_load_f32(memory_at_0, loc_5)))
							rt_store_f32(memory_at_0, loc_1 + 4, (rt_load_f32(memory_at_0, loc_6 + 4) * rt_load_f32(memory_at_0, loc_5 + 4)))
							rt_store_f32(memory_at_0, loc_1 + 8, (rt_load_f32(memory_at_0, loc_6 + 8) * rt_load_f32(memory_at_0, loc_5 + 8)))
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_6 ~= 0 then
							while true do
								while true do
									if loc_7 == 3 then
										while true do
											reg_0 = rt_load_f64(memory_at_0, loc_3)
											desired = 6
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									if loc_7 ~= 5 then
										desired = 3
										break
									end
									reg_0 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_3), 20), rt_add_i32(loc_4, 8))
									if reg_0 == 0 then
										desired = 3
										break
									end
									reg_0 = rt_load_f64(memory_at_0, loc_4 + 8)
									break
								end
								if desired then
									break
								end
								loc_10 = reg_0
								loc_9 = no_op(loc_10)
								rt_store_f32(memory_at_0, loc_1, (rt_load_f32(memory_at_0, loc_6) * loc_9))
								rt_store_f32(memory_at_0, loc_1 + 4, (rt_load_f32(memory_at_0, loc_6 + 4) * loc_9))
								rt_store_f32(memory_at_0, loc_1 + 8, (rt_load_f32(memory_at_0, loc_6 + 8) * loc_9))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_5 == 0 then
							desired = 3
							break
						end
						while true do
							if loc_8 == 3 then
								while true do
									reg_0 = rt_load_f64(memory_at_0, loc_2)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_8 ~= 5 then
								desired = 3
								break
							end
							reg_0 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_2), 20), rt_add_i32(loc_4, 8))
							if reg_0 == 0 then
								desired = 3
								break
							end
							reg_0 = rt_load_f64(memory_at_0, loc_4 + 8)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_10 = reg_0
						loc_9 = no_op(loc_10)
						rt_store_f32(memory_at_0, loc_1, (rt_load_f32(memory_at_0, loc_5) * loc_9))
						rt_store_f32(memory_at_0, loc_1 + 4, (rt_load_f32(memory_at_0, loc_5 + 4) * loc_9))
						rt_store_f32(memory_at_0, loc_1 + 8, (rt_load_f32(memory_at_0, loc_5 + 8) * loc_9))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = 4
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = loc_2
				while true do
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 1, 2, 0, }
								end)()
							end
							temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_2 + 12), 3)] or 2
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 3
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_2), 20), rt_add_i32(loc_4, 8))
						if reg_0 == 0 then
							desired = 3
							break
						end
						rt_store_f64(memory_at_0, loc_4, rt_load_f64(memory_at_0, loc_4 + 8))
						loc_5 = loc_4
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_6 = loc_3
					while true do
						while true do
							if not br_map[2] then
								br_map[2] = (function()
									return { [0] = 1, 2, 0, }
								end)()
							end
							temp = br_map[2][rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 12), 3)] or 2
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 3
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_6 = rt_add_i32(loc_4, 8)
						reg_0 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_3), 20), rt_add_i32(loc_4, 8))
						if reg_0 == 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_f64(memory_at_0, loc_1, (rt_load_f64(memory_at_0, loc_5) * rt_load_f64(memory_at_0, loc_6)))
					loc_2 = 3
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[596](loc_0, loc_2, loc_3, loc_1, 10)
				if reg_0 ~= 0 then
					desired = 1
					break
				end
				FUNC_LIST[64](loc_0, loc_2, loc_3, 10)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_1 + 12, loc_2)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[600] = --[[ void luaV_doarithimpl<(TMS)11>(lua_State*, lua_TValue*, lua_TValue const*, lua_TValue const*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0.0
	local loc_10 = 0.0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_7 = rt_load_i32(memory_at_0, loc_3 + 12)
		loc_5 = (if loc_7 == 4 then loc_3 else 0)
		while true do
			while true do
				while true do
					while true do
						while true do
							loc_8 = rt_load_i32(memory_at_0, loc_2 + 12)
							loc_6 = (if loc_8 == 4 then loc_2 else 0)
							if loc_6 == 0 then
								break
							end
							if loc_5 == 0 then
								break
							end
							rt_store_f32(memory_at_0, loc_1, (rt_load_f32(memory_at_0, loc_6) / rt_load_f32(memory_at_0, loc_5)))
							rt_store_f32(memory_at_0, loc_1 + 4, (rt_load_f32(memory_at_0, loc_6 + 4) / rt_load_f32(memory_at_0, loc_5 + 4)))
							rt_store_f32(memory_at_0, loc_1 + 8, (rt_load_f32(memory_at_0, loc_6 + 8) / rt_load_f32(memory_at_0, loc_5 + 8)))
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_6 ~= 0 then
							while true do
								while true do
									if loc_7 == 3 then
										while true do
											reg_0 = rt_load_f64(memory_at_0, loc_3)
											desired = 6
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									if loc_7 ~= 5 then
										desired = 3
										break
									end
									reg_0 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_3), 20), rt_add_i32(loc_4, 8))
									if reg_0 == 0 then
										desired = 3
										break
									end
									reg_0 = rt_load_f64(memory_at_0, loc_4 + 8)
									break
								end
								if desired then
									break
								end
								loc_10 = reg_0
								loc_9 = no_op(loc_10)
								rt_store_f32(memory_at_0, loc_1, (rt_load_f32(memory_at_0, loc_6) / loc_9))
								rt_store_f32(memory_at_0, loc_1 + 4, (rt_load_f32(memory_at_0, loc_6 + 4) / loc_9))
								rt_store_f32(memory_at_0, loc_1 + 8, (rt_load_f32(memory_at_0, loc_6 + 8) / loc_9))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_5 == 0 then
							desired = 3
							break
						end
						reg_0 = loc_1
						while true do
							if loc_8 == 3 then
								while true do
									reg_1 = rt_load_f64(memory_at_0, loc_2)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_8 ~= 5 then
								desired = 3
								break
							end
							reg_1 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_2), 20), rt_add_i32(loc_4, 8))
							if reg_1 == 0 then
								desired = 3
								break
							end
							reg_1 = rt_load_f64(memory_at_0, loc_4 + 8)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_10 = reg_1
						loc_9 = no_op(loc_10)
						rt_store_f32(memory_at_0, reg_0, (loc_9 / rt_load_f32(memory_at_0, loc_5)))
						rt_store_f32(memory_at_0, loc_1 + 4, (loc_9 / rt_load_f32(memory_at_0, loc_5 + 4)))
						rt_store_f32(memory_at_0, loc_1 + 8, (loc_9 / rt_load_f32(memory_at_0, loc_5 + 8)))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = 4
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = loc_2
				while true do
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 1, 2, 0, }
								end)()
							end
							temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_2 + 12), 3)] or 2
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 3
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_2), 20), rt_add_i32(loc_4, 8))
						if reg_0 == 0 then
							desired = 3
							break
						end
						rt_store_f64(memory_at_0, loc_4, rt_load_f64(memory_at_0, loc_4 + 8))
						loc_5 = loc_4
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_6 = loc_3
					while true do
						while true do
							if not br_map[2] then
								br_map[2] = (function()
									return { [0] = 1, 2, 0, }
								end)()
							end
							temp = br_map[2][rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 12), 3)] or 2
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 3
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_6 = rt_add_i32(loc_4, 8)
						reg_0 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_3), 20), rt_add_i32(loc_4, 8))
						if reg_0 == 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_f64(memory_at_0, loc_1, (rt_load_f64(memory_at_0, loc_5) / rt_load_f64(memory_at_0, loc_6)))
					loc_2 = 3
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[596](loc_0, loc_2, loc_3, loc_1, 11)
				if reg_0 ~= 0 then
					desired = 1
					break
				end
				FUNC_LIST[64](loc_0, loc_2, loc_3, 11)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_1 + 12, loc_2)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[601] = --[[ void luaV_doarithimpl<(TMS)12>(lua_State*, lua_TValue*, lua_TValue const*, lua_TValue const*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0.0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_7 = rt_load_i32(memory_at_0, loc_3 + 12)
		loc_5 = (if loc_7 == 4 then loc_3 else 0)
		while true do
			while true do
				while true do
					while true do
						while true do
							loc_8 = rt_load_i32(memory_at_0, loc_2 + 12)
							loc_6 = (if loc_8 == 4 then loc_2 else 0)
							if loc_6 == 0 then
								break
							end
							if loc_5 == 0 then
								break
							end
							rt_store_f32(memory_at_0, loc_1, no_op(math_floor((no_op(rt_load_f32(memory_at_0, loc_6)) / no_op(rt_load_f32(memory_at_0, loc_5))))))
							rt_store_f32(memory_at_0, loc_1 + 4, no_op(math_floor((no_op(rt_load_f32(memory_at_0, loc_6 + 4)) / no_op(rt_load_f32(memory_at_0, loc_5 + 4))))))
							rt_store_f32(memory_at_0, loc_1 + 8, no_op(math_floor((no_op(rt_load_f32(memory_at_0, loc_6 + 8)) / no_op(rt_load_f32(memory_at_0, loc_5 + 8))))))
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_6 ~= 0 then
							while true do
								while true do
									if loc_7 == 3 then
										while true do
											reg_0 = rt_load_f64(memory_at_0, loc_3)
											desired = 6
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									if loc_7 ~= 5 then
										desired = 3
										break
									end
									reg_0 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_3), 20), rt_add_i32(loc_4, 8))
									if reg_0 == 0 then
										desired = 3
										break
									end
									reg_0 = rt_load_f64(memory_at_0, loc_4 + 8)
									break
								end
								if desired then
									break
								end
								loc_9 = reg_0
								loc_9 = no_op(no_op(loc_9))
								rt_store_f32(memory_at_0, loc_1, no_op(math_floor((no_op(rt_load_f32(memory_at_0, loc_6)) / loc_9))))
								rt_store_f32(memory_at_0, loc_1 + 4, no_op(math_floor((no_op(rt_load_f32(memory_at_0, loc_6 + 4)) / loc_9))))
								rt_store_f32(memory_at_0, loc_1 + 8, no_op(math_floor((no_op(rt_load_f32(memory_at_0, loc_6 + 8)) / loc_9))))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_5 == 0 then
							desired = 3
							break
						end
						reg_0 = loc_1
						while true do
							if loc_8 == 3 then
								while true do
									reg_1 = rt_load_f64(memory_at_0, loc_2)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_8 ~= 5 then
								desired = 3
								break
							end
							reg_1 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_2), 20), rt_add_i32(loc_4, 8))
							if reg_1 == 0 then
								desired = 3
								break
							end
							reg_1 = rt_load_f64(memory_at_0, loc_4 + 8)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_9 = reg_1
						loc_9 = no_op(no_op(loc_9))
						rt_store_f32(memory_at_0, reg_0, no_op(math_floor((loc_9 / no_op(rt_load_f32(memory_at_0, loc_5))))))
						rt_store_f32(memory_at_0, loc_1 + 4, no_op(math_floor((loc_9 / no_op(rt_load_f32(memory_at_0, loc_5 + 4))))))
						rt_store_f32(memory_at_0, loc_1 + 8, no_op(math_floor((loc_9 / no_op(rt_load_f32(memory_at_0, loc_5 + 8))))))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = 4
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = loc_2
				while true do
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 1, 2, 0, }
								end)()
							end
							temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_2 + 12), 3)] or 2
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 3
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_2), 20), rt_add_i32(loc_4, 8))
						if reg_0 == 0 then
							desired = 3
							break
						end
						rt_store_f64(memory_at_0, loc_4, rt_load_f64(memory_at_0, loc_4 + 8))
						loc_5 = loc_4
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_6 = loc_3
					while true do
						while true do
							if not br_map[2] then
								br_map[2] = (function()
									return { [0] = 1, 2, 0, }
								end)()
							end
							temp = br_map[2][rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 12), 3)] or 2
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 3
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_6 = rt_add_i32(loc_4, 8)
						reg_0 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_3), 20), rt_add_i32(loc_4, 8))
						if reg_0 == 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_f64(memory_at_0, loc_1, math_floor((rt_load_f64(memory_at_0, loc_5) / rt_load_f64(memory_at_0, loc_6))))
					loc_2 = 3
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[596](loc_0, loc_2, loc_3, loc_1, 12)
				if reg_0 ~= 0 then
					desired = 1
					break
				end
				FUNC_LIST[64](loc_0, loc_2, loc_3, 12)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_1 + 12, loc_2)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[602] = --[[ void luaV_doarithimpl<(TMS)13>(lua_State*, lua_TValue*, lua_TValue const*, lua_TValue const*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0.0
	local loc_10 = 0.0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		while true do
			loc_7 = rt_load_i32(memory_at_0, loc_2 + 12)
			loc_5 = bit_and((if loc_7 == 4 then 1 else 0), (if loc_2 ~= 0 then 1 else 0))
			loc_8 = rt_load_i32(memory_at_0, loc_3 + 12)
			loc_6 = bit_and((if loc_8 == 4 then 1 else 0), (if loc_3 ~= 0 then 1 else 0))
			if bit_and(loc_5, loc_6) ~= 0 then
				break
			end
			if loc_5 ~= 0 then
				while true do
					if loc_8 == 3 then
						desired = 1
						break
					end
					if loc_8 ~= 5 then
						desired = 1
						break
					end
					reg_0 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_3), 20), rt_add_i32(loc_4, 8))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if bit_or(bit_xor(loc_6, 1), (if loc_7 == 3 then 1 else 0)) ~= 0 then
				break
			end
			if loc_7 ~= 5 then
				break
			end
			reg_0 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_2), 20), rt_add_i32(loc_4, 8))
			if reg_0 == 0 then
				break
			end
			rt_store_f64(memory_at_0, loc_4, rt_load_f64(memory_at_0, loc_4 + 8))
			break
		end
		loc_6 = loc_2
		while true do
			while true do
				while true do
					while true do
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 1, 2, 0, }
							end)()
						end
						temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_2 + 12), 3)] or 2
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 2
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_2), 20), rt_add_i32(loc_4, 8))
					if reg_0 == 0 then
						desired = 2
						break
					end
					rt_store_f64(memory_at_0, loc_4, rt_load_f64(memory_at_0, loc_4 + 8))
					loc_6 = loc_4
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = loc_3
				while true do
					while true do
						if not br_map[2] then
							br_map[2] = (function()
								return { [0] = 1, 2, 0, }
							end)()
						end
						temp = br_map[2][rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 12), 3)] or 2
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 2
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_5 = rt_add_i32(loc_4, 8)
					reg_0 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_3), 20), rt_add_i32(loc_4, 8))
					if reg_0 == 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_9 = rt_load_f64(memory_at_0, loc_5)
				loc_10 = rt_load_f64(memory_at_0, loc_6)
				rt_store_i32(memory_at_0, loc_1 + 12, 3)
				rt_store_f64(memory_at_0, loc_1, (loc_10 - (loc_9 * math_floor((loc_10 / loc_9)))))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[596](loc_0, loc_2, loc_3, loc_1, 13)
			if reg_0 ~= 0 then
				break
			end
			FUNC_LIST[64](loc_0, loc_2, loc_3, 13)
			error("out of code bounds")
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[603] = --[[ void luaV_doarithimpl<(TMS)14>(lua_State*, lua_TValue*, lua_TValue const*, lua_TValue const*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0.0
	local loc_10 = 0.0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		while true do
			loc_7 = rt_load_i32(memory_at_0, loc_2 + 12)
			loc_5 = bit_and((if loc_7 == 4 then 1 else 0), (if loc_2 ~= 0 then 1 else 0))
			loc_8 = rt_load_i32(memory_at_0, loc_3 + 12)
			loc_6 = bit_and((if loc_8 == 4 then 1 else 0), (if loc_3 ~= 0 then 1 else 0))
			if bit_and(loc_5, loc_6) ~= 0 then
				break
			end
			if loc_5 ~= 0 then
				while true do
					if loc_8 == 3 then
						desired = 1
						break
					end
					if loc_8 ~= 5 then
						desired = 1
						break
					end
					reg_0 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_3), 20), rt_add_i32(loc_4, 8))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if bit_or(bit_xor(loc_6, 1), (if loc_7 == 3 then 1 else 0)) ~= 0 then
				break
			end
			if loc_7 ~= 5 then
				break
			end
			reg_0 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_2), 20), rt_add_i32(loc_4, 8))
			if reg_0 == 0 then
				break
			end
			rt_store_f64(memory_at_0, loc_4, rt_load_f64(memory_at_0, loc_4 + 8))
			break
		end
		loc_6 = loc_2
		while true do
			while true do
				while true do
					while true do
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 1, 2, 0, }
							end)()
						end
						temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_2 + 12), 3)] or 2
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 2
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_2), 20), rt_add_i32(loc_4, 8))
					if reg_0 == 0 then
						desired = 2
						break
					end
					rt_store_f64(memory_at_0, loc_4, rt_load_f64(memory_at_0, loc_4 + 8))
					loc_6 = loc_4
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = loc_3
				while true do
					while true do
						if not br_map[2] then
							br_map[2] = (function()
								return { [0] = 1, 2, 0, }
							end)()
						end
						temp = br_map[2][rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 12), 3)] or 2
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 2
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_5 = rt_add_i32(loc_4, 8)
					reg_0 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_3), 20), rt_add_i32(loc_4, 8))
					if reg_0 == 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_9 = rt_load_f64(memory_at_0, loc_5)
				loc_10 = rt_load_f64(memory_at_0, loc_6)
				rt_store_i32(memory_at_0, loc_1 + 12, 3)
				reg_1 = FUNC_LIST[642](loc_10, loc_9)
				rt_store_f64(memory_at_0, loc_1, reg_1)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[596](loc_0, loc_2, loc_3, loc_1, 14)
			if reg_0 ~= 0 then
				break
			end
			FUNC_LIST[64](loc_0, loc_2, loc_3, 14)
			error("out of code bounds")
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[604] = --[[ void luaV_doarithimpl<(TMS)15>(lua_State*, lua_TValue*, lua_TValue const*, lua_TValue const*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		loc_6 = rt_load_i32(memory_at_0, loc_3 + 12)
		loc_7 = bit_and((if loc_6 == 4 then 1 else 0), (if loc_3 ~= 0 then 1 else 0))
		while true do
			while true do
				reg_0 = loc_1
				while true do
					while true do
						loc_8 = rt_load_i32(memory_at_0, loc_2 + 12)
						loc_5 = (if loc_8 == 4 then loc_2 else 0)
						if loc_5 == 0 then
							break
						end
						if loc_7 == 0 then
							break
						end
						rt_store_f32(memory_at_0, loc_1, rt_neg_f32(rt_load_f32(memory_at_0, loc_5)))
						rt_store_f32(memory_at_0, loc_1 + 4, rt_neg_f32(rt_load_f32(memory_at_0, loc_5 + 4)))
						rt_store_f32(memory_at_0, loc_1 + 8, rt_neg_f32(rt_load_f32(memory_at_0, loc_5 + 8)))
						reg_1 = 4
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						if loc_5 ~= 0 then
							while true do
								if loc_6 == 3 then
									desired = 4
									break
								end
								if loc_6 ~= 5 then
									desired = 4
									break
								end
								reg_1 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_3), 20), rt_add_i32(loc_4, 8))
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if bit_or((if loc_7 == 0 then 1 else 0), (if loc_8 == 3 then 1 else 0)) ~= 0 then
							break
						end
						if loc_8 ~= 5 then
							break
						end
						reg_1 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_2), 20), rt_add_i32(loc_4, 8))
						if reg_1 == 0 then
							break
						end
						rt_store_f64(memory_at_0, loc_4, rt_load_f64(memory_at_0, loc_4 + 8))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_5 = loc_2
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 1, 3, 0, }
								end)()
							end
							temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_2 + 12), 3)] or 3
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 2
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_1 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_2), 20), rt_add_i32(loc_4, 8))
						if reg_1 == 0 then
							desired = 2
							break
						end
						rt_store_f64(memory_at_0, loc_4, rt_load_f64(memory_at_0, loc_4 + 8))
						loc_5 = loc_4
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						while true do
							if not br_map[2] then
								br_map[2] = (function()
									return { [0] = 1, 3, 0, }
								end)()
							end
							temp = br_map[2][rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 12), 3)] or 3
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 2
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_1 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_3), 20), rt_add_i32(loc_4, 8))
						if reg_1 == 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_f64(memory_at_0, loc_1, rt_neg_f64(rt_load_f64(memory_at_0, loc_5)))
					reg_1 = 3
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = reg_1
				rt_store_i32(memory_at_0, reg_0 + 12, loc_2)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[596](loc_0, loc_2, loc_3, loc_1, 15)
			if reg_0 ~= 0 then
				break
			end
			FUNC_LIST[64](loc_0, loc_2, loc_3, 15)
			error("out of code bounds")
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
		break
	end
end
FUNC_LIST[605] = --[[ luaV_dolen(lua_State*, lua_TValue*, lua_TValue const*) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0.0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									if not br_map[1] then
										br_map[1] = (function()
											return { [0] = 3, 0, }
										end)()
									end
									temp = br_map[1][rt_sub_i32(rt_load_i32(memory_at_0, loc_2 + 12), 5)] or 1
									if temp < 1 then
										break
									elseif temp > 1 then
										desired = 4
										break
									else
										desired = 6
										break
									end
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								while true do
									loc_4 = rt_load_i32(memory_at_0, loc_2)
									loc_3 = rt_load_i32(memory_at_0, loc_4 + 16)
									if loc_3 == 0 then
										break
									end
									if bit_and(rt_load_i32_u8(memory_at_0, loc_3 + 3), 64) ~= 0 then
										break
									end
									reg_0 = FUNC_LIST[460](loc_3, 6, rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0 + 16) + 1552))
									loc_3 = reg_0
									if loc_3 ~= 0 then
										desired = 5
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_0 = FUNC_LIST[433](loc_4)
								reg_0 = rt_convert_f64_i32(reg_0)
								desired = 3
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							reg_0 = FUNC_LIST[461](loc_0, loc_2, 6)
							loc_3 = reg_0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if rt_load_i32(memory_at_0, loc_3 + 12) == 0 then
							desired = 1
							break
						end
						loc_4 = rt_load_i32(memory_at_0, loc_0 + 28)
						loc_5 = rt_load_i32(memory_at_0, loc_0 + 8)
						rt_store_i64(memory_at_0, loc_5, rt_load_i64(memory_at_0, loc_3))
						rt_store_i64(memory_at_0, loc_5 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
						loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
						rt_store_i64(memory_at_0, loc_3 + 16, rt_load_i64(memory_at_0, loc_2))
						rt_store_i64(memory_at_0, loc_3 + 24, rt_load_i64(memory_at_0, loc_2 + 8))
						loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
						rt_store_i64(memory_at_0, loc_2 + 32, rt_load_i64(memory_at_0, 9344))
						rt_store_i64(memory_at_0, loc_2 + 40, rt_load_i64(memory_at_0, 9352))
						loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
						reg_0 = loc_0
						if rt_le_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 24), loc_2), 48) then
							while true do
								FUNC_LIST[82](loc_0, 3)
								reg_1 = rt_load_i32(memory_at_0, loc_0 + 8)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								reg_1 = loc_2
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_2 = reg_1
						rt_store_i32(memory_at_0, reg_0 + 8, rt_add_i32(loc_2, 48))
						FUNC_LIST[85](loc_0, loc_2, 1)
						loc_2 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), 16)
						rt_store_i32(memory_at_0, loc_0 + 8, loc_2)
						loc_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 28), rt_sub_i32(loc_1, loc_4))
						rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_2 + 8))
						rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_2))
						if rt_load_i32(memory_at_0, loc_1 + 12) == 3 then
							desired = 2
							break
						end
						FUNC_LIST[60](loc_0, 2458, 0)
						error("out of code bounds")
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = no_op(rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_2) + 16))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = reg_0
				rt_store_i32(memory_at_0, loc_1 + 12, 3)
				rt_store_f64(memory_at_0, loc_1, loc_6)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[59](loc_0, loc_2, 3581)
		error("out of code bounds")
	end
end
FUNC_LIST[606] = --[[ luaV_prepareFORN(lua_State*, lua_TValue*, lua_TValue*, lua_TValue*) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0.0
	local reg_0
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		while true do
			while true do
				while true do
					loc_5 = rt_load_i32(memory_at_0, loc_3 + 12)
					if loc_5 ~= 3 then
						while true do
							if loc_5 ~= 5 then
								desired = 3
								break
							end
							reg_0 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_3), 20), rt_add_i32(loc_4, 8))
							if reg_0 == 0 then
								desired = 3
								break
							end
							loc_6 = rt_load_f64(memory_at_0, loc_4 + 8)
							rt_store_i32(memory_at_0, loc_3 + 12, 3)
							rt_store_f64(memory_at_0, loc_3, loc_6)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_3 = rt_load_i32(memory_at_0, loc_1 + 12)
					if loc_3 ~= 3 then
						while true do
							if loc_3 ~= 5 then
								desired = 2
								break
							end
							reg_0 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_1), 20), rt_add_i32(loc_4, 8))
							if reg_0 == 0 then
								desired = 2
								break
							end
							loc_6 = rt_load_f64(memory_at_0, loc_4 + 8)
							rt_store_i32(memory_at_0, loc_1 + 12, 3)
							rt_store_f64(memory_at_0, loc_1, loc_6)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_3 = rt_load_i32(memory_at_0, loc_2 + 12)
					if loc_3 ~= 3 then
						while true do
							if loc_3 ~= 5 then
								desired = 1
								break
							end
							reg_0 = FUNC_LIST[365](rt_add_i32(rt_load_i32(memory_at_0, loc_2), 20), rt_add_i32(loc_4, 8))
							if reg_0 == 0 then
								desired = 1
								break
							end
							loc_6 = rt_load_f64(memory_at_0, loc_4 + 8)
							rt_store_i32(memory_at_0, loc_2 + 12, 3)
							rt_store_f64(memory_at_0, loc_2, loc_6)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[62](loc_0, loc_3, 3873)
				error("out of code bounds")
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[62](loc_0, loc_1, 1692)
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		FUNC_LIST[62](loc_0, loc_2, 2612)
		error("out of code bounds")
	end
end
FUNC_LIST[607] = --[[ luaV_callTM(lua_State*, int, int) ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		loc_3 = rt_add_i32(rt_load_i32_u16(memory_at_0, loc_0 + 48), 1)
		rt_store_i32_n16(memory_at_0, loc_0 + 48, loc_3)
		if bit_and(loc_3, 65535) >= 200 then
			while true do
				FUNC_LIST[84](loc_0)
				break
			end
		end
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
		if rt_le_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 24), loc_3), 320) then
			while true do
				FUNC_LIST[82](loc_0, 20)
				reg_0 = rt_load_i32(memory_at_0, loc_0 + 8)
				break
			end
		else
			while true do
				reg_0 = loc_3
				break
			end
		end
		loc_3 = reg_0
		loc_4 = rt_sub_i32(loc_3, rt_shl_i32(loc_1, 4))
		loc_5 = rt_sub_i32(loc_4, 16)
		while true do
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 20)
			if loc_1 == rt_load_i32(memory_at_0, loc_0 + 32) then
				while true do
					reg_0 = FUNC_LIST[83](loc_0)
					loc_1 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = rt_add_i32(loc_1, 24)
			rt_store_i32(memory_at_0, loc_0 + 20, loc_1)
			break
		end
		rt_store_i32(memory_at_0, loc_1 + 20, 0)
		rt_store_i32(memory_at_0, loc_1 + 12, 0)
		rt_store_i32(memory_at_0, loc_1, loc_4)
		rt_store_i32(memory_at_0, loc_1 + 4, loc_5)
		rt_store_i32(memory_at_0, loc_1 + 8, rt_add_i32(loc_3, 320))
		rt_store_i32(memory_at_0, loc_1 + 16, rt_shr_u32(bit_xor(loc_2, 4294967295), 31))
		rt_store_i32(memory_at_0, loc_0 + 12, loc_4)
		reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_5) + 16)](loc_0)
		loc_3 = reg_0
		loc_4 = rt_load_i32(memory_at_0, loc_0 + 20)
		loc_1 = rt_sub_i32(loc_4, 24)
		while true do
			if rt_lt_i32(loc_2, 0) then
				break
			end
			if rt_gt_i32(loc_3, 0) then
				while true do
					loc_2 = rt_add_i32(rt_load_i32(memory_at_0, loc_1), rt_shl_i32(loc_2, 4))
					loc_3 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 8), rt_shl_i32(loc_3, 4))
					rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_3))
					rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_i32(memory_at_0, rt_add_i32(rt_load_i32(memory_at_0, loc_1), rt_shl_i32(loc_2, 4)) + 12, 0)
			break
		end
		rt_store_i32(memory_at_0, loc_0 + 20, loc_1)
		rt_store_i32(memory_at_0, loc_0 + 12, rt_load_i32(memory_at_0, loc_1))
		rt_store_i32(memory_at_0, loc_0 + 8, rt_load_i32(memory_at_0, rt_sub_i32(loc_4, 16)))
		rt_store_i32_n16(memory_at_0, loc_0 + 48, rt_sub_i32(rt_load_i32_u16(memory_at_0, loc_0 + 48), 1))
		break
	end
end
FUNC_LIST[608] = --[[ luaV_tryfuncTM(lua_State*, lua_TValue*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		reg_0 = FUNC_LIST[461](loc_0, loc_1, 4)
		loc_3 = reg_0
		if rt_load_i32(memory_at_0, loc_3 + 12) == 7 then
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 8)
				reg_0 = loc_0
				if loc_2 > loc_1 then
					while true do
						while true do
							loc_4 = rt_sub_i32(loc_2, 16)
							rt_store_i64(memory_at_0, loc_2, rt_load_i64(memory_at_0, loc_4))
							rt_store_i64(memory_at_0, loc_2 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
							loc_2 = loc_4
							if loc_1 < loc_2 then
								continue
							end
							break
						end
						if desired then
							break
						end
						reg_1 = rt_load_i32(memory_at_0, loc_0 + 8)
						break
					end
					if desired then
						break
					end
				else
					while true do
						reg_1 = loc_2
						break
					end
					if desired then
						break
					end
				end
				loc_2 = reg_1
				rt_store_i32(memory_at_0, reg_0 + 8, rt_add_i32(loc_2, 16))
				rt_store_i64(memory_at_0, loc_1 + 8, rt_load_i64(memory_at_0, loc_3 + 8))
				rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, loc_3))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		FUNC_LIST[59](loc_0, loc_1, 2975)
		error("out of code bounds")
	end
end
FUNC_LIST[609] = --[[ __memcpy ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		if loc_2 >= 512 then
			while true do
				FUNC_LIST[3](loc_0, loc_1, loc_2)
				reg_0 = loc_0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_3 = rt_add_i32(loc_0, loc_2)
		while true do
			if bit_and(bit_xor(loc_0, loc_1), 3) == 0 then
				while true do
					while true do
						if bit_and(loc_0, 3) == 0 then
							while true do
								loc_2 = loc_0
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						if loc_2 == 0 then
							while true do
								loc_2 = loc_0
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_2 = loc_0
						while true do
							rt_store_i32_n8(memory_at_0, loc_2, rt_load_i32_u8(memory_at_0, loc_1))
							loc_1 = rt_add_i32(loc_1, 1)
							loc_2 = rt_add_i32(loc_2, 1)
							if bit_and(loc_2, 3) == 0 then
								desired = 3
								break
							end
							if loc_2 < loc_3 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						break
					end
					loc_4 = bit_and(loc_3, 4294967292)
					while true do
						if loc_3 < 64 then
							break
						end
						loc_5 = rt_add_i32(loc_4, 4294967232)
						if loc_5 < loc_2 then
							break
						end
						while true do
							rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_1))
							rt_store_i32(memory_at_0, loc_2 + 4, rt_load_i32(memory_at_0, loc_1 + 4))
							rt_store_i32(memory_at_0, loc_2 + 8, rt_load_i32(memory_at_0, loc_1 + 8))
							rt_store_i32(memory_at_0, loc_2 + 12, rt_load_i32(memory_at_0, loc_1 + 12))
							rt_store_i32(memory_at_0, loc_2 + 16, rt_load_i32(memory_at_0, loc_1 + 16))
							rt_store_i32(memory_at_0, loc_2 + 20, rt_load_i32(memory_at_0, loc_1 + 20))
							rt_store_i32(memory_at_0, loc_2 + 24, rt_load_i32(memory_at_0, loc_1 + 24))
							rt_store_i32(memory_at_0, loc_2 + 28, rt_load_i32(memory_at_0, loc_1 + 28))
							rt_store_i32(memory_at_0, loc_2 + 32, rt_load_i32(memory_at_0, loc_1 + 32))
							rt_store_i32(memory_at_0, loc_2 + 36, rt_load_i32(memory_at_0, loc_1 + 36))
							rt_store_i32(memory_at_0, loc_2 + 40, rt_load_i32(memory_at_0, loc_1 + 40))
							rt_store_i32(memory_at_0, loc_2 + 44, rt_load_i32(memory_at_0, loc_1 + 44))
							rt_store_i32(memory_at_0, loc_2 + 48, rt_load_i32(memory_at_0, loc_1 + 48))
							rt_store_i32(memory_at_0, loc_2 + 52, rt_load_i32(memory_at_0, loc_1 + 52))
							rt_store_i32(memory_at_0, loc_2 + 56, rt_load_i32(memory_at_0, loc_1 + 56))
							rt_store_i32(memory_at_0, loc_2 + 60, rt_load_i32(memory_at_0, loc_1 + 60))
							loc_1 = rt_sub_i32(loc_1, 4294967232)
							loc_2 = rt_sub_i32(loc_2, 4294967232)
							if loc_5 >= loc_2 then
								continue
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						break
					end
					if loc_2 >= loc_4 then
						desired = 1
						break
					end
					while true do
						rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_1))
						loc_1 = rt_add_i32(loc_1, 4)
						loc_2 = rt_add_i32(loc_2, 4)
						if loc_4 > loc_2 then
							continue
						end
						break
					end
					if desired then
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_3 < 4 then
				while true do
					loc_2 = loc_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = rt_sub_i32(loc_3, 4)
			if loc_0 > loc_4 then
				while true do
					loc_2 = loc_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = loc_0
			while true do
				rt_store_i32_n8(memory_at_0, loc_2, rt_load_i32_u8(memory_at_0, loc_1))
				rt_store_i32_n8(memory_at_0, loc_2 + 1, rt_load_i32_u8(memory_at_0, loc_1 + 1))
				rt_store_i32_n8(memory_at_0, loc_2 + 2, rt_load_i32_u8(memory_at_0, loc_1 + 2))
				rt_store_i32_n8(memory_at_0, loc_2 + 3, rt_load_i32_u8(memory_at_0, loc_1 + 3))
				loc_1 = rt_add_i32(loc_1, 4)
				loc_2 = rt_add_i32(loc_2, 4)
				if loc_4 >= loc_2 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		if loc_2 < loc_3 then
			while true do
				while true do
					rt_store_i32_n8(memory_at_0, loc_2, rt_load_i32_u8(memory_at_0, loc_1))
					loc_1 = rt_add_i32(loc_1, 1)
					loc_2 = rt_add_i32(loc_2, 1)
					if loc_3 ~= loc_2 then
						continue
					end
					break
				end
				if desired then
					break
				end
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[610] = --[[ memmove ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		while true do
			if loc_0 == loc_1 then
				break
			end
			loc_3 = rt_add_i32(loc_0, loc_2)
			if rt_sub_i32(loc_1, loc_3) <= rt_sub_i32(0, rt_shl_i32(loc_2, 1)) then
				while true do
					reg_0 = FUNC_LIST[609](loc_0, loc_1, loc_2)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = bit_and(bit_xor(loc_0, loc_1), 3)
			while true do
				while true do
					if loc_0 < loc_1 then
						while true do
							if loc_4 ~= 0 then
								while true do
									loc_3 = loc_0
									desired = 2
									break
								end
								if desired then
									break
								end
							end
							if bit_and(loc_0, 3) == 0 then
								while true do
									loc_3 = loc_0
									desired = 3
									break
								end
								if desired then
									break
								end
							end
							loc_3 = loc_0
							while true do
								if loc_2 == 0 then
									desired = 1
									break
								end
								rt_store_i32_n8(memory_at_0, loc_3, rt_load_i32_u8(memory_at_0, loc_1))
								loc_1 = rt_add_i32(loc_1, 1)
								loc_2 = rt_sub_i32(loc_2, 1)
								loc_3 = rt_add_i32(loc_3, 1)
								if bit_and(loc_3, 3) ~= 0 then
									continue
								end
								break
							end
							if desired then
								break
							end
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					while true do
						if loc_4 ~= 0 then
							break
						end
						if bit_and(loc_3, 3) ~= 0 then
							while true do
								while true do
									if loc_2 == 0 then
										desired = 1
										break
									end
									loc_2 = rt_sub_i32(loc_2, 1)
									loc_3 = rt_add_i32(loc_2, loc_0)
									rt_store_i32_n8(memory_at_0, loc_3, rt_load_i32_u8(memory_at_0, rt_add_i32(loc_1, loc_2)))
									if bit_and(loc_3, 3) ~= 0 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if loc_2 <= 3 then
							break
						end
						while true do
							loc_2 = rt_sub_i32(loc_2, 4)
							rt_store_i32(memory_at_0, rt_add_i32(loc_2, loc_0), rt_load_i32(memory_at_0, rt_add_i32(loc_1, loc_2)))
							if loc_2 > 3 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_2 == 0 then
						desired = 1
						break
					end
					while true do
						loc_2 = rt_sub_i32(loc_2, 1)
						rt_store_i32_n8(memory_at_0, rt_add_i32(loc_2, loc_0), rt_load_i32_u8(memory_at_0, rt_add_i32(loc_1, loc_2)))
						if loc_2 ~= 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_2 <= 3 then
					break
				end
				while true do
					rt_store_i32(memory_at_0, loc_3, rt_load_i32(memory_at_0, loc_1))
					loc_1 = rt_add_i32(loc_1, 4)
					loc_3 = rt_add_i32(loc_3, 4)
					loc_2 = rt_sub_i32(loc_2, 4)
					if loc_2 > 3 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_2 == 0 then
				break
			end
			while true do
				rt_store_i32_n8(memory_at_0, loc_3, rt_load_i32_u8(memory_at_0, loc_1))
				loc_3 = rt_add_i32(loc_3, 1)
				loc_1 = rt_add_i32(loc_1, 1)
				loc_2 = rt_sub_i32(loc_2, 1)
				if loc_2 ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[611] = --[[ __memset ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = rt_i64_ZERO
	local reg_0
	while true do
		while true do
			if loc_2 == 0 then
				break
			end
			rt_store_i32_n8(memory_at_0, loc_0, loc_1)
			loc_3 = rt_add_i32(loc_0, loc_2)
			rt_store_i32_n8(memory_at_0, rt_sub_i32(loc_3, 1), loc_1)
			if loc_2 < 3 then
				break
			end
			rt_store_i32_n8(memory_at_0, loc_0 + 2, loc_1)
			rt_store_i32_n8(memory_at_0, loc_0 + 1, loc_1)
			rt_store_i32_n8(memory_at_0, rt_sub_i32(loc_3, 3), loc_1)
			rt_store_i32_n8(memory_at_0, rt_sub_i32(loc_3, 2), loc_1)
			if loc_2 < 7 then
				break
			end
			rt_store_i32_n8(memory_at_0, loc_0 + 3, loc_1)
			rt_store_i32_n8(memory_at_0, rt_sub_i32(loc_3, 4), loc_1)
			if loc_2 < 9 then
				break
			end
			loc_4 = bit_and(rt_sub_i32(0, loc_0), 3)
			loc_3 = rt_add_i32(loc_4, loc_0)
			loc_1 = rt_mul_i32(bit_and(loc_1, 255), 16843009)
			rt_store_i32(memory_at_0, loc_3, loc_1)
			loc_4 = bit_and(rt_sub_i32(loc_2, loc_4), 4294967292)
			loc_2 = rt_add_i32(loc_4, loc_3)
			rt_store_i32(memory_at_0, rt_sub_i32(loc_2, 4), loc_1)
			if loc_4 < 9 then
				break
			end
			rt_store_i32(memory_at_0, loc_3 + 8, loc_1)
			rt_store_i32(memory_at_0, loc_3 + 4, loc_1)
			rt_store_i32(memory_at_0, rt_sub_i32(loc_2, 8), loc_1)
			rt_store_i32(memory_at_0, rt_sub_i32(loc_2, 12), loc_1)
			if loc_4 < 25 then
				break
			end
			rt_store_i32(memory_at_0, loc_3 + 24, loc_1)
			rt_store_i32(memory_at_0, loc_3 + 20, loc_1)
			rt_store_i32(memory_at_0, loc_3 + 16, loc_1)
			rt_store_i32(memory_at_0, loc_3 + 12, loc_1)
			rt_store_i32(memory_at_0, rt_sub_i32(loc_2, 16), loc_1)
			rt_store_i32(memory_at_0, rt_sub_i32(loc_2, 20), loc_1)
			rt_store_i32(memory_at_0, rt_sub_i32(loc_2, 24), loc_1)
			rt_store_i32(memory_at_0, rt_sub_i32(loc_2, 28), loc_1)
			loc_5 = bit_or(bit_and(loc_3, 4), 24)
			loc_2 = rt_sub_i32(loc_4, loc_5)
			if loc_2 < 32 then
				break
			end
			loc_6 = rt_mul_i64(rt_extend_i64_u32(loc_1), rt_i64_from_u32(1, 1))
			loc_1 = rt_add_i32(loc_3, loc_5)
			while true do
				rt_store_i64(memory_at_0, loc_1 + 24, loc_6)
				rt_store_i64(memory_at_0, loc_1 + 16, loc_6)
				rt_store_i64(memory_at_0, loc_1 + 8, loc_6)
				rt_store_i64(memory_at_0, loc_1, loc_6)
				loc_1 = rt_add_i32(loc_1, 32)
				loc_2 = rt_sub_i32(loc_2, 32)
				if loc_2 > 31 then
					continue
				end
				break
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[612] = --[[ __errno_location ]] function()
	local reg_0
	while true do
		reg_0 = 36376
		break
	end
	return reg_0
end
FUNC_LIST[613] = --[[ __math_uflow ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[716](loc_0, 1.2882297539194267e-231)
		break
	end
	return reg_0
end
FUNC_LIST[614] = --[[ __math_oflow ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[716](loc_0, 3.105036184601418e231)
		break
	end
	return reg_0
end
FUNC_LIST[615] = --[[ exp ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = rt_i64_ZERO
	local loc_6 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			while true do
				reg_0 = FUNC_LIST[616](loc_0)
				loc_3 = bit_and(reg_0, 2047)
				reg_1 = FUNC_LIST[616](5.551115123125783e-17)
				loc_4 = reg_1
				reg_1 = FUNC_LIST[616](5.12e2)
				if rt_sub_i32(loc_3, loc_4) < rt_sub_i32(reg_1, loc_4) then
					while true do
						loc_4 = loc_3
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_3 < loc_4 then
					while true do
						reg_0 = (loc_0 + 1e0)
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_4 = 0
				reg_0 = FUNC_LIST[616](1.024e3)
				if reg_0 > loc_3 then
					break
				end
				loc_5 = rt_reinterpret_i64_f64(loc_0)
				reg_0 = 0e0
				if rt_eq_i64(loc_5, rt_i64_from_u32(0, 4293918720)) then
					desired = 1
					break
				end
				reg_0 = FUNC_LIST[616](math.huge)
				if reg_0 <= loc_3 then
					while true do
						reg_0 = (loc_0 + 1e0)
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_lt_i64(loc_5, rt_i64_ZERO) then
					while true do
						reg_0 = FUNC_LIST[613](0)
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[614](0)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = rt_load_f64(memory_at_0, 13400)
			loc_2 = ((loc_0 * rt_load_f64(memory_at_0, 13392)) + loc_1)
			loc_1 = (loc_2 - loc_1)
			loc_0 = ((loc_1 * rt_load_f64(memory_at_0, 13416)) + ((loc_1 * rt_load_f64(memory_at_0, 13408)) + loc_0))
			loc_1 = (loc_0 * loc_0)
			loc_5 = rt_reinterpret_i64_f64(loc_2)
			loc_3 = bit_and(rt_shl_i32(rt_wrap_i32_i64(loc_5), 4), 2032)
			loc_0 = (((loc_1 * loc_1) * ((loc_0 * rt_load_f64(memory_at_0, 13448)) + rt_load_f64(memory_at_0, 13440))) + ((loc_1 * ((loc_0 * rt_load_f64(memory_at_0, 13432)) + rt_load_f64(memory_at_0, 13424))) + (rt_load_f64(memory_at_0, rt_add_i32(loc_3, 13504)) + loc_0)))
			loc_6 = rt_add_i64(rt_load_i64(memory_at_0, rt_add_i32(loc_3, 13512)), rt_shl_i64(loc_5, rt_i64_from_u32(45, 0)))
			if loc_4 == 0 then
				while true do
					reg_0 = FUNC_LIST[617](loc_0, loc_6, loc_5)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = rt_reinterpret_f64_i64(loc_6)
			reg_0 = ((loc_1 * loc_0) + loc_1)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_1 = reg_0
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[616] = --[[ top12 ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = rt_wrap_i32_i64(rt_shr_u64(rt_reinterpret_i64_f64(loc_0), rt_i64_from_u32(52, 0)))
		break
	end
	return reg_0
end
FUNC_LIST[617] = --[[ specialcase ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local reg_0
	local desired
	while true do
		if rt_eq_i64(rt_bit_and_i64(loc_2, rt_i64_from_u32(2147483648, 0)), rt_i64_ZERO) then
			while true do
				loc_3 = rt_reinterpret_f64_i64(rt_sub_i64(loc_1, rt_i64_from_u32(0, 1058013184)))
				reg_0 = (((loc_3 * loc_0) + loc_3) * 5.486124068793689e303)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_3 = rt_reinterpret_f64_i64(rt_add_i64(loc_1, rt_i64_from_u32(0, 1071644672)))
		loc_4 = (loc_3 * loc_0)
		loc_0 = (loc_4 + loc_3)
		if loc_0 < 1e0 then
			while true do
				reg_0 = FUNC_LIST[618]()
				FUNC_LIST[619]((reg_0 * 2.2250738585072014e-308))
				loc_5 = (loc_0 + 1e0)
				loc_0 = ((loc_5 + ((loc_4 + (loc_3 - loc_0)) + (loc_0 + (1e0 - loc_5)))) + -1e0)
				reg_0 = (if loc_0 == 0e0 then 0e0 else loc_0)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_0 = reg_0
		reg_0 = (loc_0 * 2.2250738585072014e-308)
		break
	end
	return reg_0
end
FUNC_LIST[618] = --[[ fp_barrier ]] function()
	local loc_0 = 0
	local reg_0
	while true do
		loc_0 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_i64_from_u32(0, 1048576))
		reg_0 = rt_load_f64(memory_at_0, loc_0 + 8)
		break
	end
	return reg_0
end
FUNC_LIST[619] = --[[ fp_force_eval ]] function(loc_0)
	while true do
		rt_store_f64(memory_at_0, rt_sub_i32(GLOBAL_LIST[0].value, 16) + 8, loc_0)
		break
	end
end
FUNC_LIST[620] = --[[ fmod ]] function(loc_0, loc_1)
	local loc_2 = rt_i64_ZERO
	local loc_3 = rt_i64_ZERO
	local loc_4 = rt_i64_ZERO
	local loc_5 = rt_i64_ZERO
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			while true do
				loc_4 = rt_reinterpret_i64_f64(loc_1)
				loc_2 = rt_shl_i64(loc_4, rt_i64_ONE)
				if rt_eq_i64(loc_2, rt_i64_ZERO) then
					break
				end
				reg_0 = FUNC_LIST[621](loc_1)
				if rt_gt_u64(rt_bit_and_i64(reg_0, rt_i64_from_u32(4294967295, 2147483647)), rt_i64_from_u32(0, 2146435072)) then
					break
				end
				loc_5 = rt_reinterpret_i64_f64(loc_0)
				loc_6 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_5, rt_i64_from_u32(52, 0))), 2047)
				if loc_6 ~= 2047 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = (loc_0 * loc_1)
			reg_0 = (loc_1 / loc_1)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_3 = rt_shl_i64(loc_5, rt_i64_ONE)
		if rt_le_u64(loc_3, loc_2) then
			while true do
				reg_0 = (if rt_eq_i64(loc_2, loc_3) then (loc_0 * 0e0) else loc_0)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_7 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_4, rt_i64_from_u32(52, 0))), 2047)
		while true do
			if loc_6 == 0 then
				while true do
					loc_6 = 0
					loc_2 = rt_shl_i64(loc_5, rt_i64_from_u32(12, 0))
					if rt_ge_i64(loc_2, rt_i64_ZERO) then
						while true do
							while true do
								loc_6 = rt_sub_i32(loc_6, 1)
								loc_2 = rt_shl_i64(loc_2, rt_i64_ONE)
								if rt_ge_i64(loc_2, rt_i64_ZERO) then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							break
						end
					end
					reg_0 = rt_shl_i64(loc_5, rt_extend_i64_u32(rt_sub_i32(1, loc_6)))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = rt_bit_or_i64(rt_bit_and_i64(loc_5, rt_i64_from_u32(4294967295, 1048575)), rt_i64_from_u32(0, 1048576))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_2 = reg_0
		while true do
			if loc_7 == 0 then
				while true do
					loc_7 = 0
					loc_3 = rt_shl_i64(loc_4, rt_i64_from_u32(12, 0))
					if rt_ge_i64(loc_3, rt_i64_ZERO) then
						while true do
							while true do
								loc_7 = rt_sub_i32(loc_7, 1)
								loc_3 = rt_shl_i64(loc_3, rt_i64_ONE)
								if rt_ge_i64(loc_3, rt_i64_ZERO) then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							break
						end
					end
					reg_0 = rt_shl_i64(loc_4, rt_extend_i64_u32(rt_sub_i32(1, loc_7)))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = rt_bit_or_i64(rt_bit_and_i64(loc_4, rt_i64_from_u32(4294967295, 1048575)), rt_i64_from_u32(0, 1048576))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_4 = reg_0
		if rt_gt_i32(loc_6, loc_7) then
			while true do
				while true do
					while true do
						loc_3 = rt_sub_i64(loc_2, loc_4)
						if rt_lt_i64(loc_3, rt_i64_ZERO) then
							break
						end
						loc_2 = loc_3
						if rt_ne_i64(loc_2, rt_i64_ZERO) then
							break
						end
						reg_0 = (loc_0 * 0e0)
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
					loc_2 = rt_shl_i64(loc_2, rt_i64_ONE)
					loc_6 = rt_sub_i32(loc_6, 1)
					if rt_lt_i32(loc_7, loc_6) then
						continue
					end
					break
				end
				if desired then
					break
				end
				reg_0 = loc_7
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_6
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_6 = reg_0
		while true do
			loc_3 = rt_sub_i64(loc_2, loc_4)
			if rt_lt_i64(loc_3, rt_i64_ZERO) then
				break
			end
			loc_2 = loc_3
			if rt_ne_i64(loc_2, rt_i64_ZERO) then
				break
			end
			reg_0 = (loc_0 * 0e0)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			if rt_gt_u64(loc_2, rt_i64_from_u32(4294967295, 1048575)) then
				while true do
					loc_3 = loc_2
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				loc_6 = rt_sub_i32(loc_6, 1)
				loc_7 = (if rt_lt_u64(loc_2, rt_i64_from_u32(0, 524288)) then 1 else 0)
				loc_3 = rt_shl_i64(loc_2, rt_i64_ONE)
				loc_2 = loc_3
				if loc_7 ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_2 = rt_bit_and_i64(loc_5, rt_i64_from_u32(0, 2147483648))
		reg_0 = loc_2
		if rt_gt_i32(loc_6, 0) then
			while true do
				reg_1 = rt_bit_or_i64(rt_sub_i64(loc_3, rt_i64_from_u32(0, 1048576)), rt_shl_i64(rt_extend_i64_u32(loc_6), rt_i64_from_u32(52, 0)))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_1 = rt_shr_u64(loc_3, rt_extend_i64_u32(rt_sub_i32(1, loc_6)))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_3 = reg_1
		reg_0 = rt_reinterpret_f64_i64(rt_bit_or_i64(reg_0, loc_3))
		break
	end
	return reg_0
end
FUNC_LIST[621] = --[[ __DOUBLE_BITS ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = rt_reinterpret_i64_f64(loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[622] = --[[ __lockfile ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[623] = --[[ __unlockfile ]] function(loc_0)
	while true do
		break
	end
end
FUNC_LIST[624] = --[[ __towrite ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	local desired
	while true do
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 72)
		rt_store_i32(memory_at_0, loc_0 + 72, bit_or(rt_sub_i32(loc_1, 1), loc_1))
		loc_1 = rt_load_i32(memory_at_0, loc_0)
		if bit_and(loc_1, 8) ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0, bit_or(loc_1, 32))
				reg_0 = 4294967295
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		rt_store_i64(memory_at_0, loc_0 + 4, rt_i64_ZERO)
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 44)
		rt_store_i32(memory_at_0, loc_0 + 28, loc_1)
		rt_store_i32(memory_at_0, loc_0 + 20, loc_1)
		rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 48), loc_1))
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[625] = --[[ __overflow ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		rt_store_i32_n8(memory_at_0, loc_3 + 15, loc_1)
		while true do
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
			if loc_2 ~= 0 then
				while true do
					reg_0 = loc_2
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = FUNC_LIST[624](loc_0)
					if reg_0 ~= 0 then
						while true do
							loc_2 = 4294967295
							desired = 1
							break
						end
						if desired then
							break
						end
					end
					reg_0 = rt_load_i32(memory_at_0, loc_0 + 16)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = reg_0
			while true do
				loc_4 = rt_load_i32(memory_at_0, loc_0 + 20)
				if loc_2 == loc_4 then
					break
				end
				loc_2 = bit_and(loc_1, 255)
				if loc_2 == rt_load_i32(memory_at_0, loc_0 + 80) then
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 20, rt_add_i32(loc_4, 1))
				rt_store_i32_n8(memory_at_0, loc_4, loc_1)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, loc_0 + 36)](loc_0, rt_add_i32(loc_3, 15), 1)
			if reg_0 ~= 1 then
				while true do
					loc_2 = 4294967295
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = rt_load_i32_u8(memory_at_0, loc_3 + 15)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[626] = --[[ fputc ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[627](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[627] = --[[ do_putc ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		while true do
			loc_2 = rt_load_i32(memory_at_0, loc_1 + 76)
			if rt_ge_i32(loc_2, 0) then
				while true do
					if loc_2 == 0 then
						desired = 1
						break
					end
					reg_0 = FUNC_LIST[735]()
					if rt_load_i32(memory_at_0, reg_0 + 24) ~= bit_and(loc_2, 1073741823) then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				loc_2 = bit_and(loc_0, 255)
				if loc_2 == rt_load_i32(memory_at_0, loc_1 + 80) then
					break
				end
				loc_3 = rt_load_i32(memory_at_0, loc_1 + 20)
				if loc_3 == rt_load_i32(memory_at_0, loc_1 + 16) then
					break
				end
				rt_store_i32(memory_at_0, loc_1 + 20, rt_add_i32(loc_3, 1))
				rt_store_i32_n8(memory_at_0, loc_3, loc_0)
				reg_0 = loc_2
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[625](loc_1, loc_2)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = FUNC_LIST[628](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[628] = --[[ locking_putc ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_3 = rt_add_i32(loc_1, 76)
		reg_0 = FUNC_LIST[629](loc_3)
		if reg_0 ~= 0 then
			while true do
				reg_0 = FUNC_LIST[622](loc_1)
				break
			end
		end
		while true do
			while true do
				loc_2 = bit_and(loc_0, 255)
				if loc_2 == rt_load_i32(memory_at_0, loc_1 + 80) then
					break
				end
				loc_4 = rt_load_i32(memory_at_0, loc_1 + 20)
				if loc_4 == rt_load_i32(memory_at_0, loc_1 + 16) then
					break
				end
				rt_store_i32(memory_at_0, loc_1 + 20, rt_add_i32(loc_4, 1))
				rt_store_i32_n8(memory_at_0, loc_4, loc_0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[625](loc_1, loc_2)
			loc_2 = reg_0
			break
		end
		reg_0 = FUNC_LIST[630](loc_3)
		if bit_and(reg_0, 1073741824) ~= 0 then
			while true do
				FUNC_LIST[631](loc_3)
				break
			end
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[629] = --[[ a_cas ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		loc_1 = rt_load_i32(memory_at_0, loc_0)
		rt_store_i32(memory_at_0, loc_0, (if loc_1 ~= 0 then loc_1 else 1073741823))
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[630] = --[[ a_swap ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		loc_1 = rt_load_i32(memory_at_0, loc_0)
		rt_store_i32(memory_at_0, loc_0, 0)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[631] = --[[ __wake ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[727](loc_0, 1)
		break
	end
end
FUNC_LIST[632] = --[[ __fwritex ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			loc_3 = rt_load_i32(memory_at_0, loc_2 + 16)
			reg_0 = loc_1
			if loc_3 ~= 0 then
				while true do
					reg_1 = loc_3
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_1 = FUNC_LIST[624](loc_2)
					if reg_1 ~= 0 then
						desired = 1
						break
					end
					reg_1 = rt_load_i32(memory_at_0, loc_2 + 16)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = reg_1
			loc_4 = rt_load_i32(memory_at_0, loc_2 + 20)
			if reg_0 > rt_sub_i32(loc_3, loc_4) then
				while true do
					reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, loc_2 + 36)](loc_2, loc_0, loc_1)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				while true do
					if rt_lt_i32(rt_load_i32(memory_at_0, loc_2 + 80), 0) then
						break
					end
					if loc_1 == 0 then
						break
					end
					loc_3 = loc_1
					while true do
						loc_5 = rt_add_i32(loc_0, loc_3)
						if rt_load_i32_u8(memory_at_0, rt_sub_i32(loc_5, 1)) ~= 10 then
							while true do
								loc_3 = rt_sub_i32(loc_3, 1)
								if loc_3 ~= 0 then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_1 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, loc_2 + 36)](loc_2, loc_0, loc_3)
					loc_4 = reg_1
					if loc_3 > loc_4 then
						desired = 1
						break
					end
					loc_1 = rt_sub_i32(loc_1, loc_3)
					loc_4 = rt_load_i32(memory_at_0, loc_2 + 20)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = loc_0
				loc_3 = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[609](loc_4, loc_5, loc_1)
			rt_store_i32(memory_at_0, loc_2 + 20, rt_add_i32(loc_1, rt_load_i32(memory_at_0, loc_2 + 20)))
			loc_4 = rt_add_i32(loc_1, loc_3)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[633] = --[[ fwrite ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		loc_4 = rt_mul_i32(loc_1, loc_2)
		while true do
			if rt_lt_i32(rt_load_i32(memory_at_0, loc_3 + 76), 0) then
				while true do
					reg_0 = FUNC_LIST[632](loc_0, loc_4, loc_3)
					loc_0 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[622](loc_3)
			loc_5 = reg_0
			reg_0 = FUNC_LIST[632](loc_0, loc_4, loc_3)
			loc_0 = reg_0
			if loc_5 == 0 then
				break
			end
			FUNC_LIST[623](loc_3)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		if loc_0 == loc_4 then
			while true do
				reg_0 = (if loc_1 ~= 0 then loc_2 else 0)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = rt_div_u32(loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[634] = --[[ ldexp ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[648](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[635] = --[[ __math_divzero ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[636]((if loc_0 ~= 0 then -1e0 else 1e0))
		reg_0 = (reg_0 / 0e0)
		break
	end
	return reg_0
end
FUNC_LIST[636] = --[[ fp_barrier_647 ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		rt_store_f64(memory_at_0, loc_1 + 8, loc_0)
		reg_0 = rt_load_f64(memory_at_0, loc_1 + 8)
		break
	end
	return reg_0
end
FUNC_LIST[637] = --[[ __math_invalid ]] function(loc_0)
	local reg_0
	while true do
		loc_0 = (loc_0 - loc_0)
		reg_0 = (loc_0 / loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[638] = --[[ log ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = 0.0
	local loc_7 = 0
	local loc_8 = rt_i64_ZERO
	local loc_9 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[639](loc_0)
		loc_7 = reg_0
		loc_8 = rt_reinterpret_i64_f64(loc_0)
		if rt_le_u64(rt_sub_i64(loc_8, rt_i64_from_u32(0, 1072562176)), rt_i64_from_u32(4294967295, 198911)) then
			while true do
				if rt_eq_i64(loc_8, rt_i64_from_u32(0, 1072693248)) then
					while true do
						reg_0 = 0e0
						desired = 0
						break
					end
					if desired then
						break
					end
				end
				loc_0 = (loc_0 + -1e0)
				loc_1 = (loc_0 * 1.34217728e8)
				loc_1 = ((loc_0 + loc_1) - loc_1)
				loc_4 = rt_load_f64(memory_at_0, 17800)
				loc_5 = ((loc_1 * loc_1) * loc_4)
				loc_6 = (loc_0 + loc_5)
				loc_2 = (loc_0 * loc_0)
				loc_3 = (loc_0 * loc_2)
				reg_0 = (loc_6 + ((loc_3 * ((loc_3 * ((loc_3 * ((loc_3 * rt_load_f64(memory_at_0, 17880)) + ((loc_2 * rt_load_f64(memory_at_0, 17872)) + ((loc_0 * rt_load_f64(memory_at_0, 17864)) + rt_load_f64(memory_at_0, 17856))))) + ((loc_2 * rt_load_f64(memory_at_0, 17848)) + ((loc_0 * rt_load_f64(memory_at_0, 17840)) + rt_load_f64(memory_at_0, 17832))))) + ((loc_2 * rt_load_f64(memory_at_0, 17824)) + ((loc_0 * rt_load_f64(memory_at_0, 17816)) + rt_load_f64(memory_at_0, 17808))))) + ((((loc_0 - loc_1) * loc_4) * (loc_0 + loc_1)) + (loc_5 + (loc_0 - loc_6)))))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			if rt_sub_i32(loc_7, 32752) <= 4294934559 then
				while true do
					if loc_0 == 0e0 then
						while true do
							reg_0 = FUNC_LIST[635](1)
							desired = 0
							break
						end
						if desired then
							break
						end
					end
					if rt_eq_i64(loc_8, rt_i64_from_u32(0, 2146435072)) then
						desired = 1
						break
					end
					if bit_and((if bit_and(loc_7, 32752) ~= 32752 then 1 else 0), (if loc_7 <= 32767 then 1 else 0)) == 0 then
						while true do
							reg_0 = FUNC_LIST[637](loc_0)
							desired = 0
							break
						end
						if desired then
							break
						end
					end
					reg_0 = rt_sub_i64(rt_reinterpret_i64_f64((loc_0 * 4.503599627370496e15)), rt_i64_from_u32(0, 54525952))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_8
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_8 = reg_0
			loc_9 = rt_sub_i64(loc_8, rt_i64_from_u32(0, 1072037888))
			loc_2 = rt_convert_f64_i32(rt_wrap_i32_i64(rt_shr_i64(loc_9, rt_i64_from_u32(52, 0))))
			loc_7 = rt_shl_i32(bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_9, rt_i64_from_u32(45, 0))), 127), 4)
			loc_3 = ((loc_2 * rt_load_f64(memory_at_0, 17744)) + rt_load_f64(memory_at_0, rt_add_i32(loc_7, 17896)))
			loc_0 = (rt_load_f64(memory_at_0, rt_add_i32(loc_7, 17888)) * ((rt_reinterpret_f64_i64(rt_sub_i64(loc_8, rt_bit_and_i64(loc_9, rt_i64_from_u32(0, 4293918720)))) - rt_load_f64(memory_at_0, rt_add_i32(loc_7, 19936))) - rt_load_f64(memory_at_0, rt_add_i32(loc_7, 19944))))
			loc_4 = (loc_3 + loc_0)
			loc_1 = (loc_0 * loc_0)
			loc_0 = (loc_4 + (((loc_0 * loc_1) * ((loc_1 * ((loc_0 * rt_load_f64(memory_at_0, 17792)) + rt_load_f64(memory_at_0, 17784))) + ((loc_0 * rt_load_f64(memory_at_0, 17776)) + rt_load_f64(memory_at_0, 17768)))) + ((loc_1 * rt_load_f64(memory_at_0, 17760)) + ((loc_2 * rt_load_f64(memory_at_0, 17752)) + (loc_0 + (loc_3 - loc_4))))))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[639] = --[[ top16 ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = rt_wrap_i32_i64(rt_shr_u64(rt_reinterpret_i64_f64(loc_0), rt_i64_from_u32(48, 0)))
		break
	end
	return reg_0
end
FUNC_LIST[640] = --[[ log10 ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = 0.0
	local loc_7 = rt_i64_ZERO
	local loc_8 = rt_i64_ZERO
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		while true do
			while true do
				while true do
					loc_7 = rt_reinterpret_i64_f64(loc_0)
					if rt_le_i64(loc_7, rt_i64_from_u32(4294967295, 1048575)) then
						while true do
							if loc_0 == 0e0 then
								while true do
									reg_0 = (-1e0 / (loc_0 * loc_0))
									desired = 0
									break
								end
								if desired then
									break
								end
							end
							if rt_ge_i64(loc_7, rt_i64_ZERO) then
								desired = 3
								break
							end
							reg_0 = ((loc_0 - loc_0) / 0e0)
							desired = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if rt_gt_u64(loc_7, rt_i64_from_u32(4294967295, 2146435071)) then
						desired = 1
						break
					end
					loc_10 = 4294966273
					loc_8 = rt_shr_u64(loc_7, rt_i64_from_u32(32, 0))
					if rt_ne_i64(loc_8, rt_i64_from_u32(1072693248, 0)) then
						while true do
							reg_0 = rt_wrap_i32_i64(loc_8)
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_9 = 1072693248
					reg_0 = loc_9
					if rt_wrap_i32_i64(loc_7) ~= 0 then
						desired = 2
						break
					end
					reg_0 = 0e0
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_10 = 4294966219
				loc_7 = rt_reinterpret_i64_f64((loc_0 * 1.8014398509481984e16))
				reg_0 = rt_wrap_i32_i64(rt_shr_u64(loc_7, rt_i64_from_u32(32, 0)))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_9 = reg_0
			loc_9 = rt_add_i32(loc_9, 614242)
			loc_5 = rt_convert_f64_i32(rt_add_i32(rt_shr_u32(loc_9, 20), loc_10))
			loc_1 = (loc_5 * 3.0102999566361177e-1)
			loc_0 = (rt_reinterpret_f64_i64(rt_bit_or_i64(rt_bit_and_i64(loc_7, rt_i64_from_u32(4294967295, 0)), rt_shl_i64(rt_extend_i64_u32(rt_add_i32(bit_and(loc_9, 1048575), 1072079006)), rt_i64_from_u32(32, 0)))) + -1e0)
			loc_3 = (loc_0 * (loc_0 * 5e-1))
			loc_4 = rt_reinterpret_f64_i64(rt_bit_and_i64(rt_reinterpret_i64_f64((loc_0 - loc_3)), rt_i64_from_u32(0, 4294967295)))
			loc_2 = (loc_4 * 4.342944818781689e-1)
			loc_6 = (loc_1 + loc_2)
			reg_1 = (loc_2 + (loc_1 - loc_6))
			loc_1 = (loc_0 / (loc_0 + 2e0))
			loc_2 = (loc_1 * loc_1)
			reg_2 = loc_1
			loc_1 = (loc_2 * loc_2)
			loc_0 = ((reg_2 * (loc_3 + ((loc_1 * ((loc_1 * ((loc_1 * 1.5313837699209373e-1) + 2.2222198432149784e-1)) + 3.999999999940942e-1)) + (loc_2 * ((loc_1 * ((loc_1 * ((loc_1 * 1.4798198605116586e-1) + 1.818357216161805e-1)) + 2.857142874366239e-1)) + 6.666666666666735e-1))))) + ((loc_0 - loc_4) - loc_3))
			loc_0 = (loc_6 + (reg_1 + ((loc_0 * 4.342944818781689e-1) + ((loc_5 * 3.694239077158931e-13) + ((loc_0 + loc_4) * 2.5082946711645275e-11)))))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[641] = --[[ log2 ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = 0.0
	local loc_7 = 0.0
	local loc_8 = 0
	local loc_9 = rt_i64_ZERO
	local loc_10 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[639](loc_0)
		loc_8 = reg_0
		loc_9 = rt_reinterpret_i64_f64(loc_0)
		if rt_le_u64(rt_sub_i64(loc_9, rt_i64_from_u32(0, 1072604335)), rt_i64_from_u32(4294967295, 135337)) then
			while true do
				if rt_eq_i64(loc_9, rt_i64_from_u32(0, 1072693248)) then
					while true do
						reg_0 = 0e0
						desired = 0
						break
					end
					if desired then
						break
					end
				end
				loc_2 = rt_load_f64(memory_at_0, 15552)
				loc_0 = (loc_0 + -1e0)
				loc_3 = rt_reinterpret_f64_i64(rt_bit_and_i64(rt_reinterpret_i64_f64(loc_0), rt_i64_from_u32(0, 4294967295)))
				loc_4 = (loc_2 * loc_3)
				loc_1 = (loc_0 * loc_0)
				loc_5 = (loc_1 * ((loc_0 * rt_load_f64(memory_at_0, 15624)) + rt_load_f64(memory_at_0, 15616)))
				loc_6 = (loc_4 + loc_5)
				loc_7 = (loc_1 * loc_1)
				reg_0 = (loc_6 + ((loc_7 * ((loc_7 * ((loc_1 * ((loc_0 * rt_load_f64(memory_at_0, 15688)) + rt_load_f64(memory_at_0, 15680))) + ((loc_0 * rt_load_f64(memory_at_0, 15672)) + rt_load_f64(memory_at_0, 15664)))) + ((loc_1 * ((loc_0 * rt_load_f64(memory_at_0, 15656)) + rt_load_f64(memory_at_0, 15648))) + ((loc_0 * rt_load_f64(memory_at_0, 15640)) + rt_load_f64(memory_at_0, 15632))))) + ((((loc_0 - loc_3) * loc_2) + (loc_0 * rt_load_f64(memory_at_0, 15560))) + (loc_5 + (loc_4 - loc_6)))))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			if rt_sub_i32(loc_8, 32752) <= 4294934559 then
				while true do
					if loc_0 == 0e0 then
						while true do
							reg_0 = FUNC_LIST[635](1)
							desired = 0
							break
						end
						if desired then
							break
						end
					end
					if rt_eq_i64(loc_9, rt_i64_from_u32(0, 2146435072)) then
						desired = 1
						break
					end
					if bit_and((if bit_and(loc_8, 32752) ~= 32752 then 1 else 0), (if loc_8 <= 32767 then 1 else 0)) == 0 then
						while true do
							reg_0 = FUNC_LIST[637](loc_0)
							desired = 0
							break
						end
						if desired then
							break
						end
					end
					reg_0 = rt_sub_i64(rt_reinterpret_i64_f64((loc_0 * 4.503599627370496e15)), rt_i64_from_u32(0, 54525952))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_9
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_9 = reg_0
			loc_10 = rt_sub_i64(loc_9, rt_i64_from_u32(0, 1072037888))
			loc_8 = rt_shl_i32(bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_10, rt_i64_from_u32(46, 0))), 63), 4)
			loc_2 = (rt_load_f64(memory_at_0, rt_add_i32(loc_8, 15704)) + rt_convert_f64_i32(rt_wrap_i32_i64(rt_shr_i64(loc_10, rt_i64_from_u32(52, 0)))))
			loc_3 = rt_load_f64(memory_at_0, 15552)
			loc_0 = (rt_load_f64(memory_at_0, rt_add_i32(loc_8, 15696)) * ((rt_reinterpret_f64_i64(rt_sub_i64(loc_9, rt_bit_and_i64(loc_10, rt_i64_from_u32(0, 4293918720)))) - rt_load_f64(memory_at_0, rt_add_i32(loc_8, 16720))) - rt_load_f64(memory_at_0, rt_add_i32(loc_8, 16728))))
			loc_4 = rt_reinterpret_f64_i64(rt_bit_and_i64(rt_reinterpret_i64_f64(loc_0), rt_i64_from_u32(0, 4294967295)))
			loc_5 = (loc_3 * loc_4)
			loc_6 = (loc_2 + loc_5)
			loc_1 = (loc_0 * loc_0)
			loc_0 = (loc_6 + ((loc_1 * (((loc_1 * loc_1) * ((loc_0 * rt_load_f64(memory_at_0, 15608)) + rt_load_f64(memory_at_0, 15600))) + ((loc_1 * ((loc_0 * rt_load_f64(memory_at_0, 15592)) + rt_load_f64(memory_at_0, 15584))) + ((loc_0 * rt_load_f64(memory_at_0, 15576)) + rt_load_f64(memory_at_0, 15568))))) + ((((loc_0 - loc_4) * loc_3) + (rt_load_f64(memory_at_0, 15560) * loc_0)) + (loc_5 + (loc_2 - loc_6)))))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[642] = --[[ pow ]] function(loc_0, loc_1)
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = rt_i64_ZERO
	local loc_5 = rt_i64_ZERO
	local loc_6 = rt_i64_ZERO
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_9 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_9
		reg_0 = FUNC_LIST[616](loc_0)
		loc_8 = reg_0
		reg_0 = FUNC_LIST[616](loc_1)
		loc_11 = reg_0
		loc_12 = bit_and(loc_11, 2047)
		loc_10 = rt_sub_i32(loc_12, 1086)
		loc_5 = rt_reinterpret_i64_f64(loc_1)
		loc_4 = rt_reinterpret_i64_f64(loc_0)
		while true do
			while true do
				if rt_sub_i32(loc_8, 2047) >= 4294965250 then
					while true do
						if loc_10 > 4294967167 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[643](loc_5)
				if reg_0 ~= 0 then
					while true do
						loc_2 = 1e0
						if rt_eq_i64(loc_4, rt_i64_from_u32(0, 1072693248)) then
							desired = 1
							break
						end
						loc_6 = rt_shl_i64(loc_5, rt_i64_ONE)
						if rt_eq_i64(loc_6, rt_i64_ZERO) then
							desired = 1
							break
						end
						loc_4 = rt_shl_i64(loc_4, rt_i64_ONE)
						if bit_and((if rt_lt_u64(loc_6, rt_i64_from_u32(1, 4292870144)) then 1 else 0), (if rt_le_u64(loc_4, rt_i64_from_u32(0, 4292870144)) then 1 else 0)) == 0 then
							while true do
								loc_2 = (loc_0 + loc_1)
								desired = 1
								break
							end
							if desired then
								break
							end
						end
						if rt_eq_i64(loc_4, rt_i64_from_u32(0, 2145386496)) then
							desired = 1
							break
						end
						loc_2 = (if bit_xor((if rt_lt_i64(loc_5, rt_i64_ZERO) then 1 else 0), (if rt_lt_u64(loc_4, rt_i64_from_u32(0, 2145386496)) then 1 else 0)) ~= 0 then 0e0 else (loc_1 * loc_1))
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[643](loc_4)
				if reg_0 ~= 0 then
					while true do
						loc_2 = (loc_0 * loc_0)
						if rt_lt_i64(loc_4, rt_i64_ZERO) then
							while true do
								reg_2 = FUNC_LIST[644](loc_5)
								reg_0 = (if reg_2 == 1 then rt_neg_f64(loc_2) else loc_2)
								break
							end
							if desired then
								break
							end
						else
							while true do
								reg_0 = loc_2
								break
							end
							if desired then
								break
							end
						end
						loc_2 = reg_0
						if rt_ge_i64(loc_5, rt_i64_ZERO) then
							desired = 1
							break
						end
						reg_0 = FUNC_LIST[636]((1e0 / loc_2))
						loc_2 = reg_0
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_lt_i64(loc_4, rt_i64_ZERO) then
					while true do
						reg_0 = FUNC_LIST[644](loc_5)
						loc_7 = reg_0
						if loc_7 == 0 then
							while true do
								reg_0 = FUNC_LIST[637](loc_0)
								loc_2 = reg_0
								desired = 1
								break
							end
							if desired then
								break
							end
						end
						loc_8 = bit_and(loc_8, 2047)
						loc_7 = rt_shl_i32((if loc_7 == 1 then 1 else 0), 18)
						reg_0 = rt_bit_and_i64(rt_reinterpret_i64_f64(loc_0), rt_i64_from_u32(4294967295, 2147483647))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_4
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_4 = reg_0
				if loc_10 <= 4294967167 then
					while true do
						loc_2 = 1e0
						if rt_eq_i64(loc_4, rt_i64_from_u32(0, 1072693248)) then
							desired = 1
							break
						end
						if loc_12 <= 957 then
							while true do
								loc_2 = ((if rt_gt_u64(loc_4, rt_i64_from_u32(0, 1072693248)) then loc_1 else rt_neg_f64(loc_1)) + 1e0)
								desired = 1
								break
							end
							if desired then
								break
							end
						end
						if (if loc_11 > 2047 then 1 else 0) ~= (if rt_gt_u64(loc_4, rt_i64_from_u32(0, 1072693248)) then 1 else 0) then
							while true do
								reg_0 = FUNC_LIST[614](0)
								loc_2 = reg_0
								desired = 1
								break
							end
							if desired then
								break
							end
						end
						reg_0 = FUNC_LIST[613](0)
						loc_2 = reg_0
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_8 ~= 0 then
					break
				end
				loc_4 = rt_sub_i64(rt_bit_and_i64(rt_reinterpret_i64_f64((loc_0 * 4.503599627370496e15)), rt_i64_from_u32(4294967295, 2147483647)), rt_i64_from_u32(0, 54525952))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = rt_reinterpret_f64_i64(rt_bit_and_i64(loc_5, rt_i64_from_u32(4160749568, 4294967295)))
			reg_1 = FUNC_LIST[645](loc_4, rt_add_i32(loc_9, 8))
			loc_3 = reg_1
			loc_0 = rt_reinterpret_f64_i64(rt_bit_and_i64(rt_reinterpret_i64_f64(loc_3), rt_i64_from_u32(4160749568, 4294967295)))
			reg_0 = FUNC_LIST[646]((loc_2 * loc_0), (((loc_1 - loc_2) * loc_0) + (loc_1 * (rt_load_f64(memory_at_0, loc_9 + 8) + (loc_3 - loc_0)))), loc_7)
			loc_2 = reg_0
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_9, 16)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[643] = --[[ zeroinfnan ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = (if rt_lt_u64(rt_add_i64(rt_shl_i64(loc_0, rt_i64_ONE), rt_i64_from_u32(0, 2097152)), rt_i64_from_u32(1, 2097152)) then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[644] = --[[ checkint ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = rt_i64_ZERO
	local reg_0
	while true do
		while true do
			loc_1 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_0, rt_i64_from_u32(52, 0))), 2047)
			reg_0 = 0
			if loc_1 < 1023 then
				break
			end
			reg_0 = 2
			if loc_1 > 1075 then
				break
			end
			loc_2 = rt_shl_i64(rt_i64_ONE, rt_extend_i64_u32(rt_sub_i32(1075, loc_1)))
			reg_0 = 0
			if rt_ne_i64(rt_bit_and_i64(loc_0, rt_sub_i64(loc_2, rt_i64_ONE)), rt_i64_ZERO) then
				break
			end
			reg_0 = (if rt_eq_i64(rt_bit_and_i64(loc_0, loc_2), rt_i64_ZERO) then 2 else 1)
			break
		end
		break
	end
	return reg_0
end
FUNC_LIST[645] = --[[ log_inline ]] function(loc_0, loc_1)
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = 0.0
	local loc_7 = 0.0
	local loc_8 = rt_i64_ZERO
	local loc_9 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	while true do
		loc_8 = rt_sub_i64(loc_0, rt_i64_from_u32(0, 1072076117))
		loc_3 = rt_convert_f64_i32(rt_wrap_i32_i64(rt_shr_i64(loc_8, rt_i64_from_u32(52, 0))))
		loc_9 = rt_shl_i32(bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_8, rt_i64_from_u32(45, 0))), 127), 5)
		loc_0 = rt_sub_i64(loc_0, rt_bit_and_i64(loc_8, rt_i64_from_u32(0, 4293918720)))
		loc_2 = rt_reinterpret_f64_i64(rt_bit_and_i64(rt_add_i64(loc_0, rt_i64_from_u32(2147483648, 0)), rt_i64_from_u32(0, 4294967295)))
		loc_5 = rt_load_f64(memory_at_0, rt_add_i32(loc_9, 22056))
		loc_4 = ((loc_2 * loc_5) + -1e0)
		loc_5 = ((rt_reinterpret_f64_i64(loc_0) - loc_2) * loc_5)
		loc_2 = (loc_4 + loc_5)
		reg_1 = ((loc_3 * rt_load_f64(memory_at_0, 21992)) + rt_load_f64(memory_at_0, rt_add_i32(loc_9, 22080)))
		loc_3 = ((loc_3 * rt_load_f64(memory_at_0, 21984)) + rt_load_f64(memory_at_0, rt_add_i32(loc_9, 22072)))
		reg_3 = loc_3
		loc_3 = (loc_2 + loc_3)
		loc_6 = rt_load_f64(memory_at_0, 22000)
		loc_7 = (loc_2 * loc_6)
		loc_6 = (loc_4 * loc_6)
		loc_4 = (loc_4 * loc_6)
		reg_2 = loc_4
		loc_4 = (loc_3 + loc_4)
		reg_1 = (((reg_1 + (loc_2 + (reg_3 - loc_3))) + (loc_5 * (loc_7 + loc_6))) + (reg_2 + (loc_3 - loc_4)))
		loc_3 = (loc_2 * loc_7)
		loc_2 = (reg_1 + ((loc_2 * loc_3) * ((loc_3 * ((loc_3 * ((loc_2 * rt_load_f64(memory_at_0, 22048)) + rt_load_f64(memory_at_0, 22040))) + ((loc_2 * rt_load_f64(memory_at_0, 22032)) + rt_load_f64(memory_at_0, 22024)))) + ((loc_2 * rt_load_f64(memory_at_0, 22016)) + rt_load_f64(memory_at_0, 22008)))))
		reg_1 = loc_2
		loc_2 = (loc_4 + loc_2)
		rt_store_f64(memory_at_0, loc_1, (reg_1 + (loc_4 - loc_2)))
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[646] = --[[ exp_inline ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0.0
	local loc_6 = 0.0
	local loc_7 = rt_i64_ZERO
	local loc_8 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			reg_0 = FUNC_LIST[616](loc_0)
			loc_4 = bit_and(reg_0, 2047)
			reg_1 = FUNC_LIST[616](5.551115123125783e-17)
			loc_3 = reg_1
			reg_1 = FUNC_LIST[616](5.12e2)
			if rt_sub_i32(loc_4, loc_3) < rt_sub_i32(reg_1, loc_3) then
				break
			end
			if loc_3 > loc_4 then
				while true do
					loc_0 = (loc_0 + 1e0)
					reg_0 = (if loc_2 ~= 0 then rt_neg_f64(loc_0) else loc_0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[616](1.024e3)
			loc_3 = (if reg_0 > loc_4 then 1 else 0)
			loc_4 = 0
			if loc_3 ~= 0 then
				break
			end
			if rt_lt_i64(rt_reinterpret_i64_f64(loc_0), rt_i64_ZERO) then
				while true do
					reg_0 = FUNC_LIST[613](loc_2)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[614](loc_2)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_5 = rt_load_f64(memory_at_0, 13400)
		loc_6 = ((loc_0 * rt_load_f64(memory_at_0, 13392)) + loc_5)
		loc_5 = (loc_6 - loc_5)
		loc_0 = (loc_1 + ((loc_5 * rt_load_f64(memory_at_0, 13416)) + ((loc_5 * rt_load_f64(memory_at_0, 13408)) + loc_0)))
		loc_1 = (loc_0 * loc_0)
		loc_7 = rt_reinterpret_i64_f64(loc_6)
		loc_3 = bit_and(rt_shl_i32(rt_wrap_i32_i64(loc_7), 4), 2032)
		loc_0 = (((loc_1 * loc_1) * ((loc_0 * rt_load_f64(memory_at_0, 13448)) + rt_load_f64(memory_at_0, 13440))) + ((loc_1 * ((loc_0 * rt_load_f64(memory_at_0, 13432)) + rt_load_f64(memory_at_0, 13424))) + (rt_load_f64(memory_at_0, rt_add_i32(loc_3, 13504)) + loc_0)))
		loc_8 = rt_add_i64(rt_load_i64(memory_at_0, rt_add_i32(loc_3, 13512)), rt_shl_i64(rt_add_i64(rt_extend_i64_u32(loc_2), loc_7), rt_i64_from_u32(45, 0)))
		if loc_4 == 0 then
			while true do
				reg_0 = FUNC_LIST[647](loc_0, loc_8, loc_7)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_1 = rt_reinterpret_f64_i64(loc_8)
		reg_0 = ((loc_1 * loc_0) + loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[647] = --[[ specialcase_661 ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = 0.0
	local reg_0
	local desired
	while true do
		if rt_eq_i64(rt_bit_and_i64(loc_2, rt_i64_from_u32(2147483648, 0)), rt_i64_ZERO) then
			while true do
				loc_3 = rt_reinterpret_f64_i64(rt_sub_i64(loc_1, rt_i64_from_u32(0, 1058013184)))
				reg_0 = (((loc_3 * loc_0) + loc_3) * 5.486124068793689e303)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_2 = rt_add_i64(loc_1, rt_i64_from_u32(0, 1071644672))
		loc_3 = rt_reinterpret_f64_i64(loc_2)
		loc_5 = (loc_3 * loc_0)
		loc_0 = (loc_5 + loc_3)
		reg_0 = FUNC_LIST[701](loc_0)
		if reg_0 < 1e0 then
			while true do
				reg_0 = FUNC_LIST[636](2.2250738585072014e-308)
				FUNC_LIST[619]((reg_0 * 2.2250738585072014e-308))
				loc_4 = (if loc_0 < 0e0 then -1e0 else 1e0)
				loc_6 = (loc_0 + loc_4)
				loc_0 = ((loc_6 + ((loc_5 + (loc_3 - loc_0)) + (loc_0 + (loc_4 - loc_6)))) - loc_4)
				reg_0 = (if loc_0 == 0e0 then rt_reinterpret_f64_i64(rt_bit_and_i64(loc_2, rt_i64_from_u32(0, 2147483648))) else loc_0)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_0 = reg_0
		reg_0 = (loc_0 * 2.2250738585072014e-308)
		break
	end
	return reg_0
end
FUNC_LIST[648] = --[[ scalbn ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		while true do
			if rt_ge_i32(loc_1, 1024) then
				while true do
					loc_0 = (loc_0 * 8.98846567431158e307)
					if loc_1 < 2047 then
						while true do
							loc_1 = rt_sub_i32(loc_1, 1023)
							desired = 1
							break
						end
						if desired then
							break
						end
					end
					loc_0 = (loc_0 * 8.98846567431158e307)
					loc_1 = rt_sub_i32((if loc_1 >= 3069 then 3069 else loc_1), 2046)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_gt_i32(loc_1, 4294966273) then
				break
			end
			loc_0 = (loc_0 * 2.004168360008973e-292)
			if loc_1 > 4294965304 then
				while true do
					loc_1 = rt_add_i32(loc_1, 969)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_0 = (loc_0 * 2.004168360008973e-292)
			loc_1 = rt_add_i32((if loc_1 <= 4294964336 then 4294964336 else loc_1), 1938)
			break
		end
		reg_0 = (loc_0 * rt_reinterpret_f64_i64(rt_shl_i64(rt_extend_i64_u32(rt_add_i32(loc_1, 1023)), rt_i64_from_u32(52, 0))))
		break
	end
	return reg_0
end
FUNC_LIST[649] = --[[ strlen ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				loc_1 = loc_0
				if bit_and(loc_1, 3) == 0 then
					break
				end
				if rt_load_i32_u8(memory_at_0, loc_1) == 0 then
					while true do
						reg_0 = 0
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				while true do
					loc_1 = rt_add_i32(loc_1, 1)
					if bit_and(loc_1, 3) == 0 then
						desired = 2
						break
					end
					if rt_load_i32_u8(memory_at_0, loc_1) ~= 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_2 = loc_1
				loc_1 = rt_add_i32(loc_2, 4)
				loc_3 = rt_load_i32(memory_at_0, loc_2)
				if bit_and(bit_or(rt_sub_i32(16843008, loc_3), loc_3), 2155905152) == 2155905152 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_1 = loc_2
				loc_2 = rt_add_i32(loc_1, 1)
				if rt_load_i32_u8(memory_at_0, loc_1) ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = rt_sub_i32(loc_1, loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[650] = --[[ __fpclassifyl ]] function(loc_0, loc_1)
	local loc_2 = rt_i64_ZERO
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_bit_and_i64(loc_1, rt_i64_from_u32(4294967295, 65535))
		while true do
			loc_3 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_1, rt_i64_from_u32(48, 0))), 32767)
			if loc_3 ~= 32767 then
				while true do
					reg_0 = 4
					if loc_3 ~= 0 then
						desired = 1
						break
					end
					reg_0 = (if rt_eq_i64(rt_bit_or_i64(loc_0, loc_2), rt_i64_ZERO) then 2 else 3)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = (if rt_eq_i64(rt_bit_or_i64(loc_0, loc_2), rt_i64_ZERO) then 1 else 0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
	return reg_0
end
FUNC_LIST[651] = --[[ fmodl ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = rt_i64_ZERO
	local loc_10 = rt_i64_ZERO
	local loc_11 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 128)
		GLOBAL_LIST[0].value = loc_5
		while true do
			while true do
				while true do
					reg_0 = FUNC_LIST[660](loc_3, loc_4, rt_i64_ZERO, rt_i64_ZERO)
					if reg_0 == 0 then
						break
					end
					reg_0 = FUNC_LIST[650](loc_3, loc_4)
					if reg_0 == 0 then
						break
					end
					loc_8 = rt_wrap_i32_i64(rt_shr_u64(loc_2, rt_i64_from_u32(48, 0)))
					loc_6 = bit_and(loc_8, 32767)
					if loc_6 ~= 32767 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[671](rt_add_i32(loc_5, 16), loc_1, loc_2, loc_3, loc_4)
				loc_4 = rt_load_i64(memory_at_0, loc_5 + 16)
				loc_3 = rt_load_i64(memory_at_0, loc_5 + 24)
				FUNC_LIST[663](loc_5, loc_4, loc_3, loc_4, loc_3)
				loc_2 = rt_load_i64(memory_at_0, loc_5 + 8)
				loc_4 = rt_load_i64(memory_at_0, loc_5)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_10 = rt_bit_and_i64(loc_2, rt_i64_from_u32(4294967295, 2147483647))
			loc_9 = rt_bit_and_i64(loc_4, rt_i64_from_u32(4294967295, 2147483647))
			reg_0 = FUNC_LIST[660](loc_1, loc_10, loc_3, loc_9)
			if rt_le_i32(reg_0, 0) then
				while true do
					reg_0 = FUNC_LIST[660](loc_1, loc_10, loc_3, loc_9)
					if reg_0 ~= 0 then
						while true do
							loc_4 = loc_1
							desired = 1
							break
						end
						if desired then
							break
						end
					end
					FUNC_LIST[671](rt_add_i32(loc_5, 112), loc_1, loc_2, rt_i64_ZERO, rt_i64_ZERO)
					loc_2 = rt_load_i64(memory_at_0, loc_5 + 120)
					loc_4 = rt_load_i64(memory_at_0, loc_5 + 112)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_7 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_4, rt_i64_from_u32(48, 0))), 32767)
			if loc_6 ~= 0 then
				while true do
					reg_0 = loc_1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					FUNC_LIST[671](rt_add_i32(loc_5, 96), loc_1, loc_10, rt_i64_ZERO, rt_i64_from_u32(0, 1081540608))
					loc_10 = rt_load_i64(memory_at_0, loc_5 + 104)
					loc_6 = rt_sub_i32(rt_wrap_i32_i64(rt_shr_u64(loc_10, rt_i64_from_u32(48, 0))), 120)
					reg_0 = rt_load_i64(memory_at_0, loc_5 + 96)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = reg_0
			if loc_7 ~= 0 then
				while true do
					reg_0 = loc_3
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					FUNC_LIST[671](rt_add_i32(loc_5, 80), loc_3, loc_9, rt_i64_ZERO, rt_i64_from_u32(0, 1081540608))
					loc_9 = rt_load_i64(memory_at_0, loc_5 + 88)
					loc_7 = rt_sub_i32(rt_wrap_i32_i64(rt_shr_u64(loc_9, rt_i64_from_u32(48, 0))), 120)
					reg_0 = rt_load_i64(memory_at_0, loc_5 + 80)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = reg_0
			loc_11 = rt_bit_or_i64(rt_bit_and_i64(loc_9, rt_i64_from_u32(4294967295, 65535)), rt_i64_from_u32(0, 65536))
			loc_10 = rt_bit_or_i64(rt_bit_and_i64(loc_10, rt_i64_from_u32(4294967295, 65535)), rt_i64_from_u32(0, 65536))
			if rt_gt_i32(loc_6, loc_7) then
				while true do
					while true do
						while true do
							loc_9 = rt_sub_i64(rt_sub_i64(loc_10, loc_11), rt_extend_i64_u32((if rt_gt_u64(loc_3, loc_4) then 1 else 0)))
							if rt_ge_i64(loc_9, rt_i64_ZERO) then
								while true do
									loc_4 = rt_sub_i64(loc_4, loc_3)
									if rt_eq_i64(rt_bit_or_i64(loc_4, loc_9), rt_i64_ZERO) then
										while true do
											FUNC_LIST[671](rt_add_i32(loc_5, 32), loc_1, loc_2, rt_i64_ZERO, rt_i64_ZERO)
											loc_2 = rt_load_i64(memory_at_0, loc_5 + 40)
											loc_4 = rt_load_i64(memory_at_0, loc_5 + 32)
											desired = 1
											break
										end
										if desired then
											break
										end
									end
									reg_0 = rt_bit_or_i64(rt_shl_i64(loc_9, rt_i64_ONE), rt_shr_u64(loc_4, rt_i64_from_u32(63, 0)))
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							reg_0 = rt_bit_or_i64(rt_shl_i64(loc_10, rt_i64_ONE), rt_shr_u64(loc_4, rt_i64_from_u32(63, 0)))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
						loc_10 = reg_0
						loc_4 = rt_shl_i64(loc_4, rt_i64_ONE)
						loc_6 = rt_sub_i32(loc_6, 1)
						if rt_lt_i32(loc_7, loc_6) then
							continue
						end
						break
					end
					if desired then
						break
					end
					reg_0 = loc_7
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_6
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_6 = reg_0
			while true do
				loc_9 = rt_sub_i64(rt_sub_i64(loc_10, loc_11), rt_extend_i64_u32((if rt_gt_u64(loc_3, loc_4) then 1 else 0)))
				if rt_lt_i64(loc_9, rt_i64_ZERO) then
					while true do
						loc_9 = loc_10
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_4 = rt_sub_i64(loc_4, loc_3)
				if rt_ne_i64(rt_bit_or_i64(loc_4, loc_9), rt_i64_ZERO) then
					break
				end
				FUNC_LIST[671](rt_add_i32(loc_5, 48), loc_1, loc_2, rt_i64_ZERO, rt_i64_ZERO)
				loc_2 = rt_load_i64(memory_at_0, loc_5 + 56)
				loc_4 = rt_load_i64(memory_at_0, loc_5 + 48)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if rt_le_u64(loc_9, rt_i64_from_u32(4294967295, 65535)) then
				while true do
					while true do
						loc_3 = rt_shr_u64(loc_4, rt_i64_from_u32(63, 0))
						loc_6 = rt_sub_i32(loc_6, 1)
						loc_4 = rt_shl_i64(loc_4, rt_i64_ONE)
						loc_9 = rt_bit_or_i64(rt_shl_i64(loc_9, rt_i64_ONE), loc_3)
						if rt_lt_u64(loc_9, rt_i64_from_u32(0, 65536)) then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_7 = bit_and(loc_8, 32768)
			if rt_le_i32(loc_6, 0) then
				while true do
					FUNC_LIST[671](rt_sub_i32(loc_5, 4294967232), loc_4, rt_bit_or_i64(rt_bit_and_i64(loc_9, rt_i64_from_u32(4294967295, 65535)), rt_shl_i64(rt_extend_i64_u32(bit_or(loc_7, rt_add_i32(loc_6, 120))), rt_i64_from_u32(48, 0))), rt_i64_ZERO, rt_i64_from_u32(0, 1065811968))
					loc_2 = rt_load_i64(memory_at_0, loc_5 + 72)
					loc_4 = rt_load_i64(memory_at_0, loc_5 + 64)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = rt_bit_or_i64(rt_bit_and_i64(loc_9, rt_i64_from_u32(4294967295, 65535)), rt_shl_i64(rt_extend_i64_u32(bit_or(loc_6, loc_7)), rt_i64_from_u32(48, 0)))
			break
		end
		rt_store_i64(memory_at_0, loc_0, loc_4)
		rt_store_i64(memory_at_0, loc_0 + 8, loc_2)
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 128)
		break
	end
end
FUNC_LIST[652] = --[[ emscripten_builtin_malloc ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_10 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_10
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												if loc_0 <= 244 then
													while true do
														loc_6 = rt_load_i32(memory_at_0, 36380)
														loc_5 = (if loc_0 < 11 then 16 else bit_and(rt_add_i32(loc_0, 11), 504))
														loc_1 = rt_shr_u32(loc_5, 3)
														loc_0 = rt_shr_u32(loc_6, loc_1)
														if bit_and(loc_0, 3) ~= 0 then
															while true do
																while true do
																	loc_5 = rt_add_i32(loc_1, bit_and(bit_xor(loc_0, 4294967295), 1))
																	loc_1 = rt_shl_i32(loc_5, 3)
																	loc_0 = rt_add_i32(loc_1, 36420)
																	loc_1 = rt_load_i32(memory_at_0, rt_add_i32(loc_1, 36428))
																	loc_2 = rt_load_i32(memory_at_0, loc_1 + 8)
																	if loc_0 == loc_2 then
																		while true do
																			rt_store_i32(memory_at_0, 36380, bit_and(rt_rotl_i32(4294967294, loc_5), loc_6))
																			desired = 13
																			break
																		end
																		if desired then
																			if desired == 13 then
																				desired = nil
																			end
																			break
																		end
																	end
																	rt_store_i32(memory_at_0, loc_2 + 12, loc_0)
																	rt_store_i32(memory_at_0, loc_0 + 8, loc_2)
																	break
																end
																if desired then
																	break
																end
																loc_0 = rt_add_i32(loc_1, 8)
																loc_5 = rt_shl_i32(loc_5, 3)
																rt_store_i32(memory_at_0, loc_1 + 4, bit_or(loc_5, 3))
																loc_1 = rt_add_i32(loc_1, loc_5)
																rt_store_i32(memory_at_0, loc_1 + 4, bit_or(rt_load_i32(memory_at_0, loc_1 + 4), 1))
																desired = 1
																break
															end
															if desired then
																break
															end
														end
														loc_7 = rt_load_i32(memory_at_0, 36388)
														if loc_7 >= loc_5 then
															desired = 10
															break
														end
														if loc_0 ~= 0 then
															while true do
																while true do
																	reg_0 = rt_shl_i32(loc_0, loc_1)
																	loc_0 = rt_shl_i32(2, loc_1)
																	loc_1 = bit_countrz(bit_and(reg_0, bit_or(loc_0, rt_sub_i32(0, loc_0))))
																	loc_0 = rt_shl_i32(loc_1, 3)
																	loc_2 = rt_add_i32(loc_0, 36420)
																	loc_0 = rt_load_i32(memory_at_0, rt_add_i32(loc_0, 36428))
																	loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
																	if loc_2 == loc_3 then
																		while true do
																			loc_6 = bit_and(rt_rotl_i32(4294967294, loc_1), loc_6)
																			rt_store_i32(memory_at_0, 36380, loc_6)
																			desired = 13
																			break
																		end
																		if desired then
																			if desired == 13 then
																				desired = nil
																			end
																			break
																		end
																	end
																	rt_store_i32(memory_at_0, loc_3 + 12, loc_2)
																	rt_store_i32(memory_at_0, loc_2 + 8, loc_3)
																	break
																end
																if desired then
																	break
																end
																rt_store_i32(memory_at_0, loc_0 + 4, bit_or(loc_5, 3))
																loc_3 = rt_add_i32(loc_0, loc_5)
																loc_1 = rt_shl_i32(loc_1, 3)
																loc_5 = rt_sub_i32(loc_1, loc_5)
																rt_store_i32(memory_at_0, loc_3 + 4, bit_or(loc_5, 1))
																rt_store_i32(memory_at_0, rt_add_i32(loc_0, loc_1), loc_5)
																if loc_7 ~= 0 then
																	while true do
																		loc_2 = rt_add_i32(bit_and(loc_7, 4294967288), 36420)
																		loc_1 = rt_load_i32(memory_at_0, 36400)
																		while true do
																			loc_4 = rt_shl_i32(1, rt_shr_u32(loc_7, 3))
																			if bit_and(loc_4, loc_6) == 0 then
																				while true do
																					rt_store_i32(memory_at_0, 36380, bit_or(loc_4, loc_6))
																					reg_0 = loc_2
																					desired = 14
																					break
																				end
																				if desired then
																					if desired == 14 then
																						desired = nil
																					end
																					break
																				end
																			end
																			reg_0 = rt_load_i32(memory_at_0, loc_2 + 8)
																			break
																		end
																		if desired then
																			break
																		end
																		loc_4 = reg_0
																		rt_store_i32(memory_at_0, loc_2 + 8, loc_1)
																		rt_store_i32(memory_at_0, loc_4 + 12, loc_1)
																		rt_store_i32(memory_at_0, loc_1 + 12, loc_2)
																		rt_store_i32(memory_at_0, loc_1 + 8, loc_4)
																		break
																	end
																	if desired then
																		break
																	end
																end
																loc_0 = rt_add_i32(loc_0, 8)
																rt_store_i32(memory_at_0, 36400, loc_3)
																rt_store_i32(memory_at_0, 36388, loc_5)
																desired = 1
																break
															end
															if desired then
																break
															end
														end
														loc_11 = rt_load_i32(memory_at_0, 36384)
														if loc_11 == 0 then
															desired = 10
															break
														end
														loc_3 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(bit_countrz(loc_11), 2), 36684))
														loc_1 = rt_sub_i32(bit_and(rt_load_i32(memory_at_0, loc_3 + 4), 4294967288), loc_5)
														loc_2 = loc_3
														while true do
															while true do
																loc_0 = rt_load_i32(memory_at_0, loc_2 + 16)
																if loc_0 == 0 then
																	while true do
																		loc_0 = rt_load_i32(memory_at_0, loc_2 + 20)
																		if loc_0 == 0 then
																			desired = 13
																			break
																		end
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																end
																loc_2 = rt_sub_i32(bit_and(rt_load_i32(memory_at_0, loc_0 + 4), 4294967288), loc_5)
																reg_0 = loc_2
																loc_2 = (if loc_1 > loc_2 then 1 else 0)
																loc_1 = (if loc_2 ~= 0 then reg_0 else loc_1)
																loc_3 = (if loc_2 ~= 0 then loc_0 else loc_3)
																loc_2 = loc_0
																desired = 12
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																	continue
																end
																break
															end
															break
														end
														if desired then
															break
														end
														loc_8 = rt_load_i32(memory_at_0, loc_3 + 24)
														loc_0 = rt_load_i32(memory_at_0, loc_3 + 12)
														if loc_0 ~= loc_3 then
															while true do
																loc_2 = rt_load_i32(memory_at_0, loc_3 + 8)
																rt_store_i32(memory_at_0, loc_2 + 12, loc_0)
																rt_store_i32(memory_at_0, loc_0 + 8, loc_2)
																desired = 2
																break
															end
															if desired then
																break
															end
														end
														loc_2 = rt_load_i32(memory_at_0, loc_3 + 20)
														if loc_2 ~= 0 then
															while true do
																reg_0 = rt_add_i32(loc_3, 20)
																break
															end
															if desired then
																break
															end
														else
															while true do
																loc_2 = rt_load_i32(memory_at_0, loc_3 + 16)
																if loc_2 == 0 then
																	desired = 9
																	break
																end
																reg_0 = rt_add_i32(loc_3, 16)
																break
															end
															if desired then
																break
															end
														end
														loc_4 = reg_0
														while true do
															loc_9 = loc_4
															loc_0 = loc_2
															loc_4 = rt_add_i32(loc_0, 20)
															loc_2 = rt_load_i32(memory_at_0, loc_0 + 20)
															if loc_2 ~= 0 then
																continue
															end
															loc_4 = rt_add_i32(loc_0, 16)
															loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
															if loc_2 ~= 0 then
																continue
															end
															break
														end
														if desired then
															break
														end
														rt_store_i32(memory_at_0, loc_9, 0)
														desired = 2
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_5 = 4294967295
												if loc_0 > 4294967231 then
													break
												end
												loc_1 = rt_add_i32(loc_0, 11)
												loc_5 = bit_and(loc_1, 4294967288)
												loc_8 = rt_load_i32(memory_at_0, 36384)
												if loc_8 == 0 then
													break
												end
												loc_7 = 31
												if loc_0 <= 16777204 then
													while true do
														loc_0 = bit_countlz(rt_shr_u32(loc_1, 8))
														reg_0 = rt_add_i32(rt_sub_i32(bit_and(rt_shr_u32(loc_5, rt_sub_i32(38, loc_0)), 1), rt_shl_i32(loc_0, 1)), 62)
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												else
													while true do
														reg_0 = loc_7
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_7 = reg_0
												loc_1 = rt_sub_i32(0, loc_5)
												while true do
													while true do
														while true do
															loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_7, 2), 36684))
															if loc_2 == 0 then
																while true do
																	loc_0 = 0
																	desired = 13
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
															end
															loc_0 = 0
															loc_3 = rt_shl_i32(loc_5, (if loc_7 ~= 31 then rt_sub_i32(25, rt_shr_u32(loc_7, 1)) else 0))
															while true do
																while true do
																	loc_6 = rt_sub_i32(bit_and(rt_load_i32(memory_at_0, loc_2 + 4), 4294967288), loc_5)
																	if loc_1 <= loc_6 then
																		break
																	end
																	loc_4 = loc_2
																	loc_1 = loc_6
																	if loc_1 ~= 0 then
																		break
																	end
																	loc_1 = 0
																	loc_0 = loc_2
																	desired = 12
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																		continue
																	end
																	break
																end
																loc_6 = rt_load_i32(memory_at_0, loc_2 + 20)
																loc_9 = rt_load_i32(memory_at_0, rt_add_i32(bit_and(rt_shr_u32(loc_3, 29), 4), loc_2) + 16)
																loc_0 = (if loc_6 ~= 0 then (if loc_9 == loc_6 then loc_0 else loc_6) else loc_0)
																loc_3 = rt_shl_i32(loc_3, 1)
																loc_2 = loc_9
																if loc_2 ~= 0 then
																	continue
																end
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														if bit_or(loc_0, loc_4) ~= 0 then
															while true do
																reg_0 = loc_0
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														else
															while true do
																loc_4 = 0
																loc_0 = rt_shl_i32(2, loc_7)
																loc_0 = bit_and(loc_8, bit_or(loc_0, rt_sub_i32(0, loc_0)))
																if loc_0 == 0 then
																	desired = 10
																	break
																end
																reg_0 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(bit_countrz(loc_0), 2), 36684))
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
														end
														loc_0 = reg_0
														if loc_0 == 0 then
															desired = 11
															break
														end
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													while true do
														loc_6 = rt_sub_i32(bit_and(rt_load_i32(memory_at_0, loc_0 + 4), 4294967288), loc_5)
														loc_3 = (if loc_1 > loc_6 then 1 else 0)
														loc_1 = (if loc_3 ~= 0 then loc_6 else loc_1)
														loc_4 = (if loc_3 ~= 0 then loc_0 else loc_4)
														loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
														if loc_2 ~= 0 then
															while true do
																reg_0 = loc_2
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																	continue
																end
																break
															end
														else
															while true do
																reg_0 = rt_load_i32(memory_at_0, loc_0 + 20)
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																	continue
																end
																break
															end
														end
														loc_2 = reg_0
														loc_0 = loc_2
														if loc_0 ~= 0 then
															continue
														end
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												if loc_4 == 0 then
													break
												end
												if rt_sub_i32(rt_load_i32(memory_at_0, 36388), loc_5) <= loc_1 then
													break
												end
												loc_9 = rt_load_i32(memory_at_0, loc_4 + 24)
												loc_0 = rt_load_i32(memory_at_0, loc_4 + 12)
												if loc_0 ~= loc_4 then
													while true do
														loc_2 = rt_load_i32(memory_at_0, loc_4 + 8)
														rt_store_i32(memory_at_0, loc_2 + 12, loc_0)
														rt_store_i32(memory_at_0, loc_0 + 8, loc_2)
														desired = 3
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_2 = rt_load_i32(memory_at_0, loc_4 + 20)
												if loc_2 ~= 0 then
													while true do
														reg_0 = rt_add_i32(loc_4, 20)
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												else
													while true do
														loc_2 = rt_load_i32(memory_at_0, loc_4 + 16)
														if loc_2 == 0 then
															desired = 8
															break
														end
														reg_0 = rt_add_i32(loc_4, 16)
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_3 = reg_0
												while true do
													loc_6 = loc_3
													loc_0 = loc_2
													loc_3 = rt_add_i32(loc_0, 20)
													loc_2 = rt_load_i32(memory_at_0, loc_0 + 20)
													if loc_2 ~= 0 then
														continue
													end
													loc_3 = rt_add_i32(loc_0, 16)
													loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
													if loc_2 ~= 0 then
														continue
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												rt_store_i32(memory_at_0, loc_6, 0)
												desired = 3
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_0 = rt_load_i32(memory_at_0, 36388)
											if loc_0 >= loc_5 then
												while true do
													loc_1 = rt_load_i32(memory_at_0, 36400)
													while true do
														loc_2 = rt_sub_i32(loc_0, loc_5)
														if loc_2 >= 16 then
															while true do
																loc_3 = rt_add_i32(loc_1, loc_5)
																rt_store_i32(memory_at_0, loc_3 + 4, bit_or(loc_2, 1))
																rt_store_i32(memory_at_0, rt_add_i32(loc_0, loc_1), loc_2)
																rt_store_i32(memory_at_0, loc_1 + 4, bit_or(loc_5, 3))
																desired = 11
																break
															end
															if desired then
																if desired == 11 then
																	desired = nil
																end
																break
															end
														end
														rt_store_i32(memory_at_0, loc_1 + 4, bit_or(loc_0, 3))
														loc_0 = rt_add_i32(loc_0, loc_1)
														rt_store_i32(memory_at_0, loc_0 + 4, bit_or(rt_load_i32(memory_at_0, loc_0 + 4), 1))
														loc_3 = 0
														loc_2 = 0
														break
													end
													if desired then
														break
													end
													rt_store_i32(memory_at_0, 36388, loc_2)
													rt_store_i32(memory_at_0, 36400, loc_3)
													loc_0 = rt_add_i32(loc_1, 8)
													desired = 1
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											loc_3 = rt_load_i32(memory_at_0, 36392)
											if loc_3 > loc_5 then
												while true do
													loc_1 = rt_sub_i32(loc_3, loc_5)
													rt_store_i32(memory_at_0, 36392, loc_1)
													loc_0 = rt_load_i32(memory_at_0, 36404)
													loc_2 = rt_add_i32(loc_5, loc_0)
													rt_store_i32(memory_at_0, 36404, loc_2)
													rt_store_i32(memory_at_0, loc_2 + 4, bit_or(loc_1, 1))
													rt_store_i32(memory_at_0, loc_0 + 4, bit_or(loc_5, 3))
													loc_0 = rt_add_i32(loc_0, 8)
													desired = 1
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											loc_0 = 0
											loc_7 = rt_add_i32(loc_5, 47)
											reg_0 = loc_5
											reg_1 = loc_7
											while true do
												if rt_load_i32(memory_at_0, 36852) ~= 0 then
													while true do
														reg_2 = rt_load_i32(memory_at_0, 36860)
														desired = 10
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												rt_store_i64(memory_at_0, 36864, rt_i64_from_u32(4294967295, 4294967295))
												rt_store_i64(memory_at_0, 36856, rt_i64_from_u32(4096, 4096))
												rt_store_i32(memory_at_0, 36852, bit_xor(bit_and(rt_add_i32(loc_10, 12), 4294967280), 1431655768))
												rt_store_i32(memory_at_0, 36872, 0)
												rt_store_i32(memory_at_0, 36824, 0)
												reg_2 = 4096
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_1 = reg_2
											loc_6 = rt_add_i32(reg_1, loc_1)
											loc_9 = rt_sub_i32(0, loc_1)
											loc_4 = bit_and(loc_6, loc_9)
											if reg_0 >= loc_4 then
												desired = 1
												break
											end
											loc_1 = rt_load_i32(memory_at_0, 36820)
											if loc_1 ~= 0 then
												while true do
													loc_2 = rt_load_i32(memory_at_0, 36812)
													loc_8 = rt_add_i32(loc_4, loc_2)
													if loc_8 <= loc_2 then
														desired = 1
														break
													end
													if loc_1 < loc_8 then
														desired = 1
														break
													end
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											while true do
												if bit_and(rt_load_i32_u8(memory_at_0, 36824), 4) == 0 then
													while true do
														while true do
															while true do
																while true do
																	while true do
																		loc_1 = rt_load_i32(memory_at_0, 36404)
																		if loc_1 ~= 0 then
																			while true do
																				loc_0 = 36828
																				while true do
																					loc_2 = rt_load_i32(memory_at_0, loc_0)
																					if loc_1 >= loc_2 then
																						while true do
																							if rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 4), loc_2) > loc_1 then
																								desired = 15
																								break
																							end
																							break
																						end
																						if desired then
																							if desired == 17 then
																								desired = nil
																								continue
																							end
																							break
																						end
																					end
																					loc_0 = rt_load_i32(memory_at_0, loc_0 + 8)
																					if loc_0 ~= 0 then
																						continue
																					end
																					break
																				end
																				if desired then
																					break
																				end
																				break
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																				end
																				break
																			end
																		end
																		reg_0 = FUNC_LIST[659](0)
																		loc_3 = reg_0
																		if loc_3 == 4294967295 then
																			desired = 12
																			break
																		end
																		loc_6 = loc_4
																		loc_0 = rt_load_i32(memory_at_0, 36856)
																		loc_1 = rt_sub_i32(loc_0, 1)
																		if bit_and(loc_3, loc_1) ~= 0 then
																			while true do
																				reg_0 = rt_add_i32(rt_sub_i32(loc_4, loc_3), bit_and(rt_add_i32(loc_1, loc_3), rt_sub_i32(0, loc_0)))
																				break
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																				end
																				break
																			end
																		else
																			while true do
																				reg_0 = loc_6
																				break
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																				end
																				break
																			end
																		end
																		loc_6 = reg_0
																		if loc_6 <= loc_5 then
																			desired = 12
																			break
																		end
																		loc_0 = rt_load_i32(memory_at_0, 36820)
																		if loc_0 ~= 0 then
																			while true do
																				loc_1 = rt_load_i32(memory_at_0, 36812)
																				loc_2 = rt_add_i32(loc_6, loc_1)
																				if loc_2 <= loc_1 then
																					desired = 12
																					break
																				end
																				if loc_0 < loc_2 then
																					desired = 12
																					break
																				end
																				break
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																				end
																				break
																			end
																		end
																		reg_1 = FUNC_LIST[659](loc_6)
																		loc_0 = reg_1
																		if loc_3 ~= loc_0 then
																			desired = 14
																			break
																		end
																		desired = 10
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																		end
																		break
																	end
																	loc_6 = bit_and(loc_9, rt_sub_i32(loc_6, loc_3))
																	reg_0 = FUNC_LIST[659](loc_6)
																	loc_3 = reg_0
																	if loc_3 == rt_add_i32(rt_load_i32(memory_at_0, loc_0), rt_load_i32(memory_at_0, loc_0 + 4)) then
																		desired = 13
																		break
																	end
																	loc_0 = loc_3
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																if loc_0 == 4294967295 then
																	desired = 12
																	break
																end
																if loc_6 >= rt_add_i32(loc_5, 48) then
																	while true do
																		loc_3 = loc_0
																		desired = 10
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																end
																loc_1 = rt_load_i32(memory_at_0, 36860)
																loc_1 = bit_and(rt_add_i32(loc_1, rt_sub_i32(loc_7, loc_6)), rt_sub_i32(0, loc_1))
																reg_0 = FUNC_LIST[659](loc_1)
																if reg_0 == 4294967295 then
																	desired = 12
																	break
																end
																loc_6 = rt_add_i32(loc_1, loc_6)
																loc_3 = loc_0
																desired = 10
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																end
																break
															end
															if loc_3 ~= 4294967295 then
																desired = 10
																break
															end
															break
														end
														if desired then
															break
														end
														rt_store_i32(memory_at_0, 36824, bit_or(rt_load_i32(memory_at_0, 36824), 4))
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												reg_0 = FUNC_LIST[659](loc_4)
												loc_3 = reg_0
												reg_0 = FUNC_LIST[659](0)
												loc_0 = reg_0
												if loc_3 == 4294967295 then
													desired = 5
													break
												end
												if loc_0 == 4294967295 then
													desired = 5
													break
												end
												if loc_0 <= loc_3 then
													desired = 5
													break
												end
												loc_6 = rt_sub_i32(loc_0, loc_3)
												if loc_6 <= rt_add_i32(loc_5, 40) then
													desired = 5
													break
												end
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_0 = rt_add_i32(loc_6, rt_load_i32(memory_at_0, 36812))
											rt_store_i32(memory_at_0, 36812, loc_0)
											if loc_0 > rt_load_i32(memory_at_0, 36816) then
												while true do
													rt_store_i32(memory_at_0, 36816, loc_0)
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											while true do
												loc_1 = rt_load_i32(memory_at_0, 36404)
												if loc_1 ~= 0 then
													while true do
														loc_0 = 36828
														while true do
															loc_2 = rt_load_i32(memory_at_0, loc_0)
															loc_4 = rt_load_i32(memory_at_0, loc_0 + 4)
															if rt_add_i32(loc_2, loc_4) == loc_3 then
																desired = 10
																break
															end
															loc_0 = rt_load_i32(memory_at_0, loc_0 + 8)
															if loc_0 ~= 0 then
																continue
															end
															break
														end
														if desired then
															break
														end
														desired = 7
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_0 = rt_load_i32(memory_at_0, 36396)
												if (if loc_0 <= loc_3 then loc_0 else 0) == 0 then
													while true do
														rt_store_i32(memory_at_0, 36396, loc_3)
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												loc_0 = 0
												rt_store_i32(memory_at_0, 36832, loc_6)
												rt_store_i32(memory_at_0, 36828, loc_3)
												rt_store_i32(memory_at_0, 36412, 4294967295)
												rt_store_i32(memory_at_0, 36416, rt_load_i32(memory_at_0, 36852))
												rt_store_i32(memory_at_0, 36840, 0)
												while true do
													loc_1 = rt_shl_i32(loc_0, 3)
													loc_2 = rt_add_i32(loc_1, 36420)
													rt_store_i32(memory_at_0, rt_add_i32(loc_1, 36428), loc_2)
													rt_store_i32(memory_at_0, rt_add_i32(loc_1, 36432), loc_2)
													loc_0 = rt_add_i32(loc_0, 1)
													if loc_0 ~= 32 then
														continue
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_0 = rt_sub_i32(loc_6, 40)
												loc_1 = bit_and(rt_sub_i32(4294967288, loc_3), 7)
												loc_2 = rt_sub_i32(loc_0, loc_1)
												rt_store_i32(memory_at_0, 36392, loc_2)
												loc_1 = rt_add_i32(loc_1, loc_3)
												rt_store_i32(memory_at_0, 36404, loc_1)
												rt_store_i32(memory_at_0, loc_1 + 4, bit_or(loc_2, 1))
												rt_store_i32(memory_at_0, rt_add_i32(loc_0, loc_3) + 4, 40)
												rt_store_i32(memory_at_0, 36408, rt_load_i32(memory_at_0, 36868))
												desired = 6
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											if loc_1 >= loc_3 then
												desired = 7
												break
											end
											if loc_1 < loc_2 then
												desired = 7
												break
											end
											if bit_and(rt_load_i32(memory_at_0, loc_0 + 12), 8) ~= 0 then
												desired = 7
												break
											end
											rt_store_i32(memory_at_0, loc_0 + 4, rt_add_i32(loc_4, loc_6))
											loc_0 = bit_and(rt_sub_i32(4294967288, loc_1), 7)
											loc_2 = rt_add_i32(loc_0, loc_1)
											rt_store_i32(memory_at_0, 36404, loc_2)
											loc_3 = rt_add_i32(loc_6, rt_load_i32(memory_at_0, 36392))
											loc_0 = rt_sub_i32(loc_3, loc_0)
											rt_store_i32(memory_at_0, 36392, loc_0)
											rt_store_i32(memory_at_0, loc_2 + 4, bit_or(loc_0, 1))
											rt_store_i32(memory_at_0, rt_add_i32(loc_1, loc_3) + 4, 40)
											rt_store_i32(memory_at_0, 36408, rt_load_i32(memory_at_0, 36868))
											desired = 6
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_0 = 0
										desired = 2
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_0 = 0
									desired = 3
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if loc_3 < rt_load_i32(memory_at_0, 36396) then
									while true do
										rt_store_i32(memory_at_0, 36396, loc_3)
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								loc_2 = rt_add_i32(loc_3, loc_6)
								loc_0 = 36828
								while true do
									while true do
										loc_4 = rt_load_i32(memory_at_0, loc_0)
										if loc_4 ~= loc_2 then
											while true do
												loc_0 = rt_load_i32(memory_at_0, loc_0 + 8)
												if loc_0 ~= 0 then
													desired = 8
													break
												end
												desired = 7
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
													continue
												end
												break
											end
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if bit_and(rt_load_i32_u8(memory_at_0, loc_0 + 12), 8) == 0 then
										desired = 4
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_0 = 36828
								while true do
									while true do
										loc_2 = rt_load_i32(memory_at_0, loc_0)
										if loc_1 >= loc_2 then
											while true do
												loc_2 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 4), loc_2)
												if loc_2 > loc_1 then
													desired = 8
													break
												end
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										loc_0 = rt_load_i32(memory_at_0, loc_0 + 8)
										desired = 7
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
											continue
										end
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_0 = rt_sub_i32(loc_6, 40)
								loc_4 = bit_and(rt_sub_i32(4294967288, loc_3), 7)
								loc_9 = rt_sub_i32(loc_0, loc_4)
								rt_store_i32(memory_at_0, 36392, loc_9)
								loc_4 = rt_add_i32(loc_3, loc_4)
								rt_store_i32(memory_at_0, 36404, loc_4)
								rt_store_i32(memory_at_0, loc_4 + 4, bit_or(loc_9, 1))
								rt_store_i32(memory_at_0, rt_add_i32(loc_0, loc_3) + 4, 40)
								rt_store_i32(memory_at_0, 36408, rt_load_i32(memory_at_0, 36868))
								loc_0 = rt_sub_i32(rt_add_i32(bit_and(rt_sub_i32(39, loc_2), 7), loc_2), 47)
								loc_4 = (if rt_add_i32(loc_1, 16) > loc_0 then loc_1 else loc_0)
								rt_store_i32(memory_at_0, loc_4 + 4, 27)
								rt_store_i64(memory_at_0, loc_4 + 16, rt_load_i64(memory_at_0, 36836))
								rt_store_i64(memory_at_0, loc_4 + 8, rt_load_i64(memory_at_0, 36828))
								rt_store_i32(memory_at_0, 36836, rt_add_i32(loc_4, 8))
								rt_store_i32(memory_at_0, 36832, loc_6)
								rt_store_i32(memory_at_0, 36828, loc_3)
								rt_store_i32(memory_at_0, 36840, 0)
								loc_0 = rt_add_i32(loc_4, 24)
								while true do
									rt_store_i32(memory_at_0, loc_0 + 4, 7)
									loc_3 = rt_add_i32(loc_0, 8)
									loc_0 = rt_add_i32(loc_0, 4)
									if loc_2 > loc_3 then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if loc_1 == loc_4 then
									break
								end
								rt_store_i32(memory_at_0, loc_4 + 4, bit_and(rt_load_i32(memory_at_0, loc_4 + 4), 4294967294))
								loc_3 = rt_sub_i32(loc_4, loc_1)
								rt_store_i32(memory_at_0, loc_1 + 4, bit_or(loc_3, 1))
								rt_store_i32(memory_at_0, loc_4, loc_3)
								while true do
									if loc_3 <= 255 then
										while true do
											loc_0 = rt_add_i32(bit_and(loc_3, 4294967288), 36420)
											while true do
												loc_2 = rt_load_i32(memory_at_0, 36380)
												loc_3 = rt_shl_i32(1, rt_shr_u32(loc_3, 3))
												if bit_and(loc_2, loc_3) == 0 then
													while true do
														rt_store_i32(memory_at_0, 36380, bit_or(loc_2, loc_3))
														reg_0 = loc_0
														desired = 9
														break
													end
													if desired then
														if desired == 9 then
															desired = nil
														end
														break
													end
												end
												reg_0 = rt_load_i32(memory_at_0, loc_0 + 8)
												break
											end
											if desired then
												break
											end
											loc_2 = reg_0
											rt_store_i32(memory_at_0, loc_0 + 8, loc_1)
											rt_store_i32(memory_at_0, loc_2 + 12, loc_1)
											loc_4 = 8
											reg_0 = 12
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_0 = 31
									reg_0 = loc_1
									if loc_3 <= 16777215 then
										while true do
											loc_0 = bit_countlz(rt_shr_u32(loc_3, 8))
											reg_1 = rt_add_i32(rt_sub_i32(bit_and(rt_shr_u32(loc_3, rt_sub_i32(38, loc_0)), 1), rt_shl_i32(loc_0, 1)), 62)
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									else
										while true do
											reg_1 = loc_0
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_0 = reg_1
									rt_store_i32(memory_at_0, reg_0 + 28, loc_0)
									rt_store_i64(memory_at_0, loc_1 + 16, rt_i64_ZERO)
									loc_2 = rt_add_i32(rt_shl_i32(loc_0, 2), 36684)
									while true do
										while true do
											loc_4 = rt_load_i32(memory_at_0, 36384)
											loc_6 = rt_shl_i32(1, loc_0)
											if bit_and(loc_4, loc_6) == 0 then
												while true do
													rt_store_i32(memory_at_0, 36384, bit_or(loc_4, loc_6))
													rt_store_i32(memory_at_0, loc_2, loc_1)
													desired = 9
													break
												end
												if desired then
													if desired == 9 then
														desired = nil
													end
													break
												end
											end
											loc_0 = rt_shl_i32(loc_3, (if loc_0 ~= 31 then rt_sub_i32(25, rt_shr_u32(loc_0, 1)) else 0))
											loc_4 = rt_load_i32(memory_at_0, loc_2)
											while true do
												loc_2 = loc_4
												if loc_3 == bit_and(rt_load_i32(memory_at_0, loc_2 + 4), 4294967288) then
													desired = 8
													break
												end
												loc_4 = rt_shr_u32(loc_0, 29)
												loc_0 = rt_shl_i32(loc_0, 1)
												loc_6 = rt_add_i32(bit_and(loc_4, 4), loc_2)
												loc_4 = rt_load_i32(memory_at_0, loc_6 + 16)
												if loc_4 ~= 0 then
													continue
												end
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											rt_store_i32(memory_at_0, loc_6 + 16, loc_1)
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										rt_store_i32(memory_at_0, loc_1 + 24, loc_2)
										loc_4 = 12
										loc_2 = loc_1
										loc_0 = loc_1
										reg_0 = 8
										desired = 7
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_0 = rt_load_i32(memory_at_0, loc_2 + 8)
									rt_store_i32(memory_at_0, loc_0 + 12, loc_1)
									rt_store_i32(memory_at_0, loc_2 + 8, loc_1)
									rt_store_i32(memory_at_0, loc_1 + 8, loc_0)
									loc_0 = 0
									loc_4 = 12
									reg_0 = 24
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_3 = reg_0
								rt_store_i32(memory_at_0, rt_add_i32(loc_1, loc_4), loc_2)
								rt_store_i32(memory_at_0, rt_add_i32(loc_1, loc_3), loc_0)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_0 = rt_load_i32(memory_at_0, 36392)
							if loc_5 >= loc_0 then
								break
							end
							loc_1 = rt_sub_i32(loc_0, loc_5)
							rt_store_i32(memory_at_0, 36392, loc_1)
							loc_0 = rt_load_i32(memory_at_0, 36404)
							loc_2 = rt_add_i32(loc_5, loc_0)
							rt_store_i32(memory_at_0, 36404, loc_2)
							rt_store_i32(memory_at_0, loc_2 + 4, bit_or(loc_1, 1))
							rt_store_i32(memory_at_0, loc_0 + 4, bit_or(loc_5, 3))
							loc_0 = rt_add_i32(loc_0, 8)
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[612]()
						rt_store_i32(memory_at_0, reg_0, 48)
						loc_0 = 0
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_0, loc_3)
					rt_store_i32(memory_at_0, loc_0 + 4, rt_add_i32(loc_6, rt_load_i32(memory_at_0, loc_0 + 4)))
					reg_0 = FUNC_LIST[653](loc_3, loc_4, loc_5)
					loc_0 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if loc_9 == 0 then
						break
					end
					while true do
						loc_3 = rt_load_i32(memory_at_0, loc_4 + 28)
						loc_2 = rt_add_i32(rt_shl_i32(loc_3, 2), 36684)
						if loc_4 == rt_load_i32(memory_at_0, loc_2) then
							while true do
								rt_store_i32(memory_at_0, loc_2, loc_0)
								if loc_0 ~= 0 then
									desired = 4
									break
								end
								loc_8 = bit_and(rt_rotl_i32(4294967294, loc_3), loc_8)
								rt_store_i32(memory_at_0, 36384, loc_8)
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						while true do
							if rt_load_i32(memory_at_0, loc_9 + 16) == loc_4 then
								while true do
									rt_store_i32(memory_at_0, loc_9 + 16, loc_0)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							rt_store_i32(memory_at_0, loc_9 + 20, loc_0)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_0 == 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 24, loc_9)
					loc_2 = rt_load_i32(memory_at_0, loc_4 + 16)
					if loc_2 ~= 0 then
						while true do
							rt_store_i32(memory_at_0, loc_0 + 16, loc_2)
							rt_store_i32(memory_at_0, loc_2 + 24, loc_0)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = rt_load_i32(memory_at_0, loc_4 + 20)
					if loc_2 == 0 then
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 20, loc_2)
					rt_store_i32(memory_at_0, loc_2 + 24, loc_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if loc_1 <= 15 then
						while true do
							loc_0 = rt_add_i32(loc_1, loc_5)
							rt_store_i32(memory_at_0, loc_4 + 4, bit_or(loc_0, 3))
							loc_0 = rt_add_i32(loc_0, loc_4)
							rt_store_i32(memory_at_0, loc_0 + 4, bit_or(rt_load_i32(memory_at_0, loc_0 + 4), 1))
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					rt_store_i32(memory_at_0, loc_4 + 4, bit_or(loc_5, 3))
					loc_3 = rt_add_i32(loc_4, loc_5)
					rt_store_i32(memory_at_0, loc_3 + 4, bit_or(loc_1, 1))
					rt_store_i32(memory_at_0, rt_add_i32(loc_1, loc_3), loc_1)
					if loc_1 <= 255 then
						while true do
							loc_0 = rt_add_i32(bit_and(loc_1, 4294967288), 36420)
							while true do
								loc_5 = rt_load_i32(memory_at_0, 36380)
								loc_1 = rt_shl_i32(1, rt_shr_u32(loc_1, 3))
								if bit_and(loc_5, loc_1) == 0 then
									while true do
										rt_store_i32(memory_at_0, 36380, bit_or(loc_1, loc_5))
										reg_0 = loc_0
										desired = 5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								reg_0 = rt_load_i32(memory_at_0, loc_0 + 8)
								break
							end
							if desired then
								break
							end
							loc_1 = reg_0
							rt_store_i32(memory_at_0, loc_0 + 8, loc_3)
							rt_store_i32(memory_at_0, loc_1 + 12, loc_3)
							rt_store_i32(memory_at_0, loc_3 + 12, loc_0)
							rt_store_i32(memory_at_0, loc_3 + 8, loc_1)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_0 = 31
					reg_0 = loc_3
					if loc_1 <= 16777215 then
						while true do
							loc_0 = bit_countlz(rt_shr_u32(loc_1, 8))
							reg_1 = rt_add_i32(rt_sub_i32(bit_and(rt_shr_u32(loc_1, rt_sub_i32(38, loc_0)), 1), rt_shl_i32(loc_0, 1)), 62)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_1 = loc_0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_0 = reg_1
					rt_store_i32(memory_at_0, reg_0 + 28, loc_0)
					rt_store_i64(memory_at_0, loc_3 + 16, rt_i64_ZERO)
					loc_5 = rt_add_i32(rt_shl_i32(loc_0, 2), 36684)
					while true do
						while true do
							loc_2 = rt_shl_i32(1, loc_0)
							if bit_and(loc_2, loc_8) == 0 then
								while true do
									rt_store_i32(memory_at_0, 36384, bit_or(loc_2, loc_8))
									rt_store_i32(memory_at_0, loc_5, loc_3)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_0 = rt_shl_i32(loc_1, (if loc_0 ~= 31 then rt_sub_i32(25, rt_shr_u32(loc_0, 1)) else 0))
							loc_2 = rt_load_i32(memory_at_0, loc_5)
							while true do
								loc_5 = loc_2
								if loc_1 == bit_and(rt_load_i32(memory_at_0, loc_5 + 4), 4294967288) then
									desired = 4
									break
								end
								loc_2 = rt_shr_u32(loc_0, 29)
								loc_0 = rt_shl_i32(loc_0, 1)
								loc_6 = rt_add_i32(bit_and(loc_2, 4), loc_5)
								loc_2 = rt_load_i32(memory_at_0, loc_6 + 16)
								if loc_2 ~= 0 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							rt_store_i32(memory_at_0, loc_6 + 16, loc_3)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						rt_store_i32(memory_at_0, loc_3 + 24, loc_5)
						rt_store_i32(memory_at_0, loc_3 + 12, loc_3)
						rt_store_i32(memory_at_0, loc_3 + 8, loc_3)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_0 = rt_load_i32(memory_at_0, loc_5 + 8)
					rt_store_i32(memory_at_0, loc_0 + 12, loc_3)
					rt_store_i32(memory_at_0, loc_5 + 8, loc_3)
					rt_store_i32(memory_at_0, loc_3 + 24, 0)
					rt_store_i32(memory_at_0, loc_3 + 12, loc_5)
					rt_store_i32(memory_at_0, loc_3 + 8, loc_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_0 = rt_add_i32(loc_4, 8)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_8 == 0 then
					break
				end
				while true do
					loc_4 = rt_load_i32(memory_at_0, loc_3 + 28)
					loc_2 = rt_add_i32(rt_shl_i32(loc_4, 2), 36684)
					if loc_3 == rt_load_i32(memory_at_0, loc_2) then
						while true do
							rt_store_i32(memory_at_0, loc_2, loc_0)
							if loc_0 ~= 0 then
								desired = 3
								break
							end
							rt_store_i32(memory_at_0, 36384, bit_and(rt_rotl_i32(4294967294, loc_4), loc_11))
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					while true do
						if rt_load_i32(memory_at_0, loc_8 + 16) == loc_3 then
							while true do
								rt_store_i32(memory_at_0, loc_8 + 16, loc_0)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						rt_store_i32(memory_at_0, loc_8 + 20, loc_0)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_0 == 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 24, loc_8)
				loc_2 = rt_load_i32(memory_at_0, loc_3 + 16)
				if loc_2 ~= 0 then
					while true do
						rt_store_i32(memory_at_0, loc_0 + 16, loc_2)
						rt_store_i32(memory_at_0, loc_2 + 24, loc_0)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = rt_load_i32(memory_at_0, loc_3 + 20)
				if loc_2 == 0 then
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 20, loc_2)
				rt_store_i32(memory_at_0, loc_2 + 24, loc_0)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_1 <= 15 then
					while true do
						loc_0 = rt_add_i32(loc_1, loc_5)
						rt_store_i32(memory_at_0, loc_3 + 4, bit_or(loc_0, 3))
						loc_0 = rt_add_i32(loc_0, loc_3)
						rt_store_i32(memory_at_0, loc_0 + 4, bit_or(rt_load_i32(memory_at_0, loc_0 + 4), 1))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				rt_store_i32(memory_at_0, loc_3 + 4, bit_or(loc_5, 3))
				loc_5 = rt_add_i32(loc_3, loc_5)
				rt_store_i32(memory_at_0, loc_5 + 4, bit_or(loc_1, 1))
				rt_store_i32(memory_at_0, rt_add_i32(loc_1, loc_5), loc_1)
				if loc_7 ~= 0 then
					while true do
						loc_2 = rt_add_i32(bit_and(loc_7, 4294967288), 36420)
						loc_0 = rt_load_i32(memory_at_0, 36400)
						while true do
							loc_4 = rt_shl_i32(1, rt_shr_u32(loc_7, 3))
							if bit_and(loc_6, loc_4) == 0 then
								while true do
									rt_store_i32(memory_at_0, 36380, bit_or(loc_4, loc_6))
									reg_0 = loc_2
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							reg_0 = rt_load_i32(memory_at_0, loc_2 + 8)
							break
						end
						if desired then
							break
						end
						loc_4 = reg_0
						rt_store_i32(memory_at_0, loc_2 + 8, loc_0)
						rt_store_i32(memory_at_0, loc_4 + 12, loc_0)
						rt_store_i32(memory_at_0, loc_0 + 12, loc_2)
						rt_store_i32(memory_at_0, loc_0 + 8, loc_4)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				rt_store_i32(memory_at_0, 36400, loc_5)
				rt_store_i32(memory_at_0, 36388, loc_1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_0 = rt_add_i32(loc_3, 8)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_10, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[653] = --[[ prepend_alloc ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_7 = rt_add_i32(bit_and(rt_sub_i32(4294967288, loc_0), 7), loc_0)
		rt_store_i32(memory_at_0, loc_7 + 4, bit_or(loc_2, 3))
		loc_4 = rt_add_i32(bit_and(rt_sub_i32(4294967288, loc_1), 7), loc_1)
		loc_3 = rt_add_i32(loc_2, loc_7)
		loc_0 = rt_sub_i32(loc_4, loc_3)
		while true do
			if loc_4 == rt_load_i32(memory_at_0, 36404) then
				while true do
					rt_store_i32(memory_at_0, 36404, loc_3)
					loc_2 = rt_add_i32(loc_0, rt_load_i32(memory_at_0, 36392))
					rt_store_i32(memory_at_0, 36392, loc_2)
					rt_store_i32(memory_at_0, loc_3 + 4, bit_or(loc_2, 1))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_4 == rt_load_i32(memory_at_0, 36400) then
				while true do
					rt_store_i32(memory_at_0, 36400, loc_3)
					loc_2 = rt_add_i32(loc_0, rt_load_i32(memory_at_0, 36388))
					rt_store_i32(memory_at_0, 36388, loc_2)
					rt_store_i32(memory_at_0, loc_3 + 4, bit_or(loc_2, 1))
					rt_store_i32(memory_at_0, rt_add_i32(loc_2, loc_3), loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = rt_load_i32(memory_at_0, loc_4 + 4)
			if bit_and(loc_1, 3) == 1 then
				while true do
					loc_8 = bit_and(loc_1, 4294967288)
					loc_2 = rt_load_i32(memory_at_0, loc_4 + 12)
					while true do
						if loc_1 <= 255 then
							while true do
								loc_5 = rt_load_i32(memory_at_0, loc_4 + 8)
								if loc_2 == loc_5 then
									while true do
										rt_store_i32(memory_at_0, 36380, bit_and(rt_load_i32(memory_at_0, 36380), rt_rotl_i32(4294967294, rt_shr_u32(loc_1, 3))))
										desired = 3
										break
									end
									if desired then
										break
									end
								end
								rt_store_i32(memory_at_0, loc_5 + 12, loc_2)
								rt_store_i32(memory_at_0, loc_2 + 8, loc_5)
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_6 = rt_load_i32(memory_at_0, loc_4 + 24)
						while true do
							if loc_2 ~= loc_4 then
								while true do
									loc_1 = rt_load_i32(memory_at_0, loc_4 + 8)
									rt_store_i32(memory_at_0, loc_1 + 12, loc_2)
									rt_store_i32(memory_at_0, loc_2 + 8, loc_1)
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							while true do
								loc_1 = rt_load_i32(memory_at_0, loc_4 + 20)
								if loc_1 ~= 0 then
									while true do
										reg_0 = rt_add_i32(loc_4, 20)
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								else
									while true do
										loc_1 = rt_load_i32(memory_at_0, loc_4 + 16)
										if loc_1 == 0 then
											desired = 5
											break
										end
										reg_0 = rt_add_i32(loc_4, 16)
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_5 = reg_0
								while true do
									loc_9 = loc_5
									loc_2 = loc_1
									loc_5 = rt_add_i32(loc_2, 20)
									loc_1 = rt_load_i32(memory_at_0, loc_2 + 20)
									if loc_1 ~= 0 then
										continue
									end
									loc_5 = rt_add_i32(loc_2, 16)
									loc_1 = rt_load_i32(memory_at_0, loc_2 + 16)
									if loc_1 ~= 0 then
										continue
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								rt_store_i32(memory_at_0, loc_9, 0)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							loc_2 = 0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						if loc_6 == 0 then
							break
						end
						while true do
							loc_5 = rt_load_i32(memory_at_0, loc_4 + 28)
							loc_1 = rt_add_i32(rt_shl_i32(loc_5, 2), 36684)
							if loc_4 == rt_load_i32(memory_at_0, loc_1) then
								while true do
									rt_store_i32(memory_at_0, loc_1, loc_2)
									if loc_2 ~= 0 then
										desired = 4
										break
									end
									rt_store_i32(memory_at_0, 36384, bit_and(rt_load_i32(memory_at_0, 36384), rt_rotl_i32(4294967294, loc_5)))
									desired = 3
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							while true do
								if rt_load_i32(memory_at_0, loc_6 + 16) == loc_4 then
									while true do
										rt_store_i32(memory_at_0, loc_6 + 16, loc_2)
										desired = 5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								rt_store_i32(memory_at_0, loc_6 + 20, loc_2)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							if loc_2 == 0 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						rt_store_i32(memory_at_0, loc_2 + 24, loc_6)
						loc_1 = rt_load_i32(memory_at_0, loc_4 + 16)
						if loc_1 ~= 0 then
							while true do
								rt_store_i32(memory_at_0, loc_2 + 16, loc_1)
								rt_store_i32(memory_at_0, loc_1 + 24, loc_2)
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						loc_1 = rt_load_i32(memory_at_0, loc_4 + 20)
						if loc_1 == 0 then
							break
						end
						rt_store_i32(memory_at_0, loc_2 + 20, loc_1)
						rt_store_i32(memory_at_0, loc_1 + 24, loc_2)
						break
					end
					if desired then
						break
					end
					loc_4 = rt_add_i32(loc_4, loc_8)
					loc_1 = rt_load_i32(memory_at_0, loc_4 + 4)
					reg_0 = rt_add_i32(loc_0, loc_8)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_0 = reg_0
			rt_store_i32(memory_at_0, loc_4 + 4, bit_and(loc_1, 4294967294))
			rt_store_i32(memory_at_0, loc_3 + 4, bit_or(loc_0, 1))
			rt_store_i32(memory_at_0, rt_add_i32(loc_0, loc_3), loc_0)
			if loc_0 <= 255 then
				while true do
					loc_2 = rt_add_i32(bit_and(loc_0, 4294967288), 36420)
					while true do
						loc_1 = rt_load_i32(memory_at_0, 36380)
						loc_0 = rt_shl_i32(1, rt_shr_u32(loc_0, 3))
						if bit_and(loc_1, loc_0) == 0 then
							while true do
								rt_store_i32(memory_at_0, 36380, bit_or(loc_0, loc_1))
								reg_0 = loc_2
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						reg_0 = rt_load_i32(memory_at_0, loc_2 + 8)
						break
					end
					if desired then
						break
					end
					loc_0 = reg_0
					rt_store_i32(memory_at_0, loc_2 + 8, loc_3)
					rt_store_i32(memory_at_0, loc_0 + 12, loc_3)
					rt_store_i32(memory_at_0, loc_3 + 12, loc_2)
					rt_store_i32(memory_at_0, loc_3 + 8, loc_0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = 31
			reg_0 = loc_3
			if loc_0 <= 16777215 then
				while true do
					loc_2 = bit_countlz(rt_shr_u32(loc_0, 8))
					reg_1 = rt_add_i32(rt_sub_i32(bit_and(rt_shr_u32(loc_0, rt_sub_i32(38, loc_2)), 1), rt_shl_i32(loc_2, 1)), 62)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_1 = loc_2
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = reg_1
			rt_store_i32(memory_at_0, reg_0 + 28, loc_2)
			rt_store_i64(memory_at_0, loc_3 + 16, rt_i64_ZERO)
			loc_1 = rt_add_i32(rt_shl_i32(loc_2, 2), 36684)
			while true do
				while true do
					loc_5 = rt_load_i32(memory_at_0, 36384)
					loc_4 = rt_shl_i32(1, loc_2)
					if bit_and(loc_5, loc_4) == 0 then
						while true do
							rt_store_i32(memory_at_0, 36384, bit_or(loc_4, loc_5))
							rt_store_i32(memory_at_0, loc_1, loc_3)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = rt_shl_i32(loc_0, (if loc_2 ~= 31 then rt_sub_i32(25, rt_shr_u32(loc_2, 1)) else 0))
					loc_5 = rt_load_i32(memory_at_0, loc_1)
					while true do
						loc_1 = loc_5
						if loc_0 == bit_and(rt_load_i32(memory_at_0, loc_1 + 4), 4294967288) then
							desired = 2
							break
						end
						loc_5 = rt_shr_u32(loc_2, 29)
						loc_2 = rt_shl_i32(loc_2, 1)
						loc_4 = rt_add_i32(bit_and(loc_5, 4), loc_1)
						loc_5 = rt_load_i32(memory_at_0, loc_4 + 16)
						if loc_5 ~= 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_4 + 16, loc_3)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_3 + 24, loc_1)
				rt_store_i32(memory_at_0, loc_3 + 12, loc_3)
				rt_store_i32(memory_at_0, loc_3 + 8, loc_3)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_1 + 8)
			rt_store_i32(memory_at_0, loc_2 + 12, loc_3)
			rt_store_i32(memory_at_0, loc_1 + 8, loc_3)
			rt_store_i32(memory_at_0, loc_3 + 24, 0)
			rt_store_i32(memory_at_0, loc_3 + 12, loc_1)
			rt_store_i32(memory_at_0, loc_3 + 8, loc_2)
			break
		end
		reg_0 = rt_add_i32(loc_7, 8)
		break
	end
	return reg_0
end
FUNC_LIST[654] = --[[ emscripten_builtin_free ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		while true do
			if loc_0 == 0 then
				break
			end
			loc_3 = rt_sub_i32(loc_0, 8)
			loc_1 = rt_load_i32(memory_at_0, rt_sub_i32(loc_0, 4))
			loc_0 = bit_and(loc_1, 4294967288)
			loc_4 = rt_add_i32(loc_3, loc_0)
			while true do
				if bit_and(loc_1, 1) ~= 0 then
					break
				end
				if bit_and(loc_1, 2) == 0 then
					desired = 1
					break
				end
				loc_2 = rt_load_i32(memory_at_0, loc_3)
				loc_3 = rt_sub_i32(loc_3, loc_2)
				if loc_3 < rt_load_i32(memory_at_0, 36396) then
					desired = 1
					break
				end
				loc_0 = rt_add_i32(loc_0, loc_2)
				while true do
					while true do
						while true do
							if loc_3 ~= rt_load_i32(memory_at_0, 36400) then
								while true do
									loc_1 = rt_load_i32(memory_at_0, loc_3 + 12)
									if loc_2 <= 255 then
										while true do
											loc_5 = rt_load_i32(memory_at_0, loc_3 + 8)
											if loc_5 ~= loc_1 then
												desired = 5
												break
											end
											rt_store_i32(memory_at_0, 36380, bit_and(rt_load_i32(memory_at_0, 36380), rt_rotl_i32(4294967294, rt_shr_u32(loc_2, 3))))
											desired = 2
											break
										end
										if desired then
											break
										end
									end
									loc_6 = rt_load_i32(memory_at_0, loc_3 + 24)
									if loc_1 ~= loc_3 then
										while true do
											loc_2 = rt_load_i32(memory_at_0, loc_3 + 8)
											rt_store_i32(memory_at_0, loc_2 + 12, loc_1)
											rt_store_i32(memory_at_0, loc_1 + 8, loc_2)
											desired = 3
											break
										end
										if desired then
											break
										end
									end
									loc_2 = rt_load_i32(memory_at_0, loc_3 + 20)
									if loc_2 ~= 0 then
										while true do
											reg_0 = rt_add_i32(loc_3, 20)
											break
										end
										if desired then
											break
										end
									else
										while true do
											loc_2 = rt_load_i32(memory_at_0, loc_3 + 16)
											if loc_2 == 0 then
												desired = 4
												break
											end
											reg_0 = rt_add_i32(loc_3, 16)
											break
										end
										if desired then
											break
										end
									end
									loc_5 = reg_0
									while true do
										loc_7 = loc_5
										loc_1 = loc_2
										loc_5 = rt_add_i32(loc_1, 20)
										loc_2 = rt_load_i32(memory_at_0, loc_1 + 20)
										if loc_2 ~= 0 then
											continue
										end
										loc_5 = rt_add_i32(loc_1, 16)
										loc_2 = rt_load_i32(memory_at_0, loc_1 + 16)
										if loc_2 ~= 0 then
											continue
										end
										break
									end
									if desired then
										break
									end
									rt_store_i32(memory_at_0, loc_7, 0)
									desired = 3
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_1 = rt_load_i32(memory_at_0, loc_4 + 4)
							if bit_and(loc_1, 3) ~= 3 then
								desired = 2
								break
							end
							rt_store_i32(memory_at_0, 36388, loc_0)
							rt_store_i32(memory_at_0, loc_4 + 4, bit_and(loc_1, 4294967294))
							rt_store_i32(memory_at_0, loc_3 + 4, bit_or(loc_0, 1))
							rt_store_i32(memory_at_0, loc_4, loc_0)
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						rt_store_i32(memory_at_0, loc_5 + 12, loc_1)
						rt_store_i32(memory_at_0, loc_1 + 8, loc_5)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_6 == 0 then
					break
				end
				while true do
					loc_5 = rt_load_i32(memory_at_0, loc_3 + 28)
					loc_2 = rt_add_i32(rt_shl_i32(loc_5, 2), 36684)
					if loc_3 == rt_load_i32(memory_at_0, loc_2) then
						while true do
							rt_store_i32(memory_at_0, loc_2, loc_1)
							if loc_1 ~= 0 then
								desired = 3
								break
							end
							rt_store_i32(memory_at_0, 36384, bit_and(rt_load_i32(memory_at_0, 36384), rt_rotl_i32(4294967294, loc_5)))
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					while true do
						if rt_load_i32(memory_at_0, loc_6 + 16) == loc_3 then
							while true do
								rt_store_i32(memory_at_0, loc_6 + 16, loc_1)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						rt_store_i32(memory_at_0, loc_6 + 20, loc_1)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_1 == 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_1 + 24, loc_6)
				loc_2 = rt_load_i32(memory_at_0, loc_3 + 16)
				if loc_2 ~= 0 then
					while true do
						rt_store_i32(memory_at_0, loc_1 + 16, loc_2)
						rt_store_i32(memory_at_0, loc_2 + 24, loc_1)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = rt_load_i32(memory_at_0, loc_3 + 20)
				if loc_2 == 0 then
					break
				end
				rt_store_i32(memory_at_0, loc_1 + 20, loc_2)
				rt_store_i32(memory_at_0, loc_2 + 24, loc_1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_3 >= loc_4 then
				break
			end
			loc_2 = rt_load_i32(memory_at_0, loc_4 + 4)
			if bit_and(loc_2, 1) == 0 then
				break
			end
			while true do
				while true do
					while true do
						while true do
							if bit_and(loc_2, 2) == 0 then
								while true do
									if loc_4 == rt_load_i32(memory_at_0, 36404) then
										while true do
											rt_store_i32(memory_at_0, 36404, loc_3)
											loc_0 = rt_add_i32(loc_0, rt_load_i32(memory_at_0, 36392))
											rt_store_i32(memory_at_0, 36392, loc_0)
											rt_store_i32(memory_at_0, loc_3 + 4, bit_or(loc_0, 1))
											if rt_load_i32(memory_at_0, 36400) ~= loc_3 then
												desired = 1
												break
											end
											rt_store_i32(memory_at_0, 36388, 0)
											rt_store_i32(memory_at_0, 36400, 0)
											desired = 0
											break
										end
										if desired then
											break
										end
									end
									if loc_4 == rt_load_i32(memory_at_0, 36400) then
										while true do
											rt_store_i32(memory_at_0, 36400, loc_3)
											loc_0 = rt_add_i32(loc_0, rt_load_i32(memory_at_0, 36388))
											rt_store_i32(memory_at_0, 36388, loc_0)
											rt_store_i32(memory_at_0, loc_3 + 4, bit_or(loc_0, 1))
											rt_store_i32(memory_at_0, rt_add_i32(loc_0, loc_3), loc_0)
											desired = 0
											break
										end
										if desired then
											break
										end
									end
									loc_0 = rt_add_i32(loc_0, bit_and(loc_2, 4294967288))
									loc_1 = rt_load_i32(memory_at_0, loc_4 + 12)
									if loc_2 <= 255 then
										while true do
											loc_5 = rt_load_i32(memory_at_0, loc_4 + 8)
											if loc_1 == loc_5 then
												while true do
													rt_store_i32(memory_at_0, 36380, bit_and(rt_load_i32(memory_at_0, 36380), rt_rotl_i32(4294967294, rt_shr_u32(loc_2, 3))))
													desired = 3
													break
												end
												if desired then
													break
												end
											end
											rt_store_i32(memory_at_0, loc_5 + 12, loc_1)
											rt_store_i32(memory_at_0, loc_1 + 8, loc_5)
											desired = 3
											break
										end
										if desired then
											break
										end
									end
									loc_6 = rt_load_i32(memory_at_0, loc_4 + 24)
									if loc_1 ~= loc_4 then
										while true do
											loc_2 = rt_load_i32(memory_at_0, loc_4 + 8)
											rt_store_i32(memory_at_0, loc_2 + 12, loc_1)
											rt_store_i32(memory_at_0, loc_1 + 8, loc_2)
											desired = 4
											break
										end
										if desired then
											break
										end
									end
									loc_2 = rt_load_i32(memory_at_0, loc_4 + 20)
									if loc_2 ~= 0 then
										while true do
											reg_0 = rt_add_i32(loc_4, 20)
											break
										end
										if desired then
											break
										end
									else
										while true do
											loc_2 = rt_load_i32(memory_at_0, loc_4 + 16)
											if loc_2 == 0 then
												desired = 5
												break
											end
											reg_0 = rt_add_i32(loc_4, 16)
											break
										end
										if desired then
											break
										end
									end
									loc_5 = reg_0
									while true do
										loc_7 = loc_5
										loc_1 = loc_2
										loc_5 = rt_add_i32(loc_1, 20)
										loc_2 = rt_load_i32(memory_at_0, loc_1 + 20)
										if loc_2 ~= 0 then
											continue
										end
										loc_5 = rt_add_i32(loc_1, 16)
										loc_2 = rt_load_i32(memory_at_0, loc_1 + 16)
										if loc_2 ~= 0 then
											continue
										end
										break
									end
									if desired then
										break
									end
									rt_store_i32(memory_at_0, loc_7, 0)
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							rt_store_i32(memory_at_0, loc_4 + 4, bit_and(loc_2, 4294967294))
							rt_store_i32(memory_at_0, loc_3 + 4, bit_or(loc_0, 1))
							rt_store_i32(memory_at_0, rt_add_i32(loc_0, loc_3), loc_0)
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_1 = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_6 == 0 then
						break
					end
					while true do
						loc_5 = rt_load_i32(memory_at_0, loc_4 + 28)
						loc_2 = rt_add_i32(rt_shl_i32(loc_5, 2), 36684)
						if loc_4 == rt_load_i32(memory_at_0, loc_2) then
							while true do
								rt_store_i32(memory_at_0, loc_2, loc_1)
								if loc_1 ~= 0 then
									desired = 4
									break
								end
								rt_store_i32(memory_at_0, 36384, bit_and(rt_load_i32(memory_at_0, 36384), rt_rotl_i32(4294967294, loc_5)))
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						while true do
							if rt_load_i32(memory_at_0, loc_6 + 16) == loc_4 then
								while true do
									rt_store_i32(memory_at_0, loc_6 + 16, loc_1)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							rt_store_i32(memory_at_0, loc_6 + 20, loc_1)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_1 == 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_1 + 24, loc_6)
					loc_2 = rt_load_i32(memory_at_0, loc_4 + 16)
					if loc_2 ~= 0 then
						while true do
							rt_store_i32(memory_at_0, loc_1 + 16, loc_2)
							rt_store_i32(memory_at_0, loc_2 + 24, loc_1)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = rt_load_i32(memory_at_0, loc_4 + 20)
					if loc_2 == 0 then
						break
					end
					rt_store_i32(memory_at_0, loc_1 + 20, loc_2)
					rt_store_i32(memory_at_0, loc_2 + 24, loc_1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_3 + 4, bit_or(loc_0, 1))
				rt_store_i32(memory_at_0, rt_add_i32(loc_0, loc_3), loc_0)
				if rt_load_i32(memory_at_0, 36400) ~= loc_3 then
					break
				end
				rt_store_i32(memory_at_0, 36388, loc_0)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_0 <= 255 then
				while true do
					loc_1 = rt_add_i32(bit_and(loc_0, 4294967288), 36420)
					while true do
						loc_2 = rt_load_i32(memory_at_0, 36380)
						loc_0 = rt_shl_i32(1, rt_shr_u32(loc_0, 3))
						if bit_and(loc_2, loc_0) == 0 then
							while true do
								rt_store_i32(memory_at_0, 36380, bit_or(loc_0, loc_2))
								reg_0 = loc_1
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						reg_0 = rt_load_i32(memory_at_0, loc_1 + 8)
						break
					end
					if desired then
						break
					end
					loc_0 = reg_0
					rt_store_i32(memory_at_0, loc_1 + 8, loc_3)
					rt_store_i32(memory_at_0, loc_0 + 12, loc_3)
					rt_store_i32(memory_at_0, loc_3 + 12, loc_1)
					rt_store_i32(memory_at_0, loc_3 + 8, loc_0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = 31
			reg_0 = loc_3
			if loc_0 <= 16777215 then
				while true do
					loc_1 = bit_countlz(rt_shr_u32(loc_0, 8))
					reg_1 = rt_add_i32(rt_sub_i32(bit_and(rt_shr_u32(loc_0, rt_sub_i32(38, loc_1)), 1), rt_shl_i32(loc_1, 1)), 62)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_1 = loc_1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = reg_1
			rt_store_i32(memory_at_0, reg_0 + 28, loc_1)
			rt_store_i64(memory_at_0, loc_3 + 16, rt_i64_ZERO)
			loc_5 = rt_add_i32(rt_shl_i32(loc_1, 2), 36684)
			while true do
				while true do
					while true do
						loc_2 = rt_load_i32(memory_at_0, 36384)
						loc_4 = rt_shl_i32(1, loc_1)
						if bit_and(loc_2, loc_4) == 0 then
							while true do
								rt_store_i32(memory_at_0, 36384, bit_or(loc_2, loc_4))
								rt_store_i32(memory_at_0, loc_5, loc_3)
								loc_1 = 24
								reg_0 = 8
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_1 = rt_shl_i32(loc_0, (if loc_1 ~= 31 then rt_sub_i32(25, rt_shr_u32(loc_1, 1)) else 0))
						loc_5 = rt_load_i32(memory_at_0, loc_5)
						while true do
							loc_2 = loc_5
							if loc_0 == bit_and(rt_load_i32(memory_at_0, loc_2 + 4), 4294967288) then
								desired = 3
								break
							end
							loc_5 = rt_shr_u32(loc_1, 29)
							loc_1 = rt_shl_i32(loc_1, 1)
							loc_4 = rt_add_i32(bit_and(loc_5, 4), loc_2)
							loc_5 = rt_load_i32(memory_at_0, loc_4 + 16)
							if loc_5 ~= 0 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						rt_store_i32(memory_at_0, loc_4 + 16, loc_3)
						loc_1 = 24
						loc_5 = loc_2
						reg_0 = 8
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_0 = reg_0
					loc_2 = loc_3
					reg_0 = loc_3
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = rt_load_i32(memory_at_0, loc_2 + 8)
				rt_store_i32(memory_at_0, loc_5 + 12, loc_3)
				rt_store_i32(memory_at_0, loc_2 + 8, loc_3)
				loc_0 = 24
				loc_1 = 8
				reg_0 = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = reg_0
			rt_store_i32(memory_at_0, rt_add_i32(loc_1, loc_3), loc_5)
			rt_store_i32(memory_at_0, loc_3 + 12, loc_2)
			rt_store_i32(memory_at_0, rt_add_i32(loc_0, loc_3), loc_4)
			loc_3 = rt_sub_i32(rt_load_i32(memory_at_0, 36412), 1)
			rt_store_i32(memory_at_0, 36412, (if loc_3 ~= 0 then loc_3 else 4294967295))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
end
FUNC_LIST[655] = --[[ dlrealloc ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		if loc_0 == 0 then
			while true do
				reg_0 = FUNC_LIST[652](loc_1)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		if loc_1 >= 4294967232 then
			while true do
				reg_0 = FUNC_LIST[612]()
				rt_store_i32(memory_at_0, reg_0, 48)
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = FUNC_LIST[656](rt_sub_i32(loc_0, 8), (if loc_1 < 11 then 16 else bit_and(rt_add_i32(loc_1, 11), 4294967288)))
		loc_2 = reg_0
		if loc_2 ~= 0 then
			while true do
				reg_0 = rt_add_i32(loc_2, 8)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = FUNC_LIST[652](loc_1)
		loc_2 = reg_0
		if loc_2 == 0 then
			while true do
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_3 = rt_load_i32(memory_at_0, rt_sub_i32(loc_0, 4))
		loc_3 = rt_add_i32((if bit_and(loc_3, 3) ~= 0 then 4294967292 else 4294967288), bit_and(loc_3, 4294967288))
		reg_0 = FUNC_LIST[609](loc_2, loc_0, (if loc_1 > loc_3 then loc_3 else loc_1))
		FUNC_LIST[654](loc_0)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[656] = --[[ try_realloc_chunk ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local reg_0
	local desired
	while true do
		loc_5 = rt_load_i32(memory_at_0, loc_0 + 4)
		loc_2 = bit_and(loc_5, 4294967288)
		while true do
			if bit_and(loc_5, 3) == 0 then
				while true do
					if loc_1 < 256 then
						desired = 1
						break
					end
					if loc_2 >= rt_add_i32(loc_1, 4) then
						while true do
							loc_3 = loc_0
							if rt_sub_i32(loc_2, loc_1) <= rt_shl_i32(rt_load_i32(memory_at_0, 36860), 1) then
								desired = 1
								break
							end
							break
						end
						if desired then
							break
						end
					end
					reg_0 = 0
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = rt_add_i32(loc_0, loc_2)
			while true do
				if loc_1 <= loc_2 then
					while true do
						loc_2 = rt_sub_i32(loc_2, loc_1)
						if loc_2 < 16 then
							desired = 2
							break
						end
						rt_store_i32(memory_at_0, loc_0 + 4, bit_or(bit_or(bit_and(loc_5, 1), loc_1), 2))
						loc_1 = rt_add_i32(loc_0, loc_1)
						rt_store_i32(memory_at_0, loc_1 + 4, bit_or(loc_2, 3))
						rt_store_i32(memory_at_0, loc_4 + 4, bit_or(rt_load_i32(memory_at_0, loc_4 + 4), 1))
						FUNC_LIST[657](loc_1, loc_2)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_4 == rt_load_i32(memory_at_0, 36404) then
					while true do
						loc_2 = rt_add_i32(loc_2, rt_load_i32(memory_at_0, 36392))
						if loc_1 >= loc_2 then
							desired = 1
							break
						end
						rt_store_i32(memory_at_0, loc_0 + 4, bit_or(bit_or(bit_and(loc_5, 1), loc_1), 2))
						loc_5 = rt_add_i32(loc_0, loc_1)
						loc_1 = rt_sub_i32(loc_2, loc_1)
						rt_store_i32(memory_at_0, loc_5 + 4, bit_or(loc_1, 1))
						rt_store_i32(memory_at_0, 36392, loc_1)
						rt_store_i32(memory_at_0, 36404, loc_5)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_4 == rt_load_i32(memory_at_0, 36400) then
					while true do
						loc_2 = rt_add_i32(loc_2, rt_load_i32(memory_at_0, 36388))
						if loc_1 > loc_2 then
							desired = 1
							break
						end
						while true do
							loc_3 = rt_sub_i32(loc_2, loc_1)
							if loc_3 >= 16 then
								while true do
									rt_store_i32(memory_at_0, loc_0 + 4, bit_or(bit_or(bit_and(loc_5, 1), loc_1), 2))
									loc_1 = rt_add_i32(loc_0, loc_1)
									rt_store_i32(memory_at_0, loc_1 + 4, bit_or(loc_3, 1))
									loc_2 = rt_add_i32(loc_0, loc_2)
									rt_store_i32(memory_at_0, loc_2, loc_3)
									rt_store_i32(memory_at_0, loc_2 + 4, bit_and(rt_load_i32(memory_at_0, loc_2 + 4), 4294967294))
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							rt_store_i32(memory_at_0, loc_0 + 4, bit_or(bit_or(loc_2, bit_and(loc_5, 1)), 2))
							loc_1 = rt_add_i32(loc_0, loc_2)
							rt_store_i32(memory_at_0, loc_1 + 4, bit_or(rt_load_i32(memory_at_0, loc_1 + 4), 1))
							loc_3 = 0
							loc_1 = 0
							break
						end
						if desired then
							break
						end
						rt_store_i32(memory_at_0, 36400, loc_1)
						rt_store_i32(memory_at_0, 36388, loc_3)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_6 = rt_load_i32(memory_at_0, loc_4 + 4)
				if bit_and(loc_6, 2) ~= 0 then
					desired = 1
					break
				end
				loc_8 = rt_add_i32(loc_2, bit_and(loc_6, 4294967288))
				if loc_1 > loc_8 then
					desired = 1
					break
				end
				loc_9 = rt_sub_i32(loc_8, loc_1)
				loc_2 = rt_load_i32(memory_at_0, loc_4 + 12)
				while true do
					if loc_6 <= 255 then
						while true do
							loc_3 = rt_load_i32(memory_at_0, loc_4 + 8)
							if loc_2 == loc_3 then
								while true do
									rt_store_i32(memory_at_0, 36380, bit_and(rt_load_i32(memory_at_0, 36380), rt_rotl_i32(4294967294, rt_shr_u32(loc_6, 3))))
									desired = 3
									break
								end
								if desired then
									break
								end
							end
							rt_store_i32(memory_at_0, loc_3 + 12, loc_2)
							rt_store_i32(memory_at_0, loc_2 + 8, loc_3)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_7 = rt_load_i32(memory_at_0, loc_4 + 24)
					while true do
						if loc_2 ~= loc_4 then
							while true do
								loc_3 = rt_load_i32(memory_at_0, loc_4 + 8)
								rt_store_i32(memory_at_0, loc_3 + 12, loc_2)
								rt_store_i32(memory_at_0, loc_2 + 8, loc_3)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						while true do
							loc_3 = rt_load_i32(memory_at_0, loc_4 + 20)
							if loc_3 ~= 0 then
								while true do
									reg_0 = rt_add_i32(loc_4, 20)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							else
								while true do
									loc_3 = rt_load_i32(memory_at_0, loc_4 + 16)
									if loc_3 == 0 then
										desired = 5
										break
									end
									reg_0 = rt_add_i32(loc_4, 16)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_6 = reg_0
							while true do
								loc_10 = loc_6
								loc_2 = loc_3
								loc_6 = rt_add_i32(loc_2, 20)
								loc_3 = rt_load_i32(memory_at_0, loc_2 + 20)
								if loc_3 ~= 0 then
									continue
								end
								loc_6 = rt_add_i32(loc_2, 16)
								loc_3 = rt_load_i32(memory_at_0, loc_2 + 16)
								if loc_3 ~= 0 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							rt_store_i32(memory_at_0, loc_10, 0)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_2 = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_7 == 0 then
						break
					end
					while true do
						loc_6 = rt_load_i32(memory_at_0, loc_4 + 28)
						loc_3 = rt_add_i32(rt_shl_i32(loc_6, 2), 36684)
						if loc_4 == rt_load_i32(memory_at_0, loc_3) then
							while true do
								rt_store_i32(memory_at_0, loc_3, loc_2)
								if loc_2 ~= 0 then
									desired = 4
									break
								end
								rt_store_i32(memory_at_0, 36384, bit_and(rt_load_i32(memory_at_0, 36384), rt_rotl_i32(4294967294, loc_6)))
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						while true do
							if rt_load_i32(memory_at_0, loc_7 + 16) == loc_4 then
								while true do
									rt_store_i32(memory_at_0, loc_7 + 16, loc_2)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							rt_store_i32(memory_at_0, loc_7 + 20, loc_2)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_2 == 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_2 + 24, loc_7)
					loc_3 = rt_load_i32(memory_at_0, loc_4 + 16)
					if loc_3 ~= 0 then
						while true do
							rt_store_i32(memory_at_0, loc_2 + 16, loc_3)
							rt_store_i32(memory_at_0, loc_3 + 24, loc_2)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_3 = rt_load_i32(memory_at_0, loc_4 + 20)
					if loc_3 == 0 then
						break
					end
					rt_store_i32(memory_at_0, loc_2 + 20, loc_3)
					rt_store_i32(memory_at_0, loc_3 + 24, loc_2)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_9 <= 15 then
					while true do
						rt_store_i32(memory_at_0, loc_0 + 4, bit_or(bit_or(loc_8, bit_and(loc_5, 1)), 2))
						loc_1 = rt_add_i32(loc_0, loc_8)
						rt_store_i32(memory_at_0, loc_1 + 4, bit_or(rt_load_i32(memory_at_0, loc_1 + 4), 1))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				rt_store_i32(memory_at_0, loc_0 + 4, bit_or(bit_or(bit_and(loc_5, 1), loc_1), 2))
				loc_1 = rt_add_i32(loc_0, loc_1)
				rt_store_i32(memory_at_0, loc_1 + 4, bit_or(loc_9, 3))
				loc_2 = rt_add_i32(loc_0, loc_8)
				rt_store_i32(memory_at_0, loc_2 + 4, bit_or(rt_load_i32(memory_at_0, loc_2 + 4), 1))
				FUNC_LIST[657](loc_1, loc_9)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = loc_0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[657] = --[[ dispose_chunk ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_4 = rt_add_i32(loc_0, loc_1)
		while true do
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 4)
				if bit_and(loc_2, 1) ~= 0 then
					break
				end
				if bit_and(loc_2, 2) == 0 then
					desired = 1
					break
				end
				loc_3 = rt_load_i32(memory_at_0, loc_0)
				loc_1 = rt_add_i32(loc_1, loc_3)
				while true do
					while true do
						while true do
							loc_0 = rt_sub_i32(loc_0, loc_3)
							if loc_0 ~= rt_load_i32(memory_at_0, 36400) then
								while true do
									loc_2 = rt_load_i32(memory_at_0, loc_0 + 12)
									if loc_3 <= 255 then
										while true do
											loc_5 = rt_load_i32(memory_at_0, loc_0 + 8)
											if loc_5 ~= loc_2 then
												desired = 5
												break
											end
											rt_store_i32(memory_at_0, 36380, bit_and(rt_load_i32(memory_at_0, 36380), rt_rotl_i32(4294967294, rt_shr_u32(loc_3, 3))))
											desired = 2
											break
										end
										if desired then
											break
										end
									end
									loc_6 = rt_load_i32(memory_at_0, loc_0 + 24)
									if loc_0 ~= loc_2 then
										while true do
											loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
											rt_store_i32(memory_at_0, loc_3 + 12, loc_2)
											rt_store_i32(memory_at_0, loc_2 + 8, loc_3)
											desired = 3
											break
										end
										if desired then
											break
										end
									end
									loc_3 = rt_load_i32(memory_at_0, loc_0 + 20)
									if loc_3 ~= 0 then
										while true do
											reg_0 = rt_add_i32(loc_0, 20)
											break
										end
										if desired then
											break
										end
									else
										while true do
											loc_3 = rt_load_i32(memory_at_0, loc_0 + 16)
											if loc_3 == 0 then
												desired = 4
												break
											end
											reg_0 = rt_add_i32(loc_0, 16)
											break
										end
										if desired then
											break
										end
									end
									loc_5 = reg_0
									while true do
										loc_7 = loc_5
										loc_2 = loc_3
										loc_5 = rt_add_i32(loc_2, 20)
										loc_3 = rt_load_i32(memory_at_0, loc_2 + 20)
										if loc_3 ~= 0 then
											continue
										end
										loc_5 = rt_add_i32(loc_2, 16)
										loc_3 = rt_load_i32(memory_at_0, loc_2 + 16)
										if loc_3 ~= 0 then
											continue
										end
										break
									end
									if desired then
										break
									end
									rt_store_i32(memory_at_0, loc_7, 0)
									desired = 3
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_2 = rt_load_i32(memory_at_0, loc_4 + 4)
							if bit_and(loc_2, 3) ~= 3 then
								desired = 2
								break
							end
							rt_store_i32(memory_at_0, 36388, loc_1)
							rt_store_i32(memory_at_0, loc_4 + 4, bit_and(loc_2, 4294967294))
							rt_store_i32(memory_at_0, loc_0 + 4, bit_or(loc_1, 1))
							rt_store_i32(memory_at_0, loc_4, loc_1)
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						rt_store_i32(memory_at_0, loc_5 + 12, loc_2)
						rt_store_i32(memory_at_0, loc_2 + 8, loc_5)
						desired = 2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_6 == 0 then
					break
				end
				while true do
					loc_5 = rt_load_i32(memory_at_0, loc_0 + 28)
					loc_3 = rt_add_i32(rt_shl_i32(loc_5, 2), 36684)
					if loc_0 == rt_load_i32(memory_at_0, loc_3) then
						while true do
							rt_store_i32(memory_at_0, loc_3, loc_2)
							if loc_2 ~= 0 then
								desired = 3
								break
							end
							rt_store_i32(memory_at_0, 36384, bit_and(rt_load_i32(memory_at_0, 36384), rt_rotl_i32(4294967294, loc_5)))
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					while true do
						if rt_load_i32(memory_at_0, loc_6 + 16) == loc_0 then
							while true do
								rt_store_i32(memory_at_0, loc_6 + 16, loc_2)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						rt_store_i32(memory_at_0, loc_6 + 20, loc_2)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_2 == 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_2 + 24, loc_6)
				loc_3 = rt_load_i32(memory_at_0, loc_0 + 16)
				if loc_3 ~= 0 then
					while true do
						rt_store_i32(memory_at_0, loc_2 + 16, loc_3)
						rt_store_i32(memory_at_0, loc_3 + 24, loc_2)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_3 = rt_load_i32(memory_at_0, loc_0 + 20)
				if loc_3 == 0 then
					break
				end
				rt_store_i32(memory_at_0, loc_2 + 20, loc_3)
				rt_store_i32(memory_at_0, loc_3 + 24, loc_2)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				while true do
					while true do
						while true do
							loc_3 = rt_load_i32(memory_at_0, loc_4 + 4)
							if bit_and(loc_3, 2) == 0 then
								while true do
									if loc_4 == rt_load_i32(memory_at_0, 36404) then
										while true do
											rt_store_i32(memory_at_0, 36404, loc_0)
											loc_1 = rt_add_i32(loc_1, rt_load_i32(memory_at_0, 36392))
											rt_store_i32(memory_at_0, 36392, loc_1)
											rt_store_i32(memory_at_0, loc_0 + 4, bit_or(loc_1, 1))
											if rt_load_i32(memory_at_0, 36400) ~= loc_0 then
												desired = 1
												break
											end
											rt_store_i32(memory_at_0, 36388, 0)
											rt_store_i32(memory_at_0, 36400, 0)
											desired = 0
											break
										end
										if desired then
											break
										end
									end
									if loc_4 == rt_load_i32(memory_at_0, 36400) then
										while true do
											rt_store_i32(memory_at_0, 36400, loc_0)
											loc_1 = rt_add_i32(loc_1, rt_load_i32(memory_at_0, 36388))
											rt_store_i32(memory_at_0, 36388, loc_1)
											rt_store_i32(memory_at_0, loc_0 + 4, bit_or(loc_1, 1))
											rt_store_i32(memory_at_0, rt_add_i32(loc_0, loc_1), loc_1)
											desired = 0
											break
										end
										if desired then
											break
										end
									end
									loc_1 = rt_add_i32(loc_1, bit_and(loc_3, 4294967288))
									loc_2 = rt_load_i32(memory_at_0, loc_4 + 12)
									if loc_3 <= 255 then
										while true do
											loc_5 = rt_load_i32(memory_at_0, loc_4 + 8)
											if loc_2 == loc_5 then
												while true do
													rt_store_i32(memory_at_0, 36380, bit_and(rt_load_i32(memory_at_0, 36380), rt_rotl_i32(4294967294, rt_shr_u32(loc_3, 3))))
													desired = 3
													break
												end
												if desired then
													break
												end
											end
											rt_store_i32(memory_at_0, loc_5 + 12, loc_2)
											rt_store_i32(memory_at_0, loc_2 + 8, loc_5)
											desired = 3
											break
										end
										if desired then
											break
										end
									end
									loc_6 = rt_load_i32(memory_at_0, loc_4 + 24)
									if loc_2 ~= loc_4 then
										while true do
											loc_3 = rt_load_i32(memory_at_0, loc_4 + 8)
											rt_store_i32(memory_at_0, loc_3 + 12, loc_2)
											rt_store_i32(memory_at_0, loc_2 + 8, loc_3)
											desired = 4
											break
										end
										if desired then
											break
										end
									end
									loc_3 = rt_load_i32(memory_at_0, loc_4 + 20)
									if loc_3 ~= 0 then
										while true do
											reg_0 = rt_add_i32(loc_4, 20)
											break
										end
										if desired then
											break
										end
									else
										while true do
											loc_3 = rt_load_i32(memory_at_0, loc_4 + 16)
											if loc_3 == 0 then
												desired = 5
												break
											end
											reg_0 = rt_add_i32(loc_4, 16)
											break
										end
										if desired then
											break
										end
									end
									loc_5 = reg_0
									while true do
										loc_7 = loc_5
										loc_2 = loc_3
										loc_5 = rt_add_i32(loc_2, 20)
										loc_3 = rt_load_i32(memory_at_0, loc_2 + 20)
										if loc_3 ~= 0 then
											continue
										end
										loc_5 = rt_add_i32(loc_2, 16)
										loc_3 = rt_load_i32(memory_at_0, loc_2 + 16)
										if loc_3 ~= 0 then
											continue
										end
										break
									end
									if desired then
										break
									end
									rt_store_i32(memory_at_0, loc_7, 0)
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							rt_store_i32(memory_at_0, loc_4 + 4, bit_and(loc_3, 4294967294))
							rt_store_i32(memory_at_0, loc_0 + 4, bit_or(loc_1, 1))
							rt_store_i32(memory_at_0, rt_add_i32(loc_0, loc_1), loc_1)
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_2 = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_6 == 0 then
						break
					end
					while true do
						loc_5 = rt_load_i32(memory_at_0, loc_4 + 28)
						loc_3 = rt_add_i32(rt_shl_i32(loc_5, 2), 36684)
						if loc_4 == rt_load_i32(memory_at_0, loc_3) then
							while true do
								rt_store_i32(memory_at_0, loc_3, loc_2)
								if loc_2 ~= 0 then
									desired = 4
									break
								end
								rt_store_i32(memory_at_0, 36384, bit_and(rt_load_i32(memory_at_0, 36384), rt_rotl_i32(4294967294, loc_5)))
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						while true do
							if rt_load_i32(memory_at_0, loc_6 + 16) == loc_4 then
								while true do
									rt_store_i32(memory_at_0, loc_6 + 16, loc_2)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							rt_store_i32(memory_at_0, loc_6 + 20, loc_2)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_2 == 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_2 + 24, loc_6)
					loc_3 = rt_load_i32(memory_at_0, loc_4 + 16)
					if loc_3 ~= 0 then
						while true do
							rt_store_i32(memory_at_0, loc_2 + 16, loc_3)
							rt_store_i32(memory_at_0, loc_3 + 24, loc_2)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_3 = rt_load_i32(memory_at_0, loc_4 + 20)
					if loc_3 == 0 then
						break
					end
					rt_store_i32(memory_at_0, loc_2 + 20, loc_3)
					rt_store_i32(memory_at_0, loc_3 + 24, loc_2)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 4, bit_or(loc_1, 1))
				rt_store_i32(memory_at_0, rt_add_i32(loc_0, loc_1), loc_1)
				if rt_load_i32(memory_at_0, 36400) ~= loc_0 then
					break
				end
				rt_store_i32(memory_at_0, 36388, loc_1)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_1 <= 255 then
				while true do
					loc_2 = rt_add_i32(bit_and(loc_1, 4294967288), 36420)
					while true do
						loc_3 = rt_load_i32(memory_at_0, 36380)
						loc_1 = rt_shl_i32(1, rt_shr_u32(loc_1, 3))
						if bit_and(loc_3, loc_1) == 0 then
							while true do
								rt_store_i32(memory_at_0, 36380, bit_or(loc_1, loc_3))
								reg_0 = loc_2
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						reg_0 = rt_load_i32(memory_at_0, loc_2 + 8)
						break
					end
					if desired then
						break
					end
					loc_1 = reg_0
					rt_store_i32(memory_at_0, loc_2 + 8, loc_0)
					rt_store_i32(memory_at_0, loc_1 + 12, loc_0)
					rt_store_i32(memory_at_0, loc_0 + 12, loc_2)
					rt_store_i32(memory_at_0, loc_0 + 8, loc_1)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = 31
			reg_0 = loc_0
			if loc_1 <= 16777215 then
				while true do
					loc_2 = bit_countlz(rt_shr_u32(loc_1, 8))
					reg_1 = rt_add_i32(rt_sub_i32(bit_and(rt_shr_u32(loc_1, rt_sub_i32(38, loc_2)), 1), rt_shl_i32(loc_2, 1)), 62)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_1 = loc_2
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = reg_1
			rt_store_i32(memory_at_0, reg_0 + 28, loc_2)
			rt_store_i64(memory_at_0, loc_0 + 16, rt_i64_ZERO)
			loc_3 = rt_add_i32(rt_shl_i32(loc_2, 2), 36684)
			while true do
				while true do
					loc_5 = rt_load_i32(memory_at_0, 36384)
					loc_4 = rt_shl_i32(1, loc_2)
					if bit_and(loc_5, loc_4) == 0 then
						while true do
							rt_store_i32(memory_at_0, 36384, bit_or(loc_4, loc_5))
							rt_store_i32(memory_at_0, loc_3, loc_0)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_2 = rt_shl_i32(loc_1, (if loc_2 ~= 31 then rt_sub_i32(25, rt_shr_u32(loc_2, 1)) else 0))
					loc_5 = rt_load_i32(memory_at_0, loc_3)
					while true do
						loc_3 = loc_5
						if loc_1 == bit_and(rt_load_i32(memory_at_0, loc_3 + 4), 4294967288) then
							desired = 2
							break
						end
						loc_5 = rt_shr_u32(loc_2, 29)
						loc_2 = rt_shl_i32(loc_2, 1)
						loc_4 = rt_add_i32(bit_and(loc_5, 4), loc_3)
						loc_5 = rt_load_i32(memory_at_0, loc_4 + 16)
						if loc_5 ~= 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_4 + 16, loc_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 24, loc_3)
				rt_store_i32(memory_at_0, loc_0 + 12, loc_0)
				rt_store_i32(memory_at_0, loc_0 + 8, loc_0)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = rt_load_i32(memory_at_0, loc_3 + 8)
			rt_store_i32(memory_at_0, loc_1 + 12, loc_0)
			rt_store_i32(memory_at_0, loc_3 + 8, loc_0)
			rt_store_i32(memory_at_0, loc_0 + 24, 0)
			rt_store_i32(memory_at_0, loc_0 + 12, loc_3)
			rt_store_i32(memory_at_0, loc_0 + 8, loc_1)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
end
FUNC_LIST[658] = --[[ emscripten_get_heap_size ]] function()
	local reg_0
	while true do
		reg_0 = rt_shl_i32(rt_allocator_size(memory_at_0), 16)
		break
	end
	return reg_0
end
FUNC_LIST[659] = --[[ sbrk ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		loc_1 = rt_load_i32(memory_at_0, 30712)
		loc_2 = bit_and(rt_add_i32(loc_0, 7), 4294967288)
		loc_0 = rt_add_i32(loc_1, loc_2)
		while true do
			if (if loc_0 <= loc_1 then loc_2 else 0) == 0 then
				while true do
					reg_0 = FUNC_LIST[658]()
					if reg_0 >= loc_0 then
						desired = 1
						break
					end
					reg_0 = FUNC_LIST[7](loc_0)
					if reg_0 ~= 0 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[612]()
			rt_store_i32(memory_at_0, reg_0, 48)
			reg_0 = 4294967295
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32(memory_at_0, 30712, loc_0)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[660] = --[[ __letf2 ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = rt_i64_ZERO
	local loc_6 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_4 = 1
		while true do
			loc_5 = rt_bit_and_i64(loc_1, rt_i64_from_u32(4294967295, 2147483647))
			if (if rt_eq_i64(loc_5, rt_i64_from_u32(0, 2147418112)) then (if rt_ne_i64(loc_0, rt_i64_ZERO) then 1 else 0) else (if rt_gt_u64(loc_5, rt_i64_from_u32(0, 2147418112)) then 1 else 0)) ~= 0 then
				break
			end
			loc_6 = rt_bit_and_i64(loc_3, rt_i64_from_u32(4294967295, 2147483647))
			if (if rt_eq_i64(loc_6, rt_i64_from_u32(0, 2147418112)) then (if rt_ne_i64(loc_2, rt_i64_ZERO) then 1 else 0) else (if rt_gt_u64(loc_6, rt_i64_from_u32(0, 2147418112)) then 1 else 0)) ~= 0 then
				break
			end
			if rt_eq_i64(rt_bit_or_i64(rt_bit_or_i64(loc_0, loc_2), rt_bit_or_i64(loc_5, loc_6)), rt_i64_ZERO) then
				while true do
					reg_0 = 0
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i64(rt_bit_and_i64(loc_1, loc_3), rt_i64_ZERO) then
				while true do
					if (if rt_eq_i64(loc_1, loc_3) then (if rt_lt_u64(loc_0, loc_2) then 1 else 0) else (if rt_lt_i64(loc_1, loc_3) then 1 else 0)) ~= 0 then
						while true do
							reg_0 = 4294967295
							desired = 0
							break
						end
						if desired then
							break
						end
					end
					reg_0 = (if rt_ne_i64(rt_bit_or_i64(rt_bit_xor_i64(loc_0, loc_2), rt_bit_xor_i64(loc_1, loc_3)), rt_i64_ZERO) then 1 else 0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if (if rt_eq_i64(loc_1, loc_3) then (if rt_gt_u64(loc_0, loc_2) then 1 else 0) else (if rt_gt_i64(loc_1, loc_3) then 1 else 0)) ~= 0 then
				while true do
					reg_0 = 4294967295
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = (if rt_ne_i64(rt_bit_or_i64(rt_bit_xor_i64(loc_0, loc_2), rt_bit_xor_i64(loc_1, loc_3)), rt_i64_ZERO) then 1 else 0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[661] = --[[ __getf2 ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = rt_i64_ZERO
	local loc_6 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_4 = 4294967295
		while true do
			loc_5 = rt_bit_and_i64(loc_1, rt_i64_from_u32(4294967295, 2147483647))
			if (if rt_eq_i64(loc_5, rt_i64_from_u32(0, 2147418112)) then (if rt_ne_i64(loc_0, rt_i64_ZERO) then 1 else 0) else (if rt_gt_u64(loc_5, rt_i64_from_u32(0, 2147418112)) then 1 else 0)) ~= 0 then
				break
			end
			loc_6 = rt_bit_and_i64(loc_3, rt_i64_from_u32(4294967295, 2147483647))
			if (if rt_eq_i64(loc_6, rt_i64_from_u32(0, 2147418112)) then (if rt_ne_i64(loc_2, rt_i64_ZERO) then 1 else 0) else (if rt_gt_u64(loc_6, rt_i64_from_u32(0, 2147418112)) then 1 else 0)) ~= 0 then
				break
			end
			if rt_eq_i64(rt_bit_or_i64(rt_bit_or_i64(loc_0, loc_2), rt_bit_or_i64(loc_5, loc_6)), rt_i64_ZERO) then
				while true do
					reg_0 = 0
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i64(rt_bit_and_i64(loc_1, loc_3), rt_i64_ZERO) then
				while true do
					if (if rt_eq_i64(loc_1, loc_3) then (if rt_lt_u64(loc_0, loc_2) then 1 else 0) else (if rt_lt_i64(loc_1, loc_3) then 1 else 0)) ~= 0 then
						desired = 1
						break
					end
					reg_0 = (if rt_ne_i64(rt_bit_or_i64(rt_bit_xor_i64(loc_0, loc_2), rt_bit_xor_i64(loc_1, loc_3)), rt_i64_ZERO) then 1 else 0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if (if rt_eq_i64(loc_1, loc_3) then (if rt_gt_u64(loc_0, loc_2) then 1 else 0) else (if rt_gt_i64(loc_1, loc_3) then 1 else 0)) ~= 0 then
				break
			end
			loc_4 = (if rt_ne_i64(rt_bit_or_i64(rt_bit_xor_i64(loc_0, loc_2), rt_bit_xor_i64(loc_1, loc_3)), rt_i64_ZERO) then 1 else 0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[662] = --[[ __ashlti3 ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = rt_i64_ZERO
	local desired
	while true do
		while true do
			if bit_and(loc_3, 64) ~= 0 then
				while true do
					loc_2 = rt_shl_i64(loc_1, rt_extend_i64_u32(rt_add_i32(loc_3, 4294967232)))
					loc_1 = rt_i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_3 == 0 then
				break
			end
			loc_4 = rt_extend_i64_u32(loc_3)
			loc_2 = rt_bit_or_i64(rt_shl_i64(loc_2, loc_4), rt_shr_u64(loc_1, rt_extend_i64_u32(rt_sub_i32(64, loc_3))))
			loc_1 = rt_shl_i64(loc_1, loc_4)
			break
		end
		rt_store_i64(memory_at_0, loc_0, loc_1)
		rt_store_i64(memory_at_0, loc_0 + 8, loc_2)
		break
	end
end
FUNC_LIST[663] = --[[ __divtf3 ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = rt_i64_ZERO
	local loc_11 = rt_i64_ZERO
	local loc_12 = rt_i64_ZERO
	local loc_13 = rt_i64_ZERO
	local loc_14 = rt_i64_ZERO
	local loc_15 = rt_i64_ZERO
	local loc_16 = rt_i64_ZERO
	local loc_17 = rt_i64_ZERO
	local loc_18 = rt_i64_ZERO
	local loc_19 = rt_i64_ZERO
	local loc_20 = rt_i64_ZERO
	local loc_21 = rt_i64_ZERO
	local loc_22 = rt_i64_ZERO
	local loc_23 = rt_i64_ZERO
	local loc_24 = rt_i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	local desired
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 336)
		GLOBAL_LIST[0].value = loc_5
		loc_11 = rt_bit_and_i64(loc_4, rt_i64_from_u32(4294967295, 65535))
		loc_10 = rt_bit_and_i64(loc_2, rt_i64_from_u32(4294967295, 65535))
		loc_12 = rt_bit_and_i64(rt_bit_xor_i64(loc_2, loc_4), rt_i64_from_u32(0, 2147483648))
		loc_6 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_4, rt_i64_from_u32(48, 0))), 32767)
		while true do
			while true do
				loc_9 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_2, rt_i64_from_u32(48, 0))), 32767)
				if rt_sub_i32(loc_9, 32767) >= 4294934530 then
					while true do
						if rt_sub_i32(loc_6, 32767) > 4294934529 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_13 = rt_bit_and_i64(loc_2, rt_i64_from_u32(4294967295, 2147483647))
				if (if rt_eq_i64(loc_13, rt_i64_from_u32(0, 2147418112)) then (if rt_eq_i64(loc_1, rt_i64_ZERO) then 1 else 0) else (if rt_lt_u64(loc_13, rt_i64_from_u32(0, 2147418112)) then 1 else 0)) == 0 then
					while true do
						loc_12 = rt_bit_or_i64(loc_2, rt_i64_from_u32(0, 32768))
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = rt_bit_and_i64(loc_4, rt_i64_from_u32(4294967295, 2147483647))
				if (if rt_eq_i64(loc_2, rt_i64_from_u32(0, 2147418112)) then (if rt_eq_i64(loc_3, rt_i64_ZERO) then 1 else 0) else (if rt_lt_u64(loc_2, rt_i64_from_u32(0, 2147418112)) then 1 else 0)) == 0 then
					while true do
						loc_12 = rt_bit_or_i64(loc_4, rt_i64_from_u32(0, 32768))
						loc_1 = loc_3
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_eq_i64(rt_bit_or_i64(rt_bit_xor_i64(loc_13, rt_i64_from_u32(0, 2147418112)), loc_1), rt_i64_ZERO) then
					while true do
						if rt_eq_i64(rt_bit_or_i64(rt_bit_xor_i64(loc_2, rt_i64_from_u32(0, 2147418112)), loc_3), rt_i64_ZERO) then
							while true do
								loc_1 = rt_i64_ZERO
								loc_12 = rt_i64_from_u32(0, 2147450880)
								desired = 1
								break
							end
							if desired then
								break
							end
						end
						loc_12 = rt_bit_or_i64(loc_12, rt_i64_from_u32(0, 2147418112))
						loc_1 = rt_i64_ZERO
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_eq_i64(rt_bit_or_i64(rt_bit_xor_i64(loc_2, rt_i64_from_u32(0, 2147418112)), loc_3), rt_i64_ZERO) then
					while true do
						loc_1 = rt_i64_ZERO
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_eq_i64(rt_bit_or_i64(loc_1, loc_13), rt_i64_ZERO) then
					while true do
						loc_12 = (if rt_eq_i64(rt_bit_or_i64(loc_2, loc_3), rt_i64_ZERO) then rt_i64_from_u32(0, 2147450880) else loc_12)
						loc_1 = rt_i64_ZERO
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_eq_i64(rt_bit_or_i64(loc_2, loc_3), rt_i64_ZERO) then
					while true do
						loc_12 = rt_bit_or_i64(loc_12, rt_i64_from_u32(0, 2147418112))
						loc_1 = rt_i64_ZERO
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_le_u64(loc_13, rt_i64_from_u32(4294967295, 65535)) then
					while true do
						loc_7 = (if rt_eq_i64(loc_10, rt_i64_ZERO) then 1 else 0)
						loc_7 = rt_wrap_i32_i64(rt_add_i64(rt_clz_i64((if loc_7 ~= 0 then loc_1 else loc_10)), rt_extend_i64_u32(rt_shl_i32(loc_7, 6))))
						FUNC_LIST[662](rt_add_i32(loc_5, 320), loc_1, loc_10, rt_sub_i32(loc_7, 15))
						loc_7 = rt_sub_i32(16, loc_7)
						loc_10 = rt_load_i64(memory_at_0, loc_5 + 328)
						reg_0 = rt_load_i64(memory_at_0, loc_5 + 320)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_1 = reg_0
				if rt_gt_u64(loc_2, rt_i64_from_u32(4294967295, 65535)) then
					break
				end
				loc_8 = (if rt_eq_i64(loc_11, rt_i64_ZERO) then 1 else 0)
				loc_8 = rt_wrap_i32_i64(rt_add_i64(rt_clz_i64((if loc_8 ~= 0 then loc_3 else loc_11)), rt_extend_i64_u32(rt_shl_i32(loc_8, 6))))
				FUNC_LIST[662](rt_add_i32(loc_5, 304), loc_3, loc_11, rt_sub_i32(loc_8, 15))
				loc_7 = rt_sub_i32(rt_add_i32(loc_7, loc_8), 16)
				loc_11 = rt_load_i64(memory_at_0, loc_5 + 312)
				loc_3 = rt_load_i64(memory_at_0, loc_5 + 304)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_17 = rt_bit_or_i64(loc_11, rt_i64_from_u32(0, 65536))
			loc_2 = rt_bit_or_i64(rt_shl_i64(loc_17, rt_i64_from_u32(15, 0)), rt_shr_u64(loc_3, rt_i64_from_u32(49, 0)))
			loc_4 = rt_sub_i64(rt_i64_from_u32(0, 1963258675), loc_2)
			FUNC_LIST[672](rt_add_i32(loc_5, 288), loc_2, rt_i64_ZERO, loc_4, rt_i64_ZERO)
			FUNC_LIST[672](rt_add_i32(loc_5, 272), rt_sub_i64(rt_i64_ZERO, rt_load_i64(memory_at_0, loc_5 + 296)), rt_i64_ZERO, loc_4, rt_i64_ZERO)
			loc_4 = rt_bit_or_i64(rt_shl_i64(rt_load_i64(memory_at_0, loc_5 + 280), rt_i64_ONE), rt_shr_u64(rt_load_i64(memory_at_0, loc_5 + 272), rt_i64_from_u32(63, 0)))
			FUNC_LIST[672](rt_add_i32(loc_5, 256), loc_4, rt_i64_ZERO, loc_2, rt_i64_ZERO)
			FUNC_LIST[672](rt_add_i32(loc_5, 240), loc_4, rt_i64_ZERO, rt_sub_i64(rt_i64_ZERO, rt_load_i64(memory_at_0, loc_5 + 264)), rt_i64_ZERO)
			loc_4 = rt_bit_or_i64(rt_shl_i64(rt_load_i64(memory_at_0, loc_5 + 248), rt_i64_ONE), rt_shr_u64(rt_load_i64(memory_at_0, loc_5 + 240), rt_i64_from_u32(63, 0)))
			FUNC_LIST[672](rt_add_i32(loc_5, 224), loc_4, rt_i64_ZERO, loc_2, rt_i64_ZERO)
			FUNC_LIST[672](rt_add_i32(loc_5, 208), loc_4, rt_i64_ZERO, rt_sub_i64(rt_i64_ZERO, rt_load_i64(memory_at_0, loc_5 + 232)), rt_i64_ZERO)
			loc_4 = rt_bit_or_i64(rt_shl_i64(rt_load_i64(memory_at_0, loc_5 + 216), rt_i64_ONE), rt_shr_u64(rt_load_i64(memory_at_0, loc_5 + 208), rt_i64_from_u32(63, 0)))
			FUNC_LIST[672](rt_add_i32(loc_5, 192), loc_4, rt_i64_ZERO, loc_2, rt_i64_ZERO)
			FUNC_LIST[672](rt_add_i32(loc_5, 176), loc_4, rt_i64_ZERO, rt_sub_i64(rt_i64_ZERO, rt_load_i64(memory_at_0, loc_5 + 200)), rt_i64_ZERO)
			loc_4 = rt_sub_i64(rt_bit_or_i64(rt_shl_i64(rt_load_i64(memory_at_0, loc_5 + 184), rt_i64_ONE), rt_shr_u64(rt_load_i64(memory_at_0, loc_5 + 176), rt_i64_from_u32(63, 0))), rt_i64_ONE)
			FUNC_LIST[672](rt_add_i32(loc_5, 160), loc_2, rt_i64_ZERO, loc_4, rt_i64_ZERO)
			FUNC_LIST[672](rt_add_i32(loc_5, 144), rt_shl_i64(loc_3, rt_i64_from_u32(15, 0)), rt_i64_ZERO, loc_4, rt_i64_ZERO)
			loc_11 = rt_load_i64(memory_at_0, loc_5 + 160)
			loc_2 = rt_add_i64(loc_11, rt_load_i64(memory_at_0, loc_5 + 152))
			FUNC_LIST[672](rt_add_i32(loc_5, 112), loc_4, rt_i64_ZERO, rt_sub_i64(rt_i64_ZERO, rt_add_i64(rt_add_i64(rt_load_i64(memory_at_0, loc_5 + 168), rt_extend_i64_u32((if rt_lt_u64(loc_2, loc_11) then 1 else 0))), rt_extend_i64_u32((if rt_gt_u64(loc_2, rt_i64_ONE) then 1 else 0)))), rt_i64_ZERO)
			FUNC_LIST[672](rt_add_i32(loc_5, 128), rt_sub_i64(rt_i64_ONE, loc_2), rt_i64_ZERO, loc_4, rt_i64_ZERO)
			loc_6 = rt_add_i32(rt_sub_i32(loc_9, loc_6), loc_7)
			while true do
				loc_18 = rt_load_i64(memory_at_0, loc_5 + 112)
				loc_14 = rt_shl_i64(loc_18, rt_i64_ONE)
				loc_15 = rt_load_i64(memory_at_0, loc_5 + 136)
				loc_13 = rt_add_i64(loc_14, rt_bit_or_i64(rt_shl_i64(loc_15, rt_i64_ONE), rt_shr_u64(rt_load_i64(memory_at_0, loc_5 + 128), rt_i64_from_u32(63, 0))))
				loc_19 = rt_sub_i64(loc_13, rt_i64_from_u32(13927, 0))
				loc_2 = rt_shr_u64(loc_19, rt_i64_from_u32(32, 0))
				loc_21 = rt_bit_or_i64(loc_10, rt_i64_from_u32(0, 65536))
				loc_23 = rt_shl_i64(loc_21, rt_i64_ONE)
				loc_4 = rt_shr_u64(loc_23, rt_i64_from_u32(32, 0))
				loc_16 = rt_mul_i64(loc_2, loc_4)
				loc_20 = rt_shl_i64(loc_1, rt_i64_ONE)
				loc_11 = rt_shr_u64(loc_20, rt_i64_from_u32(32, 0))
				loc_18 = rt_sub_i64(rt_add_i64(rt_extend_i64_u32((if rt_gt_u64(loc_13, loc_19) then 1 else 0)), rt_add_i64(rt_extend_i64_u32((if rt_lt_u64(loc_13, loc_14) then 1 else 0)), rt_add_i64(rt_bit_or_i64(rt_shl_i64(rt_load_i64(memory_at_0, loc_5 + 120), rt_i64_ONE), rt_shr_u64(loc_18, rt_i64_from_u32(63, 0))), rt_shr_u64(loc_15, rt_i64_from_u32(63, 0))))), rt_i64_ONE)
				loc_13 = rt_shr_u64(loc_18, rt_i64_from_u32(32, 0))
				loc_14 = rt_add_i64(loc_16, rt_mul_i64(loc_11, loc_13))
				loc_18 = rt_bit_and_i64(loc_18, rt_i64_from_u32(4294967295, 0))
				loc_24 = rt_shr_u64(loc_1, rt_i64_from_u32(63, 0))
				loc_10 = rt_bit_and_i64(rt_bit_or_i64(loc_24, rt_shl_i64(loc_10, rt_i64_ONE)), rt_i64_from_u32(4294967295, 0))
				loc_15 = rt_add_i64(rt_mul_i64(loc_18, loc_10), loc_14)
				reg_0 = rt_add_i64(rt_add_i64(rt_extend_i64_u32((if rt_lt_u64(loc_14, loc_16) then 1 else 0)), rt_extend_i64_u32((if rt_gt_u64(loc_14, loc_15) then 1 else 0))), rt_mul_i64(loc_4, loc_13))
				loc_16 = rt_mul_i64(loc_4, loc_18)
				loc_14 = rt_add_i64(loc_16, rt_mul_i64(loc_10, loc_13))
				reg_0 = rt_add_i64(reg_0, rt_bit_or_i64(rt_shl_i64(rt_extend_i64_u32((if rt_lt_u64(loc_14, loc_16) then 1 else 0)), rt_i64_from_u32(32, 0)), rt_shr_u64(loc_14, rt_i64_from_u32(32, 0))))
				loc_14 = rt_add_i64(rt_shl_i64(loc_14, rt_i64_from_u32(32, 0)), loc_15)
				loc_19 = rt_bit_and_i64(loc_19, rt_i64_from_u32(4294967295, 0))
				loc_16 = rt_mul_i64(loc_10, loc_19)
				reg_0 = rt_add_i64(reg_0, rt_extend_i64_u32((if rt_gt_u64(loc_15, loc_14) then 1 else 0)))
				loc_15 = rt_add_i64(loc_16, rt_mul_i64(loc_2, loc_11))
				reg_2 = rt_extend_i64_u32((if rt_lt_u64(loc_15, loc_16) then 1 else 0))
				loc_16 = rt_bit_and_i64(loc_20, rt_i64_from_u32(4294967294, 0))
				loc_22 = rt_add_i64(rt_mul_i64(loc_16, loc_18), loc_15)
				loc_15 = rt_add_i64(rt_add_i64(reg_2, rt_extend_i64_u32((if rt_gt_u64(loc_15, loc_22) then 1 else 0))), loc_14)
				reg_0 = rt_add_i64(reg_0, rt_extend_i64_u32((if rt_gt_u64(loc_14, loc_15) then 1 else 0)))
				loc_14 = rt_mul_i64(loc_4, loc_19)
				loc_4 = rt_add_i64(loc_14, rt_mul_i64(loc_13, loc_16))
				loc_10 = rt_add_i64(loc_4, rt_mul_i64(loc_2, loc_10))
				loc_13 = rt_add_i64(loc_10, rt_mul_i64(loc_11, loc_18))
				loc_4 = rt_add_i64(rt_bit_or_i64(rt_shr_u64(loc_13, rt_i64_from_u32(32, 0)), rt_shl_i64(rt_add_i64(rt_extend_i64_u32((if rt_gt_u64(loc_10, loc_13) then 1 else 0)), rt_add_i64(rt_extend_i64_u32((if rt_lt_u64(loc_4, loc_14) then 1 else 0)), rt_extend_i64_u32((if rt_gt_u64(loc_4, loc_10) then 1 else 0)))), rt_i64_from_u32(32, 0))), loc_15)
				loc_2 = rt_mul_i64(loc_2, loc_16)
				loc_10 = rt_add_i64(loc_2, rt_mul_i64(loc_11, loc_19))
				loc_2 = rt_add_i64(rt_bit_or_i64(rt_shr_u64(loc_10, rt_i64_from_u32(32, 0)), rt_shl_i64(rt_extend_i64_u32((if rt_gt_u64(loc_2, loc_10) then 1 else 0)), rt_i64_from_u32(32, 0))), loc_22)
				loc_2 = rt_add_i64(rt_add_i64(rt_extend_i64_u32((if rt_gt_u64(loc_22, loc_2) then 1 else 0)), rt_extend_i64_u32((if rt_gt_u64(loc_2, rt_add_i64(rt_shl_i64(loc_13, rt_i64_from_u32(32, 0)), loc_2)) then 1 else 0))), loc_4)
				loc_4 = rt_add_i64(rt_add_i64(reg_0, rt_extend_i64_u32((if rt_gt_u64(loc_15, loc_4) then 1 else 0))), rt_extend_i64_u32((if rt_gt_u64(loc_4, loc_2) then 1 else 0)))
				if rt_le_u64(loc_4, rt_i64_from_u32(4294967295, 131071)) then
					while true do
						loc_21 = rt_bit_or_i64(loc_23, loc_24)
						FUNC_LIST[672](rt_add_i32(loc_5, 80), loc_2, loc_4, loc_3, loc_17)
						reg_0 = rt_sub_i64(rt_shl_i64(loc_1, rt_i64_from_u32(49, 0)), rt_load_i64(memory_at_0, loc_5 + 88))
						loc_1 = rt_load_i64(memory_at_0, loc_5 + 80)
						loc_11 = rt_sub_i64(reg_0, rt_extend_i64_u32((if rt_ne_i64(loc_1, rt_i64_ZERO) then 1 else 0)))
						loc_6 = rt_add_i32(loc_6, 16382)
						reg_0 = rt_sub_i64(rt_i64_ZERO, loc_1)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = rt_bit_or_i64(rt_shl_i64(loc_4, rt_i64_from_u32(63, 0)), rt_shr_u64(loc_2, rt_i64_ONE))
				loc_4 = rt_shr_u64(loc_4, rt_i64_ONE)
				FUNC_LIST[672](rt_add_i32(loc_5, 96), loc_2, loc_4, loc_3, loc_17)
				loc_10 = rt_load_i64(memory_at_0, loc_5 + 96)
				loc_11 = rt_sub_i64(rt_sub_i64(rt_shl_i64(loc_1, rt_i64_from_u32(48, 0)), rt_load_i64(memory_at_0, loc_5 + 104)), rt_extend_i64_u32((if rt_ne_i64(loc_10, rt_i64_ZERO) then 1 else 0)))
				loc_6 = rt_add_i32(loc_6, 16383)
				loc_20 = loc_1
				reg_0 = rt_sub_i64(rt_i64_ZERO, loc_10)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_10 = reg_0
			if rt_ge_i32(loc_6, 32767) then
				while true do
					loc_12 = rt_bit_or_i64(loc_12, rt_i64_from_u32(0, 2147418112))
					loc_1 = rt_i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				if rt_gt_i32(loc_6, 0) then
					while true do
						loc_1 = rt_bit_or_i64(rt_shl_i64(loc_11, rt_i64_ONE), rt_shr_u64(loc_10, rt_i64_from_u32(63, 0)))
						loc_11 = rt_bit_or_i64(rt_bit_and_i64(loc_4, rt_i64_from_u32(4294967295, 65535)), rt_shl_i64(rt_extend_i64_u32(loc_6), rt_i64_from_u32(48, 0)))
						reg_0 = rt_shl_i64(loc_10, rt_i64_ONE)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_le_i32(loc_6, 4294967183) then
					while true do
						loc_1 = rt_i64_ZERO
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[670](rt_sub_i32(loc_5, 4294967232), loc_2, loc_4, rt_sub_i32(1, loc_6))
				FUNC_LIST[662](rt_add_i32(loc_5, 48), loc_20, loc_21, rt_add_i32(loc_6, 112))
				loc_2 = rt_load_i64(memory_at_0, loc_5 + 64)
				loc_11 = rt_load_i64(memory_at_0, loc_5 + 72)
				FUNC_LIST[672](rt_add_i32(loc_5, 32), loc_3, loc_17, loc_2, loc_11)
				loc_1 = rt_load_i64(memory_at_0, loc_5 + 32)
				loc_4 = rt_load_i64(memory_at_0, loc_5 + 48)
				loc_10 = rt_shl_i64(loc_1, rt_i64_ONE)
				loc_1 = rt_sub_i64(rt_sub_i64(rt_load_i64(memory_at_0, loc_5 + 56), rt_bit_or_i64(rt_shl_i64(rt_load_i64(memory_at_0, loc_5 + 40), rt_i64_ONE), rt_shr_u64(loc_1, rt_i64_from_u32(63, 0)))), rt_extend_i64_u32((if rt_lt_u64(loc_4, loc_10) then 1 else 0)))
				reg_0 = rt_sub_i64(loc_4, loc_10)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = reg_0
			FUNC_LIST[672](rt_add_i32(loc_5, 16), loc_3, loc_17, rt_i64_from_u32(3, 0), rt_i64_ZERO)
			FUNC_LIST[672](loc_5, loc_3, loc_17, rt_i64_from_u32(5, 0), rt_i64_ZERO)
			loc_10 = rt_bit_and_i64(loc_2, rt_i64_ONE)
			loc_4 = rt_add_i64(loc_4, loc_10)
			loc_1 = rt_add_i64(rt_extend_i64_u32((if rt_lt_u64(loc_4, loc_10) then 1 else 0)), loc_1)
			loc_3 = rt_add_i64(rt_extend_i64_u32((if rt_eq_i64(loc_1, loc_17) then (if rt_lt_u64(loc_3, loc_4) then 1 else 0) else (if rt_lt_u64(loc_17, loc_1) then 1 else 0))), loc_2)
			loc_2 = rt_add_i64(rt_extend_i64_u32((if rt_gt_u64(loc_2, loc_3) then 1 else 0)), loc_11)
			reg_1 = loc_2
			reg_3 = (if rt_lt_u64(loc_2, rt_i64_from_u32(0, 2147418112)) then 1 else 0)
			loc_2 = rt_load_i64(memory_at_0, loc_5 + 24)
			loc_2 = rt_add_i64(rt_extend_i64_u32(bit_and(reg_3, (if rt_eq_i64(loc_1, loc_2) then (if rt_lt_u64(rt_load_i64(memory_at_0, loc_5 + 16), loc_4) then 1 else 0) else (if rt_lt_u64(loc_2, loc_1) then 1 else 0)))), loc_3)
			loc_3 = rt_add_i64(reg_1, rt_extend_i64_u32((if rt_gt_u64(loc_3, loc_2) then 1 else 0)))
			reg_4 = (if rt_lt_u64(rt_load_i64(memory_at_0, loc_5), loc_4) then 1 else 0)
			loc_4 = rt_load_i64(memory_at_0, loc_5 + 8)
			loc_1 = rt_add_i64(rt_extend_i64_u32(bit_and((if rt_lt_u64(loc_3, rt_i64_from_u32(0, 2147418112)) then 1 else 0), (if rt_eq_i64(loc_1, loc_4) then reg_4 else (if rt_lt_u64(loc_4, loc_1) then 1 else 0)))), loc_2)
			loc_12 = rt_bit_or_i64(loc_12, rt_add_i64(loc_3, rt_extend_i64_u32((if rt_gt_u64(loc_2, loc_1) then 1 else 0))))
			break
		end
		rt_store_i64(memory_at_0, loc_0, loc_1)
		rt_store_i64(memory_at_0, loc_0 + 8, loc_12)
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 336)
		break
	end
end
FUNC_LIST[664] = --[[ setThrew ]] function(loc_0, loc_1)
	while true do
		if rt_load_i32(memory_at_0, 36876) == 0 then
			while true do
				rt_store_i32(memory_at_0, 36880, loc_1)
				rt_store_i32(memory_at_0, 36876, loc_0)
				break
			end
		end
		break
	end
end
FUNC_LIST[665] = --[[ __wasm_setjmp ]] function(loc_0, loc_1, loc_2)
	while true do
		rt_store_i32(memory_at_0, loc_0 + 4, loc_1)
		rt_store_i32(memory_at_0, loc_0, loc_2)
		break
	end
end
FUNC_LIST[666] = --[[ __wasm_setjmp_test ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		if rt_load_i32(memory_at_0, loc_0) == loc_1 then
			while true do
				reg_0 = rt_load_i32(memory_at_0, loc_0 + 4)
				break
			end
		else
			while true do
				reg_0 = loc_2
				break
			end
		end
		loc_2 = reg_0
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[667] = --[[ emscripten_longjmp ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[664](loc_0, (if loc_1 <= 1 then 1 else loc_1))
		FUNC_LIST[8]()
		break
	end
end
FUNC_LIST[668] = --[[ _emscripten_tempret_set ]] function(loc_0)
	while true do
		GLOBAL_LIST[1].value = loc_0
		break
	end
end
FUNC_LIST[669] = --[[ _emscripten_tempret_get ]] function()
	local reg_0
	while true do
		reg_0 = GLOBAL_LIST[1].value
		break
	end
	return reg_0
end
FUNC_LIST[670] = --[[ __lshrti3 ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = rt_i64_ZERO
	local desired
	while true do
		while true do
			if bit_and(loc_3, 64) ~= 0 then
				while true do
					loc_1 = rt_shr_u64(loc_2, rt_extend_i64_u32(rt_add_i32(loc_3, 4294967232)))
					loc_2 = rt_i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_3 == 0 then
				break
			end
			loc_4 = rt_extend_i64_u32(loc_3)
			loc_1 = rt_bit_or_i64(rt_shl_i64(loc_2, rt_extend_i64_u32(rt_sub_i32(64, loc_3))), rt_shr_u64(loc_1, loc_4))
			loc_2 = rt_shr_u64(loc_2, loc_4)
			break
		end
		rt_store_i64(memory_at_0, loc_0, loc_1)
		rt_store_i64(memory_at_0, loc_0 + 8, loc_2)
		break
	end
end
FUNC_LIST[671] = --[[ __multf3 ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = rt_i64_ZERO
	local loc_11 = rt_i64_ZERO
	local loc_12 = rt_i64_ZERO
	local loc_13 = rt_i64_ZERO
	local loc_14 = rt_i64_ZERO
	local loc_15 = rt_i64_ZERO
	local loc_16 = rt_i64_ZERO
	local loc_17 = rt_i64_ZERO
	local loc_18 = rt_i64_ZERO
	local loc_19 = rt_i64_ZERO
	local loc_20 = rt_i64_ZERO
	local loc_21 = rt_i64_ZERO
	local loc_22 = rt_i64_ZERO
	local loc_23 = rt_i64_ZERO
	local loc_24 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 96)
		GLOBAL_LIST[0].value = loc_5
		loc_12 = rt_bit_and_i64(loc_4, rt_i64_from_u32(4294967295, 65535))
		loc_10 = rt_bit_and_i64(rt_bit_xor_i64(loc_2, loc_4), rt_i64_from_u32(0, 2147483648))
		loc_13 = rt_bit_and_i64(loc_2, rt_i64_from_u32(4294967295, 65535))
		loc_15 = rt_shr_u64(loc_13, rt_i64_from_u32(32, 0))
		loc_6 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_4, rt_i64_from_u32(48, 0))), 32767)
		while true do
			while true do
				loc_8 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_2, rt_i64_from_u32(48, 0))), 32767)
				if rt_sub_i32(loc_8, 32767) >= 4294934530 then
					while true do
						if rt_sub_i32(loc_6, 32767) > 4294934529 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_11 = rt_bit_and_i64(loc_2, rt_i64_from_u32(4294967295, 2147483647))
				if (if rt_eq_i64(loc_11, rt_i64_from_u32(0, 2147418112)) then (if rt_eq_i64(loc_1, rt_i64_ZERO) then 1 else 0) else (if rt_lt_u64(loc_11, rt_i64_from_u32(0, 2147418112)) then 1 else 0)) == 0 then
					while true do
						loc_10 = rt_bit_or_i64(loc_2, rt_i64_from_u32(0, 32768))
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = rt_bit_and_i64(loc_4, rt_i64_from_u32(4294967295, 2147483647))
				if (if rt_eq_i64(loc_2, rt_i64_from_u32(0, 2147418112)) then (if rt_eq_i64(loc_3, rt_i64_ZERO) then 1 else 0) else (if rt_lt_u64(loc_2, rt_i64_from_u32(0, 2147418112)) then 1 else 0)) == 0 then
					while true do
						loc_10 = rt_bit_or_i64(loc_4, rt_i64_from_u32(0, 32768))
						loc_1 = loc_3
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_eq_i64(rt_bit_or_i64(rt_bit_xor_i64(loc_11, rt_i64_from_u32(0, 2147418112)), loc_1), rt_i64_ZERO) then
					while true do
						if rt_eq_i64(rt_bit_or_i64(loc_2, loc_3), rt_i64_ZERO) then
							while true do
								loc_10 = rt_i64_from_u32(0, 2147450880)
								loc_1 = rt_i64_ZERO
								desired = 1
								break
							end
							if desired then
								break
							end
						end
						loc_10 = rt_bit_or_i64(loc_10, rt_i64_from_u32(0, 2147418112))
						loc_1 = rt_i64_ZERO
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_eq_i64(rt_bit_or_i64(rt_bit_xor_i64(loc_2, rt_i64_from_u32(0, 2147418112)), loc_3), rt_i64_ZERO) then
					while true do
						loc_2 = rt_bit_or_i64(loc_1, loc_11)
						loc_1 = rt_i64_ZERO
						if rt_eq_i64(loc_2, rt_i64_ZERO) then
							while true do
								loc_10 = rt_i64_from_u32(0, 2147450880)
								desired = 1
								break
							end
							if desired then
								break
							end
						end
						loc_10 = rt_bit_or_i64(loc_10, rt_i64_from_u32(0, 2147418112))
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_eq_i64(rt_bit_or_i64(loc_1, loc_11), rt_i64_ZERO) then
					while true do
						loc_1 = rt_i64_ZERO
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_eq_i64(rt_bit_or_i64(loc_2, loc_3), rt_i64_ZERO) then
					while true do
						loc_1 = rt_i64_ZERO
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_le_u64(loc_11, rt_i64_from_u32(4294967295, 65535)) then
					while true do
						loc_7 = (if rt_eq_i64(loc_13, rt_i64_ZERO) then 1 else 0)
						loc_7 = rt_wrap_i32_i64(rt_add_i64(rt_clz_i64((if loc_7 ~= 0 then loc_1 else loc_13)), rt_extend_i64_u32(rt_shl_i32(loc_7, 6))))
						FUNC_LIST[662](rt_add_i32(loc_5, 80), loc_1, loc_13, rt_sub_i32(loc_7, 15))
						loc_7 = rt_sub_i32(16, loc_7)
						loc_13 = rt_load_i64(memory_at_0, loc_5 + 88)
						loc_15 = rt_shr_u64(loc_13, rt_i64_from_u32(32, 0))
						reg_0 = rt_load_i64(memory_at_0, loc_5 + 80)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_1 = reg_0
				if rt_gt_u64(loc_2, rt_i64_from_u32(4294967295, 65535)) then
					break
				end
				loc_9 = (if rt_eq_i64(loc_12, rt_i64_ZERO) then 1 else 0)
				loc_9 = rt_wrap_i32_i64(rt_add_i64(rt_clz_i64((if loc_9 ~= 0 then loc_3 else loc_12)), rt_extend_i64_u32(rt_shl_i32(loc_9, 6))))
				FUNC_LIST[662](rt_sub_i32(loc_5, 4294967232), loc_3, loc_12, rt_sub_i32(loc_9, 15))
				loc_7 = rt_add_i32(rt_sub_i32(loc_7, loc_9), 16)
				loc_12 = rt_load_i64(memory_at_0, loc_5 + 72)
				loc_3 = rt_load_i64(memory_at_0, loc_5 + 64)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_11 = rt_shl_i64(loc_3, rt_i64_from_u32(15, 0))
			loc_2 = rt_bit_and_i64(loc_11, rt_i64_from_u32(4294934528, 0))
			loc_4 = rt_shr_u64(loc_1, rt_i64_from_u32(32, 0))
			loc_17 = rt_mul_i64(loc_2, loc_4)
			loc_11 = rt_shr_u64(loc_11, rt_i64_from_u32(32, 0))
			loc_1 = rt_bit_and_i64(loc_1, rt_i64_from_u32(4294967295, 0))
			loc_16 = rt_add_i64(loc_17, rt_mul_i64(loc_11, loc_1))
			loc_18 = rt_shl_i64(loc_16, rt_i64_from_u32(32, 0))
			loc_14 = rt_add_i64(loc_18, rt_mul_i64(loc_1, loc_2))
			loc_13 = rt_bit_and_i64(loc_13, rt_i64_from_u32(4294967295, 0))
			loc_21 = rt_mul_i64(loc_13, loc_2)
			reg_0 = rt_extend_i64_u32((if rt_lt_u64(loc_14, loc_18) then 1 else 0))
			loc_18 = rt_add_i64(loc_21, rt_mul_i64(loc_4, loc_11))
			loc_19 = rt_shl_i64(loc_12, rt_i64_from_u32(15, 0))
			loc_3 = rt_bit_and_i64(rt_bit_or_i64(loc_19, rt_shr_u64(loc_3, rt_i64_from_u32(49, 0))), rt_i64_from_u32(4294967295, 0))
			loc_20 = rt_add_i64(loc_18, rt_mul_i64(loc_1, loc_3))
			loc_16 = rt_add_i64(loc_20, rt_bit_or_i64(rt_shl_i64(rt_extend_i64_u32((if rt_lt_u64(loc_16, loc_17) then 1 else 0)), rt_i64_from_u32(32, 0)), rt_shr_u64(loc_16, rt_i64_from_u32(32, 0))))
			loc_12 = rt_bit_or_i64(loc_15, rt_i64_from_u32(65536, 0))
			loc_22 = rt_mul_i64(loc_12, loc_2)
			loc_15 = rt_add_i64(loc_22, rt_mul_i64(loc_11, loc_13))
			loc_2 = rt_bit_or_i64(rt_shr_u64(loc_19, rt_i64_from_u32(32, 0)), rt_i64_from_u32(2147483648, 0))
			loc_17 = rt_add_i64(loc_15, rt_mul_i64(loc_1, loc_2))
			loc_19 = rt_add_i64(loc_17, rt_mul_i64(loc_3, loc_4))
			loc_23 = rt_add_i64(loc_16, rt_shl_i64(loc_19, rt_i64_from_u32(32, 0)))
			loc_1 = rt_add_i64(reg_0, loc_23)
			loc_6 = rt_sub_i32(rt_add_i32(loc_7, rt_add_i32(loc_6, loc_8)), 16383)
			while true do
				loc_24 = rt_mul_i64(loc_2, loc_4)
				loc_4 = rt_add_i64(loc_24, rt_mul_i64(loc_11, loc_12))
				loc_11 = rt_add_i64(rt_mul_i64(loc_3, loc_13), loc_4)
				reg_0 = rt_add_i64(rt_add_i64(rt_extend_i64_u32((if rt_lt_u64(loc_4, loc_24) then 1 else 0)), rt_extend_i64_u32((if rt_gt_u64(loc_4, loc_11) then 1 else 0))), rt_mul_i64(loc_2, loc_12))
				loc_4 = rt_add_i64(rt_add_i64(rt_extend_i64_u32((if rt_lt_u64(loc_18, loc_21) then 1 else 0)), rt_extend_i64_u32((if rt_gt_u64(loc_18, loc_20) then 1 else 0))), loc_11)
				loc_3 = rt_mul_i64(loc_3, loc_12)
				loc_2 = rt_add_i64(loc_3, rt_mul_i64(loc_2, loc_13))
				reg_0 = rt_add_i64(rt_add_i64(reg_0, rt_extend_i64_u32((if rt_gt_u64(loc_11, loc_4) then 1 else 0))), rt_bit_or_i64(rt_shl_i64(rt_extend_i64_u32((if rt_lt_u64(loc_2, loc_3) then 1 else 0)), rt_i64_from_u32(32, 0)), rt_shr_u64(loc_2, rt_i64_from_u32(32, 0))))
				loc_2 = rt_add_i64(rt_shl_i64(loc_2, rt_i64_from_u32(32, 0)), loc_4)
				reg_0 = rt_add_i64(reg_0, rt_extend_i64_u32((if rt_gt_u64(loc_4, loc_2) then 1 else 0)))
				loc_4 = rt_add_i64(rt_bit_or_i64(rt_shl_i64(rt_add_i64(rt_extend_i64_u32((if rt_gt_u64(loc_17, loc_19) then 1 else 0)), rt_add_i64(rt_extend_i64_u32((if rt_lt_u64(loc_15, loc_22) then 1 else 0)), rt_extend_i64_u32((if rt_gt_u64(loc_15, loc_17) then 1 else 0)))), rt_i64_from_u32(32, 0)), rt_shr_u64(loc_19, rt_i64_from_u32(32, 0))), loc_2)
				reg_0 = rt_add_i64(reg_0, rt_extend_i64_u32((if rt_gt_u64(loc_2, loc_4) then 1 else 0)))
				loc_2 = rt_add_i64(rt_add_i64(rt_extend_i64_u32((if rt_lt_u64(loc_16, loc_20) then 1 else 0)), rt_extend_i64_u32((if rt_gt_u64(loc_16, loc_23) then 1 else 0))), loc_4)
				loc_4 = rt_add_i64(reg_0, rt_extend_i64_u32((if rt_gt_u64(loc_4, loc_2) then 1 else 0)))
				if rt_ne_i64(rt_bit_and_i64(loc_4, rt_i64_from_u32(0, 65536)), rt_i64_ZERO) then
					while true do
						loc_6 = rt_add_i32(loc_6, 1)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_3 = rt_shr_u64(loc_14, rt_i64_from_u32(63, 0))
				loc_4 = rt_bit_or_i64(rt_shl_i64(loc_4, rt_i64_ONE), rt_shr_u64(loc_2, rt_i64_from_u32(63, 0)))
				loc_2 = rt_bit_or_i64(rt_shl_i64(loc_2, rt_i64_ONE), rt_shr_u64(loc_1, rt_i64_from_u32(63, 0)))
				loc_14 = rt_shl_i64(loc_14, rt_i64_ONE)
				loc_1 = rt_bit_or_i64(rt_shl_i64(loc_1, rt_i64_ONE), loc_3)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if rt_ge_i32(loc_6, 32767) then
				while true do
					loc_10 = rt_bit_or_i64(loc_10, rt_i64_from_u32(0, 2147418112))
					loc_1 = rt_i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				if rt_le_i32(loc_6, 0) then
					while true do
						loc_8 = rt_sub_i32(1, loc_6)
						if loc_8 <= 127 then
							while true do
								loc_6 = rt_add_i32(loc_6, 127)
								FUNC_LIST[662](rt_add_i32(loc_5, 48), loc_14, loc_1, loc_6)
								FUNC_LIST[662](rt_add_i32(loc_5, 32), loc_2, loc_4, loc_6)
								FUNC_LIST[670](rt_add_i32(loc_5, 16), loc_14, loc_1, loc_8)
								FUNC_LIST[670](loc_5, loc_2, loc_4, loc_8)
								loc_14 = rt_bit_or_i64(rt_extend_i64_u32((if rt_ne_i64(rt_bit_or_i64(rt_load_i64(memory_at_0, loc_5 + 48), rt_load_i64(memory_at_0, loc_5 + 56)), rt_i64_ZERO) then 1 else 0)), rt_bit_or_i64(rt_load_i64(memory_at_0, loc_5 + 32), rt_load_i64(memory_at_0, loc_5 + 16)))
								loc_1 = rt_bit_or_i64(rt_load_i64(memory_at_0, loc_5 + 40), rt_load_i64(memory_at_0, loc_5 + 24))
								loc_2 = rt_load_i64(memory_at_0, loc_5)
								reg_0 = rt_load_i64(memory_at_0, loc_5 + 8)
								desired = 2
								break
							end
							if desired then
								break
							end
						end
						loc_1 = rt_i64_ZERO
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = rt_bit_or_i64(rt_bit_and_i64(loc_4, rt_i64_from_u32(4294967295, 65535)), rt_shl_i64(rt_extend_i64_u32(loc_6), rt_i64_from_u32(48, 0)))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = reg_0
			loc_10 = rt_bit_or_i64(loc_4, loc_10)
			if (if rt_eq_i64(loc_1, rt_i64_from_u32(0, 2147483648)) then (if rt_eq_i64(loc_14, rt_i64_ZERO) then 1 else 0) else (if rt_ge_i64(loc_1, rt_i64_ZERO) then 1 else 0)) == 0 then
				while true do
					loc_1 = rt_add_i64(loc_2, rt_i64_ONE)
					loc_10 = rt_add_i64(rt_extend_i64_u32((if rt_eq_i64(loc_1, rt_i64_ZERO) then 1 else 0)), loc_10)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ne_i64(rt_bit_or_i64(rt_bit_xor_i64(loc_1, rt_i64_from_u32(0, 2147483648)), loc_14), rt_i64_ZERO) then
				while true do
					loc_1 = loc_2
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = rt_add_i64(rt_bit_and_i64(loc_2, rt_i64_ONE), loc_2)
			loc_10 = rt_add_i64(rt_extend_i64_u32((if rt_gt_u64(loc_2, loc_1) then 1 else 0)), loc_10)
			break
		end
		rt_store_i64(memory_at_0, loc_0, loc_1)
		rt_store_i64(memory_at_0, loc_0 + 8, loc_10)
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 96)
		break
	end
end
FUNC_LIST[672] = --[[ __multi3 ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = rt_i64_ZERO
	local reg_0
	local reg_1
	while true do
		reg_1 = rt_add_i64(rt_mul_i64(loc_1, loc_4), rt_mul_i64(loc_2, loc_3))
		loc_2 = rt_shr_u64(loc_3, rt_i64_from_u32(32, 0))
		loc_4 = rt_shr_u64(loc_1, rt_i64_from_u32(32, 0))
		loc_3 = rt_bit_and_i64(loc_3, rt_i64_from_u32(4294967295, 0))
		loc_1 = rt_bit_and_i64(loc_1, rt_i64_from_u32(4294967295, 0))
		loc_5 = rt_mul_i64(loc_3, loc_1)
		loc_3 = rt_add_i64(rt_shr_u64(loc_5, rt_i64_from_u32(32, 0)), rt_mul_i64(loc_3, loc_4))
		loc_1 = rt_add_i64(rt_mul_i64(loc_1, loc_2), rt_bit_and_i64(loc_3, rt_i64_from_u32(4294967295, 0)))
		rt_store_i64(memory_at_0, loc_0 + 8, rt_add_i64(rt_add_i64(rt_add_i64(reg_1, rt_mul_i64(loc_2, loc_4)), rt_shr_u64(loc_3, rt_i64_from_u32(32, 0))), rt_shr_u64(loc_1, rt_i64_from_u32(32, 0))))
		rt_store_i64(memory_at_0, loc_0, rt_bit_or_i64(rt_bit_and_i64(loc_5, rt_i64_from_u32(4294967295, 0)), rt_shl_i64(loc_1, rt_i64_from_u32(32, 0))))
		break
	end
end
FUNC_LIST[673] = --[[ _emscripten_stack_restore ]] function(loc_0)
	while true do
		GLOBAL_LIST[0].value = loc_0
		break
	end
end
FUNC_LIST[674] = --[[ _emscripten_stack_alloc ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		loc_1 = bit_and(rt_sub_i32(GLOBAL_LIST[0].value, loc_0), 4294967280)
		GLOBAL_LIST[0].value = loc_1
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[675] = --[[ emscripten_stack_get_current ]] function()
	local reg_0
	while true do
		reg_0 = GLOBAL_LIST[0].value
		break
	end
	return reg_0
end
FUNC_LIST[676] = --[[ __fe_getround ]] function()
	local reg_0
	while true do
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[677] = --[[ __addtf3 ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = rt_i64_ZERO
	local loc_6 = rt_i64_ZERO
	local loc_7 = rt_i64_ZERO
	local loc_8 = rt_i64_ZERO
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_10 = rt_sub_i32(GLOBAL_LIST[0].value, 112)
		GLOBAL_LIST[0].value = loc_10
		loc_6 = rt_bit_and_i64(loc_4, rt_i64_from_u32(4294967295, 2147483647))
		while true do
			while true do
				loc_9 = (if rt_eq_i64(loc_1, rt_i64_ZERO) then 1 else 0)
				loc_5 = rt_bit_and_i64(loc_2, rt_i64_from_u32(4294967295, 2147483647))
				if (if rt_eq_i64(loc_5, rt_i64_ZERO) then loc_9 else (if rt_lt_u64(rt_sub_i64(loc_5, rt_i64_from_u32(0, 2147418112)), rt_i64_from_u32(0, 2147549184)) then 1 else 0)) == 0 then
					while true do
						loc_8 = rt_sub_i64(loc_6, rt_i64_from_u32(0, 2147418112))
						if (if rt_eq_i64(loc_8, rt_i64_from_u32(0, 2147549184)) then (if rt_ne_i64(loc_3, rt_i64_ZERO) then 1 else 0) else (if rt_gt_u64(loc_8, rt_i64_from_u32(0, 2147549184)) then 1 else 0)) ~= 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if (if rt_eq_i64(loc_5, rt_i64_from_u32(0, 2147418112)) then loc_9 else (if rt_lt_u64(loc_5, rt_i64_from_u32(0, 2147418112)) then 1 else 0)) == 0 then
					while true do
						loc_4 = rt_bit_or_i64(loc_2, rt_i64_from_u32(0, 32768))
						loc_3 = loc_1
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if (if rt_eq_i64(loc_6, rt_i64_from_u32(0, 2147418112)) then (if rt_eq_i64(loc_3, rt_i64_ZERO) then 1 else 0) else (if rt_lt_u64(loc_6, rt_i64_from_u32(0, 2147418112)) then 1 else 0)) == 0 then
					while true do
						loc_4 = rt_bit_or_i64(loc_4, rt_i64_from_u32(0, 32768))
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_eq_i64(rt_bit_or_i64(rt_bit_xor_i64(loc_5, rt_i64_from_u32(0, 2147418112)), loc_1), rt_i64_ZERO) then
					while true do
						loc_9 = (if rt_eq_i64(rt_bit_or_i64(rt_bit_xor_i64(loc_1, loc_3), rt_bit_xor_i64(rt_bit_xor_i64(loc_2, loc_4), rt_i64_from_u32(0, 2147483648))), rt_i64_ZERO) then 1 else 0)
						loc_4 = (if loc_9 ~= 0 then rt_i64_from_u32(0, 2147450880) else loc_2)
						loc_3 = (if loc_9 ~= 0 then rt_i64_ZERO else loc_1)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_eq_i64(rt_bit_or_i64(rt_bit_xor_i64(loc_6, rt_i64_from_u32(0, 2147418112)), loc_3), rt_i64_ZERO) then
					desired = 1
					break
				end
				if rt_eq_i64(rt_bit_or_i64(loc_1, loc_5), rt_i64_ZERO) then
					while true do
						if rt_ne_i64(rt_bit_or_i64(loc_3, loc_6), rt_i64_ZERO) then
							desired = 1
							break
						end
						loc_3 = rt_bit_and_i64(loc_1, loc_3)
						loc_4 = rt_bit_and_i64(loc_2, loc_4)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_ne_i64(rt_bit_or_i64(loc_3, loc_6), rt_i64_ZERO) then
					break
				end
				loc_3 = loc_1
				loc_4 = loc_2
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_11 = (if rt_eq_i64(loc_5, loc_6) then (if rt_lt_u64(loc_1, loc_3) then 1 else 0) else (if rt_lt_u64(loc_5, loc_6) then 1 else 0))
			loc_6 = (if loc_11 ~= 0 then loc_3 else loc_1)
			loc_8 = (if loc_11 ~= 0 then loc_4 else loc_2)
			loc_5 = rt_bit_and_i64(loc_8, rt_i64_from_u32(4294967295, 65535))
			loc_7 = (if loc_11 ~= 0 then loc_2 else loc_4)
			loc_12 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_7, rt_i64_from_u32(48, 0))), 32767)
			loc_9 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_8, rt_i64_from_u32(48, 0))), 32767)
			if loc_9 ~= 0 then
				while true do
					reg_0 = loc_5
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					loc_9 = (if rt_eq_i64(loc_5, rt_i64_ZERO) then 1 else 0)
					loc_9 = rt_wrap_i32_i64(rt_add_i64(rt_clz_i64((if loc_9 ~= 0 then loc_6 else loc_5)), rt_extend_i64_u32(rt_shl_i32(loc_9, 6))))
					FUNC_LIST[662](rt_add_i32(loc_10, 96), loc_6, loc_5, rt_sub_i32(loc_9, 15))
					loc_9 = rt_sub_i32(16, loc_9)
					loc_6 = rt_load_i64(memory_at_0, loc_10 + 96)
					reg_0 = rt_load_i64(memory_at_0, loc_10 + 104)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_5 = reg_0
			loc_3 = (if loc_11 ~= 0 then loc_1 else loc_3)
			loc_1 = rt_bit_and_i64(loc_7, rt_i64_from_u32(4294967295, 65535))
			if loc_12 ~= 0 then
				while true do
					reg_0 = loc_1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					loc_11 = (if rt_eq_i64(loc_1, rt_i64_ZERO) then 1 else 0)
					loc_11 = rt_wrap_i32_i64(rt_add_i64(rt_clz_i64((if loc_11 ~= 0 then loc_3 else loc_1)), rt_extend_i64_u32(rt_shl_i32(loc_11, 6))))
					FUNC_LIST[662](rt_add_i32(loc_10, 80), loc_3, loc_1, rt_sub_i32(loc_11, 15))
					loc_12 = rt_sub_i32(16, loc_11)
					loc_3 = rt_load_i64(memory_at_0, loc_10 + 80)
					reg_0 = rt_load_i64(memory_at_0, loc_10 + 88)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = reg_0
			loc_1 = rt_bit_or_i64(rt_bit_or_i64(rt_shl_i64(loc_1, rt_i64_from_u32(3, 0)), rt_shr_u64(loc_3, rt_i64_from_u32(61, 0))), rt_i64_from_u32(0, 524288))
			loc_7 = rt_bit_or_i64(rt_shl_i64(loc_5, rt_i64_from_u32(3, 0)), rt_shr_u64(loc_6, rt_i64_from_u32(61, 0)))
			loc_5 = rt_shl_i64(loc_3, rt_i64_from_u32(3, 0))
			loc_3 = rt_bit_xor_i64(loc_2, loc_4)
			while true do
				if loc_9 == loc_12 then
					break
				end
				loc_11 = rt_sub_i32(loc_9, loc_12)
				if loc_11 > 127 then
					while true do
						loc_1 = rt_i64_ZERO
						loc_5 = rt_i64_ONE
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[662](rt_sub_i32(loc_10, 4294967232), loc_5, loc_1, rt_sub_i32(128, loc_11))
				FUNC_LIST[670](rt_add_i32(loc_10, 48), loc_5, loc_1, loc_11)
				loc_5 = rt_bit_or_i64(rt_load_i64(memory_at_0, loc_10 + 48), rt_extend_i64_u32((if rt_ne_i64(rt_bit_or_i64(rt_load_i64(memory_at_0, loc_10 + 64), rt_load_i64(memory_at_0, loc_10 + 72)), rt_i64_ZERO) then 1 else 0)))
				loc_1 = rt_load_i64(memory_at_0, loc_10 + 56)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_7 = rt_bit_or_i64(loc_7, rt_i64_from_u32(0, 524288))
			loc_6 = rt_shl_i64(loc_6, rt_i64_from_u32(3, 0))
			while true do
				if rt_lt_i64(loc_3, rt_i64_ZERO) then
					while true do
						loc_3 = rt_i64_ZERO
						loc_4 = rt_i64_ZERO
						if rt_eq_i64(rt_bit_or_i64(rt_bit_xor_i64(loc_5, loc_6), rt_bit_xor_i64(loc_1, loc_7)), rt_i64_ZERO) then
							desired = 1
							break
						end
						loc_2 = rt_sub_i64(loc_6, loc_5)
						loc_4 = rt_sub_i64(rt_sub_i64(loc_7, loc_1), rt_extend_i64_u32((if rt_gt_u64(loc_5, loc_6) then 1 else 0)))
						if rt_gt_u64(loc_4, rt_i64_from_u32(4294967295, 524287)) then
							desired = 2
							break
						end
						loc_11 = (if rt_eq_i64(loc_4, rt_i64_ZERO) then 1 else 0)
						loc_11 = rt_sub_i32(rt_wrap_i32_i64(rt_add_i64(rt_clz_i64((if loc_11 ~= 0 then loc_2 else loc_4)), rt_extend_i64_u32(rt_shl_i32(loc_11, 6)))), 12)
						FUNC_LIST[662](rt_add_i32(loc_10, 32), loc_2, loc_4, loc_11)
						loc_9 = rt_sub_i32(loc_9, loc_11)
						loc_4 = rt_load_i64(memory_at_0, loc_10 + 40)
						loc_2 = rt_load_i64(memory_at_0, loc_10 + 32)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = rt_add_i64(loc_5, loc_6)
				loc_4 = rt_add_i64(rt_extend_i64_u32((if rt_gt_u64(loc_5, loc_2) then 1 else 0)), rt_add_i64(loc_1, loc_7))
				if rt_eq_i64(rt_bit_and_i64(loc_4, rt_i64_from_u32(0, 1048576)), rt_i64_ZERO) then
					break
				end
				loc_2 = rt_bit_or_i64(rt_bit_and_i64(loc_5, rt_i64_ONE), rt_bit_or_i64(rt_shl_i64(loc_4, rt_i64_from_u32(63, 0)), rt_shr_u64(loc_2, rt_i64_ONE)))
				loc_9 = rt_add_i32(loc_9, 1)
				loc_4 = rt_shr_u64(loc_4, rt_i64_ONE)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = rt_bit_and_i64(loc_8, rt_i64_from_u32(0, 2147483648))
			if rt_ge_i32(loc_9, 32767) then
				while true do
					loc_4 = rt_bit_or_i64(loc_5, rt_i64_from_u32(0, 2147418112))
					loc_3 = rt_i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_11 = 0
			while true do
				if rt_gt_i32(loc_9, 0) then
					while true do
						loc_11 = loc_9
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[662](rt_add_i32(loc_10, 16), loc_2, loc_4, rt_add_i32(loc_9, 127))
				FUNC_LIST[670](loc_10, loc_2, loc_4, rt_sub_i32(1, loc_9))
				loc_2 = rt_bit_or_i64(rt_load_i64(memory_at_0, loc_10), rt_extend_i64_u32((if rt_ne_i64(rt_bit_or_i64(rt_load_i64(memory_at_0, loc_10 + 16), rt_load_i64(memory_at_0, loc_10 + 24)), rt_i64_ZERO) then 1 else 0)))
				loc_4 = rt_load_i64(memory_at_0, loc_10 + 8)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = rt_bit_or_i64(rt_shl_i64(loc_4, rt_i64_from_u32(61, 0)), rt_shr_u64(loc_2, rt_i64_from_u32(3, 0)))
			loc_4 = rt_bit_or_i64(loc_5, rt_bit_or_i64(rt_bit_and_i64(rt_shr_u64(loc_4, rt_i64_from_u32(3, 0)), rt_i64_from_u32(4294967295, 65535)), rt_shl_i64(rt_extend_i64_u32(loc_11), rt_i64_from_u32(48, 0))))
			loc_9 = bit_and(rt_wrap_i32_i64(loc_2), 7)
			while true do
				while true do
					while true do
						while true do
							while true do
								reg_0 = FUNC_LIST[676]()
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 0, 1, 2, }
									end)()
								end
								temp = br_map[1][reg_0] or 3
								if temp < 2 then
									if temp < 1 then
										break
									else
										desired = 5
										break
									end
								elseif temp > 2 then
									desired = 3
									break
								else
									desired = 4
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_9 ~= 4 then
								while true do
									loc_5 = rt_add_i64(rt_extend_i64_u32((if loc_9 > 4 then 1 else 0)), loc_3)
									loc_4 = rt_add_i64(rt_extend_i64_u32((if rt_gt_u64(loc_3, loc_5) then 1 else 0)), loc_4)
									loc_3 = loc_5
									desired = 3
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_5 = rt_add_i64(rt_bit_and_i64(loc_3, rt_i64_ONE), loc_3)
							loc_4 = rt_add_i64(rt_extend_i64_u32((if rt_gt_u64(loc_3, loc_5) then 1 else 0)), loc_4)
							loc_3 = loc_5
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_5 = rt_add_i64(rt_extend_i64_u32(bit_and((if loc_9 ~= 0 then 1 else 0), (if rt_ne_i64(loc_5, rt_i64_ZERO) then 1 else 0))), loc_3)
						loc_4 = rt_add_i64(rt_extend_i64_u32((if rt_gt_u64(loc_3, loc_5) then 1 else 0)), loc_4)
						loc_3 = loc_5
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_5 = rt_add_i64(rt_extend_i64_u32(bit_and((if rt_eq_i64(loc_5, rt_i64_ZERO) then 1 else 0), (if loc_9 ~= 0 then 1 else 0))), loc_3)
					loc_4 = rt_add_i64(rt_extend_i64_u32((if rt_gt_u64(loc_3, loc_5) then 1 else 0)), loc_4)
					loc_3 = loc_5
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_9 == 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[676]()
			break
		end
		rt_store_i64(memory_at_0, loc_0, loc_3)
		rt_store_i64(memory_at_0, loc_0 + 8, loc_4)
		GLOBAL_LIST[0].value = rt_add_i32(loc_10, 112)
		break
	end
end
FUNC_LIST[678] = --[[ __subtf3 ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_5
		FUNC_LIST[677](loc_5, loc_1, loc_2, loc_3, rt_bit_xor_i64(loc_4, rt_i64_from_u32(0, 2147483648)))
		loc_4 = rt_load_i64(memory_at_0, loc_5)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_5 + 8))
		rt_store_i64(memory_at_0, loc_0, loc_4)
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 16)
		break
	end
end
FUNC_LIST[679] = --[[ __trunctfdf2 ]] function(loc_0, loc_1)
	local loc_2 = rt_i64_ZERO
	local loc_3 = rt_i64_ZERO
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_5
		loc_2 = rt_bit_and_i64(loc_1, rt_i64_from_u32(4294967295, 65535))
		while true do
			loc_3 = rt_bit_and_i64(rt_shr_u64(loc_1, rt_i64_from_u32(48, 0)), rt_i64_from_u32(32767, 0))
			loc_4 = rt_wrap_i32_i64(loc_3)
			if rt_sub_i32(loc_4, 15361) <= 2045 then
				while true do
					loc_2 = rt_bit_or_i64(rt_shl_i64(loc_2, rt_i64_from_u32(4, 0)), rt_shr_u64(loc_0, rt_i64_from_u32(60, 0)))
					loc_3 = rt_extend_i64_u32(rt_sub_i32(loc_4, 15360))
					while true do
						loc_0 = rt_bit_and_i64(loc_0, rt_i64_from_u32(4294967295, 268435455))
						if rt_ge_u64(loc_0, rt_i64_from_u32(1, 134217728)) then
							while true do
								loc_2 = rt_add_i64(loc_2, rt_i64_ONE)
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						if rt_ne_i64(loc_0, rt_i64_from_u32(0, 134217728)) then
							break
						end
						loc_2 = rt_add_i64(loc_2, rt_bit_and_i64(loc_2, rt_i64_ONE))
						break
					end
					if desired then
						break
					end
					loc_4 = (if rt_gt_u64(loc_2, rt_i64_from_u32(4294967295, 1048575)) then 1 else 0)
					loc_0 = (if loc_4 ~= 0 then rt_i64_ZERO else loc_2)
					reg_0 = rt_add_i64(loc_3, rt_extend_i64_u32(loc_4))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				if rt_eq_i64(rt_bit_or_i64(loc_0, loc_2), rt_i64_ZERO) then
					break
				end
				if rt_ne_i64(loc_3, rt_i64_from_u32(32767, 0)) then
					break
				end
				loc_0 = rt_bit_or_i64(rt_bit_or_i64(rt_shl_i64(loc_2, rt_i64_from_u32(4, 0)), rt_shr_u64(loc_0, rt_i64_from_u32(60, 0))), rt_i64_from_u32(0, 524288))
				reg_0 = rt_i64_from_u32(2047, 0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_4 > 17406 then
				while true do
					loc_0 = rt_i64_ZERO
					reg_0 = rt_i64_from_u32(2047, 0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_7 = (if rt_eq_i64(loc_3, rt_i64_ZERO) then 1 else 0)
			loc_8 = (if loc_7 ~= 0 then 15360 else 15361)
			loc_6 = rt_sub_i32(loc_8, loc_4)
			if rt_gt_i32(loc_6, 112) then
				while true do
					loc_0 = rt_i64_ZERO
					reg_0 = rt_i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = (if loc_7 ~= 0 then loc_2 else rt_bit_or_i64(loc_2, rt_i64_from_u32(0, 65536)))
			FUNC_LIST[662](rt_add_i32(loc_5, 16), loc_0, loc_2, rt_sub_i32(128, loc_6))
			FUNC_LIST[670](loc_5, loc_0, loc_2, loc_6)
			loc_2 = rt_load_i64(memory_at_0, loc_5)
			loc_0 = rt_bit_or_i64(rt_shl_i64(rt_load_i64(memory_at_0, loc_5 + 8), rt_i64_from_u32(4, 0)), rt_shr_u64(loc_2, rt_i64_from_u32(60, 0)))
			while true do
				loc_2 = rt_bit_or_i64(rt_extend_i64_u32(bit_and((if loc_4 ~= loc_8 then 1 else 0), (if rt_ne_i64(rt_bit_or_i64(rt_load_i64(memory_at_0, loc_5 + 16), rt_load_i64(memory_at_0, loc_5 + 24)), rt_i64_ZERO) then 1 else 0))), rt_bit_and_i64(loc_2, rt_i64_from_u32(4294967295, 268435455)))
				if rt_ge_u64(loc_2, rt_i64_from_u32(1, 134217728)) then
					while true do
						loc_0 = rt_add_i64(loc_0, rt_i64_ONE)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_ne_i64(loc_2, rt_i64_from_u32(0, 134217728)) then
					break
				end
				loc_0 = rt_add_i64(loc_0, rt_bit_and_i64(loc_0, rt_i64_ONE))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = (if rt_gt_u64(loc_0, rt_i64_from_u32(4294967295, 1048575)) then 1 else 0)
			loc_0 = (if loc_4 ~= 0 then rt_bit_xor_i64(loc_0, rt_i64_from_u32(0, 1048576)) else loc_0)
			reg_0 = rt_extend_i64_u32(loc_4)
			break
		end
		loc_2 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 32)
		reg_0 = rt_reinterpret_f64_i64(rt_bit_or_i64(loc_0, rt_bit_or_i64(rt_bit_and_i64(loc_1, rt_i64_from_u32(0, 2147483648)), rt_shl_i64(loc_2, rt_i64_from_u32(52, 0)))))
		break
	end
	return reg_0
end
FUNC_LIST[680] = --[[ __extendsftf2 ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = rt_i64_ZERO
	local loc_8 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		loc_4 = rt_reinterpret_i32_f32(loc_1)
		loc_2 = bit_and(loc_4, 8388607)
		while true do
			loc_5 = rt_shr_u32(loc_4, 23)
			loc_6 = bit_and(loc_5, 255)
			if loc_6 ~= 0 then
				while true do
					if loc_6 ~= 255 then
						while true do
							loc_7 = rt_shl_i64(rt_extend_i64_u32(loc_2), rt_i64_from_u32(25, 0))
							reg_0 = rt_add_i32(bit_and(loc_5, 255), 16256)
							desired = 1
							break
						end
						if desired then
							break
						end
					end
					loc_7 = rt_shl_i64(rt_extend_i64_u32(loc_2), rt_i64_from_u32(25, 0))
					reg_0 = 32767
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_2 == 0 then
				while true do
					reg_0 = 0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_1 = rt_extend_i64_u32(loc_2)
			loc_2 = bit_countlz(loc_2)
			FUNC_LIST[662](loc_3, reg_1, rt_i64_ZERO, rt_add_i32(loc_2, 81))
			loc_7 = rt_bit_xor_i64(rt_load_i64(memory_at_0, loc_3 + 8), rt_i64_from_u32(0, 65536))
			loc_8 = rt_load_i64(memory_at_0, loc_3)
			reg_0 = rt_sub_i32(16265, loc_2)
			break
		end
		loc_2 = reg_0
		rt_store_i64(memory_at_0, loc_0, loc_8)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_bit_or_i64(loc_7, rt_bit_or_i64(rt_shl_i64(rt_extend_i64_u32(loc_2), rt_i64_from_u32(48, 0)), rt_shl_i64(rt_extend_i64_u32(rt_shr_u32(loc_4, 31)), rt_i64_from_u32(63, 0)))))
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[681] = --[[ __floatsitf ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = rt_i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		reg_0 = loc_0
		while true do
			if loc_1 == 0 then
				while true do
					reg_1 = rt_i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = rt_shr_i32(loc_1, 31)
			loc_2 = rt_sub_i32(bit_xor(loc_2, loc_1), loc_2)
			reg_2 = rt_extend_i64_u32(loc_2)
			loc_2 = bit_countlz(loc_2)
			FUNC_LIST[662](loc_3, reg_2, rt_i64_ZERO, rt_add_i32(loc_2, 81))
			loc_4 = rt_bit_or_i64(rt_add_i64(rt_bit_xor_i64(rt_load_i64(memory_at_0, loc_3 + 8), rt_i64_from_u32(0, 65536)), rt_shl_i64(rt_extend_i64_u32(rt_sub_i32(16414, loc_2)), rt_i64_from_u32(48, 0))), rt_shl_i64(rt_extend_i64_u32(bit_and(loc_1, 2147483648)), rt_i64_from_u32(32, 0)))
			reg_1 = rt_load_i64(memory_at_0, loc_3)
			break
		end
		rt_store_i64(memory_at_0, reg_0, reg_1)
		rt_store_i64(memory_at_0, loc_0 + 8, loc_4)
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		break
	end
end
FUNC_LIST[682] = --[[ __extenddftf2 ]] function(loc_0, loc_1)
	local loc_2 = rt_i64_ZERO
	local loc_3 = rt_i64_ZERO
	local loc_4 = rt_i64_ZERO
	local loc_5 = rt_i64_ZERO
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_6 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_6
		loc_5 = rt_reinterpret_i64_f64(loc_1)
		loc_2 = rt_bit_and_i64(loc_5, rt_i64_from_u32(4294967295, 1048575))
		reg_0 = loc_0
		while true do
			loc_3 = rt_bit_and_i64(rt_shr_u64(loc_5, rt_i64_from_u32(52, 0)), rt_i64_from_u32(2047, 0))
			if rt_ne_i64(loc_3, rt_i64_ZERO) then
				while true do
					if rt_ne_i64(loc_3, rt_i64_from_u32(2047, 0)) then
						while true do
							loc_4 = rt_shr_u64(loc_2, rt_i64_from_u32(4, 0))
							loc_3 = rt_add_i64(loc_3, rt_i64_from_u32(15360, 0))
							reg_1 = rt_shl_i64(loc_2, rt_i64_from_u32(60, 0))
							desired = 1
							break
						end
						if desired then
							break
						end
					end
					loc_4 = rt_shr_u64(loc_2, rt_i64_from_u32(4, 0))
					loc_3 = rt_i64_from_u32(32767, 0)
					reg_1 = rt_shl_i64(loc_2, rt_i64_from_u32(60, 0))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_eq_i64(loc_2, rt_i64_ZERO) then
				while true do
					loc_3 = rt_i64_ZERO
					reg_1 = rt_i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_7 = (if rt_lt_u64(loc_2, rt_i64_from_u32(0, 1)) then bit_or(bit_countlz(rt_wrap_i32_i64(loc_5)), 32) else bit_countlz(rt_wrap_i32_i64(rt_shr_u64(loc_2, rt_i64_from_u32(32, 0)))))
			FUNC_LIST[662](loc_6, loc_2, rt_i64_ZERO, rt_add_i32(loc_7, 49))
			loc_3 = rt_extend_i64_u32(rt_sub_i32(15372, loc_7))
			loc_4 = rt_bit_xor_i64(rt_load_i64(memory_at_0, loc_6 + 8), rt_i64_from_u32(0, 65536))
			reg_1 = rt_load_i64(memory_at_0, loc_6)
			break
		end
		loc_2 = reg_1
		rt_store_i64(memory_at_0, reg_0, loc_2)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_bit_or_i64(loc_4, rt_bit_or_i64(rt_bit_and_i64(loc_5, rt_i64_from_u32(0, 2147483648)), rt_shl_i64(loc_3, rt_i64_from_u32(48, 0)))))
		GLOBAL_LIST[0].value = rt_add_i32(loc_6, 16)
		break
	end
end
FUNC_LIST[683] = --[[ __floatunsitf ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = rt_i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		reg_0 = loc_0
		while true do
			if loc_1 == 0 then
				while true do
					reg_1 = rt_i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_2 = rt_extend_i64_u32(loc_1)
			loc_1 = bit_countlz(loc_1)
			FUNC_LIST[662](loc_2, reg_2, rt_i64_ZERO, rt_sub_i32(112, bit_xor(loc_1, 31)))
			loc_3 = rt_add_i64(rt_bit_xor_i64(rt_load_i64(memory_at_0, loc_2 + 8), rt_i64_from_u32(0, 65536)), rt_shl_i64(rt_extend_i64_u32(rt_sub_i32(16414, loc_1)), rt_i64_from_u32(48, 0)))
			reg_1 = rt_load_i64(memory_at_0, loc_2)
			break
		end
		rt_store_i64(memory_at_0, reg_0, reg_1)
		rt_store_i64(memory_at_0, loc_0 + 8, loc_3)
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 16)
		break
	end
end
FUNC_LIST[684] = --[[ set_flag ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				loc_3 = rt_load_i32(memory_at_0, 36884)
				if loc_3 ~= 0 then
					while true do
						loc_2 = rt_load_i32_u8(memory_at_0, loc_0 + 11)
						loc_4 = rt_extend_i32_n8(loc_2)
						loc_2 = (if rt_lt_i32(loc_4, 0) then rt_load_i32(memory_at_0, loc_0 + 4) else loc_2)
						while true do
							if rt_lt_i32(loc_4, 0) then
								while true do
									loc_5 = (if loc_2 == 4294967295 then 1 else 0)
									while true do
										loc_4 = rt_load_i32(memory_at_0, loc_3 + 4)
										reg_0 = FUNC_LIST[649](loc_4)
										if reg_0 == loc_2 then
											while true do
												if loc_5 ~= 0 then
													desired = 2
													break
												end
												reg_0 = FUNC_LIST[685](rt_load_i32(memory_at_0, loc_0), loc_4, loc_2)
												if reg_0 == 0 then
													desired = 1
													break
												end
												break
											end
											if desired then
												if desired == 6 then
													desired = nil
													continue
												end
												break
											end
										end
										loc_3 = rt_load_i32(memory_at_0, loc_3 + 8)
										if loc_3 ~= 0 then
											continue
										end
										break
									end
									if desired then
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							loc_5 = (if loc_2 ~= 4294967295 then 1 else 0)
							while true do
								loc_4 = rt_load_i32(memory_at_0, loc_3 + 4)
								reg_0 = FUNC_LIST[649](loc_4)
								if reg_0 == loc_2 then
									while true do
										if loc_5 == 0 then
											desired = 2
											break
										end
										reg_0 = FUNC_LIST[685](loc_0, loc_4, loc_2)
										if reg_0 == 0 then
											desired = 1
											break
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
											continue
										end
										break
									end
								end
								loc_3 = rt_load_i32(memory_at_0, loc_3 + 8)
								if loc_3 ~= 0 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							break
						end
						reg_0 = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = reg_0
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[686]()
			error("out of code bounds")
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32_n8(memory_at_0, loc_3, loc_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[685] = --[[ memcmp ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				if loc_2 >= 4 then
					while true do
						if bit_and(bit_or(loc_0, loc_1), 3) ~= 0 then
							desired = 2
							break
						end
						while true do
							if rt_load_i32(memory_at_0, loc_0) ~= rt_load_i32(memory_at_0, loc_1) then
								desired = 2
								break
							end
							loc_1 = rt_add_i32(loc_1, 4)
							loc_0 = rt_add_i32(loc_0, 4)
							loc_2 = rt_sub_i32(loc_2, 4)
							if loc_2 > 3 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_2 == 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_3 = rt_load_i32_u8(memory_at_0, loc_0)
				loc_4 = rt_load_i32_u8(memory_at_0, loc_1)
				if loc_3 == loc_4 then
					while true do
						loc_1 = rt_add_i32(loc_1, 1)
						loc_0 = rt_add_i32(loc_0, 1)
						loc_2 = rt_sub_i32(loc_2, 1)
						if loc_2 ~= 0 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = rt_sub_i32(loc_3, loc_4)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[686] = --[[ std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char>>::__throw_out_of_range[abi:ne180100]() const ]] function()
	while true do
		FUNC_LIST[687]()
		error("out of code bounds")
	end
end
FUNC_LIST[687] = --[[ std::__2::__throw_out_of_range[abi:ne180100](char const*) ]] function()
	local reg_0
	while true do
		reg_0 = FUNC_LIST[688]()
		reg_0 = FUNC_LIST[689](reg_0)
		FUNC_LIST[0](reg_0, 30280, 283)
		error("out of code bounds")
	end
end
FUNC_LIST[688] = --[[ __cxa_allocate_exception ]] function()
	local reg_0
	while true do
		reg_0 = FUNC_LIST[652](88)
		reg_0 = rt_add_i32(reg_0, 80)
		break
	end
	return reg_0
end
FUNC_LIST[689] = --[[ std::out_of_range::out_of_range[abi:ne180100](char const*) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[691](loc_0)
		loc_0 = reg_0
		rt_store_i32(memory_at_0, loc_0, 30268)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[690] = --[[ std::logic_error::~logic_error() ]] function(loc_0)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0, 30220)
		reg_0 = FUNC_LIST[835](rt_add_i32(loc_0, 4))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[691] = --[[ std::logic_error::logic_error(char const*) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[801](loc_0)
		loc_0 = reg_0
		rt_store_i32(memory_at_0, loc_0, 30220)
		reg_0 = FUNC_LIST[802](rt_add_i32(loc_0, 4))
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[692] = --[[ set_all_flags ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		loc_1 = rt_load_i32(memory_at_0, 36884)
		if loc_1 ~= 0 then
			while true do
				while true do
					reg_0 = FUNC_LIST[693](rt_load_i32(memory_at_0, loc_1 + 4))
					if reg_0 == 0 then
						while true do
							rt_store_i32_n8(memory_at_0, loc_1, loc_0)
							break
						end
					end
					loc_1 = rt_load_i32(memory_at_0, loc_1 + 8)
					if loc_1 ~= 0 then
						continue
					end
					break
				end
				break
			end
		end
		break
	end
end
FUNC_LIST[693] = --[[ strncmp ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_2 = 1588
		while true do
			loc_1 = rt_load_i32_u8(memory_at_0, loc_0)
			if loc_1 == 0 then
				while true do
					loc_1 = 0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = 4
			while true do
				while true do
					loc_4 = rt_load_i32_u8(memory_at_0, loc_2)
					if loc_4 ~= loc_1 then
						desired = 2
						break
					end
					if loc_4 == 0 then
						desired = 2
						break
					end
					loc_3 = rt_sub_i32(loc_3, 1)
					if loc_3 == 0 then
						desired = 2
						break
					end
					loc_2 = rt_add_i32(loc_2, 1)
					loc_1 = rt_load_i32_u8(memory_at_0, loc_0 + 1)
					loc_0 = rt_add_i32(loc_0, 1)
					if loc_1 ~= 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_1 = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		reg_0 = rt_sub_i32(loc_1, rt_load_i32_u8(memory_at_0, loc_2))
		break
	end
	return reg_0
end
FUNC_LIST[694] = --[[ reset_flags ]] function()
	local loc_0 = 0
	local loc_1 = 0
	local reg_0
	while true do
		loc_0 = rt_load_i32(memory_at_0, 36884)
		if loc_0 ~= 0 then
			while true do
				while true do
					while true do
						loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
						reg_0 = FUNC_LIST[693](loc_1)
						if reg_0 ~= 0 then
							break
						end
						reg_0 = FUNC_LIST[695](3472, loc_1)
						if reg_0 == 0 then
							break
						end
						reg_0 = FUNC_LIST[695](3440, loc_1)
						if reg_0 == 0 then
							break
						end
						reg_0 = FUNC_LIST[695](5300, loc_1)
						if reg_0 == 0 then
							break
						end
						reg_0 = FUNC_LIST[695](5327, loc_1)
						if reg_0 == 0 then
							break
						end
						rt_store_i32_n8(memory_at_0, loc_0, 1)
						break
					end
					loc_0 = rt_load_i32(memory_at_0, loc_0 + 8)
					if loc_0 ~= 0 then
						continue
					end
					break
				end
				break
			end
		end
		break
	end
end
FUNC_LIST[695] = --[[ strcmp ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
		while true do
			loc_3 = rt_load_i32_u8(memory_at_0, loc_0)
			if loc_3 == 0 then
				break
			end
			if loc_2 ~= loc_3 then
				break
			end
			while true do
				loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 1)
				loc_3 = rt_load_i32_u8(memory_at_0, loc_0 + 1)
				if loc_3 == 0 then
					desired = 1
					break
				end
				loc_1 = rt_add_i32(loc_1, 1)
				loc_0 = rt_add_i32(loc_0, 1)
				if loc_2 == loc_3 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		reg_0 = rt_sub_i32(loc_3, loc_2)
		break
	end
	return reg_0
end
FUNC_LIST[696] = --[[ abort ]] function()
	while true do
		FUNC_LIST[2]()
		error("out of code bounds")
	end
end
FUNC_LIST[697] = --[[ acos ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = rt_i64_ZERO
	local loc_4 = 0
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local desired
	while true do
		loc_3 = rt_reinterpret_i64_f64(loc_0)
		loc_4 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_3, rt_i64_from_u32(32, 0))), 2147483647)
		if loc_4 >= 1072693248 then
			while true do
				if bit_or(rt_wrap_i32_i64(loc_3), rt_sub_i32(loc_4, 1072693248)) == 0 then
					while true do
						reg_0 = (if rt_ge_i64(loc_3, rt_i64_ZERO) then 0e0 else 3.141592653589793e0)
						desired = 0
						break
					end
					if desired then
						break
					end
				end
				reg_0 = (0e0 / (loc_0 - loc_0))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			if loc_4 <= 1071644671 then
				while true do
					loc_1 = 1.5707963267948966e0
					reg_0 = loc_1
					if loc_4 < 1012924417 then
						desired = 1
						break
					end
					reg_2 = FUNC_LIST[698]((loc_0 * loc_0))
					reg_0 = (((6.123233995736766e-17 - (loc_0 * reg_2)) - loc_0) + 1.5707963267948966e0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_lt_i64(loc_3, rt_i64_ZERO) then
				while true do
					loc_0 = ((loc_0 + 1e0) * 5e-1)
					reg_1 = FUNC_LIST[699](loc_0)
					loc_1 = reg_1
					reg_3 = FUNC_LIST[698](loc_0)
					loc_0 = (1.5707963267948966e0 - (loc_1 + ((loc_1 * reg_3) + -6.123233995736766e-17)))
					reg_0 = (loc_0 + loc_0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = ((1e0 - loc_0) * 5e-1)
			reg_0 = FUNC_LIST[699](loc_1)
			loc_2 = reg_0
			reg_1 = FUNC_LIST[698](loc_1)
			loc_0 = rt_reinterpret_f64_i64(rt_bit_and_i64(rt_reinterpret_i64_f64(loc_2), rt_i64_from_u32(0, 4294967295)))
			loc_0 = (((loc_2 * reg_1) + ((loc_1 - (loc_0 * loc_0)) / (loc_2 + loc_0))) + loc_0)
			reg_0 = (loc_0 + loc_0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_1 = reg_0
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[698] = --[[ R ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = ((loc_0 * ((loc_0 * ((loc_0 * ((loc_0 * ((loc_0 * ((loc_0 * 3.479331075960212e-5) + 7.915349942898145e-4)) + -4.005553450067941e-2)) + 2.0121253213486293e-1)) + -3.255658186224009e-1)) + 1.6666666666666666e-1)) / ((loc_0 * ((loc_0 * ((loc_0 * ((loc_0 * 7.703815055590194e-2) + -6.882839716054533e-1)) + 2.0209457602335057e0)) + -2.403394911734414e0)) + 1e0))
		break
	end
	return reg_0
end
FUNC_LIST[699] = --[[ sqrt ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = math_sqrt(loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[700] = --[[ asin ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_5 = rt_reinterpret_i64_f64(loc_0)
		loc_1 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_5, rt_i64_from_u32(32, 0))), 2147483647)
		if loc_1 >= 1072693248 then
			while true do
				if bit_or(rt_wrap_i32_i64(loc_5), rt_sub_i32(loc_1, 1072693248)) == 0 then
					while true do
						reg_0 = ((loc_0 * 1.5707963267948966e0) + 7.52316384526264e-37)
						desired = 0
						break
					end
					if desired then
						break
					end
				end
				reg_0 = (0e0 / (loc_0 - loc_0))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			if loc_1 <= 1071644671 then
				while true do
					if rt_add_i32(loc_1, 4293918720) < 1044381696 then
						desired = 1
						break
					end
					reg_1 = FUNC_LIST[698]((loc_0 * loc_0))
					reg_0 = ((loc_0 * reg_1) + loc_0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_1 = FUNC_LIST[701](loc_0)
			loc_3 = ((1e0 - reg_1) * 5e-1)
			reg_0 = FUNC_LIST[699](loc_3)
			loc_0 = reg_0
			reg_0 = FUNC_LIST[698](loc_3)
			loc_4 = reg_0
			while true do
				if loc_1 >= 1072640819 then
					while true do
						loc_0 = ((loc_0 * loc_4) + loc_0)
						reg_0 = (1.5707963267948966e0 - ((loc_0 + loc_0) + -6.123233995736766e-17))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = rt_reinterpret_f64_i64(rt_bit_and_i64(rt_reinterpret_i64_f64(loc_0), rt_i64_from_u32(0, 4294967295)))
				reg_1 = ((loc_0 + loc_0) * loc_4)
				loc_0 = ((loc_3 - (loc_2 * loc_2)) / (loc_0 + loc_2))
				reg_0 = (((7.853981633974483e-1 - (loc_2 + loc_2)) - (reg_1 - (6.123233995736766e-17 - (loc_0 + loc_0)))) + 7.853981633974483e-1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_0 = reg_0
			loc_0 = (if rt_lt_i64(loc_5, rt_i64_ZERO) then rt_neg_f64(loc_0) else loc_0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[701] = --[[ fabs ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = math_abs(loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[702] = --[[ atan ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = rt_i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_6 = rt_reinterpret_i64_f64(loc_0)
		loc_4 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_6, rt_i64_from_u32(32, 0))), 2147483647)
		if loc_4 >= 1141899264 then
			while true do
				reg_2 = FUNC_LIST[621](loc_0)
				reg_0 = (if rt_gt_u64(rt_bit_and_i64(reg_2, rt_i64_from_u32(4294967295, 2147483647)), rt_i64_from_u32(0, 2146435072)) then loc_0 else rt_copysign_f64(1.5707963267948966e0, loc_0))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			while true do
				if loc_4 <= 1071382527 then
					while true do
						loc_5 = 4294967295
						reg_0 = loc_5
						if loc_4 >= 1044381696 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[701](loc_0)
				loc_0 = reg_0
				if loc_4 <= 1072889855 then
					while true do
						if loc_4 <= 1072037887 then
							while true do
								loc_0 = (((loc_0 + loc_0) + -1e0) / (loc_0 + 2e0))
								reg_0 = 0
								desired = 2
								break
							end
							if desired then
								break
							end
						end
						loc_0 = ((loc_0 + -1e0) / (loc_0 + 1e0))
						reg_0 = 1
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_4 <= 1073971199 then
					while true do
						loc_0 = ((loc_0 + -1.5e0) / ((loc_0 * 1.5e0) + 1e0))
						reg_0 = 2
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_0 = (-1e0 / loc_0)
				reg_0 = 3
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = reg_0
			loc_2 = (loc_0 * loc_0)
			loc_1 = (loc_2 * loc_2)
			loc_3 = (loc_1 * ((loc_1 * ((loc_1 * ((loc_1 * ((loc_1 * -3.6531572744216916e-2) + -5.8335701337905735e-2)) + -7.69187620504483e-2)) + -1.1111110405462356e-1)) + -1.9999999999876483e-1))
			loc_1 = (loc_2 * ((loc_1 * ((loc_1 * ((loc_1 * ((loc_1 * ((loc_1 * 1.6285820115365782e-2) + 4.9768779946159324e-2)) + 6.661073137387531e-2)) + 9.090887133436507e-2)) + 1.4285714272503466e-1)) + 3.333333333333293e-1))
			if loc_4 <= 1071382527 then
				while true do
					reg_0 = (loc_0 - (loc_0 * (loc_3 + loc_1)))
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_4 = rt_shl_i32(loc_5, 3)
			loc_0 = (rt_load_f64(memory_at_0, rt_add_i32(loc_4, 26160)) - (((loc_0 * (loc_3 + loc_1)) - rt_load_f64(memory_at_0, rt_add_i32(loc_4, 26192))) - loc_0))
			loc_0 = (if rt_lt_i64(loc_6, rt_i64_ZERO) then rt_neg_f64(loc_0) else loc_0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[703] = --[[ atan2 ]] function(loc_0, loc_1)
	local loc_2 = 0.0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = rt_i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			reg_0 = FUNC_LIST[621](loc_1)
			if rt_le_u64(rt_bit_and_i64(reg_0, rt_i64_from_u32(4294967295, 2147483647)), rt_i64_from_u32(0, 2146435072)) then
				while true do
					reg_0 = FUNC_LIST[621](loc_0)
					if rt_lt_u64(rt_bit_and_i64(reg_0, rt_i64_from_u32(4294967295, 2147483647)), rt_i64_from_u32(1, 2146435072)) then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = (loc_0 + loc_1)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_8 = rt_reinterpret_i64_f64(loc_1)
		loc_3 = rt_wrap_i32_i64(rt_shr_u64(loc_8, rt_i64_from_u32(32, 0)))
		loc_6 = rt_wrap_i32_i64(loc_8)
		if bit_or(rt_sub_i32(loc_3, 1072693248), loc_6) == 0 then
			while true do
				reg_0 = FUNC_LIST[702](loc_0)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_7 = bit_and(rt_shr_u32(loc_3, 30), 2)
		loc_8 = rt_reinterpret_i64_f64(loc_0)
		loc_4 = bit_or(loc_7, rt_wrap_i32_i64(rt_shr_u64(loc_8, rt_i64_from_u32(63, 0))))
		while true do
			loc_5 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_8, rt_i64_from_u32(32, 0))), 2147483647)
			if bit_or(loc_5, rt_wrap_i32_i64(loc_8)) == 0 then
				while true do
					loc_2 = loc_0
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 0, 1, }
								end)()
							end
							temp = br_map[1][rt_sub_i32(loc_4, 2)] or 3
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 1
								break
							else
								desired = 3
								break
							end
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						reg_0 = 3.141592653589793e0
						desired = 0
						break
					end
					if desired then
						break
					end
					reg_0 = -3.141592653589793e0
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = bit_and(loc_3, 2147483647)
			if bit_or(loc_6, loc_3) == 0 then
				while true do
					reg_0 = rt_copysign_f64(1.5707963267948966e0, loc_0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				if loc_3 == 2146435072 then
					while true do
						if loc_5 ~= 2146435072 then
							desired = 2
							break
						end
						reg_0 = rt_load_f64(memory_at_0, rt_add_i32(rt_shl_i32(loc_4, 3), 26224))
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if bit_and((if loc_5 ~= 2146435072 then 1 else 0), (if loc_5 <= rt_add_i32(loc_3, 67108864) then 1 else 0)) == 0 then
					while true do
						reg_0 = rt_copysign_f64(1.5707963267948966e0, loc_0)
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				while true do
					if loc_7 ~= 0 then
						while true do
							reg_0 = 0e0
							if loc_3 > rt_add_i32(loc_5, 67108864) then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[701]((loc_0 / loc_1))
					reg_0 = FUNC_LIST[702](reg_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = reg_0
				while true do
					while true do
						while true do
							if not br_map[2] then
								br_map[2] = (function()
									return { [0] = 0, 1, 2, }
								end)()
							end
							temp = br_map[2][rt_sub_i32(loc_4, 1)] or 4
							if temp < 2 then
								if temp < 1 then
									break
								else
									desired = 4
									break
								end
							elseif temp > 2 then
								desired = 1
								break
							else
								desired = 3
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = rt_neg_f64(loc_2)
						desired = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = (3.141592653589793e0 - (loc_2 + -1.2246467991473532e-16))
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = ((loc_2 + -1.2246467991473532e-16) + -3.141592653589793e0)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = rt_load_f64(memory_at_0, rt_add_i32(rt_shl_i32(loc_4, 3), 26256))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[704] = --[[ cos ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		while true do
			loc_3 = bit_and(rt_wrap_i32_i64(rt_shr_u64(rt_reinterpret_i64_f64(loc_0), rt_i64_from_u32(32, 0))), 2147483647)
			if loc_3 <= 1072243195 then
				while true do
					loc_1 = 1e0
					reg_0 = loc_1
					if loc_3 < 1044816030 then
						desired = 1
						break
					end
					reg_0 = FUNC_LIST[705](loc_0, 0e0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = (loc_0 - loc_0)
			if loc_3 >= 2146435072 then
				break
			end
			reg_0 = FUNC_LIST[706](loc_0, loc_2)
			loc_3 = reg_0
			loc_0 = rt_load_f64(memory_at_0, loc_2 + 8)
			loc_1 = rt_load_f64(memory_at_0, loc_2)
			while true do
				while true do
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 1, 2, 3, }
								end)()
							end
							temp = br_map[1][rt_sub_i32(bit_and(loc_3, 3), 1)] or 0
							if temp < 2 then
								if temp < 1 then
									break
								else
									desired = 4
									break
								end
							elseif temp > 2 then
								desired = 2
								break
							else
								desired = 3
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[705](loc_1, loc_0)
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[707](loc_1, loc_0, 1)
					reg_0 = rt_neg_f64(reg_0)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[705](loc_1, loc_0)
				reg_0 = rt_neg_f64(reg_0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[707](loc_1, loc_0, 1)
			break
		end
		loc_1 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 16)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[705] = --[[ __cos ]] function(loc_0, loc_1)
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0.0
	local reg_0
	local reg_1
	while true do
		loc_2 = (loc_0 * loc_0)
		loc_3 = (loc_2 * 5e-1)
		loc_4 = (1e0 - loc_3)
		reg_1 = ((1e0 - loc_4) - loc_3)
		loc_3 = (loc_2 * loc_2)
		reg_0 = (loc_4 + (reg_1 + ((loc_2 * ((loc_2 * ((loc_2 * ((loc_2 * 2.480158728947673e-5) + -1.388888888887411e-3)) + 4.16666666666666e-2)) + ((loc_3 * loc_3) * ((loc_2 * ((loc_2 * -1.1359647557788195e-11) + 2.087572321298175e-9)) + -2.7557314351390663e-7)))) - (loc_0 * loc_1))))
		break
	end
	return reg_0
end
FUNC_LIST[706] = --[[ __rem_pio2 ]] function(loc_0, loc_1)
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_7 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_7
		while true do
			while true do
				while true do
					loc_12 = rt_reinterpret_i64_f64(loc_0)
					loc_6 = rt_wrap_i32_i64(rt_shr_u64(loc_12, rt_i64_from_u32(32, 0)))
					loc_8 = bit_and(loc_6, 2147483647)
					if loc_8 <= 1074752122 then
						while true do
							if bit_and(loc_6, 1048575) == 598523 then
								desired = 3
								break
							end
							if loc_8 <= 1073928572 then
								while true do
									if rt_ge_i64(loc_12, rt_i64_ZERO) then
										while true do
											loc_0 = (loc_0 + -1.5707963267341256e0)
											loc_2 = (loc_0 + -6.077100506506192e-11)
											rt_store_f64(memory_at_0, loc_1, loc_2)
											rt_store_f64(memory_at_0, loc_1 + 8, ((loc_0 - loc_2) + -6.077100506506192e-11))
											loc_6 = 1
											desired = 1
											break
										end
										if desired then
											break
										end
									end
									loc_0 = (loc_0 + 1.5707963267341256e0)
									loc_2 = (loc_0 + 6.077100506506192e-11)
									rt_store_f64(memory_at_0, loc_1, loc_2)
									rt_store_f64(memory_at_0, loc_1 + 8, ((loc_0 - loc_2) + 6.077100506506192e-11))
									loc_6 = 4294967295
									desired = 1
									break
								end
								if desired then
									break
								end
							end
							if rt_ge_i64(loc_12, rt_i64_ZERO) then
								while true do
									loc_0 = (loc_0 + -3.1415926534682512e0)
									loc_2 = (loc_0 + -1.2154201013012384e-10)
									rt_store_f64(memory_at_0, loc_1, loc_2)
									rt_store_f64(memory_at_0, loc_1 + 8, ((loc_0 - loc_2) + -1.2154201013012384e-10))
									loc_6 = 2
									desired = 1
									break
								end
								if desired then
									break
								end
							end
							loc_0 = (loc_0 + 3.1415926534682512e0)
							loc_2 = (loc_0 + 1.2154201013012384e-10)
							rt_store_f64(memory_at_0, loc_1, loc_2)
							rt_store_f64(memory_at_0, loc_1 + 8, ((loc_0 - loc_2) + 1.2154201013012384e-10))
							loc_6 = 4294967294
							desired = 1
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_8 <= 1075594811 then
						while true do
							if loc_8 <= 1075183036 then
								while true do
									if loc_8 == 1074977148 then
										desired = 3
										break
									end
									if rt_ge_i64(loc_12, rt_i64_ZERO) then
										while true do
											loc_0 = (loc_0 + -4.712388980202377e0)
											loc_2 = (loc_0 + -1.8231301519518578e-10)
											rt_store_f64(memory_at_0, loc_1, loc_2)
											rt_store_f64(memory_at_0, loc_1 + 8, ((loc_0 - loc_2) + -1.8231301519518578e-10))
											loc_6 = 3
											desired = 1
											break
										end
										if desired then
											break
										end
									end
									loc_0 = (loc_0 + 4.712388980202377e0)
									loc_2 = (loc_0 + 1.8231301519518578e-10)
									rt_store_f64(memory_at_0, loc_1, loc_2)
									rt_store_f64(memory_at_0, loc_1 + 8, ((loc_0 - loc_2) + 1.8231301519518578e-10))
									loc_6 = 4294967293
									desired = 1
									break
								end
								if desired then
									break
								end
							end
							if loc_8 == 1075388923 then
								desired = 3
								break
							end
							if rt_ge_i64(loc_12, rt_i64_ZERO) then
								while true do
									loc_0 = (loc_0 + -6.2831853069365025e0)
									loc_2 = (loc_0 + -2.430840202602477e-10)
									rt_store_f64(memory_at_0, loc_1, loc_2)
									rt_store_f64(memory_at_0, loc_1 + 8, ((loc_0 - loc_2) + -2.430840202602477e-10))
									loc_6 = 4
									desired = 1
									break
								end
								if desired then
									break
								end
							end
							loc_0 = (loc_0 + 6.2831853069365025e0)
							loc_2 = (loc_0 + 2.430840202602477e-10)
							rt_store_f64(memory_at_0, loc_1, loc_2)
							rt_store_f64(memory_at_0, loc_1 + 8, ((loc_0 - loc_2) + 2.430840202602477e-10))
							loc_6 = 4294967292
							desired = 1
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_8 > 1094263290 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = (((loc_0 * 6.366197723675814e-1) + 6.755399441055744e15) + -6.755399441055744e15)
				loc_3 = (loc_0 + (loc_2 * -1.5707963267341256e0))
				loc_4 = (loc_2 * 6.077100506506192e-11)
				loc_5 = (loc_3 - loc_4)
				loc_9 = (if loc_5 < -7.853981633974483e-1 then 1 else 0)
				while true do
					if math_abs(loc_2) < 2.147483648e9 then
						while true do
							reg_0 = rt_truncate_f64(loc_2)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = 2147483648
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = reg_0
				while true do
					if loc_9 ~= 0 then
						while true do
							loc_6 = rt_sub_i32(loc_6, 1)
							loc_2 = (loc_2 + -1e0)
							loc_4 = (loc_2 * 6.077100506506192e-11)
							loc_3 = (loc_0 + (loc_2 * -1.5707963267341256e0))
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if (if loc_5 > 7.853981633974483e-1 then 1 else 0) == 0 then
						break
					end
					loc_6 = rt_add_i32(loc_6, 1)
					loc_2 = (loc_2 + 1e0)
					loc_4 = (loc_2 * 6.077100506506192e-11)
					loc_3 = (loc_0 + (loc_2 * -1.5707963267341256e0))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_0 = (loc_3 - loc_4)
				rt_store_f64(memory_at_0, loc_1, loc_0)
				while true do
					loc_9 = rt_shr_u32(loc_8, 20)
					if rt_lt_i32(rt_sub_i32(loc_9, bit_and(rt_wrap_i32_i64(rt_shr_u64(rt_reinterpret_i64_f64(loc_0), rt_i64_from_u32(52, 0))), 2047)), 17) then
						break
					end
					loc_0 = (loc_2 * 6.077100506303966e-11)
					loc_5 = (loc_3 - loc_0)
					loc_4 = ((loc_2 * 2.0222662487959506e-21) - ((loc_3 - loc_5) - loc_0))
					loc_0 = (loc_5 - loc_4)
					rt_store_f64(memory_at_0, loc_1, loc_0)
					if rt_lt_i32(rt_sub_i32(loc_9, bit_and(rt_wrap_i32_i64(rt_shr_u64(rt_reinterpret_i64_f64(loc_0), rt_i64_from_u32(52, 0))), 2047)), 50) then
						while true do
							loc_3 = loc_5
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_0 = (loc_2 * 2.0222662487111665e-21)
					loc_3 = (loc_5 - loc_0)
					loc_4 = ((loc_2 * 8.4784276603689e-32) - ((loc_5 - loc_3) - loc_0))
					loc_0 = (loc_3 - loc_4)
					rt_store_f64(memory_at_0, loc_1, loc_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_f64(memory_at_0, loc_1 + 8, ((loc_3 - loc_0) - loc_4))
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_8 >= 2146435072 then
				while true do
					loc_0 = (loc_0 - loc_0)
					rt_store_f64(memory_at_0, loc_1, loc_0)
					rt_store_f64(memory_at_0, loc_1 + 8, loc_0)
					loc_6 = 0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_11 = bit_or(rt_add_i32(loc_7, 16), 8)
			loc_0 = rt_reinterpret_f64_i64(rt_bit_or_i64(rt_bit_and_i64(loc_12, rt_i64_from_u32(4294967295, 1048575)), rt_i64_from_u32(0, 1096810496)))
			loc_6 = rt_add_i32(loc_7, 16)
			loc_9 = 1
			while true do
				reg_0 = loc_6
				while true do
					if math_abs(loc_0) < 2.147483648e9 then
						while true do
							reg_1 = rt_truncate_f64(loc_0)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_1 = 2147483648
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_10 = reg_1
				loc_2 = rt_convert_f64_i32(loc_10)
				rt_store_f64(memory_at_0, reg_0, loc_2)
				loc_0 = ((loc_0 - loc_2) * 1.6777216e7)
				loc_10 = bit_and(loc_9, 1)
				loc_9 = 0
				loc_6 = loc_11
				if loc_10 ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_f64(memory_at_0, loc_7 + 32, loc_0)
			loc_6 = 2
			while true do
				loc_9 = loc_6
				loc_6 = rt_sub_i32(loc_9, 1)
				if rt_load_f64(memory_at_0, rt_add_i32(rt_add_i32(loc_7, 16), rt_shl_i32(loc_9, 3))) == 0e0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[708](rt_add_i32(loc_7, 16), loc_7, rt_sub_i32(rt_shr_u32(loc_8, 20), 1046), rt_add_i32(loc_9, 1), 1)
			loc_6 = reg_0
			loc_0 = rt_load_f64(memory_at_0, loc_7)
			if rt_lt_i64(loc_12, rt_i64_ZERO) then
				while true do
					rt_store_f64(memory_at_0, loc_1, rt_neg_f64(loc_0))
					rt_store_f64(memory_at_0, loc_1 + 8, rt_neg_f64(rt_load_f64(memory_at_0, loc_7 + 8)))
					loc_6 = rt_sub_i32(0, loc_6)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			rt_store_f64(memory_at_0, loc_1, loc_0)
			rt_store_f64(memory_at_0, loc_1 + 8, rt_load_f64(memory_at_0, loc_7 + 8))
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_7, 48)
		reg_0 = loc_6
		break
	end
	return reg_0
end
FUNC_LIST[707] = --[[ __sin ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local reg_0
	local desired
	while true do
		loc_3 = (loc_0 * loc_0)
		loc_5 = (((loc_3 * (loc_3 * loc_3)) * ((loc_3 * 1.58969099521155e-10) + -2.5050760253406863e-8)) + ((loc_3 * ((loc_3 * 2.7557313707070068e-6) + -1.984126982985795e-4)) + 8.33333333332249e-3))
		loc_4 = (loc_0 * loc_3)
		if loc_2 == 0 then
			while true do
				reg_0 = ((loc_4 * ((loc_3 * loc_5) + -1.6666666666666632e-1)) + loc_0)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = (loc_0 - (((loc_3 * ((loc_1 * 5e-1) - (loc_4 * loc_5))) - loc_1) + (loc_4 * 1.6666666666666632e-1)))
		break
	end
	return reg_0
end
FUNC_LIST[708] = --[[ __rem_pio2_large ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0.0
	local loc_6 = 0.0
	local loc_7 = 0.0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = 0
	local loc_22 = 0
	local loc_23 = 0
	local loc_24 = 0
	local reg_0
	local reg_1
	local reg_2
	local desired
	local br_map = {}
	while true do
		loc_10 = rt_sub_i32(GLOBAL_LIST[0].value, 560)
		GLOBAL_LIST[0].value = loc_10
		loc_9 = rt_div_i32(rt_sub_i32(loc_2, 3), 24)
		loc_18 = (if rt_gt_i32(loc_9, 0) then loc_9 else 0)
		loc_12 = rt_add_i32(loc_2, rt_mul_i32(loc_18, 4294967272))
		loc_13 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_4, 2), 26288))
		loc_14 = rt_sub_i32(loc_3, 1)
		if rt_ge_i32(rt_add_i32(loc_13, loc_14), 0) then
			while true do
				loc_8 = rt_add_i32(loc_3, loc_13)
				loc_2 = rt_sub_i32(loc_18, loc_14)
				loc_9 = 0
				while true do
					reg_0 = rt_add_i32(rt_add_i32(loc_10, 320), rt_shl_i32(loc_9, 3))
					if rt_lt_i32(loc_2, 0) then
						while true do
							reg_1 = 0e0
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					else
						while true do
							reg_1 = rt_convert_f64_i32(rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_2, 2), 26304)))
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
								continue
							end
							break
						end
					end
					loc_5 = reg_1
					rt_store_f64(memory_at_0, reg_0, loc_5)
					loc_2 = rt_add_i32(loc_2, 1)
					loc_9 = rt_add_i32(loc_9, 1)
					if loc_8 ~= loc_9 then
						continue
					end
					break
				end
				if desired then
					break
				end
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_16 = rt_sub_i32(loc_12, 24)
		loc_8 = 0
		loc_11 = (if rt_gt_i32(loc_13, 0) then loc_13 else 0)
		loc_17 = (if rt_le_i32(loc_3, 0) then 1 else 0)
		while true do
			while true do
				if loc_17 ~= 0 then
					while true do
						loc_5 = 0e0
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_9 = rt_add_i32(loc_8, loc_14)
				loc_2 = 0
				loc_5 = 0e0
				while true do
					loc_5 = ((rt_load_f64(memory_at_0, rt_add_i32(rt_shl_i32(loc_2, 3), loc_0)) * rt_load_f64(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 320), rt_shl_i32(rt_sub_i32(loc_9, loc_2), 3)))) + loc_5)
					loc_2 = rt_add_i32(loc_2, 1)
					if loc_3 ~= loc_2 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			rt_store_f64(memory_at_0, rt_add_i32(rt_shl_i32(loc_8, 3), loc_10), loc_5)
			loc_2 = (if loc_8 == loc_11 then 1 else 0)
			loc_8 = rt_add_i32(loc_8, 1)
			if loc_2 == 0 then
				continue
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_21 = rt_sub_i32(47, loc_12)
		loc_19 = rt_sub_i32(48, loc_12)
		loc_20 = (if rt_lt_i32(loc_12, 25) then 1 else 0)
		loc_22 = rt_sub_i32(loc_12, 25)
		loc_8 = loc_13
		while true do
			loc_5 = rt_load_f64(memory_at_0, rt_add_i32(rt_shl_i32(loc_8, 3), loc_10))
			loc_2 = 0
			loc_9 = loc_8
			if rt_gt_i32(loc_8, 0) then
				while true do
					while true do
						loc_17 = rt_add_i32(rt_add_i32(loc_10, 480), rt_shl_i32(loc_2, 2))
						reg_0 = loc_17
						while true do
							while true do
								loc_6 = (loc_5 * 5.960464477539063e-8)
								if math_abs(loc_6) < 2.147483648e9 then
									while true do
										reg_1 = rt_truncate_f64(loc_6)
										desired = 5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								reg_1 = 2147483648
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							loc_11 = reg_1
							loc_6 = rt_convert_f64_i32(loc_11)
							loc_5 = ((loc_6 * -1.6777216e7) + loc_5)
							if math_abs(loc_5) < 2.147483648e9 then
								while true do
									reg_1 = rt_truncate_f64(loc_5)
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							reg_1 = 2147483648
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
						loc_11 = reg_1
						rt_store_i32(memory_at_0, reg_0, loc_11)
						loc_9 = rt_sub_i32(loc_9, 1)
						loc_5 = (rt_load_f64(memory_at_0, rt_add_i32(rt_shl_i32(loc_9, 3), loc_10)) + loc_6)
						loc_2 = rt_add_i32(loc_2, 1)
						if loc_8 ~= loc_2 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			end
			while true do
				reg_0 = FUNC_LIST[648](loc_5, loc_16)
				loc_5 = reg_0
				reg_1 = FUNC_LIST[709]((loc_5 * 1.25e-1))
				loc_5 = (loc_5 + (reg_1 * -8e0))
				if math_abs(loc_5) < 2.147483648e9 then
					while true do
						reg_0 = rt_truncate_f64(loc_5)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = 2147483648
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			loc_14 = reg_0
			loc_5 = (loc_5 - rt_convert_f64_i32(loc_14))
			while true do
				while true do
					while true do
						while true do
							if loc_20 == 0 then
								while true do
									loc_23 = rt_add_i32(loc_10, rt_shl_i32(loc_8, 2))
									loc_2 = rt_add_i32(loc_23, 476)
									reg_0 = loc_2
									loc_2 = rt_load_i32(memory_at_0, loc_23 + 476)
									reg_1 = loc_2
									loc_2 = rt_shr_i32(loc_2, loc_19)
									loc_9 = rt_sub_i32(reg_1, rt_shl_i32(loc_2, loc_19))
									rt_store_i32(memory_at_0, reg_0, loc_9)
									loc_14 = rt_add_i32(loc_2, loc_14)
									reg_0 = rt_shr_i32(loc_9, loc_21)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_16 ~= 0 then
								desired = 4
								break
							end
							reg_0 = rt_shr_i32(rt_load_i32(memory_at_0, rt_add_i32(loc_10, rt_shl_i32(loc_8, 2)) + 476), 23)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_15 = reg_0
						if rt_le_i32(loc_15, 0) then
							desired = 2
							break
						end
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_15 = 2
					if loc_5 >= 5e-1 then
						break
					end
					loc_15 = 0
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = 0
				loc_11 = 0
				loc_9 = 1
				if rt_gt_i32(loc_8, 0) then
					while true do
						while true do
							loc_17 = rt_add_i32(rt_add_i32(loc_10, 480), rt_shl_i32(loc_2, 2))
							loc_9 = rt_load_i32(memory_at_0, loc_17)
							while true do
								while true do
									reg_0 = loc_17
									if loc_11 ~= 0 then
										while true do
											reg_1 = 16777215
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									else
										while true do
											if loc_9 == 0 then
												desired = 6
												break
											end
											reg_1 = 16777216
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									loc_11 = reg_1
									rt_store_i32(memory_at_0, reg_0, rt_sub_i32(loc_11, loc_9))
									loc_11 = 1
									reg_0 = 0
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								loc_11 = 0
								reg_0 = 1
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							loc_9 = reg_0
							loc_2 = rt_add_i32(loc_2, 1)
							if loc_8 ~= loc_2 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				while true do
					if loc_20 ~= 0 then
						break
					end
					loc_2 = 8388607
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 1, 0, }
								end)()
							end
							temp = br_map[1][loc_22] or 2
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 3
								break
							else
								desired = 4
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_2 = 4194303
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_24 = rt_add_i32(loc_10, rt_shl_i32(loc_8, 2))
					loc_11 = rt_add_i32(loc_24, 476)
					rt_store_i32(memory_at_0, loc_11, bit_and(loc_2, rt_load_i32(memory_at_0, loc_24 + 476)))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_14 = rt_add_i32(loc_14, 1)
				if loc_15 ~= 2 then
					break
				end
				loc_5 = (1e0 - loc_5)
				loc_15 = 2
				if loc_9 ~= 0 then
					break
				end
				reg_1 = FUNC_LIST[648](1e0, loc_16)
				loc_5 = (loc_5 - reg_1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			while true do
				while true do
					if loc_5 == 0e0 then
						while true do
							loc_9 = 0
							loc_2 = loc_8
							if rt_ge_i32(loc_13, loc_2) then
								desired = 2
								break
							end
							while true do
								loc_2 = rt_sub_i32(loc_2, 1)
								loc_9 = bit_or(loc_9, rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 480), rt_shl_i32(loc_2, 2))))
								if rt_gt_i32(loc_2, loc_13) then
									continue
								end
								break
							end
							if desired then
								break
							end
							if loc_9 == 0 then
								desired = 2
								break
							end
							loc_12 = loc_16
							while true do
								loc_12 = rt_sub_i32(loc_12, 24)
								loc_8 = rt_sub_i32(loc_8, 1)
								if rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 480), rt_shl_i32(loc_8, 2))) == 0 then
									continue
								end
								break
							end
							if desired then
								break
							end
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					while true do
						reg_0 = FUNC_LIST[648](loc_5, rt_sub_i32(24, loc_12))
						loc_5 = reg_0
						if loc_5 >= 1.6777216e7 then
							while true do
								loc_3 = rt_shl_i32(loc_8, 2)
								loc_3 = rt_add_i32(loc_3, rt_add_i32(loc_10, 480))
								reg_0 = loc_3
								while true do
									while true do
										loc_6 = (loc_5 * 5.960464477539063e-8)
										if math_abs(loc_6) < 2.147483648e9 then
											while true do
												reg_1 = rt_truncate_f64(loc_6)
												desired = 7
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
												end
												break
											end
										end
										reg_1 = 2147483648
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
									loc_2 = reg_1
									loc_5 = ((rt_convert_f64_i32(loc_2) * -1.6777216e7) + loc_5)
									if math_abs(loc_5) < 2.147483648e9 then
										while true do
											reg_1 = rt_truncate_f64(loc_5)
											desired = 6
											break
										end
										if desired then
											if desired == 6 then
												desired = nil
											end
											break
										end
									end
									reg_1 = 2147483648
									break
								end
								if desired then
									break
								end
								loc_9 = reg_1
								rt_store_i32(memory_at_0, reg_0, loc_9)
								loc_8 = rt_add_i32(loc_8, 1)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						while true do
							if math_abs(loc_5) < 2.147483648e9 then
								while true do
									reg_0 = rt_truncate_f64(loc_5)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							reg_0 = 2147483648
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_2 = reg_0
						loc_12 = loc_16
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 480), rt_shl_i32(loc_8, 2)), loc_2)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[648](1e0, loc_12)
				loc_5 = reg_0
				if rt_ge_i32(loc_8, 0) then
					while true do
						loc_3 = loc_8
						while true do
							loc_2 = loc_3
							rt_store_f64(memory_at_0, rt_add_i32(rt_shl_i32(loc_2, 3), loc_10), (loc_5 * rt_convert_f64_i32(rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 480), rt_shl_i32(loc_2, 2))))))
							loc_3 = rt_sub_i32(loc_2, 1)
							loc_5 = (loc_5 * 5.960464477539063e-8)
							if loc_2 ~= 0 then
								continue
							end
							break
						end
						if desired then
							break
						end
						loc_9 = loc_8
						while true do
							loc_5 = 0e0
							loc_2 = 0
							loc_11 = rt_sub_i32(loc_8, loc_9)
							loc_0 = (if rt_gt_i32(loc_11, loc_13) then loc_13 else loc_11)
							if rt_ge_i32(loc_0, 0) then
								while true do
									while true do
										loc_5 = ((rt_load_f64(memory_at_0, rt_add_i32(rt_shl_i32(loc_2, 3), 29072)) * rt_load_f64(memory_at_0, rt_add_i32(rt_shl_i32(rt_add_i32(loc_2, loc_9), 3), loc_10))) + loc_5)
										loc_3 = (if loc_0 ~= loc_2 then 1 else 0)
										loc_2 = rt_add_i32(loc_2, 1)
										if loc_3 ~= 0 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
										continue
									end
									break
								end
							end
							rt_store_f64(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 160), rt_shl_i32(loc_11, 3)), loc_5)
							loc_2 = (if rt_gt_i32(loc_9, 0) then 1 else 0)
							loc_9 = rt_sub_i32(loc_9, 1)
							if loc_2 ~= 0 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				while true do
					while true do
						while true do
							while true do
								while true do
									if not br_map[2] then
										br_map[2] = (function()
											return { [0] = 2, 2, 0, }
										end)()
									end
									temp = br_map[2][rt_sub_i32(loc_4, 1)] or 1
									if temp < 1 then
										break
									elseif temp > 1 then
										desired = 5
										break
									else
										desired = 6
										break
									end
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								while true do
									if rt_le_i32(loc_8, 0) then
										break
									end
									loc_0 = rt_add_i32(rt_add_i32(loc_10, 160), rt_shl_i32(loc_8, 3))
									loc_5 = rt_load_f64(memory_at_0, loc_0)
									loc_2 = loc_8
									while true do
										loc_3 = rt_sub_i32(loc_2, 1)
										loc_9 = rt_add_i32(rt_add_i32(loc_10, 160), rt_shl_i32(loc_3, 3))
										loc_6 = rt_load_f64(memory_at_0, loc_9)
										reg_2 = loc_6
										loc_6 = (loc_6 + loc_5)
										rt_store_f64(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 160), rt_shl_i32(loc_2, 3)), (loc_5 + (reg_2 - loc_6)))
										rt_store_f64(memory_at_0, loc_9, loc_6)
										loc_9 = (if loc_2 > 1 then 1 else 0)
										loc_5 = loc_6
										loc_2 = loc_3
										if loc_9 ~= 0 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if loc_8 == 1 then
										break
									end
									loc_5 = rt_load_f64(memory_at_0, loc_0)
									loc_2 = loc_8
									while true do
										loc_3 = rt_sub_i32(loc_2, 1)
										loc_9 = rt_add_i32(rt_add_i32(loc_10, 160), rt_shl_i32(loc_3, 3))
										loc_6 = rt_load_f64(memory_at_0, loc_9)
										reg_2 = loc_6
										loc_6 = (loc_6 + loc_5)
										rt_store_f64(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 160), rt_shl_i32(loc_2, 3)), (loc_5 + (reg_2 - loc_6)))
										rt_store_f64(memory_at_0, loc_9, loc_6)
										loc_9 = (if loc_2 > 2 then 1 else 0)
										loc_5 = loc_6
										loc_2 = loc_3
										if loc_9 ~= 0 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									while true do
										loc_7 = (loc_7 + rt_load_f64(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 160), rt_shl_i32(loc_8, 3))))
										loc_2 = (if rt_gt_i32(loc_8, 2) then 1 else 0)
										loc_8 = rt_sub_i32(loc_8, 1)
										if loc_2 ~= 0 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_5 = rt_load_f64(memory_at_0, loc_10 + 160)
								if loc_15 ~= 0 then
									desired = 4
									break
								end
								rt_store_f64(memory_at_0, loc_1, loc_5)
								loc_5 = rt_load_f64(memory_at_0, loc_10 + 168)
								rt_store_f64(memory_at_0, loc_1 + 16, loc_7)
								rt_store_f64(memory_at_0, loc_1 + 8, loc_5)
								desired = 3
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_5 = 0e0
							if rt_ge_i32(loc_8, 0) then
								while true do
									while true do
										loc_2 = loc_8
										loc_8 = rt_sub_i32(loc_2, 1)
										loc_5 = (loc_5 + rt_load_f64(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 160), rt_shl_i32(loc_2, 3))))
										if loc_2 ~= 0 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							rt_store_f64(memory_at_0, loc_1, (if loc_15 ~= 0 then rt_neg_f64(loc_5) else loc_5))
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_5 = 0e0
						if rt_ge_i32(loc_8, 0) then
							while true do
								loc_3 = loc_8
								while true do
									loc_2 = loc_3
									loc_3 = rt_sub_i32(loc_2, 1)
									loc_5 = (loc_5 + rt_load_f64(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 160), rt_shl_i32(loc_2, 3))))
									if loc_2 ~= 0 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						rt_store_f64(memory_at_0, loc_1, (if loc_15 ~= 0 then rt_neg_f64(loc_5) else loc_5))
						loc_5 = (rt_load_f64(memory_at_0, loc_10 + 160) - loc_5)
						loc_2 = 1
						if rt_gt_i32(loc_8, 0) then
							while true do
								while true do
									loc_5 = (loc_5 + rt_load_f64(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 160), rt_shl_i32(loc_2, 3))))
									loc_3 = (if loc_2 ~= loc_8 then 1 else 0)
									loc_2 = rt_add_i32(loc_2, 1)
									if loc_3 ~= 0 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						rt_store_f64(memory_at_0, loc_1 + 8, (if loc_15 ~= 0 then rt_neg_f64(loc_5) else loc_5))
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_f64(memory_at_0, loc_1, rt_neg_f64(loc_5))
					loc_5 = rt_load_f64(memory_at_0, loc_10 + 168)
					rt_store_f64(memory_at_0, loc_1 + 16, rt_neg_f64(loc_7))
					rt_store_f64(memory_at_0, loc_1 + 8, rt_neg_f64(loc_5))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				GLOBAL_LIST[0].value = rt_add_i32(loc_10, 560)
				reg_0 = bit_and(loc_14, 7)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			loc_2 = 1
			while true do
				loc_9 = loc_2
				loc_2 = rt_add_i32(loc_9, 1)
				if rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 480), rt_shl_i32(rt_sub_i32(loc_13, loc_9), 2))) == 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			loc_11 = rt_add_i32(loc_8, loc_9)
			while true do
				loc_9 = rt_add_i32(loc_3, loc_8)
				loc_8 = rt_add_i32(loc_8, 1)
				rt_store_f64(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 320), rt_shl_i32(loc_9, 3)), rt_convert_f64_i32(rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(rt_add_i32(loc_18, loc_8), 2), 26304))))
				loc_2 = 0
				loc_5 = 0e0
				if rt_gt_i32(loc_3, 0) then
					while true do
						while true do
							loc_5 = ((rt_load_f64(memory_at_0, rt_add_i32(rt_shl_i32(loc_2, 3), loc_0)) * rt_load_f64(memory_at_0, rt_add_i32(rt_add_i32(loc_10, 320), rt_shl_i32(rt_sub_i32(loc_9, loc_2), 3)))) + loc_5)
							loc_2 = rt_add_i32(loc_2, 1)
							if loc_3 ~= loc_2 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				rt_store_f64(memory_at_0, rt_add_i32(rt_shl_i32(loc_8, 3), loc_10), loc_5)
				if rt_lt_i32(loc_8, loc_11) then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			loc_8 = loc_11
			continue
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[709] = --[[ floor ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = math_floor(loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[710] = --[[ cosh ]] function(loc_0)
	local loc_1 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		while true do
			loc_0 = math_abs(loc_0)
			loc_1 = rt_reinterpret_i64_f64(loc_0)
			if rt_le_u64(loc_1, rt_i64_from_u32(4294967295, 1072049729)) then
				while true do
					reg_0 = 1e0
					if rt_lt_u64(loc_1, rt_i64_from_u32(0, 1045430272)) then
						desired = 1
						break
					end
					reg_0 = FUNC_LIST[711](loc_0)
					loc_0 = reg_0
					reg_0 = (loc_0 * loc_0)
					loc_0 = (loc_0 + 1e0)
					reg_0 = ((reg_0 / (loc_0 + loc_0)) + 1e0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_le_u64(loc_1, rt_i64_from_u32(4294967295, 1082535489)) then
				while true do
					reg_0 = FUNC_LIST[615](loc_0)
					loc_0 = reg_0
					reg_0 = ((loc_0 + (1e0 / loc_0)) * 5e-1)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[712](loc_0, 1e0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
	return reg_0
end
FUNC_LIST[711] = --[[ expm1 ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0
	local loc_6 = rt_i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						while true do
							loc_6 = rt_reinterpret_i64_f64(loc_0)
							loc_5 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_6, rt_i64_from_u32(32, 0))), 2147483647)
							if loc_5 >= 1078159482 then
								while true do
									reg_0 = FUNC_LIST[621](loc_0)
									if rt_gt_u64(rt_bit_and_i64(reg_0, rt_i64_from_u32(4294967295, 2147483647)), rt_i64_from_u32(0, 2146435072)) then
										desired = 1
										break
									end
									if rt_lt_i64(loc_6, rt_i64_ZERO) then
										while true do
											reg_0 = -1e0
											desired = 0
											break
										end
										if desired then
											break
										end
									end
									if (if loc_0 > 7.09782712893384e2 then 1 else 0) == 0 then
										desired = 5
										break
									end
									reg_0 = (loc_0 * 8.98846567431158e307)
									desired = 0
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_5 < 1071001155 then
								desired = 3
								break
							end
							if loc_5 > 1072734897 then
								break
							end
							if rt_ge_i64(loc_6, rt_i64_ZERO) then
								while true do
									loc_5 = 1
									loc_2 = 1.9082149292705877e-10
									reg_0 = (loc_0 + -6.931471803691238e-1)
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_5 = 4294967295
							loc_2 = -1.9082149292705877e-10
							reg_0 = (loc_0 + 6.931471803691238e-1)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						while true do
							loc_1 = ((loc_0 * 1.4426950408889634e0) + rt_copysign_f64(5e-1, loc_0))
							if math_abs(loc_1) < 2.147483648e9 then
								while true do
									reg_0 = rt_truncate_f64(loc_1)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							reg_0 = 2147483648
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_5 = reg_0
						loc_1 = rt_convert_f64_i32(loc_5)
						loc_2 = (loc_1 * 1.9082149292705877e-10)
						reg_0 = (loc_0 + (loc_1 * -6.931471803691238e-1))
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_1 = reg_0
					loc_0 = (loc_1 - loc_2)
					loc_2 = ((loc_1 - loc_0) - loc_2)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_5 < 1016070144 then
					desired = 1
					break
				end
				loc_5 = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = (loc_0 * 5e-1)
			loc_1 = (loc_0 * loc_3)
			loc_4 = ((loc_1 * ((loc_1 * ((loc_1 * ((loc_1 * ((loc_1 * -2.0109921818362437e-7) + 4.008217827329362e-6)) + -7.93650757867488e-5)) + 1.5873015872548146e-3)) + -3.333333333333313e-2)) + 1e0)
			loc_3 = (3e0 - (loc_4 * loc_3))
			loc_3 = (loc_1 * ((loc_4 - loc_3) / (6e0 - (loc_0 * loc_3))))
			if loc_5 == 0 then
				while true do
					reg_0 = (loc_0 - ((loc_0 * loc_3) - loc_1))
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = (((loc_0 * (loc_3 - loc_2)) - loc_2) - loc_1)
			while true do
				while true do
					while true do
						if not br_map[1] then
							br_map[1] = (function()
								return { [0] = 0, 2, 1, }
							end)()
						end
						temp = br_map[1][rt_add_i32(loc_5, 1)] or 2
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 2
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = (((loc_0 - loc_1) * 5e-1) + -5e-1)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_0 < -2.5e-1 then
					while true do
						reg_0 = ((loc_1 - (loc_0 + 5e-1)) * -2e0)
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_0 = (loc_0 - loc_1)
				reg_0 = ((loc_0 + loc_0) + 1e0)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = rt_reinterpret_f64_i64(rt_shl_i64(rt_extend_i64_u32(rt_add_i32(loc_5, 1023)), rt_i64_from_u32(52, 0)))
			if loc_5 >= 57 then
				while true do
					loc_0 = ((loc_0 - loc_1) + 1e0)
					reg_0 = ((if loc_5 == 1024 then ((loc_0 + loc_0) * 8.98846567431158e307) else (loc_0 * loc_2)) + -1e0)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = rt_reinterpret_f64_i64(rt_shl_i64(rt_extend_i64_u32(rt_sub_i32(1023, loc_5)), rt_i64_from_u32(52, 0)))
			if loc_5 <= 19 then
				while true do
					reg_0 = ((1e0 - loc_3) + (loc_0 - loc_1))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = ((loc_0 - (loc_1 + loc_3)) + 1e0)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_0 = reg_0
			loc_0 = (loc_0 * loc_2)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[712] = --[[ __expo2 ]] function(loc_0, loc_1)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[615]((loc_0 + -1.4160996898839683e3))
		reg_0 = (((loc_1 * 2.247116418577895e307) * reg_1) * 2.247116418577895e307)
		break
	end
	return reg_0
end
FUNC_LIST[713] = --[[ difftime ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = rt_convert_f64_i64(rt_sub_i64(loc_0, loc_1))
		break
	end
	return reg_0
end
FUNC_LIST[714] = --[[ __clock ]] function()
	local loc_0 = 0.0
	local reg_0
	local reg_1
	local desired
	while true do
		if rt_load_f64(memory_at_0, 36888) == 0e0 then
			while true do
				reg_1 = FUNC_LIST[4]()
				rt_store_f64(memory_at_0, 36888, reg_1)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = FUNC_LIST[4]()
		loc_0 = ((reg_0 - rt_load_f64(memory_at_0, 36888)) * 1e3)
		if math_abs(loc_0) < 2.147483648e9 then
			while true do
				reg_0 = rt_truncate_f64(loc_0)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = 2147483648
		break
	end
	return reg_0
end
FUNC_LIST[715] = --[[ __time ]] function(loc_0)
	local loc_1 = rt_i64_ZERO
	local loc_2 = 0.0
	local reg_0
	local desired
	while true do
		while true do
			reg_0 = FUNC_LIST[4]()
			loc_2 = (reg_0 / 1e3)
			if math_abs(loc_2) < 9.223372036854776e18 then
				while true do
					reg_0 = rt_truncate_i64_f64(loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = rt_i64_from_u32(0, 2147483648)
			break
		end
		loc_1 = reg_0
		if loc_0 ~= 0 then
			while true do
				rt_store_i64(memory_at_0, loc_0, loc_1)
				break
			end
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[716] = --[[ __math_xflow ]] function(loc_0, loc_1)
	local reg_0
	local reg_1
	while true do
		reg_1 = FUNC_LIST[636]((if loc_0 ~= 0 then rt_neg_f64(loc_1) else loc_1))
		reg_0 = (loc_1 * reg_1)
		break
	end
	return reg_0
end
FUNC_LIST[717] = --[[ frexp ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = rt_reinterpret_i64_f64(loc_0)
		loc_2 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_3, rt_i64_from_u32(52, 0))), 2047)
		if loc_2 ~= 2047 then
			while true do
				if loc_2 == 0 then
					while true do
						reg_0 = loc_1
						if loc_0 == 0e0 then
							while true do
								reg_1 = 0
								break
							end
							if desired then
								break
							end
						else
							while true do
								reg_1 = FUNC_LIST[717]((loc_0 * 1.8446744073709552e19), loc_1)
								loc_0 = reg_1
								reg_1 = rt_add_i32(rt_load_i32(memory_at_0, loc_1), 4294967232)
								break
							end
							if desired then
								break
							end
						end
						loc_2 = reg_1
						rt_store_i32(memory_at_0, reg_0, loc_2)
						reg_0 = loc_0
						desired = 0
						break
					end
					if desired then
						break
					end
				end
				rt_store_i32(memory_at_0, loc_1, rt_sub_i32(loc_2, 1022))
				reg_0 = rt_reinterpret_f64_i64(rt_bit_or_i64(rt_bit_and_i64(loc_3, rt_i64_from_u32(4294967295, 2148532223)), rt_i64_from_u32(0, 1071644672)))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_0 = reg_0
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[718] = --[[ isalnum ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = bit_or((if rt_sub_i32(loc_0, 48) < 10 then 1 else 0), (if rt_sub_i32(bit_or(loc_0, 32), 97) < 26 then 1 else 0))
		break
	end
	return reg_0
end
FUNC_LIST[719] = --[[ isalpha ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = (if rt_sub_i32(bit_or(loc_0, 32), 97) < 26 then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[720] = --[[ iscntrl ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = bit_or((if loc_0 == 127 then 1 else 0), (if loc_0 < 32 then 1 else 0))
		break
	end
	return reg_0
end
FUNC_LIST[721] = --[[ isgraph ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = (if rt_sub_i32(loc_0, 33) < 94 then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[722] = --[[ islower ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = (if rt_sub_i32(loc_0, 97) < 26 then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[723] = --[[ ispunct ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		if rt_sub_i32(loc_0, 33) <= 93 then
			while true do
				reg_0 = FUNC_LIST[718](loc_0)
				reg_0 = bit_xor(reg_0, 1)
				break
			end
		else
			while true do
				reg_0 = loc_1
				break
			end
		end
		loc_1 = reg_0
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[724] = --[[ isspace ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = bit_or((if loc_0 == 32 then 1 else 0), (if rt_sub_i32(loc_0, 9) < 5 then 1 else 0))
		break
	end
	return reg_0
end
FUNC_LIST[725] = --[[ isupper ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = (if rt_sub_i32(loc_0, 65) < 26 then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[726] = --[[ isxdigit ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = bit_or((if rt_sub_i32(loc_0, 48) < 10 then 1 else 0), (if rt_sub_i32(bit_or(loc_0, 32), 97) < 6 then 1 else 0))
		break
	end
	return reg_0
end
FUNC_LIST[727] = --[[ emscripten_futex_wake ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[728] = --[[ memchr ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_3 = (if loc_2 ~= 0 then 1 else 0)
		while true do
			while true do
				while true do
					if bit_and(loc_0, 3) == 0 then
						break
					end
					if loc_2 == 0 then
						break
					end
					loc_4 = bit_and(loc_1, 255)
					while true do
						if loc_4 == rt_load_i32_u8(memory_at_0, loc_0) then
							desired = 2
							break
						end
						loc_2 = rt_sub_i32(loc_2, 1)
						loc_3 = (if loc_2 ~= 0 then 1 else 0)
						loc_0 = rt_add_i32(loc_0, 1)
						if bit_and(loc_0, 3) == 0 then
							desired = 3
							break
						end
						if loc_2 ~= 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_3 == 0 then
					desired = 1
					break
				end
				while true do
					if rt_load_i32_u8(memory_at_0, loc_0) == bit_and(loc_1, 255) then
						break
					end
					if loc_2 < 4 then
						break
					end
					loc_4 = rt_mul_i32(bit_and(loc_1, 255), 16843009)
					while true do
						loc_3 = bit_xor(loc_4, rt_load_i32(memory_at_0, loc_0))
						if bit_and(bit_or(rt_sub_i32(16843008, loc_3), loc_3), 2155905152) ~= 2155905152 then
							desired = 2
							break
						end
						loc_0 = rt_add_i32(loc_0, 4)
						loc_2 = rt_sub_i32(loc_2, 4)
						if loc_2 > 3 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_2 == 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_3 = bit_and(loc_1, 255)
			while true do
				if rt_load_i32_u8(memory_at_0, loc_0) == loc_3 then
					while true do
						reg_0 = loc_0
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				loc_0 = rt_add_i32(loc_0, 1)
				loc_2 = rt_sub_i32(loc_2, 1)
				if loc_2 ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[729] = --[[ __localtime_r ]] function(loc_0, loc_1)
	local reg_0
	while true do
		FUNC_LIST[730]()
		FUNC_LIST[850](rt_load_i64(memory_at_0, loc_0), loc_1)
		rt_store_i32(memory_at_0, loc_1 + 40, rt_load_i32(memory_at_0, (if rt_load_i32(memory_at_0, loc_1 + 32) ~= 0 then 36908 else 36904)))
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[730] = --[[ __tzset ]] function()
	while true do
		FUNC_LIST[733]()
		break
	end
end
FUNC_LIST[731] = --[[ __gmtime_r ]] function(loc_0, loc_1)
	local reg_0
	while true do
		FUNC_LIST[730]()
		FUNC_LIST[851](rt_load_i64(memory_at_0, loc_0), loc_1)
		rt_store_i32(memory_at_0, loc_1 + 40, 5113)
		rt_store_i64(memory_at_0, loc_1 + 32, rt_i64_ZERO)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[732] = --[[ __tm_to_tzname ]] function(loc_0)
	local reg_0
	while true do
		FUNC_LIST[733]()
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[733] = --[[ do_tzset ]] function()
	while true do
		while true do
			if bit_and(rt_load_i32_u8(memory_at_0, 36912), 1) ~= 0 then
				break
			end
			if bit_and(rt_load_i32_u8(memory_at_0, 36912), 1) ~= 0 then
				break
			end
			FUNC_LIST[5](36896, 36900, 36928, 36960)
			rt_store_i32(memory_at_0, 36908, 36960)
			rt_store_i32(memory_at_0, 36904, 36928)
			rt_store_i32_n8(memory_at_0, 36912, 1)
			break
		end
		break
	end
end
FUNC_LIST[734] = --[[ modf ]] function(loc_0, loc_1)
	local loc_2 = rt_i64_ZERO
	local loc_3 = rt_i64_ZERO
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_reinterpret_i64_f64(loc_0)
		loc_4 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_2, rt_i64_from_u32(52, 0))), 2047)
		loc_5 = rt_sub_i32(loc_4, 1023)
		while true do
			if loc_4 >= 1075 then
				while true do
					rt_store_f64(memory_at_0, loc_1, loc_0)
					if bit_and((if loc_5 == 1024 then 1 else 0), (if rt_ne_i64(rt_bit_and_i64(loc_2, rt_i64_from_u32(4294967295, 1048575)), rt_i64_ZERO) then 1 else 0)) ~= 0 then
						desired = 1
						break
					end
					reg_0 = rt_reinterpret_f64_i64(rt_bit_and_i64(loc_2, rt_i64_from_u32(0, 2147483648)))
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_4 <= 1022 then
				while true do
					rt_store_i64(memory_at_0, loc_1, rt_bit_and_i64(loc_2, rt_i64_from_u32(0, 2147483648)))
					reg_0 = loc_0
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = rt_extend_i64_u32(loc_5)
			if rt_eq_i64(rt_bit_and_i64(rt_shl_i64(loc_2, loc_3), rt_i64_from_u32(4294967295, 1048575)), rt_i64_ZERO) then
				while true do
					rt_store_f64(memory_at_0, loc_1, loc_0)
					reg_0 = rt_reinterpret_f64_i64(rt_bit_and_i64(loc_2, rt_i64_from_u32(0, 2147483648)))
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = rt_bit_and_i64(loc_2, rt_shr_i64(rt_i64_from_u32(0, 4293918720), loc_3))
			rt_store_i64(memory_at_0, loc_1, loc_2)
			loc_0 = (loc_0 - rt_reinterpret_f64_i64(loc_2))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[735] = --[[ __get_tp ]] function()
	local reg_0
	while true do
		reg_0 = 30716
		break
	end
	return reg_0
end
FUNC_LIST[736] = --[[ round ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = rt_i64_ZERO
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_2 = rt_reinterpret_i64_f64(loc_0)
		loc_3 = bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_2, rt_i64_from_u32(52, 0))), 2047)
		if loc_3 <= 1074 then
			while true do
				if loc_3 <= 1021 then
					while true do
						reg_0 = (loc_0 * 0e0)
						desired = 0
						break
					end
					if desired then
						break
					end
				end
				while true do
					loc_0 = math_abs(loc_0)
					loc_1 = (((loc_0 + 4.503599627370496e15) + -4.503599627370496e15) - loc_0)
					if loc_1 > 5e-1 then
						while true do
							reg_0 = ((loc_0 + loc_1) + -1e0)
							desired = 2
							break
						end
						if desired then
							if desired == 2 then
								desired = nil
							end
							break
						end
					end
					loc_0 = (loc_0 + loc_1)
					reg_0 = loc_0
					if (if loc_1 <= -5e-1 then 1 else 0) == 0 then
						break
					end
					reg_0 = (loc_0 + 1e0)
					break
				end
				if desired then
					break
				end
				loc_0 = reg_0
				reg_0 = (if rt_lt_i64(loc_2, rt_i64_ZERO) then rt_neg_f64(loc_0) else loc_0)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_0 = reg_0
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[737] = --[[ sin ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0.0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		while true do
			loc_2 = bit_and(rt_wrap_i32_i64(rt_shr_u64(rt_reinterpret_i64_f64(loc_0), rt_i64_from_u32(32, 0))), 2147483647)
			if loc_2 <= 1072243195 then
				while true do
					if loc_2 < 1045430272 then
						desired = 1
						break
					end
					reg_0 = FUNC_LIST[707](loc_0, 0e0, 0)
					loc_0 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_2 >= 2146435072 then
				while true do
					loc_0 = (loc_0 - loc_0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[706](loc_0, loc_1)
			loc_2 = reg_0
			loc_0 = rt_load_f64(memory_at_0, loc_1 + 8)
			loc_3 = rt_load_f64(memory_at_0, loc_1)
			while true do
				while true do
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 1, 2, 3, }
								end)()
							end
							temp = br_map[1][rt_sub_i32(bit_and(loc_2, 3), 1)] or 0
							if temp < 2 then
								if temp < 1 then
									break
								else
									desired = 4
									break
								end
							elseif temp > 2 then
								desired = 2
								break
							else
								desired = 3
								break
							end
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[707](loc_3, loc_0, 1)
						loc_0 = reg_0
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					reg_0 = FUNC_LIST[705](loc_3, loc_0)
					loc_0 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[707](loc_3, loc_0, 1)
				loc_0 = rt_neg_f64(reg_0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[705](loc_3, loc_0)
			loc_0 = rt_neg_f64(reg_0)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[738] = --[[ sinh ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = 0.0
	local loc_3 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		loc_2 = rt_copysign_f64(5e-1, loc_0)
		while true do
			loc_1 = math_abs(loc_0)
			loc_3 = rt_reinterpret_i64_f64(loc_1)
			if rt_le_u64(loc_3, rt_i64_from_u32(4294967295, 1082535489)) then
				while true do
					reg_0 = FUNC_LIST[711](loc_1)
					loc_1 = reg_0
					if rt_le_u64(loc_3, rt_i64_from_u32(4294967295, 1072693247)) then
						while true do
							if rt_lt_u64(loc_3, rt_i64_from_u32(0, 1045430272)) then
								desired = 1
								break
							end
							reg_0 = (loc_2 * ((loc_1 + loc_1) - ((loc_1 * loc_1) / (loc_1 + 1e0))))
							desired = 0
							break
						end
						if desired then
							break
						end
					end
					reg_0 = (loc_2 * (loc_1 + (loc_1 / (loc_1 + 1e0))))
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[712](loc_1, (loc_2 + loc_2))
			loc_0 = reg_0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[739] = --[[ snprintf ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local reg_0
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_4
		rt_store_i32(memory_at_0, loc_4 + 12, loc_3)
		reg_0 = FUNC_LIST[740](loc_0, loc_1, loc_2, loc_3)
		loc_3 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 16)
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[740] = --[[ vsnprintf ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 160)
		GLOBAL_LIST[0].value = loc_4
		loc_0 = (if loc_1 ~= 0 then loc_0 else rt_add_i32(loc_4, 158))
		rt_store_i32(memory_at_0, loc_4 + 148, loc_0)
		loc_5 = rt_sub_i32(loc_1, 1)
		rt_store_i32(memory_at_0, loc_4 + 152, (if loc_1 >= loc_5 then loc_5 else 0))
		reg_0 = FUNC_LIST[611](loc_4, 0, 144)
		loc_4 = reg_0
		rt_store_i32(memory_at_0, loc_4 + 76, 4294967295)
		rt_store_i32(memory_at_0, loc_4 + 36, 284)
		rt_store_i32(memory_at_0, loc_4 + 80, 4294967295)
		rt_store_i32(memory_at_0, loc_4 + 44, rt_add_i32(loc_4, 159))
		rt_store_i32(memory_at_0, loc_4 + 84, rt_add_i32(loc_4, 148))
		rt_store_i32_n8(memory_at_0, loc_0, 0)
		reg_0 = FUNC_LIST[786](loc_4, loc_2, loc_3)
		loc_1 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 160)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[741] = --[[ __emscripten_stdout_close ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = 0
		break
	end
	return reg_0
end
FUNC_LIST[742] = --[[ __emscripten_stdout_seek ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = rt_i64_ZERO
		break
	end
	return reg_0
end
FUNC_LIST[743] = --[[ __stdio_write ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local reg_0
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 28)
		rt_store_i32(memory_at_0, loc_4 + 16, loc_3)
		loc_5 = rt_load_i32(memory_at_0, loc_0 + 20)
		rt_store_i32(memory_at_0, loc_4 + 28, loc_2)
		rt_store_i32(memory_at_0, loc_4 + 24, loc_1)
		loc_1 = rt_sub_i32(loc_5, loc_3)
		rt_store_i32(memory_at_0, loc_4 + 20, loc_1)
		loc_6 = rt_add_i32(loc_1, loc_2)
		loc_7 = 2
		loc_1 = rt_add_i32(loc_4, 16)
		while true do
			while true do
				while true do
					while true do
						while true do
							reg_0 = FUNC_LIST[6](rt_load_i32(memory_at_0, loc_0 + 60), loc_1, loc_7, rt_add_i32(loc_4, 12))
							reg_0 = FUNC_LIST[744](reg_0)
							if reg_0 == 0 then
								while true do
									loc_3 = rt_load_i32(memory_at_0, loc_4 + 12)
									if loc_3 == loc_6 then
										desired = 5
										break
									end
									if rt_ge_i32(loc_3, 0) then
										desired = 4
										break
									end
									desired = 3
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_6 ~= 4294967295 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_1 = rt_load_i32(memory_at_0, loc_0 + 44)
						rt_store_i32(memory_at_0, loc_0 + 28, loc_1)
						rt_store_i32(memory_at_0, loc_0 + 20, loc_1)
						rt_store_i32(memory_at_0, loc_0 + 16, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 48), loc_1))
						reg_0 = loc_2
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_8 = rt_load_i32(memory_at_0, loc_1 + 4)
					loc_5 = (if loc_8 < loc_3 then 1 else 0)
					loc_9 = rt_add_i32(rt_shl_i32(loc_5, 3), loc_1)
					loc_8 = rt_sub_i32(loc_3, (if loc_5 ~= 0 then loc_8 else 0))
					rt_store_i32(memory_at_0, loc_9, rt_add_i32(loc_8, rt_load_i32(memory_at_0, loc_9)))
					loc_1 = rt_add_i32((if loc_5 ~= 0 then 12 else 4), loc_1)
					rt_store_i32(memory_at_0, loc_1, rt_sub_i32(rt_load_i32(memory_at_0, loc_1), loc_8))
					loc_6 = rt_sub_i32(loc_6, loc_3)
					loc_7 = rt_sub_i32(loc_7, loc_5)
					loc_1 = loc_9
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_0 + 28, 0)
			rt_store_i64(memory_at_0, loc_0 + 16, rt_i64_ZERO)
			rt_store_i32(memory_at_0, loc_0, bit_or(rt_load_i32(memory_at_0, loc_0), 32))
			loc_3 = 0
			reg_0 = loc_3
			if loc_7 == 2 then
				break
			end
			reg_0 = rt_sub_i32(loc_2, rt_load_i32(memory_at_0, loc_1 + 4))
			break
		end
		loc_3 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 32)
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[744] = --[[ __wasi_syscall_ret ]] function(loc_0)
	local reg_0
	local desired
	while true do
		if loc_0 == 0 then
			while true do
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = FUNC_LIST[612]()
		rt_store_i32(memory_at_0, reg_0, loc_0)
		reg_0 = 4294967295
		break
	end
	return reg_0
end
FUNC_LIST[745] = --[[ strcat ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[649](loc_0)
		reg_0 = FUNC_LIST[746](rt_add_i32(reg_0, loc_0), loc_1)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[746] = --[[ strcpy ]] function(loc_0, loc_1)
	local reg_0
	while true do
		FUNC_LIST[749](loc_0, loc_1)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[747] = --[[ strchr ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[748](loc_0, loc_1)
		loc_0 = reg_0
		reg_0 = (if rt_load_i32_u8(memory_at_0, loc_0) == bit_and(loc_1, 255) then loc_0 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[748] = --[[ __strchrnul ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					loc_4 = bit_and(loc_1, 255)
					if loc_4 ~= 0 then
						while true do
							if bit_and(loc_0, 3) ~= 0 then
								while true do
									loc_2 = bit_and(loc_1, 255)
									while true do
										loc_3 = rt_load_i32_u8(memory_at_0, loc_0)
										if loc_3 == 0 then
											desired = 1
											break
										end
										if loc_2 == loc_3 then
											desired = 1
											break
										end
										loc_0 = rt_add_i32(loc_0, 1)
										if bit_and(loc_0, 3) ~= 0 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									break
								end
							end
							loc_2 = rt_load_i32(memory_at_0, loc_0)
							if bit_and(bit_or(rt_sub_i32(16843008, loc_2), loc_2), 2155905152) ~= 2155905152 then
								desired = 3
								break
							end
							loc_4 = rt_mul_i32(loc_4, 16843009)
							while true do
								loc_3 = bit_xor(loc_2, loc_4)
								if bit_and(bit_or(rt_sub_i32(16843008, loc_3), loc_3), 2155905152) ~= 2155905152 then
									desired = 3
									break
								end
								loc_2 = rt_load_i32(memory_at_0, loc_0 + 4)
								loc_3 = rt_add_i32(loc_0, 4)
								loc_0 = loc_3
								if bit_and(bit_or(rt_sub_i32(16843008, loc_2), loc_2), 2155905152) == 2155905152 then
									continue
								end
								break
							end
							if desired then
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[649](loc_0)
					reg_0 = rt_add_i32(reg_0, loc_0)
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = loc_0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_0 = loc_3
				loc_2 = rt_load_i32_u8(memory_at_0, loc_0)
				if loc_2 == 0 then
					desired = 1
					break
				end
				loc_3 = rt_add_i32(loc_0, 1)
				if bit_and(loc_1, 255) ~= loc_2 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[749] = --[[ __stpcpy ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local desired
	while true do
		while true do
			while true do
				if bit_and(bit_xor(loc_0, loc_1), 3) ~= 0 then
					while true do
						loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if bit_and(loc_1, 3) ~= 0 then
					while true do
						while true do
							loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
							rt_store_i32_n8(memory_at_0, loc_0, loc_2)
							if loc_2 == 0 then
								desired = 1
								break
							end
							loc_0 = rt_add_i32(loc_0, 1)
							loc_1 = rt_add_i32(loc_1, 1)
							if bit_and(loc_1, 3) ~= 0 then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_2 = rt_load_i32(memory_at_0, loc_1)
				if bit_and(bit_or(rt_sub_i32(16843008, loc_2), loc_2), 2155905152) ~= 2155905152 then
					break
				end
				while true do
					rt_store_i32(memory_at_0, loc_0, loc_2)
					loc_0 = rt_add_i32(loc_0, 4)
					loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
					loc_1 = rt_add_i32(loc_1, 4)
					if bit_and(bit_or(rt_sub_i32(16843008, loc_2), loc_2), 2155905152) == 2155905152 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32_n8(memory_at_0, loc_0, loc_2)
			if bit_and(loc_2, 255) == 0 then
				break
			end
			while true do
				loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 1)
				rt_store_i32_n8(memory_at_0, loc_0 + 1, loc_2)
				loc_0 = rt_add_i32(loc_0, 1)
				loc_1 = rt_add_i32(loc_1, 1)
				if loc_2 ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		break
	end
end
FUNC_LIST[750] = --[[ strcspn ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 32)
		GLOBAL_LIST[0].value = loc_4
		while true do
			while true do
				loc_2 = rt_load_i32_i8(memory_at_0, loc_1)
				if loc_2 ~= 0 then
					while true do
						if rt_load_i32_u8(memory_at_0, loc_1 + 1) ~= 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[748](loc_0, loc_2)
				loc_3 = reg_0
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[611](loc_4, 0, 32)
			loc_2 = rt_load_i32_u8(memory_at_0, loc_1)
			if loc_2 ~= 0 then
				while true do
					while true do
						loc_3 = rt_add_i32(bit_and(rt_shr_u32(loc_2, 3), 28), loc_4)
						rt_store_i32(memory_at_0, loc_3, bit_or(rt_load_i32(memory_at_0, loc_3), rt_shl_i32(1, loc_2)))
						loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 1)
						loc_1 = rt_add_i32(loc_1, 1)
						if loc_2 ~= 0 then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_3 = loc_0
			loc_2 = rt_load_i32_u8(memory_at_0, loc_0)
			if loc_2 == 0 then
				break
			end
			loc_1 = loc_0
			while true do
				if bit_and(rt_shr_u32(rt_load_i32(memory_at_0, rt_add_i32(bit_and(rt_shr_u32(loc_2, 3), 28), loc_4)), loc_2), 1) ~= 0 then
					while true do
						loc_3 = loc_1
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
							continue
						end
						break
					end
				end
				loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 1)
				loc_3 = rt_add_i32(loc_1, 1)
				loc_1 = loc_3
				if loc_2 ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 32)
		reg_0 = rt_sub_i32(loc_3, loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[751] = --[[ __strftime_fmt_1 ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = rt_i64_ZERO
	local loc_11 = rt_i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local desired
	local br_map = {}
	while true do
		loc_6 = rt_sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_6
		loc_8 = 1301
		loc_7 = 48
		loc_9 = 131112
		while true do
			reg_0 = loc_1
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													while true do
														while true do
															while true do
																while true do
																	while true do
																		while true do
																			while true do
																				while true do
																					while true do
																						while true do
																							while true do
																								while true do
																									while true do
																										while true do
																											while true do
																												while true do
																													while true do
																														while true do
																															while true do
																																while true do
																																	while true do
																																		while true do
																																			while true do
																																				while true do
																																					while true do
																																						while true do
																																							while true do
																																								while true do
																																									while true do
																																										while true do
																																											while true do
																																												while true do
																																													while true do
																																														while true do
																																															while true do
																																																if not br_map[1] then
																																																	br_map[1] = (function()
																																																		return { [0] = 33, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 1, 3, 4, 39, 45, 7, 8, 9, 10, 45, 45, 45, 13, 45, 45, 45, 45, 16, 18, 20, 22, 24, 23, 28, 30, 32, 45, 45, 45, 45, 45, 45, 0, 2, 38, 6, 5, 45, 8, 2, 45, 11, 45, 45, 12, 14, 45, 15, 45, 37, 17, 19, 21, 45, 25, 27, 29, 31, }
																																																	end)()
																																																end
																																																temp = br_map[1][rt_sub_i32(loc_2, 37)] or 45
																																																if temp < 18 then
																																																	if temp < 9 then
																																																		if temp < 4 then
																																																			if temp < 2 then
																																																				if temp < 1 then
																																																					break
																																																				else
																																																					desired = 45
																																																					break
																																																				end
																																																			elseif temp > 2 then
																																																				desired = 43
																																																				break
																																																			else
																																																				desired = 44
																																																				break
																																																			end
																																																		elseif temp > 4 then
																																																			if temp < 7 then
																																																				if temp < 6 then
																																																					desired = 41
																																																					break
																																																				else
																																																					desired = 40
																																																					break
																																																				end
																																																			elseif temp > 7 then
																																																				desired = 38
																																																				break
																																																			else
																																																				desired = 39
																																																				break
																																																			end
																																																		else
																																																			desired = 42
																																																			break
																																																		end
																																																	elseif temp > 9 then
																																																		if temp < 14 then
																																																			if temp < 12 then
																																																				if temp < 11 then
																																																					desired = 36
																																																					break
																																																				else
																																																					desired = 35
																																																					break
																																																				end
																																																			elseif temp > 12 then
																																																				desired = 33
																																																				break
																																																			else
																																																				desired = 34
																																																				break
																																																			end
																																																		elseif temp > 14 then
																																																			if temp < 16 then
																																																				desired = 31
																																																				break
																																																			elseif temp > 16 then
																																																				desired = 29
																																																				break
																																																			else
																																																				desired = 30
																																																				break
																																																			end
																																																		else
																																																			desired = 32
																																																			break
																																																		end
																																																	else
																																																		desired = 37
																																																		break
																																																	end
																																																elseif temp > 18 then
																																																	if temp < 29 then
																																																		if temp < 23 then
																																																			if temp < 21 then
																																																				if temp < 20 then
																																																					desired = 27
																																																					break
																																																				else
																																																					desired = 26
																																																					break
																																																				end
																																																			elseif temp > 21 then
																																																				desired = 24
																																																				break
																																																			else
																																																				desired = 25
																																																				break
																																																			end
																																																		elseif temp > 23 then
																																																			if temp < 27 then
																																																				if temp < 25 then
																																																					desired = 22
																																																					break
																																																				else
																																																					desired = 21
																																																					break
																																																				end
																																																			elseif temp > 27 then
																																																				desired = 18
																																																				break
																																																			else
																																																				desired = 19
																																																				break
																																																			end
																																																		else
																																																			desired = 23
																																																			break
																																																		end
																																																	elseif temp > 29 then
																																																		if temp < 37 then
																																																			if temp < 32 then
																																																				if temp < 31 then
																																																					desired = 16
																																																					break
																																																				else
																																																					desired = 15
																																																					break
																																																				end
																																																			elseif temp > 32 then
																																																				desired = 13
																																																				break
																																																			else
																																																				desired = 14
																																																				break
																																																			end
																																																		elseif temp > 37 then
																																																			if temp < 39 then
																																																				desired = 8
																																																				break
																																																			elseif temp > 39 then
																																																				desired = 1
																																																				break
																																																			else
																																																				desired = 7
																																																				break
																																																			end
																																																		else
																																																			desired = 9
																																																			break
																																																		end
																																																	else
																																																		desired = 17
																																																		break
																																																	end
																																																else
																																																	desired = 28
																																																	break
																																																end
																																															end
																																															if desired then
																																																if desired == 45 then
																																																	desired = nil
																																																end
																																																break
																																															end
																																															loc_5 = rt_load_i32(memory_at_0, loc_3 + 24)
																																															if loc_5 <= 6 then
																																																desired = 11
																																																break
																																															end
																																															desired = 3
																																															break
																																														end
																																														if desired then
																																															if desired == 44 then
																																																desired = nil
																																															end
																																															break
																																														end
																																														loc_5 = rt_load_i32(memory_at_0, loc_3 + 24)
																																														if loc_5 > 6 then
																																															desired = 3
																																															break
																																														end
																																														reg_1 = rt_add_i32(loc_5, 131079)
																																														desired = 10
																																														break
																																													end
																																													if desired then
																																														if desired == 43 then
																																															desired = nil
																																														end
																																														break
																																													end
																																													loc_5 = rt_load_i32(memory_at_0, loc_3 + 16)
																																													if loc_5 > 11 then
																																														desired = 3
																																														break
																																													end
																																													reg_1 = rt_add_i32(loc_5, 131086)
																																													desired = 10
																																													break
																																												end
																																												if desired then
																																													if desired == 42 then
																																														desired = nil
																																													end
																																													break
																																												end
																																												loc_5 = rt_load_i32(memory_at_0, loc_3 + 16)
																																												if loc_5 > 11 then
																																													desired = 3
																																													break
																																												end
																																												reg_1 = rt_add_i32(loc_5, 131098)
																																												desired = 10
																																												break
																																											end
																																											if desired then
																																												if desired == 41 then
																																													desired = nil
																																												end
																																												break
																																											end
																																											loc_10 = rt_div_i64(rt_add_i64(rt_load_i64_i32(memory_at_0, loc_3 + 20), rt_i64_from_u32(1900, 0)), rt_i64_from_u32(100, 0))
																																											desired = 6
																																											break
																																										end
																																										if desired then
																																											if desired == 40 then
																																												desired = nil
																																											end
																																											break
																																										end
																																										loc_7 = 95
																																										break
																																									end
																																									if desired then
																																										if desired == 39 then
																																											desired = nil
																																										end
																																										break
																																									end
																																									loc_10 = rt_load_i64_i32(memory_at_0, loc_3 + 12)
																																									desired = 6
																																									break
																																								end
																																								if desired then
																																									if desired == 38 then
																																										desired = nil
																																									end
																																									break
																																								end
																																								loc_8 = 4927
																																								desired = 7
																																								break
																																							end
																																							if desired then
																																								if desired == 37 then
																																									desired = nil
																																								end
																																								break
																																							end
																																							loc_11 = rt_load_i64_i32(memory_at_0, loc_3 + 20)
																																							loc_10 = rt_add_i64(loc_11, rt_i64_from_u32(1900, 0))
																																							while true do
																																								loc_5 = rt_load_i32(memory_at_0, loc_3 + 28)
																																								if rt_le_i32(loc_5, 2) then
																																									while true do
																																										reg_3 = FUNC_LIST[752](loc_3)
																																										loc_10 = (if reg_3 == 1 then loc_10 else rt_add_i64(loc_11, rt_i64_from_u32(1899, 0)))
																																										desired = 38
																																										break
																																									end
																																									if desired then
																																										if desired == 38 then
																																											desired = nil
																																										end
																																										break
																																									end
																																								end
																																								if loc_5 < 361 then
																																									break
																																								end
																																								reg_3 = FUNC_LIST[752](loc_3)
																																								loc_10 = (if reg_3 == 1 then rt_add_i64(loc_11, rt_i64_from_u32(1901, 0)) else loc_10)
																																								break
																																							end
																																							if desired then
																																								if desired == 37 then
																																									desired = nil
																																								end
																																								break
																																							end
																																							if loc_2 == 103 then
																																								desired = 12
																																								break
																																							end
																																							desired = 5
																																							break
																																						end
																																						if desired then
																																							if desired == 36 then
																																								desired = nil
																																							end
																																							break
																																						end
																																						loc_10 = rt_load_i64_i32(memory_at_0, loc_3 + 8)
																																						desired = 6
																																						break
																																					end
																																					if desired then
																																						if desired == 35 then
																																							desired = nil
																																						end
																																						break
																																					end
																																					loc_5 = 2
																																					loc_3 = rt_load_i32(memory_at_0, loc_3 + 8)
																																					if loc_3 == 0 then
																																						while true do
																																							loc_10 = rt_i64_from_u32(12, 0)
																																							desired = 4
																																							break
																																						end
																																						if desired then
																																							if desired == 35 then
																																								desired = nil
																																							end
																																							break
																																						end
																																					end
																																					loc_10 = rt_extend_i64_i32(loc_3)
																																					loc_10 = (if rt_gt_i32(loc_3, 12) then rt_sub_i64(loc_10, rt_i64_from_u32(12, 0)) else loc_10)
																																					desired = 4
																																					break
																																				end
																																				if desired then
																																					if desired == 34 then
																																						desired = nil
																																					end
																																					break
																																				end
																																				loc_10 = rt_extend_i64_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_3 + 28), 1))
																																				loc_5 = 3
																																				desired = 4
																																				break
																																			end
																																			if desired then
																																				if desired == 33 then
																																					desired = nil
																																				end
																																				break
																																			end
																																			loc_10 = rt_extend_i64_i32(rt_add_i32(rt_load_i32(memory_at_0, loc_3 + 16), 1))
																																			desired = 6
																																			break
																																		end
																																		if desired then
																																			if desired == 32 then
																																				desired = nil
																																			end
																																			break
																																		end
																																		loc_10 = rt_load_i64_i32(memory_at_0, loc_3 + 4)
																																		desired = 6
																																		break
																																	end
																																	if desired then
																																		if desired == 31 then
																																			desired = nil
																																		end
																																		break
																																	end
																																	rt_store_i32(memory_at_0, loc_1, 1)
																																	loc_5 = 6594
																																	desired = 1
																																	break
																																end
																																if desired then
																																	if desired == 30 then
																																		desired = nil
																																	end
																																	break
																																end
																																reg_1 = (if rt_gt_i32(rt_load_i32(memory_at_0, loc_3 + 8), 11) then 131111 else 131110)
																																desired = 10
																																break
																															end
																															if desired then
																																if desired == 29 then
																																	desired = nil
																																end
																																break
																															end
																															loc_8 = 5183
																															desired = 7
																															break
																														end
																														if desired then
																															if desired == 28 then
																																desired = nil
																															end
																															break
																														end
																														reg_1 = FUNC_LIST[753](loc_3)
																														reg_1 = rt_sub_i64(reg_1, rt_load_i64_i32(memory_at_0, loc_3 + 36))
																														desired = 20
																														break
																													end
																													if desired then
																														if desired == 27 then
																															desired = nil
																														end
																														break
																													end
																													loc_10 = rt_load_i64_i32(memory_at_0, loc_3)
																													desired = 6
																													break
																												end
																												if desired then
																													if desired == 26 then
																														desired = nil
																													end
																													break
																												end
																												rt_store_i32(memory_at_0, loc_1, 1)
																												loc_5 = 6596
																												desired = 1
																												break
																											end
																											if desired then
																												if desired == 25 then
																													desired = nil
																												end
																												break
																											end
																											loc_8 = 5117
																											desired = 7
																											break
																										end
																										if desired then
																											if desired == 24 then
																												desired = nil
																											end
																											break
																										end
																										loc_5 = rt_load_i32(memory_at_0, loc_3 + 24)
																										reg_1 = rt_extend_i64_i32((if loc_5 ~= 0 then loc_5 else 7))
																										desired = 20
																										break
																									end
																									if desired then
																										if desired == 23 then
																											desired = nil
																										end
																										break
																									end
																									loc_10 = rt_extend_i64_u32(rt_div_u32(rt_add_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 28), rt_load_i32(memory_at_0, loc_3 + 24)), 7), 7))
																									desired = 6
																									break
																								end
																								if desired then
																									if desired == 22 then
																										desired = nil
																									end
																									break
																								end
																								loc_10 = rt_extend_i64_u32(rt_div_u32(rt_add_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 28), (rt_add_i32(rt_load_i32(memory_at_0, loc_3 + 24), 6) % 7)), 7), 7))
																								desired = 6
																								break
																							end
																							if desired then
																								if desired == 21 then
																									desired = nil
																								end
																								break
																							end
																							reg_1 = FUNC_LIST[752](loc_3)
																							loc_10 = rt_extend_i64_u32(reg_1)
																							desired = 6
																							break
																						end
																						if desired then
																							if desired == 20 then
																								desired = nil
																							end
																							break
																						end
																						reg_1 = rt_load_i64_i32(memory_at_0, loc_3 + 24)
																						break
																					end
																					if desired then
																						if desired == 19 then
																							desired = nil
																						end
																						break
																					end
																					loc_10 = reg_1
																					loc_5 = 1
																					desired = 4
																					break
																				end
																				if desired then
																					if desired == 18 then
																						desired = nil
																					end
																					break
																				end
																				loc_9 = 131113
																				desired = 8
																				break
																			end
																			if desired then
																				if desired == 17 then
																					desired = nil
																				end
																				break
																			end
																			loc_9 = 131114
																			desired = 8
																			break
																		end
																		if desired then
																			if desired == 16 then
																				desired = nil
																			end
																			break
																		end
																		loc_10 = rt_rem_i64(rt_add_i64(rt_load_i64_i32(memory_at_0, loc_3 + 20), rt_i64_from_u32(1900, 0)), rt_i64_from_u32(100, 0))
																		reg_1 = loc_10
																		loc_10 = rt_shr_i64(loc_10, rt_i64_from_u32(63, 0))
																		loc_10 = rt_sub_i64(rt_bit_xor_i64(reg_1, loc_10), loc_10)
																		desired = 6
																		break
																	end
																	if desired then
																		if desired == 15 then
																			desired = nil
																		end
																		break
																	end
																	loc_11 = rt_load_i64_i32(memory_at_0, loc_3 + 20)
																	loc_10 = rt_add_i64(loc_11, rt_i64_from_u32(1900, 0))
																	if rt_lt_i64(loc_11, rt_i64_from_u32(8100, 0)) then
																		while true do
																			desired = 5
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																	end
																	rt_store_i64(memory_at_0, loc_6 + 48, loc_10)
																	reg_2 = FUNC_LIST[739](loc_0, 100, 4809, rt_add_i32(loc_6, 48))
																	rt_store_i32(memory_at_0, loc_1, reg_2)
																	loc_5 = loc_0
																	desired = 1
																	break
																end
																if desired then
																	if desired == 14 then
																		desired = nil
																	end
																	break
																end
																if rt_lt_i32(rt_load_i32(memory_at_0, loc_3 + 32), 0) then
																	while true do
																		rt_store_i32(memory_at_0, loc_1, 0)
																		loc_5 = 6597
																		desired = 1
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																		end
																		break
																	end
																end
																loc_5 = rt_load_i32(memory_at_0, loc_3 + 36)
																loc_3 = rt_div_i32(loc_5, 3600)
																rt_store_i32(memory_at_0, loc_6 + 64, rt_add_i32(rt_mul_i32(loc_3, 100), rt_extend_i32_n16(rt_div_i32(rt_extend_i32_n16(rt_add_i32(loc_5, rt_mul_i32(loc_3, 61936))), 60))))
																reg_2 = FUNC_LIST[739](loc_0, 100, 4821, rt_sub_i32(loc_6, 4294967232))
																rt_store_i32(memory_at_0, loc_1, reg_2)
																loc_5 = loc_0
																desired = 1
																break
															end
															if desired then
																if desired == 13 then
																	desired = nil
																end
																break
															end
															if rt_lt_i32(rt_load_i32(memory_at_0, loc_3 + 32), 0) then
																while true do
																	rt_store_i32(memory_at_0, loc_1, 0)
																	loc_5 = 6597
																	desired = 1
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
															end
															reg_1 = FUNC_LIST[732](rt_load_i32(memory_at_0, loc_3 + 40))
															desired = 2
															break
														end
														if desired then
															if desired == 12 then
																desired = nil
															end
															break
														end
														rt_store_i32(memory_at_0, loc_1, 1)
														loc_5 = 6526
														desired = 1
														break
													end
													if desired then
														if desired == 11 then
															desired = nil
														end
														break
													end
													loc_10 = rt_rem_i64(loc_10, rt_i64_from_u32(100, 0))
													desired = 6
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												reg_1 = bit_or(loc_5, 131072)
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_5 = reg_1
											reg_1 = FUNC_LIST[754](loc_5)
											desired = 2
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_9 = 131115
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									reg_1 = FUNC_LIST[754](loc_9)
									loc_8 = reg_1
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								reg_2 = FUNC_LIST[755](loc_0, 100, loc_8, loc_3)
								loc_5 = reg_2
								rt_store_i32(memory_at_0, loc_1, loc_5)
								loc_5 = (if loc_5 ~= 0 then loc_0 else 0)
								desired = 1
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_5 = 2
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_5 = 4
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						loc_3 = (if loc_4 ~= 0 then loc_4 else loc_7)
						if loc_3 ~= 95 then
							while true do
								if loc_3 ~= 45 then
									desired = 4
									break
								end
								rt_store_i64(memory_at_0, loc_6 + 16, loc_10)
								reg_2 = FUNC_LIST[739](loc_0, 100, 4810, rt_add_i32(loc_6, 16))
								rt_store_i32(memory_at_0, loc_1, reg_2)
								loc_5 = loc_0
								desired = 1
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						rt_store_i64(memory_at_0, loc_6 + 40, loc_10)
						rt_store_i32(memory_at_0, loc_6 + 32, loc_5)
						reg_2 = FUNC_LIST[739](loc_0, 100, 4803, rt_add_i32(loc_6, 32))
						rt_store_i32(memory_at_0, loc_1, reg_2)
						loc_5 = loc_0
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i64(memory_at_0, loc_6 + 8, loc_10)
					rt_store_i32(memory_at_0, loc_6, loc_5)
					reg_2 = FUNC_LIST[739](loc_0, 100, 4796, loc_6)
					rt_store_i32(memory_at_0, loc_1, reg_2)
					loc_5 = loc_0
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_1 = 5462
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = reg_1
			reg_1 = FUNC_LIST[649](loc_5)
			rt_store_i32(memory_at_0, reg_0, reg_1)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_6, 80)
		reg_0 = loc_5
		break
	end
	return reg_0
end
FUNC_LIST[752] = --[[ week_num ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_1 = 53
		while true do
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 28)
			loc_3 = rt_load_i32(memory_at_0, loc_0 + 24)
			reg_0 = rt_div_u32(rt_add_i32(rt_sub_i32(loc_2, (rt_add_i32(loc_3, 6) % 7)), 7), 7)
			loc_3 = rt_sub_i32(loc_3, loc_2)
			loc_2 = rt_add_i32(reg_0, (if (rt_add_i32(loc_3, 369) % 7) < 3 then 1 else 0))
			if loc_2 ~= 53 then
				while true do
					loc_1 = loc_2
					if loc_2 ~= 0 then
						desired = 1
						break
					end
					loc_1 = 52
					while true do
						while true do
							if not br_map[1] then
								br_map[1] = (function()
									return { [0] = 1, 0, }
								end)()
							end
							temp = br_map[1][rt_sub_i32((rt_add_i32(loc_3, 6) % 7), 4)] or 3
							if temp < 1 then
								break
							elseif temp > 1 then
								desired = 1
								break
							else
								desired = 3
								break
							end
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
						reg_0 = FUNC_LIST[756](rt_sub_i32(rt_rem_i32(rt_load_i32(memory_at_0, loc_0 + 20), 400), 1))
						if reg_0 == 0 then
							desired = 1
							break
						end
						break
					end
					if desired then
						break
					end
					reg_0 = 53
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				while true do
					if not br_map[2] then
						br_map[2] = (function()
							return { [0] = 0, 2, }
						end)()
					end
					temp = br_map[2][rt_sub_i32((rt_add_i32(loc_3, 371) % 7), 3)] or 1
					if temp < 1 then
						break
					elseif temp > 1 then
						desired = 1
						break
					else
						desired = 2
						break
					end
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[756](rt_load_i32(memory_at_0, loc_0 + 20))
				if reg_0 ~= 0 then
					desired = 1
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = 1
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[753] = --[[ __tm_to_secs ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = rt_i64_ZERO
	local loc_6 = rt_i64_ZERO
	local loc_7 = rt_i64_ZERO
	local loc_8 = rt_i64_ZERO
	local reg_0
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		loc_5 = rt_load_i64_i32(memory_at_0, loc_0 + 20)
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 16)
		if loc_1 >= 12 then
			while true do
				loc_4 = rt_div_i32(loc_1, 12)
				loc_2 = rt_add_i32(loc_1, rt_mul_i32(loc_4, 4294967284))
				loc_1 = (if rt_lt_i32(loc_2, 0) then rt_add_i32(loc_2, 12) else loc_2)
				reg_0 = rt_add_i64(loc_5, rt_extend_i64_i32(rt_add_i32(rt_shr_i32(loc_2, 31), loc_4)))
				break
			end
		else
			while true do
				reg_0 = loc_5
				break
			end
		end
		loc_5 = reg_0
		reg_0 = FUNC_LIST[759](loc_5, rt_add_i32(loc_3, 12))
		loc_5 = reg_0
		reg_0 = FUNC_LIST[760](loc_1, rt_load_i32(memory_at_0, loc_3 + 12))
		loc_1 = reg_0
		loc_2 = rt_load_i32(memory_at_0, loc_0 + 12)
		loc_6 = rt_load_i64_i32(memory_at_0, loc_0 + 8)
		loc_7 = rt_load_i64_i32(memory_at_0, loc_0 + 4)
		loc_8 = rt_load_i64_i32(memory_at_0, loc_0)
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		reg_0 = rt_add_i64(rt_add_i64(rt_add_i64(rt_add_i64(rt_add_i64(rt_extend_i64_i32(loc_1), loc_5), rt_mul_i64(rt_extend_i64_i32(rt_sub_i32(loc_2, 1)), rt_i64_from_u32(86400, 0))), rt_mul_i64(loc_6, rt_i64_from_u32(3600, 0))), rt_mul_i64(loc_7, rt_i64_from_u32(60, 0))), loc_8)
		break
	end
	return reg_0
end
FUNC_LIST[754] = --[[ __nl_langinfo_l ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		loc_1 = 6597
		loc_2 = bit_and(loc_0, 63)
		if loc_2 <= 49 then
			while true do
				loc_0 = 29200
				if loc_2 == 0 then
					while true do
						reg_0 = 29200
						desired = 0
						break
					end
					if desired then
						break
					end
				end
				while true do
					loc_3 = rt_load_i32_u8(memory_at_0, loc_0)
					loc_1 = rt_add_i32(loc_0, 1)
					loc_0 = loc_1
					if loc_3 ~= 0 then
						continue
					end
					loc_2 = rt_sub_i32(loc_2, 1)
					if loc_2 ~= 0 then
						continue
					end
					break
				end
				if desired then
					break
				end
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[755] = --[[ __strftime_l ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		loc_8 = rt_sub_i32(GLOBAL_LIST[0].value, 128)
		GLOBAL_LIST[0].value = loc_8
		while true do
			if loc_1 == 0 then
				while true do
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				while true do
					while true do
						while true do
							loc_4 = rt_load_i32_u8(memory_at_0, loc_2)
							if loc_4 ~= 37 then
								while true do
									reg_0 = loc_5
									if loc_4 == 0 then
										desired = 2
										break
									end
									rt_store_i32_n8(memory_at_0, rt_add_i32(loc_0, loc_5), loc_4)
									reg_0 = rt_add_i32(loc_5, 1)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							loc_6 = 0
							loc_9 = 1
							while true do
								while true do
									while true do
										loc_4 = rt_load_i32_u8(memory_at_0, loc_2 + 1)
										if not br_map[1] then
											br_map[1] = (function()
												return { [0] = 1, 2, 2, 1, }
											end)()
										end
										temp = br_map[1][rt_sub_i32(loc_4, 45)] or 0
										if temp < 1 then
											break
										elseif temp > 1 then
											desired = 6
											break
										else
											desired = 7
											break
										end
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if loc_4 ~= 95 then
										desired = 6
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_6 = loc_4
								loc_4 = rt_load_i32_u8(memory_at_0, loc_2 + 2)
								loc_9 = 2
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_10 = 0
							while true do
								while true do
									loc_11 = bit_and(loc_4, 255)
									loc_7 = rt_add_i32(rt_add_i32(loc_2, loc_9), (if loc_11 == 43 then 1 else 0))
									if rt_sub_i32(rt_load_i32_i8(memory_at_0, loc_7), 48) <= 9 then
										while true do
											reg_0 = FUNC_LIST[757](loc_7, rt_add_i32(loc_8, 12), 10)
											loc_2 = reg_0
											reg_0 = rt_load_i32(memory_at_0, loc_8 + 12)
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									rt_store_i32(memory_at_0, loc_8 + 12, loc_7)
									loc_2 = 0
									reg_0 = loc_7
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_9 = reg_0
								loc_4 = rt_load_i32_u8(memory_at_0, loc_9)
								loc_12 = rt_sub_i32(loc_4, 67)
								if loc_12 > 22 then
									break
								end
								if bit_and(rt_shl_i32(1, loc_12), 4194329) == 0 then
									break
								end
								loc_10 = loc_2
								if loc_2 ~= 0 then
									break
								end
								loc_10 = (if loc_7 ~= loc_9 then 1 else 0)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								while true do
									if loc_4 == 79 then
										break
									end
									if loc_4 == 69 then
										break
									end
									reg_0 = loc_9
									desired = 6
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_4 = rt_load_i32_u8(memory_at_0, loc_9 + 1)
								reg_0 = rt_add_i32(loc_9, 1)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_2 = reg_0
							reg_0 = FUNC_LIST[751](rt_add_i32(loc_8, 16), rt_add_i32(loc_8, 124), rt_extend_i32_n8(loc_4), loc_3, loc_6)
							loc_7 = reg_0
							if loc_7 == 0 then
								desired = 4
								break
							end
							while true do
								if loc_10 == 0 then
									while true do
										loc_6 = rt_load_i32(memory_at_0, loc_8 + 124)
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								while true do
									while true do
										while true do
											loc_4 = rt_load_i32_u8(memory_at_0, loc_7)
											if not br_map[2] then
												br_map[2] = (function()
													return { [0] = 1, 0, 1, }
												end)()
											end
											temp = br_map[2][rt_sub_i32(loc_4, 43)] or 0
											if temp < 1 then
												break
											else
												desired = 8
												break
											end
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										reg_0 = rt_load_i32(memory_at_0, loc_8 + 124)
										desired = 7
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_4 = rt_load_i32_u8(memory_at_0, loc_7 + 1)
									loc_7 = rt_add_i32(loc_7, 1)
									reg_0 = rt_sub_i32(rt_load_i32(memory_at_0, loc_8 + 124), 1)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_6 = reg_0
								while true do
									if bit_and(loc_4, 255) ~= 48 then
										break
									end
									while true do
										loc_4 = rt_load_i32_i8(memory_at_0, loc_7 + 1)
										if rt_sub_i32(loc_4, 48) > 9 then
											desired = 7
											break
										end
										loc_7 = rt_add_i32(loc_7, 1)
										loc_6 = rt_sub_i32(loc_6, 1)
										if loc_4 == 48 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								rt_store_i32(memory_at_0, loc_8 + 124, loc_6)
								loc_4 = 0
								while true do
									loc_9 = loc_4
									loc_4 = rt_add_i32(loc_9, 1)
									if rt_sub_i32(rt_load_i32_i8(memory_at_0, rt_add_i32(loc_7, loc_9)), 48) < 10 then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_4 = (if loc_6 < loc_10 then loc_10 else loc_6)
								while true do
									reg_0 = rt_add_i32(loc_0, loc_5)
									if rt_lt_i32(rt_load_i32(memory_at_0, loc_3 + 20), 4294965396) then
										while true do
											reg_1 = 45
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									else
										while true do
											if loc_11 ~= 43 then
												desired = 7
												break
											end
											if rt_add_i32(loc_9, rt_sub_i32(loc_4, loc_6)) < (if rt_load_i32_u8(memory_at_0, rt_load_i32(memory_at_0, loc_8 + 12)) == 67 then 3 else 5) then
												desired = 7
												break
											end
											reg_1 = 43
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_9 = reg_1
									rt_store_i32_n8(memory_at_0, reg_0, loc_9)
									loc_4 = rt_sub_i32(loc_4, 1)
									loc_5 = rt_add_i32(loc_5, 1)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								if loc_4 <= loc_6 then
									break
								end
								if loc_1 <= loc_5 then
									break
								end
								while true do
									rt_store_i32_n8(memory_at_0, rt_add_i32(loc_0, loc_5), 48)
									loc_5 = rt_add_i32(loc_5, 1)
									loc_4 = rt_sub_i32(loc_4, 1)
									if loc_6 >= loc_4 then
										desired = 6
										break
									end
									if loc_1 > loc_5 then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_4 = rt_sub_i32(loc_1, loc_5)
							loc_4 = (if loc_4 > loc_6 then loc_6 else loc_4)
							rt_store_i32(memory_at_0, loc_8 + 124, loc_4)
							reg_0 = FUNC_LIST[609](rt_add_i32(loc_0, loc_5), loc_7, loc_4)
							reg_0 = rt_add_i32(loc_5, rt_load_i32(memory_at_0, loc_8 + 124))
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_5 = reg_0
						loc_2 = rt_add_i32(loc_2, 1)
						if loc_1 > loc_5 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_5 = (if loc_1 == loc_5 then rt_sub_i32(loc_1, 1) else loc_5)
				reg_0 = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = reg_0
			rt_store_i32_n8(memory_at_0, rt_add_i32(loc_0, loc_5), 0)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_8, 128)
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[756] = --[[ is_leap ]] function(loc_0)
	local reg_0
	local desired
	while true do
		loc_0 = (if rt_gt_i32(loc_0, 2147481747) then rt_sub_i32(loc_0, 2000) else loc_0)
		if bit_and(loc_0, 3) ~= 0 then
			while true do
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_0 = rt_add_i32(loc_0, 1900)
		if rt_rem_i32(loc_0, 100) ~= 0 then
			while true do
				reg_0 = 1
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = (if rt_rem_i32(loc_0, 400) == 0 then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[757] = --[[ strtoul ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[779](loc_0, loc_1, loc_2, rt_i64_from_u32(4294967295, 0))
		reg_0 = rt_wrap_i32_i64(reg_0)
		break
	end
	return reg_0
end
FUNC_LIST[758] = --[[ strftime ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[755](loc_0, loc_1, loc_2, loc_3)
		break
	end
	return reg_0
end
FUNC_LIST[759] = --[[ __year_to_secs ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = rt_i64_ZERO
	local loc_7 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	while true do
		if rt_le_u64(rt_sub_i64(loc_0, rt_i64_from_u32(2, 0)), rt_i64_from_u32(136, 0)) then
			while true do
				loc_2 = rt_wrap_i32_i64(loc_0)
				loc_4 = (if bit_and(loc_2, 3) == 0 then 1 else 0)
				rt_store_i32(memory_at_0, loc_1, loc_4)
				reg_0 = rt_extend_i64_i32(rt_add_i32(rt_add_i32(rt_mul_i32(loc_2, 31536000), rt_mul_i32(rt_sub_i32(rt_shr_u32(rt_sub_i32(loc_2, 68), 2), loc_4), 86400)), 2087447296))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_0 = rt_sub_i64(loc_0, rt_i64_from_u32(100, 0))
		loc_7 = rt_div_i64(loc_0, rt_i64_from_u32(400, 0))
		loc_6 = rt_add_i64(rt_mul_i64(loc_7, rt_i64_from_u32(4294966896, 4294967295)), loc_0)
		loc_4 = rt_add_i32(rt_wrap_i32_i64(rt_shr_i64(loc_6, rt_i64_from_u32(63, 0))), rt_wrap_i32_i64(loc_7))
		reg_0 = loc_1
		while true do
			loc_2 = rt_wrap_i32_i64(loc_6)
			loc_2 = (if rt_lt_i64(loc_6, rt_i64_ZERO) then rt_add_i32(loc_2, 400) else loc_2)
			if loc_2 == 0 then
				while true do
					reg_1 = 1
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				if rt_ge_i32(loc_2, 200) then
					while true do
						if loc_2 >= 300 then
							while true do
								loc_3 = 3
								reg_1 = rt_sub_i32(loc_2, 300)
								desired = 2
								break
							end
							if desired then
								break
							end
						end
						loc_3 = 2
						reg_1 = rt_sub_i32(loc_2, 200)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_3 = (if rt_gt_i32(loc_2, 99) then 1 else 0)
				reg_1 = (if loc_3 ~= 0 then rt_sub_i32(loc_2, 100) else loc_2)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = reg_1
			if loc_2 == 0 then
				while true do
					reg_1 = 0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_5 = rt_shr_u32(loc_2, 2)
			reg_1 = (if bit_and(loc_2, 3) == 0 then 1 else 0)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_2 = reg_1
		rt_store_i32(memory_at_0, reg_0, loc_2)
		reg_0 = rt_add_i64(rt_add_i64(rt_mul_i64(loc_0, rt_i64_from_u32(31536000, 0)), rt_mul_i64(rt_extend_i64_i32(rt_sub_i32(rt_add_i32(rt_add_i32(rt_mul_i32(loc_3, 24), rt_mul_i32(loc_4, 97)), loc_5), loc_2)), rt_i64_from_u32(86400, 0))), rt_i64_from_u32(946771200, 0))
		break
	end
	return reg_0
end
FUNC_LIST[760] = --[[ __month_to_secs ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_0, 2), 29152))
		reg_0 = (if rt_gt_i32(loc_0, 1) then (if loc_1 ~= 0 then rt_add_i32(loc_2, 86400) else loc_2) else loc_2)
		break
	end
	return reg_0
end
FUNC_LIST[761] = --[[ strncat ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[649](loc_0)
		loc_3 = rt_add_i32(reg_0, loc_0)
		while true do
			if loc_2 == 0 then
				break
			end
			while true do
				loc_4 = rt_load_i32_u8(memory_at_0, loc_1)
				if loc_4 == 0 then
					desired = 1
					break
				end
				rt_store_i32_n8(memory_at_0, loc_3, loc_4)
				loc_3 = rt_add_i32(loc_3, 1)
				loc_1 = rt_add_i32(loc_1, 1)
				loc_2 = rt_sub_i32(loc_2, 1)
				if loc_2 ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		rt_store_i32_n8(memory_at_0, loc_3, 0)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[762] = --[[ strncpy ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		FUNC_LIST[763](loc_0, loc_1, loc_2)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[763] = --[[ __stpncpy ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	local desired
	while true do
		while true do
			while true do
				while true do
					while true do
						if bit_and(bit_xor(loc_0, loc_1), 3) ~= 0 then
							break
						end
						loc_3 = (if loc_2 ~= 0 then 1 else 0)
						while true do
							if bit_and(loc_1, 3) == 0 then
								break
							end
							if loc_2 == 0 then
								break
							end
							while true do
								loc_3 = rt_load_i32_u8(memory_at_0, loc_1)
								rt_store_i32_n8(memory_at_0, loc_0, loc_3)
								if loc_3 == 0 then
									desired = 1
									break
								end
								loc_0 = rt_add_i32(loc_0, 1)
								loc_2 = rt_sub_i32(loc_2, 1)
								loc_3 = (if loc_2 ~= 0 then 1 else 0)
								loc_1 = rt_add_i32(loc_1, 1)
								if bit_and(loc_1, 3) == 0 then
									desired = 5
									break
								end
								if loc_2 ~= 0 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if loc_3 == 0 then
							desired = 2
							break
						end
						if rt_load_i32_u8(memory_at_0, loc_1) == 0 then
							desired = 1
							break
						end
						if loc_2 < 4 then
							break
						end
						while true do
							loc_3 = rt_load_i32(memory_at_0, loc_1)
							if bit_and(bit_or(rt_sub_i32(16843008, loc_3), loc_3), 2155905152) ~= 2155905152 then
								desired = 3
								break
							end
							rt_store_i32(memory_at_0, loc_0, loc_3)
							loc_0 = rt_add_i32(loc_0, 4)
							loc_1 = rt_add_i32(loc_1, 4)
							loc_2 = rt_sub_i32(loc_2, 4)
							if loc_2 > 3 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_2 == 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					loc_3 = rt_load_i32_u8(memory_at_0, loc_1)
					rt_store_i32_n8(memory_at_0, loc_0, loc_3)
					if loc_3 == 0 then
						desired = 1
						break
					end
					loc_0 = rt_add_i32(loc_0, 1)
					loc_1 = rt_add_i32(loc_1, 1)
					loc_2 = rt_sub_i32(loc_2, 1)
					if loc_2 ~= 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = 0
			break
		end
		reg_0 = FUNC_LIST[611](loc_0, 0, loc_2)
		break
	end
end
FUNC_LIST[764] = --[[ strpbrk ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[750](loc_0, loc_1)
		loc_0 = rt_add_i32(reg_0, loc_0)
		reg_0 = (if rt_load_i32_u8(memory_at_0, loc_0) ~= 0 then loc_0 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[765] = --[[ strtod ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0.0
	local reg_0
	while true do
		loc_2 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_2
		FUNC_LIST[766](loc_2, loc_0, loc_1)
		reg_0 = FUNC_LIST[679](rt_load_i64(memory_at_0, loc_2), rt_load_i64(memory_at_0, loc_2 + 8))
		loc_3 = reg_0
		GLOBAL_LIST[0].value = rt_add_i32(loc_2, 16)
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[766] = --[[ strtox ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = rt_i64_ZERO
	local loc_5 = rt_i64_ZERO
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 160)
		GLOBAL_LIST[0].value = loc_3
		rt_store_i32(memory_at_0, loc_3 + 60, loc_1)
		rt_store_i32(memory_at_0, loc_3 + 20, loc_1)
		rt_store_i32(memory_at_0, loc_3 + 24, 4294967295)
		FUNC_LIST[767](rt_add_i32(loc_3, 16))
		FUNC_LIST[768](loc_3, rt_add_i32(loc_3, 16))
		loc_4 = rt_load_i64(memory_at_0, loc_3 + 8)
		loc_5 = rt_load_i64(memory_at_0, loc_3)
		if loc_2 ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_2, rt_add_i32(rt_load_i32(memory_at_0, loc_3 + 136), rt_add_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 20), rt_load_i32(memory_at_0, loc_3 + 60)), loc_1)))
				break
			end
		end
		rt_store_i64(memory_at_0, loc_0 + 8, loc_4)
		rt_store_i64(memory_at_0, loc_0, loc_5)
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 160)
		break
	end
end
FUNC_LIST[767] = --[[ __shlim ]] function(loc_0)
	while true do
		rt_store_i64(memory_at_0, loc_0 + 112, rt_i64_ZERO)
		rt_store_i32(memory_at_0, loc_0 + 104, rt_load_i32(memory_at_0, loc_0 + 8))
		rt_store_i64(memory_at_0, loc_0 + 120, rt_extend_i64_i32(rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 44), rt_load_i32(memory_at_0, loc_0 + 4))))
		break
	end
end
FUNC_LIST[768] = --[[ __floatscan ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = rt_i64_ZERO
	local loc_8 = rt_i64_ZERO
	local loc_9 = rt_i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 48)
		GLOBAL_LIST[0].value = loc_5
		while true do
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
				if loc_2 ~= rt_load_i32(memory_at_0, loc_1 + 104) then
					while true do
						rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_2, 1))
						reg_0 = rt_load_i32_u8(memory_at_0, loc_2)
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[769](loc_1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			loc_2 = reg_0
			reg_0 = FUNC_LIST[724](loc_2)
			if reg_0 ~= 0 then
				continue
			end
			break
		end
		loc_6 = 1
		while true do
			while true do
				if not br_map[1] then
					br_map[1] = (function()
						return { [0] = 0, 1, 0, }
					end)()
				end
				temp = br_map[1][rt_sub_i32(loc_2, 43)] or 1
				if temp < 1 then
					break
				else
					desired = 1
					break
				end
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = (if loc_2 == 45 then 4294967295 else 1)
			loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
			if loc_2 ~= rt_load_i32(memory_at_0, loc_1 + 104) then
				while true do
					rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_2, 1))
					loc_2 = rt_load_i32_u8(memory_at_0, loc_2)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[769](loc_1)
			loc_2 = reg_0
			break
		end
		while true do
			while true do
				while true do
					while true do
						while true do
							loc_4 = bit_and(loc_2, 4294967263)
							if loc_4 == 78 then
								while true do
									while true do
										if loc_3 == 2 then
											desired = 4
											break
										end
										while true do
											loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
											if loc_2 ~= rt_load_i32(memory_at_0, loc_1 + 104) then
												while true do
													rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_2, 1))
													reg_0 = rt_load_i32_u8(memory_at_0, loc_2)
													desired = 8
													break
												end
												if desired then
													if desired == 8 then
														desired = nil
													end
													break
												end
											end
											reg_0 = FUNC_LIST[769](loc_1)
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
										loc_2 = reg_0
										loc_4 = rt_add_i32(loc_3, 2883)
										loc_3 = rt_add_i32(loc_3, 1)
										if rt_load_i32_i8(memory_at_0, loc_4) == bit_or(loc_2, 32) then
											continue
										end
										desired = 5
										break
									end
									if desired then
										break
									end
									error("out of code bounds")
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_4 ~= 73 then
								desired = 2
								break
							end
							while true do
								while true do
									loc_4 = loc_3
									if loc_4 == 7 then
										desired = 6
										break
									end
									while true do
										loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
										if loc_2 ~= rt_load_i32(memory_at_0, loc_1 + 104) then
											while true do
												rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_2, 1))
												reg_0 = rt_load_i32_u8(memory_at_0, loc_2)
												desired = 8
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										reg_0 = FUNC_LIST[769](loc_1)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
											continue
										end
										break
									end
									loc_2 = reg_0
									loc_3 = rt_add_i32(loc_4, 1)
									if rt_load_i32_i8(memory_at_0, rt_add_i32(loc_4, 1113)) == bit_or(loc_2, 32) then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								while true do
									if loc_4 == 2 then
										while true do
											loc_3 = 3
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									if loc_4 == 7 then
										desired = 6
										break
									end
									if loc_4 < 3 then
										desired = 5
										break
									end
									if loc_3 == 8 then
										desired = 6
										break
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_7 = rt_load_i64(memory_at_0, loc_1 + 112)
								if rt_ge_i64(loc_7, rt_i64_ZERO) then
									while true do
										rt_store_i32(memory_at_0, loc_1 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 4), 1))
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								if loc_3 < 4 then
									break
								end
								loc_2 = (if rt_lt_i64(loc_7, rt_i64_ZERO) then 1 else 0)
								while true do
									if loc_2 == 0 then
										while true do
											rt_store_i32(memory_at_0, loc_1 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 4), 1))
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
									end
									loc_3 = rt_sub_i32(loc_3, 1)
									if loc_3 > 3 then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[680](rt_add_i32(loc_5, 32), (rt_convert_f64_i32(loc_6) * math.huge))
							loc_8 = rt_load_i64(memory_at_0, loc_5 + 40)
							loc_7 = rt_load_i64(memory_at_0, loc_5 + 32)
							desired = 1
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if not br_map[2] then
							br_map[2] = (function()
								return { [0] = 2, 1, 1, 0, }
							end)()
						end
						temp = br_map[2][loc_3] or 1
						if temp < 1 then
							break
						elseif temp > 1 then
							desired = 2
							break
						else
							desired = 3
							break
						end
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						while true do
							loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
							if loc_2 ~= rt_load_i32(memory_at_0, loc_1 + 104) then
								while true do
									rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_2, 1))
									reg_0 = rt_load_i32_u8(memory_at_0, loc_2)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							reg_0 = FUNC_LIST[769](loc_1)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_2 = reg_0
						if loc_2 == 40 then
							while true do
								loc_3 = 1
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_8 = rt_i64_from_u32(0, 2147450880)
						if rt_lt_i64(rt_load_i64(memory_at_0, loc_1 + 112), rt_i64_ZERO) then
							desired = 1
							break
						end
						rt_store_i32(memory_at_0, loc_1 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 4), 1))
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					while true do
						while true do
							loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
							if loc_2 ~= rt_load_i32(memory_at_0, loc_1 + 104) then
								while true do
									rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_2, 1))
									reg_0 = rt_load_i32_u8(memory_at_0, loc_2)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							reg_0 = FUNC_LIST[769](loc_1)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_2 = reg_0
						loc_4 = rt_sub_i32(loc_2, 65)
						while true do
							while true do
								if rt_sub_i32(loc_2, 48) < 10 then
									break
								end
								if loc_4 < 26 then
									break
								end
								loc_4 = rt_sub_i32(loc_2, 97)
								if loc_2 == 95 then
									break
								end
								if loc_4 >= 26 then
									desired = 5
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_3 = rt_add_i32(loc_3, 1)
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_8 = rt_i64_from_u32(0, 2147450880)
					if loc_2 == 41 then
						desired = 1
						break
					end
					loc_9 = rt_load_i64(memory_at_0, loc_1 + 112)
					if rt_ge_i64(loc_9, rt_i64_ZERO) then
						while true do
							rt_store_i32(memory_at_0, loc_1 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 4), 1))
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_3 == 0 then
						desired = 1
						break
					end
					while true do
						if rt_ge_i64(loc_9, rt_i64_ZERO) then
							while true do
								rt_store_i32(memory_at_0, loc_1 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 4), 1))
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
						end
						loc_3 = rt_sub_i32(loc_3, 1)
						if loc_3 ~= 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if rt_ge_i64(rt_load_i64(memory_at_0, loc_1 + 112), rt_i64_ZERO) then
					while true do
						rt_store_i32(memory_at_0, loc_1 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 4), 1))
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_0 = FUNC_LIST[612]()
				rt_store_i32(memory_at_0, reg_0, 28)
				FUNC_LIST[767](loc_1)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				if loc_2 ~= 48 then
					break
				end
				while true do
					loc_3 = rt_load_i32(memory_at_0, loc_1 + 4)
					if loc_3 ~= rt_load_i32(memory_at_0, loc_1 + 104) then
						while true do
							rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_3, 1))
							reg_0 = rt_load_i32_u8(memory_at_0, loc_3)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[769](loc_1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_3 = reg_0
				if bit_and(loc_3, 4294967263) == 88 then
					while true do
						FUNC_LIST[772](loc_5, loc_1, loc_6)
						loc_8 = rt_load_i64(memory_at_0, loc_5 + 8)
						loc_7 = rt_load_i64(memory_at_0, loc_5)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_lt_i64(rt_load_i64(memory_at_0, loc_1 + 112), rt_i64_ZERO) then
					break
				end
				rt_store_i32(memory_at_0, loc_1 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 4), 1))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[773](rt_add_i32(loc_5, 16), loc_1, loc_2, loc_6)
			loc_8 = rt_load_i64(memory_at_0, loc_5 + 24)
			loc_7 = rt_load_i64(memory_at_0, loc_5 + 16)
			break
		end
		rt_store_i64(memory_at_0, loc_0, loc_7)
		rt_store_i64(memory_at_0, loc_0 + 8, loc_8)
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 48)
		break
	end
end
FUNC_LIST[769] = --[[ __shgetc ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = rt_i64_ZERO
	local loc_5 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		while true do
			loc_4 = rt_load_i64(memory_at_0, loc_0 + 112)
			loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
			loc_2 = rt_load_i32(memory_at_0, loc_0 + 44)
			loc_5 = rt_add_i64(rt_load_i64(memory_at_0, loc_0 + 120), rt_extend_i64_i32(rt_sub_i32(loc_1, loc_2)))
			if bit_and((if rt_ne_i64(loc_4, rt_i64_ZERO) then 1 else 0), (if rt_ge_i64(loc_5, loc_4) then 1 else 0)) ~= 0 then
				while true do
					reg_0 = loc_1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = FUNC_LIST[770](loc_0)
					loc_2 = reg_0
					if rt_ge_i32(loc_2, 0) then
						desired = 1
						break
					end
					loc_2 = rt_load_i32(memory_at_0, loc_0 + 44)
					reg_0 = rt_load_i32(memory_at_0, loc_0 + 4)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_1 = reg_0
			rt_store_i64(memory_at_0, loc_0 + 112, rt_i64_from_u32(4294967295, 4294967295))
			rt_store_i32(memory_at_0, loc_0 + 104, loc_1)
			rt_store_i64(memory_at_0, loc_0 + 120, rt_add_i64(rt_extend_i64_i32(rt_sub_i32(loc_2, loc_1)), loc_5))
			reg_0 = 4294967295
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_5 = rt_add_i64(loc_5, rt_i64_ONE)
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 8)
		while true do
			loc_4 = rt_load_i64(memory_at_0, loc_0 + 112)
			if rt_eq_i64(loc_4, rt_i64_ZERO) then
				break
			end
			loc_4 = rt_sub_i64(loc_4, loc_5)
			if rt_ge_i64(loc_4, rt_extend_i64_i32(rt_sub_i32(loc_3, loc_1))) then
				break
			end
			loc_3 = rt_add_i32(rt_wrap_i32_i64(loc_4), loc_1)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32(memory_at_0, loc_0 + 104, loc_3)
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 44)
		rt_store_i64(memory_at_0, loc_0 + 120, rt_add_i64(rt_extend_i64_i32(rt_sub_i32(loc_3, loc_1)), loc_5))
		if loc_1 <= loc_3 then
			while true do
				rt_store_i32_n8(memory_at_0, rt_sub_i32(loc_1, 1), loc_2)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[770] = --[[ __uflow ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		loc_2 = 4294967295
		while true do
			reg_0 = FUNC_LIST[771](loc_0)
			if reg_0 ~= 0 then
				break
			end
			reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, loc_0 + 32)](loc_0, rt_add_i32(loc_1, 15), 1)
			if reg_0 ~= 1 then
				break
			end
			loc_2 = rt_load_i32_u8(memory_at_0, loc_1 + 15)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[771] = --[[ __toread ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		loc_1 = rt_load_i32(memory_at_0, loc_0 + 72)
		rt_store_i32(memory_at_0, loc_0 + 72, bit_or(rt_sub_i32(loc_1, 1), loc_1))
		if rt_load_i32(memory_at_0, loc_0 + 20) ~= rt_load_i32(memory_at_0, loc_0 + 28) then
			while true do
				reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, loc_0 + 36)](loc_0, 0, 0)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		rt_store_i32(memory_at_0, loc_0 + 28, 0)
		rt_store_i64(memory_at_0, loc_0 + 16, rt_i64_ZERO)
		loc_1 = rt_load_i32(memory_at_0, loc_0)
		if bit_and(loc_1, 4) ~= 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0, bit_or(loc_1, 32))
				reg_0 = 4294967295
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_2 = rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 44), rt_load_i32(memory_at_0, loc_0 + 48))
		rt_store_i32(memory_at_0, loc_0 + 8, loc_2)
		rt_store_i32(memory_at_0, loc_0 + 4, loc_2)
		reg_0 = rt_shr_i32(rt_shl_i32(loc_1, 27), 31)
		break
	end
	return reg_0
end
FUNC_LIST[772] = --[[ hexfloat ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = rt_i64_ZERO
	local loc_12 = rt_i64_ZERO
	local loc_13 = rt_i64_ZERO
	local loc_14 = rt_i64_ZERO
	local loc_15 = rt_i64_ZERO
	local loc_16 = rt_i64_ZERO
	local loc_17 = rt_i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 432)
		GLOBAL_LIST[0].value = loc_3
		while true do
			loc_4 = rt_load_i32(memory_at_0, loc_1 + 4)
			if loc_4 ~= rt_load_i32(memory_at_0, loc_1 + 104) then
				while true do
					rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_4, 1))
					reg_0 = rt_load_i32_u8(memory_at_0, loc_4)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[769](loc_1)
			break
		end
		loc_4 = reg_0
		while true do
			while true do
				while true do
					while true do
						if loc_4 ~= 48 then
							while true do
								if loc_4 ~= 46 then
									desired = 1
									break
								end
								loc_4 = rt_load_i32(memory_at_0, loc_1 + 4)
								if loc_4 == rt_load_i32(memory_at_0, loc_1 + 104) then
									desired = 4
									break
								end
								rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_4, 1))
								reg_0 = rt_load_i32_u8(memory_at_0, loc_4)
								desired = 2
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_4 = rt_load_i32(memory_at_0, loc_1 + 4)
						if loc_4 ~= rt_load_i32(memory_at_0, loc_1 + 104) then
							while true do
								loc_7 = 1
								rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_4, 1))
								loc_4 = rt_load_i32_u8(memory_at_0, loc_4)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								loc_7 = 1
								reg_0 = FUNC_LIST[769](loc_1)
								loc_4 = reg_0
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[769](loc_1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = reg_0
			if loc_4 ~= 48 then
				while true do
					loc_6 = 1
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				loc_15 = rt_sub_i64(loc_15, rt_i64_ONE)
				while true do
					loc_4 = rt_load_i32(memory_at_0, loc_1 + 4)
					if loc_4 ~= rt_load_i32(memory_at_0, loc_1 + 104) then
						while true do
							rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_4, 1))
							reg_0 = rt_load_i32_u8(memory_at_0, loc_4)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[769](loc_1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_4 = reg_0
				if loc_4 == 48 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = 1
			loc_7 = 1
			break
		end
		loc_13 = rt_i64_from_u32(0, 1073676288)
		while true do
			while true do
				while true do
					loc_9 = loc_4
					while true do
						while true do
							loc_10 = rt_sub_i32(loc_4, 48)
							if loc_10 < 10 then
								break
							end
							loc_9 = bit_or(loc_4, 32)
							if bit_and((if loc_4 ~= 46 then 1 else 0), (if rt_sub_i32(loc_9, 97) > 5 then 1 else 0)) ~= 0 then
								desired = 1
								break
							end
							if loc_4 ~= 46 then
								break
							end
							if loc_6 ~= 0 then
								desired = 3
								break
							end
							loc_6 = 1
							loc_15 = loc_12
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_4 = (if rt_gt_i32(loc_4, 57) then rt_sub_i32(loc_9, 87) else loc_10)
						while true do
							if rt_le_i64(loc_12, rt_i64_from_u32(7, 0)) then
								while true do
									loc_5 = rt_add_i32(rt_shl_i32(loc_5, 4), loc_4)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if rt_le_u64(loc_12, rt_i64_from_u32(28, 0)) then
								while true do
									FUNC_LIST[681](rt_add_i32(loc_3, 48), loc_4)
									FUNC_LIST[671](rt_add_i32(loc_3, 32), loc_16, loc_13, rt_i64_ZERO, rt_i64_from_u32(0, 1073414144))
									loc_16 = rt_load_i64(memory_at_0, loc_3 + 32)
									loc_13 = rt_load_i64(memory_at_0, loc_3 + 40)
									FUNC_LIST[671](rt_add_i32(loc_3, 16), rt_load_i64(memory_at_0, loc_3 + 48), rt_load_i64(memory_at_0, loc_3 + 56), loc_16, loc_13)
									FUNC_LIST[677](loc_3, rt_load_i64(memory_at_0, loc_3 + 16), rt_load_i64(memory_at_0, loc_3 + 24), loc_11, loc_14)
									loc_14 = rt_load_i64(memory_at_0, loc_3 + 8)
									loc_11 = rt_load_i64(memory_at_0, loc_3)
									desired = 5
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if loc_4 == 0 then
								break
							end
							if loc_8 ~= 0 then
								break
							end
							FUNC_LIST[671](rt_add_i32(loc_3, 80), loc_16, loc_13, rt_i64_ZERO, rt_i64_from_u32(0, 1073610752))
							FUNC_LIST[677](rt_sub_i32(loc_3, 4294967232), rt_load_i64(memory_at_0, loc_3 + 80), rt_load_i64(memory_at_0, loc_3 + 88), loc_11, loc_14)
							loc_14 = rt_load_i64(memory_at_0, loc_3 + 72)
							loc_8 = 1
							loc_11 = rt_load_i64(memory_at_0, loc_3 + 64)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_12 = rt_add_i64(loc_12, rt_i64_ONE)
						loc_7 = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = rt_load_i32(memory_at_0, loc_1 + 4)
					if loc_4 ~= rt_load_i32(memory_at_0, loc_1 + 104) then
						while true do
							rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_4, 1))
							loc_4 = rt_load_i32_u8(memory_at_0, loc_4)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							reg_0 = FUNC_LIST[769](loc_1)
							loc_4 = reg_0
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_4 = 46
			break
		end
		while true do
			if loc_7 == 0 then
				while true do
					while true do
						if rt_lt_i64(rt_load_i64(memory_at_0, loc_1 + 112), rt_i64_ZERO) then
							break
						end
						loc_4 = rt_load_i32(memory_at_0, loc_1 + 4)
						rt_store_i32(memory_at_0, loc_1 + 4, rt_sub_i32(loc_4, 2))
						if loc_6 == 0 then
							break
						end
						rt_store_i32(memory_at_0, loc_1 + 4, rt_sub_i32(loc_4, 3))
						break
					end
					if desired then
						break
					end
					FUNC_LIST[682](rt_add_i32(loc_3, 96), rt_copysign_f64(0e0, rt_convert_f64_i32(loc_2)))
					loc_11 = rt_load_i64(memory_at_0, loc_3 + 96)
					reg_0 = rt_load_i64(memory_at_0, loc_3 + 104)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_le_i64(loc_12, rt_i64_from_u32(7, 0)) then
				while true do
					loc_13 = loc_12
					while true do
						loc_5 = rt_shl_i32(loc_5, 4)
						loc_13 = rt_add_i64(loc_13, rt_i64_ONE)
						if rt_ne_i64(loc_13, rt_i64_from_u32(8, 0)) then
							continue
						end
						break
					end
					if desired then
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				while true do
					while true do
						if bit_and(loc_4, 4294967263) == 80 then
							while true do
								reg_0 = FUNC_LIST[774](loc_1)
								loc_13 = reg_0
								if rt_ne_i64(loc_13, rt_i64_from_u32(0, 2147483648)) then
									desired = 2
									break
								end
								if rt_ge_i64(rt_load_i64(memory_at_0, loc_1 + 112), rt_i64_ZERO) then
									desired = 4
									break
								end
								desired = 3
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_13 = rt_i64_ZERO
						if rt_lt_i64(rt_load_i64(memory_at_0, loc_1 + 112), rt_i64_ZERO) then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_1 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 4), 1))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_13 = rt_i64_ZERO
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_5 == 0 then
				while true do
					FUNC_LIST[682](rt_add_i32(loc_3, 112), rt_copysign_f64(0e0, rt_convert_f64_i32(loc_2)))
					loc_11 = rt_load_i64(memory_at_0, loc_3 + 112)
					reg_0 = rt_load_i64(memory_at_0, loc_3 + 120)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_12 = rt_sub_i64(rt_add_i64(loc_13, rt_shl_i64((if loc_6 ~= 0 then loc_15 else loc_12), rt_i64_from_u32(2, 0))), rt_i64_from_u32(32, 0))
			if rt_ge_i64(loc_12, rt_i64_from_u32(1075, 0)) then
				while true do
					reg_0 = FUNC_LIST[612]()
					rt_store_i32(memory_at_0, reg_0, 68)
					FUNC_LIST[681](rt_add_i32(loc_3, 160), loc_2)
					FUNC_LIST[671](rt_add_i32(loc_3, 144), rt_load_i64(memory_at_0, loc_3 + 160), rt_load_i64(memory_at_0, loc_3 + 168), rt_i64_from_u32(4294967295, 4294967295), rt_i64_from_u32(4294967295, 2147418111))
					FUNC_LIST[671](rt_add_i32(loc_3, 128), rt_load_i64(memory_at_0, loc_3 + 144), rt_load_i64(memory_at_0, loc_3 + 152), rt_i64_from_u32(4294967295, 4294967295), rt_i64_from_u32(4294967295, 2147418111))
					loc_11 = rt_load_i64(memory_at_0, loc_3 + 128)
					reg_0 = rt_load_i64(memory_at_0, loc_3 + 136)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_i64(loc_12, rt_i64_from_u32(4294965996, 4294967295)) then
				while true do
					if rt_ge_i32(loc_5, 0) then
						while true do
							while true do
								FUNC_LIST[677](rt_add_i32(loc_3, 416), loc_11, loc_14, rt_i64_ZERO, rt_i64_from_u32(0, 3221159936))
								reg_0 = FUNC_LIST[661](loc_11, loc_14, rt_i64_ZERO, rt_i64_from_u32(0, 1073610752))
								loc_4 = reg_0
								loc_4 = (if rt_ge_i32(loc_4, 0) then 1 else 0)
								FUNC_LIST[677](rt_add_i32(loc_3, 400), loc_11, loc_14, (if loc_4 ~= 0 then rt_load_i64(memory_at_0, loc_3 + 416) else loc_11), (if loc_4 ~= 0 then rt_load_i64(memory_at_0, loc_3 + 424) else loc_14))
								loc_1 = rt_shl_i32(loc_5, 1)
								loc_5 = bit_or(loc_4, loc_1)
								loc_12 = rt_sub_i64(loc_12, rt_i64_ONE)
								loc_14 = rt_load_i64(memory_at_0, loc_3 + 408)
								loc_11 = rt_load_i64(memory_at_0, loc_3 + 400)
								if rt_ge_i32(loc_1, 0) then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							break
						end
					end
					while true do
						loc_15 = rt_add_i64(loc_12, rt_i64_from_u32(1106, 0))
						loc_4 = rt_wrap_i32_i64(loc_15)
						loc_4 = (if rt_ge_i64(loc_15, rt_i64_from_u32(53, 0)) then 53 else (if rt_gt_i32(loc_4, 0) then loc_4 else 0))
						if loc_4 >= 113 then
							while true do
								FUNC_LIST[681](rt_add_i32(loc_3, 384), loc_2)
								loc_15 = rt_load_i64(memory_at_0, loc_3 + 392)
								loc_16 = rt_load_i64(memory_at_0, loc_3 + 384)
								reg_0 = rt_i64_ZERO
								desired = 3
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						reg_1 = FUNC_LIST[648](1e0, rt_sub_i32(144, loc_4))
						FUNC_LIST[682](rt_add_i32(loc_3, 352), reg_1)
						FUNC_LIST[681](rt_add_i32(loc_3, 336), loc_2)
						loc_16 = rt_load_i64(memory_at_0, loc_3 + 336)
						loc_15 = rt_load_i64(memory_at_0, loc_3 + 344)
						FUNC_LIST[775](rt_add_i32(loc_3, 368), rt_load_i64(memory_at_0, loc_3 + 352), rt_load_i64(memory_at_0, loc_3 + 360), loc_16, loc_15)
						loc_17 = rt_load_i64(memory_at_0, loc_3 + 376)
						reg_0 = rt_load_i64(memory_at_0, loc_3 + 368)
						break
					end
					if desired then
						break
					end
					loc_13 = reg_0
					reg_2 = FUNC_LIST[660](loc_11, loc_14, rt_i64_ZERO, rt_i64_ZERO)
					loc_4 = bit_and((if bit_and(loc_5, 1) == 0 then 1 else 0), bit_and((if reg_2 ~= 0 then 1 else 0), (if loc_4 < 32 then 1 else 0)))
					FUNC_LIST[683](rt_add_i32(loc_3, 320), bit_or(loc_4, loc_5))
					FUNC_LIST[671](rt_add_i32(loc_3, 304), loc_16, loc_15, rt_load_i64(memory_at_0, loc_3 + 320), rt_load_i64(memory_at_0, loc_3 + 328))
					FUNC_LIST[677](rt_add_i32(loc_3, 272), rt_load_i64(memory_at_0, loc_3 + 304), rt_load_i64(memory_at_0, loc_3 + 312), loc_13, loc_17)
					FUNC_LIST[671](rt_add_i32(loc_3, 288), loc_16, loc_15, (if loc_4 ~= 0 then rt_i64_ZERO else loc_11), (if loc_4 ~= 0 then rt_i64_ZERO else loc_14))
					FUNC_LIST[677](rt_add_i32(loc_3, 256), rt_load_i64(memory_at_0, loc_3 + 288), rt_load_i64(memory_at_0, loc_3 + 296), rt_load_i64(memory_at_0, loc_3 + 272), rt_load_i64(memory_at_0, loc_3 + 280))
					FUNC_LIST[678](rt_add_i32(loc_3, 240), rt_load_i64(memory_at_0, loc_3 + 256), rt_load_i64(memory_at_0, loc_3 + 264), loc_13, loc_17)
					loc_11 = rt_load_i64(memory_at_0, loc_3 + 240)
					loc_14 = rt_load_i64(memory_at_0, loc_3 + 248)
					reg_0 = FUNC_LIST[660](loc_11, loc_14, rt_i64_ZERO, rt_i64_ZERO)
					if reg_0 == 0 then
						while true do
							reg_0 = FUNC_LIST[612]()
							rt_store_i32(memory_at_0, reg_0, 68)
							break
						end
						if desired then
							break
						end
					end
					FUNC_LIST[776](rt_add_i32(loc_3, 224), loc_11, loc_14, rt_wrap_i32_i64(loc_12))
					loc_11 = rt_load_i64(memory_at_0, loc_3 + 224)
					reg_0 = rt_load_i64(memory_at_0, loc_3 + 232)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[612]()
			rt_store_i32(memory_at_0, reg_0, 68)
			FUNC_LIST[681](rt_add_i32(loc_3, 208), loc_2)
			FUNC_LIST[671](rt_add_i32(loc_3, 192), rt_load_i64(memory_at_0, loc_3 + 208), rt_load_i64(memory_at_0, loc_3 + 216), rt_i64_ZERO, rt_i64_from_u32(0, 65536))
			FUNC_LIST[671](rt_add_i32(loc_3, 176), rt_load_i64(memory_at_0, loc_3 + 192), rt_load_i64(memory_at_0, loc_3 + 200), rt_i64_ZERO, rt_i64_from_u32(0, 65536))
			loc_11 = rt_load_i64(memory_at_0, loc_3 + 176)
			reg_0 = rt_load_i64(memory_at_0, loc_3 + 184)
			break
		end
		loc_12 = reg_0
		rt_store_i64(memory_at_0, loc_0, loc_11)
		rt_store_i64(memory_at_0, loc_0 + 8, loc_12)
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 432)
		break
	end
end
FUNC_LIST[773] = --[[ decfloat ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = rt_i64_ZERO
	local loc_17 = rt_i64_ZERO
	local loc_18 = rt_i64_ZERO
	local loc_19 = rt_i64_ZERO
	local loc_20 = rt_i64_ZERO
	local loc_21 = rt_i64_ZERO
	local loc_22 = 0.0
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 8976)
		GLOBAL_LIST[0].value = loc_4
		while true do
			while true do
				while true do
					while true do
						if loc_2 ~= 48 then
							while true do
								if loc_2 ~= 46 then
									desired = 1
									break
								end
								loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
								if loc_2 == rt_load_i32(memory_at_0, loc_1 + 104) then
									desired = 4
									break
								end
								rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_2, 1))
								reg_0 = rt_load_i32_u8(memory_at_0, loc_2)
								desired = 2
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
						if loc_2 ~= rt_load_i32(memory_at_0, loc_1 + 104) then
							while true do
								loc_7 = 1
								rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_2, 1))
								loc_2 = rt_load_i32_u8(memory_at_0, loc_2)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						else
							while true do
								loc_7 = 1
								reg_0 = FUNC_LIST[769](loc_1)
								loc_2 = reg_0
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[769](loc_1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = reg_0
			if loc_2 == 48 then
				while true do
					while true do
						loc_16 = rt_sub_i64(loc_16, rt_i64_ONE)
						while true do
							loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
							if loc_2 ~= rt_load_i32(memory_at_0, loc_1 + 104) then
								while true do
									rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_2, 1))
									reg_0 = rt_load_i32_u8(memory_at_0, loc_2)
									desired = 4
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							reg_0 = FUNC_LIST[769](loc_1)
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
						loc_2 = reg_0
						if loc_2 == 48 then
							continue
						end
						break
					end
					if desired then
						break
					end
					reg_0 = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_7
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_7 = reg_0
			loc_11 = 1
			break
		end
		rt_store_i32(memory_at_0, loc_4 + 784, 0)
		loc_6 = rt_sub_i32(loc_2, 48)
		reg_0 = loc_0
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								loc_5 = (if loc_2 == 46 then 1 else 0)
								if loc_5 ~= 0 then
									break
								end
								if loc_6 <= 9 then
									break
								end
								desired = 5
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								while true do
									if bit_and(loc_5, 1) ~= 0 then
										while true do
											if loc_11 == 0 then
												while true do
													loc_16 = loc_17
													loc_11 = 1
													desired = 7
													break
												end
												if desired then
													break
												end
											end
											loc_5 = (if loc_7 == 0 then 1 else 0)
											desired = 4
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									loc_17 = rt_add_i64(loc_17, rt_i64_ONE)
									if rt_le_i32(loc_9, 2044) then
										while true do
											loc_10 = (if loc_2 == 48 then loc_10 else rt_wrap_i32_i64(loc_17))
											loc_5 = rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(loc_9, 2))
											loc_15 = loc_5
											reg_1 = loc_15
											if loc_8 ~= 0 then
												while true do
													reg_2 = rt_sub_i32(rt_add_i32(rt_mul_i32(rt_load_i32(memory_at_0, loc_5), 10), loc_2), 48)
													break
												end
												if desired then
													break
												end
											else
												while true do
													reg_2 = loc_6
													break
												end
												if desired then
													break
												end
											end
											loc_6 = reg_2
											rt_store_i32(memory_at_0, reg_1, loc_6)
											loc_7 = 1
											loc_2 = rt_add_i32(loc_8, 1)
											reg_2 = loc_2
											loc_2 = (if loc_2 == 9 then 1 else 0)
											loc_8 = (if loc_2 ~= 0 then 0 else reg_2)
											loc_9 = rt_add_i32(loc_2, loc_9)
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									if loc_2 == 48 then
										break
									end
									rt_store_i32(memory_at_0, loc_4 + 8960, bit_or(rt_load_i32(memory_at_0, loc_4 + 8960), 1))
									loc_10 = 18396
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
										continue
									end
									break
								end
								while true do
									loc_2 = rt_load_i32(memory_at_0, loc_1 + 4)
									if loc_2 ~= rt_load_i32(memory_at_0, loc_1 + 104) then
										while true do
											rt_store_i32(memory_at_0, loc_1 + 4, rt_add_i32(loc_2, 1))
											reg_1 = rt_load_i32_u8(memory_at_0, loc_2)
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									reg_1 = FUNC_LIST[769](loc_1)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
										continue
									end
									break
								end
								loc_2 = reg_1
								loc_6 = rt_sub_i32(loc_2, 48)
								loc_5 = (if loc_2 == 46 then 1 else 0)
								if loc_5 ~= 0 then
									continue
								end
								if loc_6 < 10 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_16 = (if loc_11 ~= 0 then loc_16 else loc_17)
						while true do
							if loc_7 == 0 then
								break
							end
							if bit_and(loc_2, 4294967263) ~= 69 then
								break
							end
							while true do
								reg_1 = FUNC_LIST[774](loc_1)
								loc_18 = reg_1
								if rt_ne_i64(loc_18, rt_i64_from_u32(0, 2147483648)) then
									break
								end
								loc_18 = rt_i64_ZERO
								if rt_lt_i64(rt_load_i64(memory_at_0, loc_1 + 112), rt_i64_ZERO) then
									break
								end
								rt_store_i32(memory_at_0, loc_1 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 4), 1))
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_16 = rt_add_i64(loc_16, loc_18)
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_5 = (if loc_7 == 0 then 1 else 0)
						if rt_lt_i32(loc_2, 0) then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if rt_lt_i64(rt_load_i64(memory_at_0, loc_1 + 112), rt_i64_ZERO) then
						break
					end
					rt_store_i32(memory_at_0, loc_1 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_1 + 4), 1))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_5 == 0 then
					break
				end
				reg_1 = FUNC_LIST[612]()
				rt_store_i32(memory_at_0, reg_1, 28)
				FUNC_LIST[767](loc_1)
				loc_17 = rt_i64_ZERO
				reg_1 = rt_i64_ZERO
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = rt_load_i32(memory_at_0, loc_4 + 784)
			if loc_1 == 0 then
				while true do
					FUNC_LIST[682](loc_4, rt_copysign_f64(0e0, rt_convert_f64_i32(loc_3)))
					loc_17 = rt_load_i64(memory_at_0, loc_4)
					reg_1 = rt_load_i64(memory_at_0, loc_4 + 8)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				if rt_gt_i64(loc_17, rt_i64_from_u32(9, 0)) then
					break
				end
				if rt_ne_i64(loc_16, loc_17) then
					break
				end
				FUNC_LIST[681](rt_add_i32(loc_4, 48), loc_3)
				FUNC_LIST[683](rt_add_i32(loc_4, 32), loc_1)
				FUNC_LIST[671](rt_add_i32(loc_4, 16), rt_load_i64(memory_at_0, loc_4 + 48), rt_load_i64(memory_at_0, loc_4 + 56), rt_load_i64(memory_at_0, loc_4 + 32), rt_load_i64(memory_at_0, loc_4 + 40))
				loc_17 = rt_load_i64(memory_at_0, loc_4 + 16)
				reg_1 = rt_load_i64(memory_at_0, loc_4 + 24)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if rt_ge_i64(loc_16, rt_i64_from_u32(538, 0)) then
				while true do
					reg_1 = FUNC_LIST[612]()
					rt_store_i32(memory_at_0, reg_1, 68)
					FUNC_LIST[681](rt_add_i32(loc_4, 96), loc_3)
					FUNC_LIST[671](rt_add_i32(loc_4, 80), rt_load_i64(memory_at_0, loc_4 + 96), rt_load_i64(memory_at_0, loc_4 + 104), rt_i64_from_u32(4294967295, 4294967295), rt_i64_from_u32(4294967295, 2147418111))
					FUNC_LIST[671](rt_sub_i32(loc_4, 4294967232), rt_load_i64(memory_at_0, loc_4 + 80), rt_load_i64(memory_at_0, loc_4 + 88), rt_i64_from_u32(4294967295, 4294967295), rt_i64_from_u32(4294967295, 2147418111))
					loc_17 = rt_load_i64(memory_at_0, loc_4 + 64)
					reg_1 = rt_load_i64(memory_at_0, loc_4 + 72)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_le_i64(loc_16, rt_i64_from_u32(4294965995, 4294967295)) then
				while true do
					reg_1 = FUNC_LIST[612]()
					rt_store_i32(memory_at_0, reg_1, 68)
					FUNC_LIST[681](rt_add_i32(loc_4, 144), loc_3)
					FUNC_LIST[671](rt_add_i32(loc_4, 128), rt_load_i64(memory_at_0, loc_4 + 144), rt_load_i64(memory_at_0, loc_4 + 152), rt_i64_ZERO, rt_i64_from_u32(0, 65536))
					FUNC_LIST[671](rt_add_i32(loc_4, 112), rt_load_i64(memory_at_0, loc_4 + 128), rt_load_i64(memory_at_0, loc_4 + 136), rt_i64_ZERO, rt_i64_from_u32(0, 65536))
					loc_17 = rt_load_i64(memory_at_0, loc_4 + 112)
					reg_1 = rt_load_i64(memory_at_0, loc_4 + 120)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_8 ~= 0 then
				while true do
					if rt_le_i32(loc_8, 8) then
						while true do
							loc_2 = rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(loc_9, 2))
							loc_1 = rt_load_i32(memory_at_0, loc_2)
							while true do
								loc_1 = rt_mul_i32(loc_1, 10)
								loc_8 = rt_add_i32(loc_8, 1)
								if loc_8 ~= 9 then
									continue
								end
								break
							end
							if desired then
								break
							end
							rt_store_i32(memory_at_0, loc_2, loc_1)
							break
						end
						if desired then
							break
						end
					end
					reg_1 = rt_add_i32(loc_9, 1)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_1 = loc_9
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_9 = reg_1
			loc_8 = rt_wrap_i32_i64(loc_16)
			while true do
				if rt_ge_i32(loc_10, 9) then
					break
				end
				if rt_gt_i64(loc_16, rt_i64_from_u32(17, 0)) then
					break
				end
				if rt_lt_i32(loc_8, loc_10) then
					break
				end
				if rt_eq_i64(loc_16, rt_i64_from_u32(9, 0)) then
					while true do
						FUNC_LIST[681](rt_add_i32(loc_4, 192), loc_3)
						FUNC_LIST[683](rt_add_i32(loc_4, 176), rt_load_i32(memory_at_0, loc_4 + 784))
						FUNC_LIST[671](rt_add_i32(loc_4, 160), rt_load_i64(memory_at_0, loc_4 + 192), rt_load_i64(memory_at_0, loc_4 + 200), rt_load_i64(memory_at_0, loc_4 + 176), rt_load_i64(memory_at_0, loc_4 + 184))
						loc_17 = rt_load_i64(memory_at_0, loc_4 + 160)
						reg_1 = rt_load_i64(memory_at_0, loc_4 + 168)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_le_i64(loc_16, rt_i64_from_u32(8, 0)) then
					while true do
						FUNC_LIST[681](rt_add_i32(loc_4, 272), loc_3)
						FUNC_LIST[683](rt_add_i32(loc_4, 256), rt_load_i32(memory_at_0, loc_4 + 784))
						FUNC_LIST[671](rt_add_i32(loc_4, 240), rt_load_i64(memory_at_0, loc_4 + 272), rt_load_i64(memory_at_0, loc_4 + 280), rt_load_i64(memory_at_0, loc_4 + 256), rt_load_i64(memory_at_0, loc_4 + 264))
						FUNC_LIST[681](rt_add_i32(loc_4, 224), rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(rt_sub_i32(0, loc_8), 2), 29568)))
						FUNC_LIST[663](rt_add_i32(loc_4, 208), rt_load_i64(memory_at_0, loc_4 + 240), rt_load_i64(memory_at_0, loc_4 + 248), rt_load_i64(memory_at_0, loc_4 + 224), rt_load_i64(memory_at_0, loc_4 + 232))
						loc_17 = rt_load_i64(memory_at_0, loc_4 + 208)
						reg_1 = rt_load_i64(memory_at_0, loc_4 + 216)
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_1 = rt_load_i32(memory_at_0, loc_4 + 784)
				if rt_ge_i64(loc_16, rt_i64_from_u32(17, 0)) then
					while true do
						if rt_shr_u32(loc_1, rt_add_i32(rt_mul_i32(loc_8, 4294967293), 80)) ~= 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[681](rt_add_i32(loc_4, 352), loc_3)
				FUNC_LIST[683](rt_add_i32(loc_4, 336), loc_1)
				FUNC_LIST[671](rt_add_i32(loc_4, 320), rt_load_i64(memory_at_0, loc_4 + 352), rt_load_i64(memory_at_0, loc_4 + 360), rt_load_i64(memory_at_0, loc_4 + 336), rt_load_i64(memory_at_0, loc_4 + 344))
				FUNC_LIST[681](rt_add_i32(loc_4, 304), rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_8, 2), 29496)))
				FUNC_LIST[671](rt_add_i32(loc_4, 288), rt_load_i64(memory_at_0, loc_4 + 320), rt_load_i64(memory_at_0, loc_4 + 328), rt_load_i64(memory_at_0, loc_4 + 304), rt_load_i64(memory_at_0, loc_4 + 312))
				loc_17 = rt_load_i64(memory_at_0, loc_4 + 288)
				reg_1 = rt_load_i64(memory_at_0, loc_4 + 296)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_5 = loc_9
				loc_9 = rt_sub_i32(loc_5, 1)
				if rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(loc_9, 2))) == 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_10 = 0
			while true do
				loc_1 = rt_rem_i32(loc_8, 9)
				if loc_1 == 0 then
					while true do
						loc_6 = 0
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_12 = (if rt_lt_i64(loc_16, rt_i64_ZERO) then rt_add_i32(loc_1, 9) else loc_1)
				while true do
					if loc_5 == 0 then
						while true do
							loc_6 = 0
							loc_5 = 0
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_7 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(rt_sub_i32(0, loc_12), 2), 29568))
					loc_13 = rt_div_i32(1000000000, loc_7)
					loc_2 = 0
					loc_1 = 0
					loc_6 = 0
					while true do
						loc_9 = rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(loc_1, 2))
						reg_1 = loc_9
						loc_9 = rt_load_i32(memory_at_0, loc_9)
						loc_11 = rt_div_u32(loc_9, loc_7)
						loc_2 = rt_add_i32(loc_2, loc_11)
						rt_store_i32(memory_at_0, reg_1, loc_2)
						loc_2 = bit_and((if loc_2 == 0 then 1 else 0), (if loc_1 == loc_6 then 1 else 0))
						loc_6 = (if loc_2 ~= 0 then bit_and(rt_add_i32(loc_6, 1), 2047) else loc_6)
						loc_8 = (if loc_2 ~= 0 then rt_sub_i32(loc_8, 9) else loc_8)
						loc_2 = rt_mul_i32(rt_sub_i32(loc_9, rt_mul_i32(loc_7, loc_11)), loc_13)
						loc_1 = rt_add_i32(loc_1, 1)
						if loc_5 ~= loc_1 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if loc_2 == 0 then
						break
					end
					rt_store_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(loc_5, 2)), loc_2)
					loc_5 = rt_add_i32(loc_5, 1)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_8 = rt_add_i32(rt_sub_i32(loc_8, loc_12), 9)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				loc_12 = rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(loc_6, 2))
				loc_13 = (if rt_lt_i32(loc_8, 36) then 1 else 0)
				while true do
					while true do
						while true do
							if loc_13 ~= 0 then
								break
							end
							if loc_8 ~= 36 then
								desired = 3
								break
							end
							if rt_load_i32(memory_at_0, loc_12) <= 10384592 then
								break
							end
							loc_8 = 36
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_9 = rt_add_i32(loc_5, 2047)
						loc_7 = 0
						while true do
							loc_2 = loc_5
							loc_1 = bit_and(loc_9, 2047)
							loc_5 = rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(loc_1, 2))
							loc_16 = rt_add_i64(rt_extend_i64_u32(loc_7), rt_shl_i64(rt_load_i64_u32(memory_at_0, loc_5), rt_i64_from_u32(29, 0)))
							if rt_lt_u64(loc_16, rt_i64_from_u32(1000000001, 0)) then
								while true do
									reg_1 = 0
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							else
								while true do
									loc_17 = rt_div_u64(loc_16, rt_i64_from_u32(1000000000, 0))
									loc_16 = rt_add_i64(loc_16, rt_mul_i64(loc_17, rt_i64_from_u32(3294967296, 4294967295)))
									reg_1 = rt_wrap_i32_i64(loc_17)
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							loc_7 = reg_1
							rt_store_i64_n32(memory_at_0, loc_5, loc_16)
							loc_11 = bit_and(rt_sub_i32(loc_2, 1), 2047)
							loc_5 = (if loc_11 ~= loc_1 then loc_2 else (if loc_1 == loc_6 then loc_2 else (if rt_eq_i64(loc_16, rt_i64_ZERO) then loc_1 else loc_2)))
							loc_9 = rt_sub_i32(loc_1, 1)
							if loc_1 ~= loc_6 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_10 = rt_sub_i32(loc_10, 29)
						loc_5 = loc_2
						if loc_7 == 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_6 = bit_and(rt_sub_i32(loc_6, 1), 2047)
					if loc_6 ~= loc_2 then
						while true do
							reg_1 = loc_2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					else
						while true do
							loc_1 = rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(bit_and(rt_add_i32(loc_2, 2046), 2047), 2))
							rt_store_i32(memory_at_0, loc_1, bit_or(rt_load_i32(memory_at_0, loc_1), rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(loc_11, 2)))))
							reg_1 = loc_11
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_5 = reg_1
					loc_8 = rt_add_i32(loc_8, 9)
					rt_store_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(loc_6, 2)), loc_7)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				while true do
					loc_14 = bit_and(rt_add_i32(loc_5, 1), 2047)
					loc_12 = rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(bit_and(rt_sub_i32(loc_5, 1), 2047), 2))
					while true do
						loc_9 = (if rt_gt_i32(loc_8, 45) then 9 else 1)
						loc_11 = (if loc_8 ~= 36 then 1 else 0)
						while true do
							while true do
								loc_7 = loc_6
								loc_1 = 0
								while true do
									while true do
										while true do
											loc_2 = bit_and(rt_add_i32(loc_1, loc_7), 2047)
											if loc_5 == loc_2 then
												break
											end
											loc_2 = rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(loc_2, 2)))
											loc_6 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_1, 2), 29520))
											if loc_2 < loc_6 then
												break
											end
											if loc_2 > loc_6 then
												desired = 7
												break
											end
											loc_1 = rt_add_i32(loc_1, 1)
											if loc_1 ~= 4 then
												desired = 8
												break
											end
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
												continue
											end
											break
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									if loc_11 ~= 0 then
										break
									end
									loc_1 = 0
									loc_16 = rt_i64_ZERO
									loc_17 = rt_i64_ZERO
									while true do
										loc_2 = bit_and(rt_add_i32(loc_1, loc_7), 2047)
										if loc_2 == loc_5 then
											while true do
												loc_5 = bit_and(rt_add_i32(loc_5, 1), 2047)
												rt_store_i32(memory_at_0, rt_add_i32(loc_4, rt_shl_i32(loc_5, 2)) + 780, 0)
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
													continue
												end
												break
											end
										end
										FUNC_LIST[683](rt_add_i32(loc_4, 768), rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(loc_2, 2))))
										FUNC_LIST[671](rt_add_i32(loc_4, 752), loc_16, loc_17, rt_i64_ZERO, rt_i64_from_u32(1342177280, 1075633366))
										FUNC_LIST[677](rt_add_i32(loc_4, 736), rt_load_i64(memory_at_0, loc_4 + 752), rt_load_i64(memory_at_0, loc_4 + 760), rt_load_i64(memory_at_0, loc_4 + 768), rt_load_i64(memory_at_0, loc_4 + 776))
										loc_17 = rt_load_i64(memory_at_0, loc_4 + 744)
										loc_16 = rt_load_i64(memory_at_0, loc_4 + 736)
										loc_1 = rt_add_i32(loc_1, 1)
										if loc_1 ~= 4 then
											continue
										end
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									FUNC_LIST[681](rt_add_i32(loc_4, 720), loc_3)
									FUNC_LIST[671](rt_add_i32(loc_4, 704), loc_16, loc_17, rt_load_i64(memory_at_0, loc_4 + 720), rt_load_i64(memory_at_0, loc_4 + 728))
									loc_17 = rt_load_i64(memory_at_0, loc_4 + 712)
									loc_16 = rt_i64_ZERO
									loc_18 = rt_load_i64(memory_at_0, loc_4 + 704)
									loc_2 = rt_add_i32(loc_10, 1187)
									loc_1 = (if rt_ge_i32(loc_10, 4294966162) then 53 else (if rt_gt_i32(loc_2, 0) then loc_2 else 0))
									if loc_1 <= 112 then
										desired = 5
										break
									end
									desired = 2
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
										continue
									end
									break
								end
								loc_10 = rt_add_i32(loc_9, loc_10)
								loc_6 = loc_5
								if loc_5 == loc_7 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_11 = rt_shr_u32(1000000000, loc_9)
							loc_13 = bit_xor(rt_shl_i32(4294967295, loc_9), 4294967295)
							loc_1 = 0
							loc_6 = loc_7
							while true do
								loc_2 = rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(loc_7, 2))
								reg_1 = loc_2
								loc_2 = rt_load_i32(memory_at_0, loc_2)
								loc_1 = rt_add_i32(loc_1, rt_shr_u32(loc_2, loc_9))
								rt_store_i32(memory_at_0, reg_1, loc_1)
								loc_1 = bit_and((if loc_1 == 0 then 1 else 0), (if loc_6 == loc_7 then 1 else 0))
								loc_6 = (if loc_1 ~= 0 then bit_and(rt_add_i32(loc_6, 1), 2047) else loc_6)
								loc_8 = (if loc_1 ~= 0 then rt_sub_i32(loc_8, 9) else loc_8)
								loc_1 = rt_mul_i32(loc_11, bit_and(loc_2, loc_13))
								loc_7 = bit_and(rt_add_i32(loc_7, 1), 2047)
								if loc_5 ~= loc_7 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if loc_1 == 0 then
								desired = 4
								break
							end
							if loc_6 ~= loc_14 then
								while true do
									rt_store_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(loc_5, 2)), loc_1)
									loc_5 = loc_14
									desired = 3
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							rt_store_i32(memory_at_0, loc_12, bit_or(rt_load_i32(memory_at_0, loc_12), 1))
							desired = 4
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_2 = FUNC_LIST[648](1e0, rt_sub_i32(225, loc_1))
				FUNC_LIST[682](rt_add_i32(loc_4, 656), reg_2)
				FUNC_LIST[775](rt_add_i32(loc_4, 688), rt_load_i64(memory_at_0, loc_4 + 656), rt_load_i64(memory_at_0, loc_4 + 664), loc_18, loc_17)
				loc_21 = rt_load_i64(memory_at_0, loc_4 + 696)
				loc_20 = rt_load_i64(memory_at_0, loc_4 + 688)
				reg_2 = FUNC_LIST[648](1e0, rt_sub_i32(113, loc_1))
				FUNC_LIST[682](rt_add_i32(loc_4, 640), reg_2)
				FUNC_LIST[651](rt_add_i32(loc_4, 672), loc_18, loc_17, rt_load_i64(memory_at_0, loc_4 + 640), rt_load_i64(memory_at_0, loc_4 + 648))
				loc_16 = rt_load_i64(memory_at_0, loc_4 + 672)
				loc_19 = rt_load_i64(memory_at_0, loc_4 + 680)
				FUNC_LIST[678](rt_add_i32(loc_4, 624), loc_18, loc_17, loc_16, loc_19)
				FUNC_LIST[677](rt_add_i32(loc_4, 608), loc_20, loc_21, rt_load_i64(memory_at_0, loc_4 + 624), rt_load_i64(memory_at_0, loc_4 + 632))
				loc_17 = rt_load_i64(memory_at_0, loc_4 + 616)
				loc_18 = rt_load_i64(memory_at_0, loc_4 + 608)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_6 = rt_add_i32(loc_10, 113)
			while true do
				loc_9 = bit_and(rt_add_i32(loc_7, 4), 2047)
				if loc_5 == loc_9 then
					break
				end
				while true do
					loc_9 = rt_load_i32(memory_at_0, rt_add_i32(rt_add_i32(loc_4, 784), rt_shl_i32(loc_9, 2)))
					if loc_9 <= 499999999 then
						while true do
							if loc_9 == 0 then
								while true do
									if loc_5 == bit_and(rt_add_i32(loc_7, 5), 2047) then
										desired = 3
										break
									end
									break
								end
								if desired then
									break
								end
							end
							FUNC_LIST[682](rt_add_i32(loc_4, 496), (rt_convert_f64_i32(loc_3) * 2.5e-1))
							FUNC_LIST[677](rt_add_i32(loc_4, 480), loc_16, loc_19, rt_load_i64(memory_at_0, loc_4 + 496), rt_load_i64(memory_at_0, loc_4 + 504))
							loc_19 = rt_load_i64(memory_at_0, loc_4 + 488)
							loc_16 = rt_load_i64(memory_at_0, loc_4 + 480)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if loc_9 ~= 500000000 then
						while true do
							FUNC_LIST[682](rt_add_i32(loc_4, 592), (rt_convert_f64_i32(loc_3) * 7.5e-1))
							FUNC_LIST[677](rt_add_i32(loc_4, 576), loc_16, loc_19, rt_load_i64(memory_at_0, loc_4 + 592), rt_load_i64(memory_at_0, loc_4 + 600))
							loc_19 = rt_load_i64(memory_at_0, loc_4 + 584)
							loc_16 = rt_load_i64(memory_at_0, loc_4 + 576)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_22 = rt_convert_f64_i32(loc_3)
					if bit_and(rt_add_i32(loc_7, 5), 2047) == loc_5 then
						while true do
							FUNC_LIST[682](rt_add_i32(loc_4, 528), (loc_22 * 5e-1))
							FUNC_LIST[677](rt_add_i32(loc_4, 512), loc_16, loc_19, rt_load_i64(memory_at_0, loc_4 + 528), rt_load_i64(memory_at_0, loc_4 + 536))
							loc_19 = rt_load_i64(memory_at_0, loc_4 + 520)
							loc_16 = rt_load_i64(memory_at_0, loc_4 + 512)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					FUNC_LIST[682](rt_add_i32(loc_4, 560), (loc_22 * 7.5e-1))
					FUNC_LIST[677](rt_add_i32(loc_4, 544), loc_16, loc_19, rt_load_i64(memory_at_0, loc_4 + 560), rt_load_i64(memory_at_0, loc_4 + 568))
					loc_19 = rt_load_i64(memory_at_0, loc_4 + 552)
					loc_16 = rt_load_i64(memory_at_0, loc_4 + 544)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if loc_1 > 111 then
					break
				end
				FUNC_LIST[651](rt_add_i32(loc_4, 464), loc_16, loc_19, rt_i64_ZERO, rt_i64_from_u32(0, 1073676288))
				reg_1 = FUNC_LIST[660](rt_load_i64(memory_at_0, loc_4 + 464), rt_load_i64(memory_at_0, loc_4 + 472), rt_i64_ZERO, rt_i64_ZERO)
				if reg_1 ~= 0 then
					break
				end
				FUNC_LIST[677](rt_add_i32(loc_4, 448), loc_16, loc_19, rt_i64_ZERO, rt_i64_from_u32(0, 1073676288))
				loc_19 = rt_load_i64(memory_at_0, loc_4 + 456)
				loc_16 = rt_load_i64(memory_at_0, loc_4 + 448)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[677](rt_add_i32(loc_4, 432), loc_18, loc_17, loc_16, loc_19)
			FUNC_LIST[678](rt_add_i32(loc_4, 416), rt_load_i64(memory_at_0, loc_4 + 432), rt_load_i64(memory_at_0, loc_4 + 440), loc_20, loc_21)
			loc_17 = rt_load_i64(memory_at_0, loc_4 + 424)
			loc_18 = rt_load_i64(memory_at_0, loc_4 + 416)
			while true do
				if bit_and(loc_6, 2147483644) < 1020 then
					while true do
						loc_5 = loc_10
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				FUNC_LIST[777](rt_add_i32(loc_4, 400), loc_18, loc_17)
				FUNC_LIST[671](rt_add_i32(loc_4, 384), loc_18, loc_17, rt_i64_ZERO, rt_i64_from_u32(0, 1073610752))
				reg_1 = FUNC_LIST[661](rt_load_i64(memory_at_0, loc_4 + 400), rt_load_i64(memory_at_0, loc_4 + 408), rt_i64_ZERO, rt_i64_from_u32(0, 1081081856))
				loc_6 = reg_1
				loc_5 = (if rt_ge_i32(loc_6, 0) then 1 else 0)
				loc_17 = (if loc_5 ~= 0 then rt_load_i64(memory_at_0, loc_4 + 392) else loc_17)
				loc_18 = (if loc_5 ~= 0 then rt_load_i64(memory_at_0, loc_4 + 384) else loc_18)
				reg_1 = FUNC_LIST[660](loc_16, loc_19, rt_i64_ZERO, rt_i64_ZERO)
				loc_7 = reg_1
				loc_5 = rt_add_i32(loc_5, loc_10)
				if rt_le_i32(loc_5, 911) then
					while true do
						if bit_and(bit_and(bit_or((if loc_1 ~= loc_2 then 1 else 0), (if rt_lt_i32(loc_6, 0) then 1 else 0)), (if rt_lt_i32(loc_10, 4294966162) then 1 else 0)), (if loc_7 ~= 0 then 1 else 0)) == 0 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				reg_1 = FUNC_LIST[612]()
				rt_store_i32(memory_at_0, reg_1, 68)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			FUNC_LIST[776](rt_add_i32(loc_4, 368), loc_18, loc_17, loc_5)
			loc_17 = rt_load_i64(memory_at_0, loc_4 + 368)
			reg_1 = rt_load_i64(memory_at_0, loc_4 + 376)
			break
		end
		loc_16 = reg_1
		rt_store_i64(memory_at_0, reg_0 + 8, loc_16)
		rt_store_i64(memory_at_0, loc_0, loc_17)
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 8976)
		break
	end
end
FUNC_LIST[774] = --[[ scanexp ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = rt_i64_ZERO
	local reg_0
	local reg_1
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
									if loc_1 ~= rt_load_i32(memory_at_0, loc_0 + 104) then
										while true do
											rt_store_i32(memory_at_0, loc_0 + 4, rt_add_i32(loc_1, 1))
											reg_0 = rt_load_i32_u8(memory_at_0, loc_1)
											desired = 7
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
											end
											break
										end
									end
									reg_0 = FUNC_LIST[769](loc_0)
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_1 = reg_0
								if not br_map[1] then
									br_map[1] = (function()
										return { [0] = 0, 1, 0, }
									end)()
								end
								temp = br_map[1][rt_sub_i32(loc_1, 43)] or 1
								if temp < 1 then
									break
								else
									desired = 5
									break
								end
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							while true do
								loc_2 = rt_load_i32(memory_at_0, loc_0 + 4)
								if loc_2 ~= rt_load_i32(memory_at_0, loc_0 + 104) then
									while true do
										rt_store_i32(memory_at_0, loc_0 + 4, rt_add_i32(loc_2, 1))
										reg_0 = rt_load_i32_u8(memory_at_0, loc_2)
										desired = 6
										break
									end
									if desired then
										if desired == 6 then
											desired = nil
										end
										break
									end
								end
								reg_0 = FUNC_LIST[769](loc_0)
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_2 = reg_0
							if rt_sub_i32(loc_2, 58) > 4294967285 then
								while true do
									loc_3 = (if loc_1 == 45 then 1 else 0)
									loc_1 = loc_2
									desired = 1
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							if rt_ge_i64(rt_load_i64(memory_at_0, loc_0 + 112), rt_i64_ZERO) then
								desired = 4
								break
							end
							desired = 2
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						if rt_sub_i32(loc_1, 58) > 4294967285 then
							desired = 1
							break
						end
						if rt_lt_i64(rt_load_i64(memory_at_0, loc_0 + 112), rt_i64_ZERO) then
							desired = 2
							break
						end
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					rt_store_i32(memory_at_0, loc_0 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), 1))
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), 1))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = rt_i64_from_u32(0, 2147483648)
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		while true do
			if rt_sub_i32(loc_1, 48) >= 10 then
				break
			end
			loc_2 = 0
			while true do
				loc_2 = rt_add_i32(rt_mul_i32(loc_2, 10), loc_1)
				loc_2 = rt_sub_i32(loc_2, 48)
				reg_0 = (if rt_lt_i32(loc_2, 214748364) then 1 else 0)
				while true do
					loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
					if loc_1 ~= rt_load_i32(memory_at_0, loc_0 + 104) then
						while true do
							rt_store_i32(memory_at_0, loc_0 + 4, rt_add_i32(loc_1, 1))
							reg_1 = rt_load_i32_u8(memory_at_0, loc_1)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_1 = FUNC_LIST[769](loc_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_1 = reg_1
				loc_4 = rt_sub_i32(loc_1, 48)
				if bit_and(reg_0, (if loc_4 <= 9 then 1 else 0)) ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_5 = rt_extend_i64_i32(loc_2)
			if loc_4 >= 10 then
				break
			end
			while true do
				loc_5 = rt_add_i64(rt_extend_i64_u32(loc_1), rt_mul_i64(loc_5, rt_i64_from_u32(10, 0)))
				while true do
					loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
					if loc_1 ~= rt_load_i32(memory_at_0, loc_0 + 104) then
						while true do
							rt_store_i32(memory_at_0, loc_0 + 4, rt_add_i32(loc_1, 1))
							reg_0 = rt_load_i32_u8(memory_at_0, loc_1)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[769](loc_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_1 = reg_0
				loc_2 = rt_sub_i32(loc_1, 48)
				loc_5 = rt_sub_i64(loc_5, rt_i64_from_u32(48, 0))
				if bit_and((if loc_2 <= 9 then 1 else 0), (if rt_lt_i64(loc_5, rt_i64_from_u32(2061584302, 21474836)) then 1 else 0)) ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_2 >= 10 then
				break
			end
			while true do
				while true do
					loc_1 = rt_load_i32(memory_at_0, loc_0 + 4)
					if loc_1 ~= rt_load_i32(memory_at_0, loc_0 + 104) then
						while true do
							rt_store_i32(memory_at_0, loc_0 + 4, rt_add_i32(loc_1, 1))
							reg_0 = rt_load_i32_u8(memory_at_0, loc_1)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[769](loc_0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_1 = reg_0
				if rt_sub_i32(loc_1, 48) < 10 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		if rt_ge_i64(rt_load_i64(memory_at_0, loc_0 + 112), rt_i64_ZERO) then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 4), 1))
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = (if loc_3 ~= 0 then rt_sub_i64(rt_i64_ZERO, loc_5) else loc_5)
		break
	end
	return reg_0
end
FUNC_LIST[775] = --[[ copysignl ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	while true do
		rt_store_i64(memory_at_0, loc_0, loc_1)
		rt_store_i64(memory_at_0, loc_0 + 8, rt_bit_or_i64(rt_bit_and_i64(loc_2, rt_i64_from_u32(4294967295, 65535)), rt_shl_i64(rt_extend_i64_u32(bit_or(rt_wrap_i32_i64(rt_shr_u64(rt_bit_and_i64(loc_2, rt_i64_from_u32(0, 2147418112)), rt_i64_from_u32(48, 0))), bit_and(rt_wrap_i32_i64(rt_shr_u64(loc_4, rt_i64_from_u32(48, 0))), 32768))), rt_i64_from_u32(48, 0))))
		break
	end
end
FUNC_LIST[776] = --[[ scalbnl ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local desired
	while true do
		loc_4 = rt_sub_i32(GLOBAL_LIST[0].value, 80)
		GLOBAL_LIST[0].value = loc_4
		while true do
			if rt_ge_i32(loc_3, 16384) then
				while true do
					FUNC_LIST[671](rt_add_i32(loc_4, 32), loc_1, loc_2, rt_i64_ZERO, rt_i64_from_u32(0, 2147352576))
					loc_2 = rt_load_i64(memory_at_0, loc_4 + 40)
					loc_1 = rt_load_i64(memory_at_0, loc_4 + 32)
					if loc_3 < 32767 then
						while true do
							loc_3 = rt_sub_i32(loc_3, 16383)
							desired = 1
							break
						end
						if desired then
							break
						end
					end
					FUNC_LIST[671](rt_add_i32(loc_4, 16), loc_1, loc_2, rt_i64_ZERO, rt_i64_from_u32(0, 2147352576))
					loc_3 = rt_sub_i32((if loc_3 >= 49149 then 49149 else loc_3), 32766)
					loc_2 = rt_load_i64(memory_at_0, loc_4 + 24)
					loc_1 = rt_load_i64(memory_at_0, loc_4 + 16)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_gt_i32(loc_3, 4294950913) then
				break
			end
			FUNC_LIST[671](rt_sub_i32(loc_4, 4294967232), loc_1, loc_2, rt_i64_ZERO, rt_i64_from_u32(0, 7471104))
			loc_2 = rt_load_i64(memory_at_0, loc_4 + 72)
			loc_1 = rt_load_i64(memory_at_0, loc_4 + 64)
			if loc_3 > 4294934644 then
				while true do
					loc_3 = rt_add_i32(loc_3, 16269)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			FUNC_LIST[671](rt_add_i32(loc_4, 48), loc_1, loc_2, rt_i64_ZERO, rt_i64_from_u32(0, 7471104))
			loc_3 = rt_add_i32((if loc_3 <= 4294918376 then 4294918376 else loc_3), 32538)
			loc_2 = rt_load_i64(memory_at_0, loc_4 + 56)
			loc_1 = rt_load_i64(memory_at_0, loc_4 + 48)
			break
		end
		FUNC_LIST[671](loc_4, loc_1, loc_2, rt_i64_ZERO, rt_shl_i64(rt_extend_i64_u32(rt_add_i32(loc_3, 16383)), rt_i64_from_u32(48, 0)))
		rt_store_i64(memory_at_0, loc_0 + 8, rt_load_i64(memory_at_0, loc_4 + 8))
		rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_4))
		GLOBAL_LIST[0].value = rt_add_i32(loc_4, 80)
		break
	end
end
FUNC_LIST[777] = --[[ fabsl ]] function(loc_0, loc_1, loc_2)
	while true do
		rt_store_i64(memory_at_0, loc_0 + 8, rt_bit_and_i64(loc_2, rt_i64_from_u32(4294967295, 2147483647)))
		rt_store_i64(memory_at_0, loc_0, loc_1)
		break
	end
end
FUNC_LIST[778] = --[[ strtoull ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[779](loc_0, loc_1, loc_2, rt_i64_from_u32(4294967295, 4294967295))
		break
	end
	return reg_0
end
FUNC_LIST[779] = --[[ strtox.87 ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = rt_i64_ZERO
	local loc_12 = rt_i64_ZERO
	local loc_13 = rt_i64_ZERO
	local loc_14 = rt_i64_ZERO
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_8 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_8
		while true do
			while true do
				while true do
					if rt_le_i32(loc_2, 36) then
						while true do
							loc_5 = rt_load_i32_u8(memory_at_0, loc_0)
							if loc_5 ~= 0 then
								desired = 3
								break
							end
							loc_4 = loc_0
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_0 = FUNC_LIST[612]()
					rt_store_i32(memory_at_0, reg_0, 28)
					loc_3 = rt_i64_ZERO
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_4 = loc_0
				while true do
					while true do
						reg_0 = FUNC_LIST[724](rt_extend_i32_n8(loc_5))
						if reg_0 == 0 then
							desired = 3
							break
						end
						loc_5 = rt_load_i32_u8(memory_at_0, loc_4 + 1)
						loc_6 = rt_add_i32(loc_4, 1)
						loc_4 = loc_6
						if loc_5 ~= 0 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					loc_5 = bit_and(loc_5, 255)
					if not br_map[1] then
						br_map[1] = (function()
							return { [0] = 0, 1, 0, }
						end)()
					end
					temp = br_map[1][rt_sub_i32(loc_5, 43)] or 1
					if temp < 1 then
						break
					else
						desired = 2
						break
					end
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_7 = (if loc_5 == 45 then 4294967295 else 0)
				loc_4 = rt_add_i32(loc_4, 1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			while true do
				while true do
					if bit_or(loc_2, 16) ~= 16 then
						break
					end
					if rt_load_i32_u8(memory_at_0, loc_4) ~= 48 then
						break
					end
					loc_9 = 1
					if bit_and(rt_load_i32_u8(memory_at_0, loc_4 + 1), 223) == 88 then
						while true do
							loc_4 = rt_add_i32(loc_4, 2)
							reg_0 = 16
							desired = 2
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_4 = rt_add_i32(loc_4, 1)
					reg_0 = (if loc_2 ~= 0 then loc_2 else 8)
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = (if loc_2 ~= 0 then loc_2 else 10)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_10 = reg_0
			loc_11 = rt_extend_i64_u32(loc_10)
			loc_2 = 0
			while true do
				while true do
					while true do
						loc_6 = rt_load_i32_u8(memory_at_0, loc_4)
						loc_5 = rt_sub_i32(loc_6, 48)
						if bit_and(loc_5, 255) < 10 then
							break
						end
						if bit_and(rt_sub_i32(loc_6, 97), 255) <= 25 then
							while true do
								loc_5 = rt_sub_i32(loc_6, 87)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if bit_and(rt_sub_i32(loc_6, 65), 255) > 25 then
							desired = 3
							break
						end
						loc_5 = rt_sub_i32(loc_6, 55)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					if rt_ge_i32(bit_and(loc_5, 255), loc_10) then
						break
					end
					FUNC_LIST[672](loc_8, loc_11, rt_i64_ZERO, loc_12, rt_i64_ZERO)
					loc_6 = 1
					while true do
						if rt_ne_i64(rt_load_i64(memory_at_0, loc_8 + 8), rt_i64_ZERO) then
							break
						end
						loc_13 = rt_mul_i64(loc_11, loc_12)
						loc_14 = rt_bit_and_i64(rt_extend_i64_u32(loc_5), rt_i64_from_u32(255, 0))
						if rt_gt_u64(loc_13, rt_bit_xor_i64(loc_14, rt_i64_from_u32(4294967295, 4294967295))) then
							break
						end
						loc_12 = rt_add_i64(loc_13, loc_14)
						loc_9 = 1
						loc_6 = loc_2
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_4 = rt_add_i32(loc_4, 1)
					loc_2 = loc_6
					desired = 2
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if loc_1 ~= 0 then
				while true do
					rt_store_i32(memory_at_0, loc_1, (if loc_9 ~= 0 then loc_4 else loc_0))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				while true do
					if loc_2 ~= 0 then
						while true do
							reg_0 = FUNC_LIST[612]()
							rt_store_i32(memory_at_0, reg_0, 68)
							loc_11 = rt_bit_and_i64(loc_3, rt_i64_ONE)
							loc_7 = (if rt_eq_i64(loc_11, rt_i64_ZERO) then loc_7 else 0)
							loc_12 = loc_3
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					if rt_gt_u64(loc_3, loc_12) then
						desired = 2
						break
					end
					loc_11 = rt_bit_and_i64(loc_3, rt_i64_ONE)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if rt_wrap_i32_i64(loc_11) ~= 0 then
						break
					end
					if loc_7 ~= 0 then
						break
					end
					reg_0 = FUNC_LIST[612]()
					rt_store_i32(memory_at_0, reg_0, 68)
					loc_3 = rt_sub_i64(loc_3, rt_i64_ONE)
					desired = 1
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if rt_ge_u64(loc_3, loc_12) then
					break
				end
				reg_0 = FUNC_LIST[612]()
				rt_store_i32(memory_at_0, reg_0, 68)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_11 = rt_extend_i64_i32(loc_7)
			loc_3 = rt_sub_i64(rt_bit_xor_i64(loc_11, loc_12), loc_11)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_8, 16)
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[780] = --[[ tan ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local reg_0
	local desired
	while true do
		loc_1 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_1
		while true do
			loc_2 = bit_and(rt_wrap_i32_i64(rt_shr_u64(rt_reinterpret_i64_f64(loc_0), rt_i64_from_u32(32, 0))), 2147483647)
			if loc_2 <= 1072243195 then
				while true do
					if loc_2 < 1044381696 then
						desired = 1
						break
					end
					reg_0 = FUNC_LIST[781](loc_0, 0e0, 0)
					loc_0 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if loc_2 >= 2146435072 then
				while true do
					loc_0 = (loc_0 - loc_0)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[706](loc_0, loc_1)
			loc_2 = reg_0
			reg_0 = FUNC_LIST[781](rt_load_f64(memory_at_0, loc_1), rt_load_f64(memory_at_0, loc_1 + 8), bit_and(loc_2, 1))
			loc_0 = reg_0
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_1, 16)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[781] = --[[ __tan ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0.0
	local loc_4 = 0.0
	local loc_5 = 0.0
	local loc_6 = rt_i64_ZERO
	local loc_7 = 0
	local loc_8 = 0
	local reg_0
	local desired
	while true do
		loc_6 = rt_reinterpret_i64_f64(loc_0)
		loc_7 = (if rt_lt_u64(rt_bit_and_i64(loc_6, rt_i64_from_u32(0, 2147483640)), rt_i64_from_u32(1, 1072010279)) then 1 else 0)
		if loc_7 ~= 0 then
			while true do
				reg_0 = loc_1
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				loc_8 = (if rt_ge_i64(loc_6, rt_i64_ZERO) then 1 else 0)
				loc_0 = ((7.853981633974483e-1 - math_abs(loc_0)) + (3.061616997868383e-17 - (if loc_8 ~= 0 then loc_1 else rt_neg_f64(loc_1))))
				reg_0 = 0e0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_1 = reg_0
		loc_4 = (loc_0 * loc_0)
		loc_5 = (loc_0 * loc_4)
		loc_3 = (loc_4 * loc_4)
		loc_4 = ((loc_5 * 3.333333333333341e-1) + ((loc_4 * ((loc_5 * (((loc_3 * ((loc_3 * ((loc_3 * ((loc_3 * ((loc_3 * -1.8558637485527546e-5) + 7.817944429395571e-5)) + 5.880412408202641e-4)) + 3.5920791075913124e-3)) + 2.1869488294859542e-2)) + 1.3333333333320124e-1) + (loc_4 * ((loc_3 * ((loc_3 * ((loc_3 * ((loc_3 * ((loc_3 * 2.590730518636337e-5) + 7.140724913826082e-5)) + 2.464631348184699e-4)) + 1.4562094543252903e-3)) + 8.8632398235993e-3)) + 5.396825397622605e-2)))) + loc_1)) + loc_1))
		loc_3 = (loc_0 + loc_4)
		if loc_7 == 0 then
			while true do
				loc_1 = rt_convert_f64_i32(rt_sub_i32(1, rt_shl_i32(loc_2, 1)))
				loc_3 = (loc_0 + (loc_4 - ((loc_3 * loc_3) / (loc_3 + loc_1))))
				loc_3 = (loc_1 - (loc_3 + loc_3))
				reg_0 = (if loc_8 ~= 0 then loc_3 else rt_neg_f64(loc_3))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		if loc_2 ~= 0 then
			while true do
				loc_1 = (-1e0 / loc_3)
				reg_0 = loc_1
				loc_1 = rt_reinterpret_f64_i64(rt_bit_and_i64(rt_reinterpret_i64_f64(loc_1), rt_i64_from_u32(0, 4294967295)))
				loc_3 = rt_reinterpret_f64_i64(rt_bit_and_i64(rt_reinterpret_i64_f64(loc_3), rt_i64_from_u32(0, 4294967295)))
				reg_0 = ((reg_0 * ((loc_1 * (loc_4 - (loc_3 - loc_0))) + ((loc_1 * loc_3) + 1e0))) + loc_1)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		else
			while true do
				reg_0 = loc_3
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_3 = reg_0
		reg_0 = loc_3
		break
	end
	return reg_0
end
FUNC_LIST[782] = --[[ tanh ]] function(loc_0)
	local loc_1 = 0.0
	local loc_2 = rt_i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		while true do
			loc_1 = math_abs(loc_0)
			loc_2 = rt_reinterpret_i64_f64(loc_1)
			if rt_ge_u64(loc_2, rt_i64_from_u32(0, 1071748075)) then
				while true do
					if rt_ge_u64(loc_2, rt_i64_from_u32(0, 1077149697)) then
						while true do
							loc_1 = ((-0e0 / loc_1) + 1e0)
							desired = 1
							break
						end
						if desired then
							break
						end
					end
					reg_2 = FUNC_LIST[711]((loc_1 + loc_1))
					loc_1 = (1e0 - (2e0 / (reg_2 + 2e0)))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_ge_u64(loc_2, rt_i64_from_u32(0, 1070618799)) then
				while true do
					reg_0 = FUNC_LIST[711]((loc_1 + loc_1))
					loc_1 = reg_0
					loc_1 = (loc_1 / (loc_1 + 2e0))
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_lt_u64(loc_2, rt_i64_from_u32(0, 1048576)) then
				break
			end
			reg_0 = FUNC_LIST[711]((loc_1 * -2e0))
			loc_1 = reg_0
			loc_1 = (rt_neg_f64(loc_1) / (loc_1 + 2e0))
			break
		end
		reg_0 = (if rt_lt_i64(rt_reinterpret_i64_f64(loc_0), rt_i64_ZERO) then rt_neg_f64(loc_1) else loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[783] = --[[ tolower ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = (if rt_sub_i32(loc_0, 65) < 26 then bit_or(loc_0, 32) else loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[784] = --[[ toupper ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = (if rt_sub_i32(loc_0, 97) < 26 then bit_and(loc_0, 95) else loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[785] = --[[ sn_write ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local reg_0
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 84)
		loc_5 = rt_load_i32(memory_at_0, loc_3)
		loc_4 = rt_load_i32(memory_at_0, loc_3 + 4)
		loc_7 = rt_load_i32(memory_at_0, loc_0 + 28)
		loc_6 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0 + 20), loc_7)
		loc_6 = (if loc_4 < loc_6 then loc_4 else loc_6)
		if loc_6 ~= 0 then
			while true do
				reg_0 = FUNC_LIST[609](loc_5, loc_7, loc_6)
				loc_5 = rt_add_i32(loc_6, rt_load_i32(memory_at_0, loc_3))
				rt_store_i32(memory_at_0, loc_3, loc_5)
				loc_4 = rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 4), loc_6)
				rt_store_i32(memory_at_0, loc_3 + 4, loc_4)
				break
			end
		end
		loc_4 = (if loc_2 > loc_4 then loc_4 else loc_2)
		if loc_4 ~= 0 then
			while true do
				reg_0 = FUNC_LIST[609](loc_5, loc_1, loc_4)
				loc_5 = rt_add_i32(loc_4, rt_load_i32(memory_at_0, loc_3))
				rt_store_i32(memory_at_0, loc_3, loc_5)
				rt_store_i32(memory_at_0, loc_3 + 4, rt_sub_i32(rt_load_i32(memory_at_0, loc_3 + 4), loc_4))
				break
			end
		end
		rt_store_i32_n8(memory_at_0, loc_5, 0)
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 44)
		rt_store_i32(memory_at_0, loc_0 + 28, loc_3)
		rt_store_i32(memory_at_0, loc_0 + 20, loc_3)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[786] = --[[ vfprintf ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[787](loc_0, loc_1, loc_2)
		break
	end
	return reg_0
end
FUNC_LIST[787] = --[[ __vfprintf_internal ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local reg_1
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 208)
		GLOBAL_LIST[0].value = loc_3
		rt_store_i32(memory_at_0, loc_3 + 204, loc_2)
		reg_0 = FUNC_LIST[611](rt_add_i32(loc_3, 160), 0, 40)
		rt_store_i32(memory_at_0, loc_3 + 200, rt_load_i32(memory_at_0, loc_3 + 204))
		while true do
			reg_0 = FUNC_LIST[788](0, loc_1, rt_add_i32(loc_3, 200), rt_add_i32(loc_3, 80), rt_add_i32(loc_3, 160))
			if rt_lt_i32(reg_0, 0) then
				while true do
					loc_1 = 4294967295
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if rt_lt_i32(rt_load_i32(memory_at_0, loc_0 + 76), 0) then
				while true do
					reg_0 = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = FUNC_LIST[622](loc_0)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_5 = (if reg_0 == 0 then 1 else 0)
			loc_6 = rt_load_i32(memory_at_0, loc_0)
			rt_store_i32(memory_at_0, loc_0, bit_and(loc_6, 4294967263))
			while true do
				while true do
					while true do
						if rt_load_i32(memory_at_0, loc_0 + 48) == 0 then
							while true do
								rt_store_i32(memory_at_0, loc_0 + 48, 80)
								rt_store_i32(memory_at_0, loc_0 + 28, 0)
								rt_store_i64(memory_at_0, loc_0 + 16, rt_i64_ZERO)
								loc_4 = rt_load_i32(memory_at_0, loc_0 + 44)
								rt_store_i32(memory_at_0, loc_0 + 44, loc_3)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						if rt_load_i32(memory_at_0, loc_0 + 16) ~= 0 then
							desired = 3
							break
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_2 = 4294967295
					reg_1 = FUNC_LIST[624](loc_0)
					reg_0 = loc_2
					if reg_1 ~= 0 then
						desired = 2
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[788](loc_0, loc_1, rt_add_i32(loc_3, 200), rt_add_i32(loc_3, 80), rt_add_i32(loc_3, 160))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_2 = reg_0
			loc_1 = bit_and(loc_6, 32)
			if loc_4 ~= 0 then
				while true do
					reg_0 = TABLE_LIST[0].data[rt_load_i32(memory_at_0, loc_0 + 36)](loc_0, 0, 0)
					rt_store_i32(memory_at_0, loc_0 + 48, 0)
					rt_store_i32(memory_at_0, loc_0 + 44, loc_4)
					rt_store_i32(memory_at_0, loc_0 + 28, 0)
					loc_4 = rt_load_i32(memory_at_0, loc_0 + 20)
					rt_store_i64(memory_at_0, loc_0 + 16, rt_i64_ZERO)
					reg_0 = (if loc_4 ~= 0 then loc_2 else 4294967295)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			else
				while true do
					reg_0 = loc_2
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = reg_0
			loc_4 = rt_load_i32(memory_at_0, loc_0)
			rt_store_i32(memory_at_0, loc_0, bit_or(loc_1, loc_4))
			loc_1 = (if bit_and(loc_4, 32) ~= 0 then 4294967295 else loc_2)
			if loc_5 ~= 0 then
				break
			end
			FUNC_LIST[623](loc_0)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 208)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[788] = --[[ printf_core ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = 0
	local loc_22 = 0
	local loc_23 = rt_i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local reg_3
	local reg_4
	local reg_5
	local desired
	local br_map = {}
	while true do
		loc_6 = rt_add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_6
		rt_store_i32(memory_at_0, loc_6 + 60, loc_1)
		loc_22 = rt_add_i32(loc_6, 39)
		loc_16 = rt_add_i32(loc_6, 40)
		while true do
			while true do
				while true do
					while true do
						while true do
							loc_5 = 0
							while true do
								loc_11 = loc_1
								if rt_lt_i32(bit_xor(loc_12, 2147483647), loc_5) then
									desired = 4
									break
								end
								loc_12 = rt_add_i32(loc_5, loc_12)
								while true do
									while true do
										while true do
											while true do
												loc_5 = loc_1
												loc_10 = rt_load_i32_u8(memory_at_0, loc_5)
												if loc_10 ~= 0 then
													while true do
														while true do
															while true do
																while true do
																	loc_10 = bit_and(loc_10, 255)
																	if loc_10 == 0 then
																		while true do
																			loc_1 = loc_5
																			desired = 14
																			break
																		end
																		if desired then
																			if desired == 14 then
																				desired = nil
																			end
																			break
																		end
																	end
																	if loc_10 ~= 37 then
																		desired = 13
																		break
																	end
																	loc_10 = loc_5
																	while true do
																		if rt_load_i32_u8(memory_at_0, loc_10 + 1) ~= 37 then
																			while true do
																				loc_1 = loc_10
																				desired = 14
																				break
																			end
																			if desired then
																				if desired == 15 then
																					desired = nil
																					continue
																				end
																				break
																			end
																		end
																		loc_5 = rt_add_i32(loc_5, 1)
																		loc_7 = rt_load_i32_u8(memory_at_0, loc_10 + 2)
																		loc_1 = rt_add_i32(loc_10, 2)
																		loc_10 = loc_1
																		if loc_7 == 37 then
																			continue
																		end
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																		end
																		break
																	end
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																loc_5 = rt_sub_i32(loc_5, loc_11)
																loc_10 = bit_xor(loc_12, 2147483647)
																if rt_gt_i32(loc_5, loc_10) then
																	desired = 4
																	break
																end
																if loc_0 ~= 0 then
																	while true do
																		FUNC_LIST[789](loc_0, loc_11, loc_5)
																		break
																	end
																	if desired then
																		if desired == 13 then
																			desired = nil
																		end
																		break
																	end
																end
																if loc_5 ~= 0 then
																	desired = 6
																	break
																end
																rt_store_i32(memory_at_0, loc_6 + 60, loc_1)
																loc_5 = rt_add_i32(loc_1, 1)
																loc_13 = 4294967295
																while true do
																	loc_7 = rt_sub_i32(rt_load_i32_i8(memory_at_0, loc_1 + 1), 48)
																	if loc_7 > 9 then
																		break
																	end
																	if rt_load_i32_u8(memory_at_0, loc_1 + 2) ~= 36 then
																		break
																	end
																	loc_5 = rt_add_i32(loc_1, 3)
																	loc_17 = 1
																	loc_13 = loc_7
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																rt_store_i32(memory_at_0, loc_6 + 60, loc_5)
																loc_9 = 0
																while true do
																	loc_18 = rt_load_i32_i8(memory_at_0, loc_5)
																	loc_1 = rt_sub_i32(loc_18, 32)
																	if loc_1 > 31 then
																		while true do
																			loc_7 = loc_5
																			desired = 14
																			break
																		end
																		if desired then
																			if desired == 14 then
																				desired = nil
																			end
																			break
																		end
																	end
																	loc_7 = loc_5
																	loc_1 = rt_shl_i32(1, loc_1)
																	if bit_and(loc_1, 75913) == 0 then
																		break
																	end
																	while true do
																		loc_7 = rt_add_i32(loc_5, 1)
																		rt_store_i32(memory_at_0, loc_6 + 60, loc_7)
																		loc_9 = bit_or(loc_1, loc_9)
																		loc_18 = rt_load_i32_i8(memory_at_0, loc_5 + 1)
																		loc_1 = rt_sub_i32(loc_18, 32)
																		if loc_1 >= 32 then
																			desired = 14
																			break
																		end
																		loc_5 = loc_7
																		loc_1 = rt_shl_i32(1, loc_1)
																		if bit_and(loc_1, 75913) ~= 0 then
																			continue
																		end
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																		end
																		break
																	end
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																while true do
																	if loc_18 == 42 then
																		while true do
																			while true do
																				while true do
																					loc_5 = rt_sub_i32(rt_load_i32_i8(memory_at_0, loc_7 + 1), 48)
																					if loc_5 > 9 then
																						break
																					end
																					if rt_load_i32_u8(memory_at_0, loc_7 + 2) ~= 36 then
																						break
																					end
																					loc_1 = rt_add_i32(loc_7, 3)
																					loc_17 = 1
																					while true do
																						if loc_0 == 0 then
																							while true do
																								rt_store_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_5, 2), loc_4), 10)
																								reg_0 = 0
																								desired = 18
																								break
																							end
																							if desired then
																								if desired == 18 then
																									desired = nil
																								end
																								break
																							end
																						end
																						reg_0 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_5, 3), loc_3))
																						break
																					end
																					if desired then
																						if desired == 17 then
																							desired = nil
																						end
																						break
																					end
																					desired = 16
																					break
																				end
																				if desired then
																					if desired == 16 then
																						desired = nil
																					end
																					break
																				end
																				if loc_17 ~= 0 then
																					desired = 10
																					break
																				end
																				loc_1 = rt_add_i32(loc_7, 1)
																				if loc_0 == 0 then
																					while true do
																						rt_store_i32(memory_at_0, loc_6 + 60, loc_1)
																						loc_17 = 0
																						loc_15 = 0
																						desired = 14
																						break
																					end
																					if desired then
																						if desired == 16 then
																							desired = nil
																						end
																						break
																					end
																				end
																				loc_5 = rt_load_i32(memory_at_0, loc_2)
																				rt_store_i32(memory_at_0, loc_2, rt_add_i32(loc_5, 4))
																				loc_17 = 0
																				reg_0 = rt_load_i32(memory_at_0, loc_5)
																				break
																			end
																			if desired then
																				break
																			end
																			loc_15 = reg_0
																			rt_store_i32(memory_at_0, loc_6 + 60, loc_1)
																			if rt_ge_i32(loc_15, 0) then
																				desired = 14
																				break
																			end
																			loc_15 = rt_sub_i32(0, loc_15)
																			loc_9 = bit_or(loc_9, 8192)
																			desired = 14
																			break
																		end
																		if desired then
																			if desired == 14 then
																				desired = nil
																			end
																			break
																		end
																	end
																	reg_0 = FUNC_LIST[790](rt_add_i32(loc_6, 60))
																	loc_15 = reg_0
																	if rt_lt_i32(loc_15, 0) then
																		desired = 4
																		break
																	end
																	loc_1 = rt_load_i32(memory_at_0, loc_6 + 60)
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																loc_5 = 0
																loc_8 = 4294967295
																while true do
																	reg_0 = 0
																	if rt_load_i32_u8(memory_at_0, loc_1) ~= 46 then
																		break
																	end
																	if rt_load_i32_u8(memory_at_0, loc_1 + 1) == 42 then
																		while true do
																			while true do
																				while true do
																					loc_7 = rt_sub_i32(rt_load_i32_i8(memory_at_0, loc_1 + 2), 48)
																					if loc_7 > 9 then
																						break
																					end
																					if rt_load_i32_u8(memory_at_0, loc_1 + 3) ~= 36 then
																						break
																					end
																					loc_1 = rt_add_i32(loc_1, 4)
																					while true do
																						if loc_0 == 0 then
																							while true do
																								rt_store_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_7, 2), loc_4), 10)
																								reg_0 = 0
																								desired = 18
																								break
																							end
																							if desired then
																								if desired == 18 then
																									desired = nil
																								end
																								break
																							end
																						end
																						reg_0 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_7, 3), loc_3))
																						break
																					end
																					if desired then
																						if desired == 17 then
																							desired = nil
																						end
																						break
																					end
																					desired = 16
																					break
																				end
																				if desired then
																					if desired == 16 then
																						desired = nil
																					end
																					break
																				end
																				if loc_17 ~= 0 then
																					desired = 10
																					break
																				end
																				loc_1 = rt_add_i32(loc_1, 2)
																				reg_0 = 0
																				if loc_0 == 0 then
																					break
																				end
																				loc_7 = rt_load_i32(memory_at_0, loc_2)
																				rt_store_i32(memory_at_0, loc_2, rt_add_i32(loc_7, 4))
																				reg_0 = rt_load_i32(memory_at_0, loc_7)
																				break
																			end
																			if desired then
																				break
																			end
																			loc_8 = reg_0
																			rt_store_i32(memory_at_0, loc_6 + 60, loc_1)
																			reg_0 = (if rt_ge_i32(loc_8, 0) then 1 else 0)
																			desired = 14
																			break
																		end
																		if desired then
																			if desired == 14 then
																				desired = nil
																			end
																			break
																		end
																	end
																	rt_store_i32(memory_at_0, loc_6 + 60, rt_add_i32(loc_1, 1))
																	reg_0 = FUNC_LIST[790](rt_add_i32(loc_6, 60))
																	loc_8 = reg_0
																	loc_1 = rt_load_i32(memory_at_0, loc_6 + 60)
																	reg_0 = 1
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																loc_20 = reg_0
																while true do
																	loc_7 = loc_5
																	loc_14 = 28
																	loc_18 = loc_1
																	loc_5 = rt_load_i32_i8(memory_at_0, loc_18)
																	if rt_sub_i32(loc_5, 123) < 4294967238 then
																		desired = 3
																		break
																	end
																	loc_1 = rt_add_i32(loc_1, 1)
																	loc_5 = rt_load_i32_u8(memory_at_0, rt_add_i32(rt_add_i32(rt_mul_i32(loc_7, 58), loc_5), 29503))
																	if rt_sub_i32(loc_5, 1) < 8 then
																		continue
																	end
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																rt_store_i32(memory_at_0, loc_6 + 60, loc_1)
																while true do
																	if loc_5 ~= 27 then
																		while true do
																			if loc_5 == 0 then
																				desired = 3
																				break
																			end
																			if rt_ge_i32(loc_13, 0) then
																				while true do
																					if loc_0 == 0 then
																						while true do
																							rt_store_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_13, 2), loc_4), loc_5)
																							desired = 5
																							break
																						end
																						if desired then
																							break
																						end
																					end
																					rt_store_i64(memory_at_0, loc_6 + 48, rt_load_i64(memory_at_0, rt_add_i32(rt_shl_i32(loc_13, 3), loc_3)))
																					desired = 14
																					break
																				end
																				if desired then
																					break
																				end
																			end
																			if loc_0 == 0 then
																				desired = 7
																				break
																			end
																			FUNC_LIST[791](rt_add_i32(loc_6, 48), loc_5, loc_2)
																			desired = 14
																			break
																		end
																		if desired then
																			if desired == 14 then
																				desired = nil
																			end
																			break
																		end
																	end
																	if rt_ge_i32(loc_13, 0) then
																		desired = 3
																		break
																	end
																	loc_5 = 0
																	if loc_0 == 0 then
																		desired = 6
																		break
																	end
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																if bit_and(rt_load_i32_u8(memory_at_0, loc_0), 32) ~= 0 then
																	desired = 2
																	break
																end
																loc_21 = bit_and(loc_9, 4294901759)
																loc_9 = (if bit_and(loc_9, 8192) ~= 0 then loc_21 else loc_9)
																loc_13 = 0
																loc_19 = 1389
																loc_14 = loc_16
																while true do
																	reg_0 = loc_0
																	reg_1 = 32
																	reg_2 = loc_15
																	while true do
																		while true do
																			while true do
																				while true do
																					while true do
																						while true do
																							while true do
																								while true do
																									while true do
																										while true do
																											while true do
																												while true do
																													while true do
																														while true do
																															while true do
																																while true do
																																	loc_5 = rt_load_i32_i8(memory_at_0, loc_18)
																																	loc_5 = (if loc_7 ~= 0 then (if bit_and(loc_5, 15) == 3 then bit_and(loc_5, 4294967251) else loc_5) else loc_5)
																																	if not br_map[1] then
																																		br_map[1] = (function()
																																			return { [0] = 4, 22, 22, 22, 22, 22, 22, 22, 22, 16, 22, 9, 6, 16, 16, 16, 22, 6, 22, 22, 22, 22, 2, 5, 3, 22, 22, 10, 22, 1, 22, 22, 4, }
																																		end)()
																																	end
																																	temp = br_map[1][rt_sub_i32(loc_5, 88)] or 0
																																	if temp < 5 then
																																		if temp < 2 then
																																			if temp < 1 then
																																				break
																																			else
																																				desired = 29
																																				break
																																			end
																																		elseif temp > 2 then
																																			if temp < 4 then
																																				desired = 27
																																				break
																																			else
																																				desired = 26
																																				break
																																			end
																																		else
																																			desired = 28
																																			break
																																		end
																																	elseif temp > 5 then
																																		if temp < 10 then
																																			if temp < 9 then
																																				desired = 24
																																				break
																																			else
																																				desired = 21
																																				break
																																			end
																																		elseif temp > 10 then
																																			if temp < 22 then
																																				desired = 14
																																				break
																																			else
																																				desired = 8
																																				break
																																			end
																																		else
																																			desired = 20
																																			break
																																		end
																																	else
																																		desired = 25
																																		break
																																	end
																																end
																																if desired then
																																	if desired == 29 then
																																		desired = nil
																																	end
																																	break
																																end
																																while true do
																																	if not br_map[2] then
																																		br_map[2] = (function()
																																			return { [0] = 16, 22, 11, 22, 16, 16, 16, }
																																		end)()
																																	end
																																	temp = br_map[2][rt_sub_i32(loc_5, 65)] or 0
																																	if temp < 16 then
																																		if temp < 11 then
																																			break
																																		else
																																			desired = 19
																																			break
																																		end
																																	elseif temp > 16 then
																																		desired = 8
																																		break
																																	else
																																		desired = 14
																																		break
																																	end
																																end
																																if desired then
																																	if desired == 29 then
																																		desired = nil
																																	end
																																	break
																																end
																																if loc_5 == 83 then
																																	desired = 18
																																	break
																																end
																																desired = 8
																																break
																															end
																															if desired then
																																if desired == 28 then
																																	desired = nil
																																end
																																break
																															end
																															loc_23 = rt_load_i64(memory_at_0, loc_6 + 48)
																															reg_3 = 1389
																															desired = 23
																															break
																														end
																														if desired then
																															if desired == 27 then
																																desired = nil
																															end
																															break
																														end
																														loc_5 = 0
																														while true do
																															while true do
																																while true do
																																	while true do
																																		while true do
																																			while true do
																																				while true do
																																					if not br_map[3] then
																																						br_map[3] = (function()
																																							return { [0] = 0, 1, 2, 3, 4, 28, 5, 6, }
																																						end)()
																																					end
																																					temp = br_map[3][bit_and(loc_7, 255)] or 28
																																					if temp < 4 then
																																						if temp < 2 then
																																							if temp < 1 then
																																								break
																																							else
																																								desired = 33
																																								break
																																							end
																																						elseif temp > 2 then
																																							desired = 31
																																							break
																																						else
																																							desired = 32
																																							break
																																						end
																																					elseif temp > 4 then
																																						if temp < 6 then
																																							desired = 29
																																							break
																																						elseif temp > 6 then
																																							desired = 6
																																							break
																																						else
																																							desired = 28
																																							break
																																						end
																																					else
																																						desired = 30
																																						break
																																					end
																																				end
																																				if desired then
																																					if desired == 33 then
																																						desired = nil
																																					end
																																					break
																																				end
																																				rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_6 + 48), loc_12)
																																				desired = 6
																																				break
																																			end
																																			if desired then
																																				if desired == 32 then
																																					desired = nil
																																				end
																																				break
																																			end
																																			rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_6 + 48), loc_12)
																																			desired = 6
																																			break
																																		end
																																		if desired then
																																			if desired == 31 then
																																				desired = nil
																																			end
																																			break
																																		end
																																		rt_store_i64(memory_at_0, rt_load_i32(memory_at_0, loc_6 + 48), rt_extend_i64_i32(loc_12))
																																		desired = 6
																																		break
																																	end
																																	if desired then
																																		if desired == 30 then
																																			desired = nil
																																		end
																																		break
																																	end
																																	rt_store_i32_n16(memory_at_0, rt_load_i32(memory_at_0, loc_6 + 48), loc_12)
																																	desired = 6
																																	break
																																end
																																if desired then
																																	if desired == 29 then
																																		desired = nil
																																	end
																																	break
																																end
																																rt_store_i32_n8(memory_at_0, rt_load_i32(memory_at_0, loc_6 + 48), loc_12)
																																desired = 6
																																break
																															end
																															if desired then
																																if desired == 28 then
																																	desired = nil
																																end
																																break
																															end
																															rt_store_i32(memory_at_0, rt_load_i32(memory_at_0, loc_6 + 48), loc_12)
																															desired = 6
																															break
																														end
																														if desired then
																															if desired == 27 then
																																desired = nil
																															end
																															break
																														end
																														rt_store_i64(memory_at_0, rt_load_i32(memory_at_0, loc_6 + 48), rt_extend_i64_i32(loc_12))
																														desired = 6
																														break
																													end
																													if desired then
																														if desired == 26 then
																															desired = nil
																														end
																														break
																													end
																													loc_8 = (if loc_8 <= 8 then 8 else loc_8)
																													loc_9 = bit_or(loc_9, 8)
																													loc_5 = 120
																													break
																												end
																												if desired then
																													if desired == 25 then
																														desired = nil
																													end
																													break
																												end
																												loc_23 = rt_load_i64(memory_at_0, loc_6 + 48)
																												reg_3 = FUNC_LIST[792](loc_23, loc_16, bit_and(loc_5, 32))
																												loc_11 = reg_3
																												if rt_eq_i64(loc_23, rt_i64_ZERO) then
																													desired = 22
																													break
																												end
																												if bit_and(loc_9, 8) == 0 then
																													desired = 22
																													break
																												end
																												loc_19 = rt_add_i32(rt_shr_u32(loc_5, 4), 1389)
																												loc_13 = 2
																												desired = 22
																												break
																											end
																											if desired then
																												if desired == 24 then
																													desired = nil
																												end
																												break
																											end
																											loc_23 = rt_load_i64(memory_at_0, loc_6 + 48)
																											reg_3 = FUNC_LIST[793](loc_23, loc_16)
																											loc_11 = reg_3
																											if bit_and(loc_9, 8) == 0 then
																												desired = 22
																												break
																											end
																											loc_5 = rt_sub_i32(loc_16, loc_11)
																											loc_8 = (if rt_lt_i32(loc_5, loc_8) then loc_8 else rt_add_i32(loc_5, 1))
																											desired = 22
																											break
																										end
																										if desired then
																											if desired == 23 then
																												desired = nil
																											end
																											break
																										end
																										loc_23 = rt_load_i64(memory_at_0, loc_6 + 48)
																										if rt_lt_i64(loc_23, rt_i64_ZERO) then
																											while true do
																												loc_23 = rt_sub_i64(rt_i64_ZERO, loc_23)
																												rt_store_i64(memory_at_0, loc_6 + 48, loc_23)
																												loc_13 = 1
																												reg_3 = 1389
																												desired = 23
																												break
																											end
																											if desired then
																												if desired == 23 then
																													desired = nil
																												end
																												break
																											end
																										end
																										if bit_and(loc_9, 2048) ~= 0 then
																											while true do
																												loc_13 = 1
																												reg_3 = 1390
																												desired = 23
																												break
																											end
																											if desired then
																												if desired == 23 then
																													desired = nil
																												end
																												break
																											end
																										end
																										loc_13 = bit_and(loc_9, 1)
																										reg_3 = (if loc_13 ~= 0 then 1391 else 1389)
																										break
																									end
																									if desired then
																										if desired == 22 then
																											desired = nil
																										end
																										break
																									end
																									loc_19 = reg_3
																									reg_3 = FUNC_LIST[794](loc_23, loc_16)
																									loc_11 = reg_3
																									break
																								end
																								if desired then
																									if desired == 21 then
																										desired = nil
																									end
																									break
																								end
																								if bit_and((if rt_lt_i32(loc_8, 0) then 1 else 0), loc_20) ~= 0 then
																									desired = 4
																									break
																								end
																								loc_9 = (if loc_20 ~= 0 then bit_and(loc_9, 4294901759) else loc_9)
																								while true do
																									if rt_ne_i64(loc_23, rt_i64_ZERO) then
																										break
																									end
																									if loc_8 ~= 0 then
																										break
																									end
																									loc_11 = loc_16
																									loc_8 = 0
																									desired = 8
																									break
																								end
																								if desired then
																									if desired == 21 then
																										desired = nil
																									end
																									break
																								end
																								loc_5 = rt_add_i32((if rt_eq_i64(loc_23, rt_i64_ZERO) then 1 else 0), rt_sub_i32(loc_16, loc_11))
																								loc_8 = (if rt_lt_i32(loc_5, loc_8) then loc_8 else loc_5)
																								desired = 8
																								break
																							end
																							if desired then
																								if desired == 20 then
																									desired = nil
																								end
																								break
																							end
																							loc_5 = rt_load_i32_u8(memory_at_0, loc_6 + 48)
																							desired = 9
																							break
																						end
																						if desired then
																							if desired == 19 then
																								desired = nil
																							end
																							break
																						end
																						loc_5 = rt_load_i32(memory_at_0, loc_6 + 48)
																						loc_11 = (if loc_5 ~= 0 then loc_5 else 5748)
																						reg_3 = FUNC_LIST[795](loc_11, (if loc_8 >= 2147483647 then 2147483647 else loc_8))
																						loc_5 = reg_3
																						loc_14 = rt_add_i32(loc_5, loc_11)
																						if rt_ge_i32(loc_8, 0) then
																							while true do
																								loc_9 = loc_21
																								loc_8 = loc_5
																								desired = 8
																								break
																							end
																							if desired then
																								if desired == 19 then
																									desired = nil
																								end
																								break
																							end
																						end
																						loc_9 = loc_21
																						loc_8 = loc_5
																						if rt_load_i32_u8(memory_at_0, loc_14) ~= 0 then
																							desired = 4
																							break
																						end
																						desired = 8
																						break
																					end
																					if desired then
																						if desired == 18 then
																							desired = nil
																						end
																						break
																					end
																					loc_23 = rt_load_i64(memory_at_0, loc_6 + 48)
																					if rt_ne_i64(loc_23, rt_i64_ZERO) then
																						desired = 17
																						break
																					end
																					loc_5 = 0
																					desired = 9
																					break
																				end
																				if desired then
																					if desired == 17 then
																						desired = nil
																					end
																					break
																				end
																				if loc_8 ~= 0 then
																					while true do
																						reg_3 = rt_load_i32(memory_at_0, loc_6 + 48)
																						desired = 16
																						break
																					end
																					if desired then
																						if desired == 17 then
																							desired = nil
																						end
																						break
																					end
																				end
																				FUNC_LIST[796](loc_0, 32, loc_15, 0, loc_9)
																				reg_3 = 0
																				desired = 15
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																				end
																				break
																			end
																			rt_store_i32(memory_at_0, loc_6 + 12, 0)
																			rt_store_i64_n32(memory_at_0, loc_6 + 8, loc_23)
																			rt_store_i32(memory_at_0, loc_6 + 48, rt_add_i32(loc_6, 8))
																			loc_8 = 4294967295
																			reg_3 = rt_add_i32(loc_6, 8)
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																		loc_11 = reg_3
																		loc_5 = 0
																		loc_10 = loc_11
																		while true do
																			while true do
																				loc_7 = rt_load_i32(memory_at_0, loc_10)
																				if loc_7 == 0 then
																					break
																				end
																				reg_3 = FUNC_LIST[797](rt_add_i32(loc_6, 4), loc_7)
																				loc_7 = reg_3
																				if rt_lt_i32(loc_7, 0) then
																					desired = 2
																					break
																				end
																				if rt_sub_i32(loc_8, loc_5) < loc_7 then
																					break
																				end
																				loc_10 = rt_add_i32(loc_10, 4)
																				loc_5 = rt_add_i32(loc_5, loc_7)
																				if loc_8 > loc_5 then
																					desired = 16
																					break
																				end
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																					continue
																				end
																				break
																			end
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																		loc_14 = 61
																		if rt_lt_i32(loc_5, 0) then
																			desired = 3
																			break
																		end
																		FUNC_LIST[796](loc_0, 32, loc_15, loc_5, loc_9)
																		loc_10 = 0
																		reg_3 = loc_10
																		if loc_5 == 0 then
																			break
																		end
																		while true do
																			while true do
																				loc_7 = rt_load_i32(memory_at_0, loc_11)
																				if loc_7 == 0 then
																					break
																				end
																				reg_5 = FUNC_LIST[797](rt_add_i32(loc_6, 4), loc_7)
																				loc_7 = reg_5
																				loc_10 = rt_add_i32(loc_10, loc_7)
																				if loc_5 < loc_10 then
																					break
																				end
																				FUNC_LIST[789](loc_0, rt_add_i32(loc_6, 4), loc_7)
																				loc_11 = rt_add_i32(loc_11, 4)
																				if loc_5 > loc_10 then
																					desired = 16
																					break
																				end
																				break
																			end
																			if desired then
																				if desired == 16 then
																					desired = nil
																					continue
																				end
																				break
																			end
																			break
																		end
																		if desired then
																			if desired == 15 then
																				desired = nil
																			end
																			break
																		end
																		reg_3 = loc_5
																		break
																	end
																	if desired then
																		if desired == 14 then
																			desired = nil
																		end
																		break
																	end
																	loc_10 = reg_3
																	FUNC_LIST[796](reg_0, reg_1, reg_2, loc_10, bit_xor(loc_9, 8192))
																	loc_5 = (if rt_lt_i32(loc_10, loc_15) then loc_15 else loc_10)
																	desired = 6
																	break
																end
																if desired then
																	if desired == 13 then
																		desired = nil
																	end
																	break
																end
																if bit_and((if rt_lt_i32(loc_8, 0) then 1 else 0), loc_20) ~= 0 then
																	desired = 4
																	break
																end
																loc_14 = 61
																reg_0 = FUNC_LIST[798](loc_0, rt_load_f64(memory_at_0, loc_6 + 48), loc_15, loc_8, loc_9, loc_5)
																loc_5 = reg_0
																if rt_ge_i32(loc_5, 0) then
																	desired = 6
																	break
																end
																desired = 3
																break
															end
															if desired then
																if desired == 12 then
																	desired = nil
																	continue
																end
																break
															end
															loc_10 = rt_load_i32_u8(memory_at_0, loc_5 + 1)
															loc_5 = rt_add_i32(loc_5, 1)
															continue
														end
														if desired then
															break
														end
														error("out of code bounds")
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												if loc_0 ~= 0 then
													desired = 1
													break
												end
												if loc_17 == 0 then
													desired = 7
													break
												end
												loc_5 = 1
												while true do
													loc_10 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_5, 2), loc_4))
													if loc_10 ~= 0 then
														while true do
															FUNC_LIST[791](rt_add_i32(rt_shl_i32(loc_5, 3), loc_3), loc_10, loc_2)
															loc_12 = 1
															loc_5 = rt_add_i32(loc_5, 1)
															if loc_5 ~= 10 then
																desired = 11
																break
															end
															desired = 1
															break
														end
														if desired then
															if desired == 11 then
																desired = nil
																continue
															end
															break
														end
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												if loc_5 >= 10 then
													while true do
														loc_12 = 1
														desired = 1
														break
													end
													if desired then
														if desired == 10 then
															desired = nil
														end
														break
													end
												end
												while true do
													if rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_5, 2), loc_4)) ~= 0 then
														desired = 10
														break
													end
													loc_12 = 1
													loc_5 = rt_add_i32(loc_5, 1)
													if loc_5 ~= 10 then
														continue
													end
													break
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												desired = 1
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_14 = 28
											desired = 3
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										rt_store_i32_n8(memory_at_0, loc_6 + 39, loc_5)
										loc_8 = 1
										loc_11 = loc_22
										loc_9 = loc_21
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_1 = rt_sub_i32(loc_14, loc_11)
									loc_18 = (if rt_lt_i32(loc_1, loc_8) then loc_8 else loc_1)
									if rt_gt_i32(loc_18, bit_xor(loc_13, 2147483647)) then
										desired = 4
										break
									end
									loc_14 = 61
									loc_7 = rt_add_i32(loc_13, loc_18)
									loc_5 = (if rt_lt_i32(loc_7, loc_15) then loc_15 else loc_7)
									if rt_lt_i32(loc_10, loc_5) then
										desired = 3
										break
									end
									FUNC_LIST[796](loc_0, 32, loc_5, loc_7, loc_9)
									FUNC_LIST[789](loc_0, loc_19, loc_13)
									FUNC_LIST[796](loc_0, 48, loc_5, loc_7, bit_xor(loc_9, 65536))
									FUNC_LIST[796](loc_0, 48, loc_18, loc_1, 0)
									FUNC_LIST[789](loc_0, loc_11, loc_1)
									FUNC_LIST[796](loc_0, 32, loc_5, loc_7, bit_xor(loc_9, 8192))
									loc_1 = rt_load_i32(memory_at_0, loc_6 + 60)
									desired = 6
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
										continue
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
									continue
								end
								break
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_12 = 0
						desired = 1
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_14 = 61
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				reg_0 = FUNC_LIST[612]()
				rt_store_i32(memory_at_0, reg_0, loc_14)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_12 = 4294967295
			break
		end
		GLOBAL_LIST[0].value = rt_sub_i32(loc_6, 4294967232)
		reg_0 = loc_12
		break
	end
	return reg_0
end
FUNC_LIST[789] = --[[ out ]] function(loc_0, loc_1, loc_2)
	local reg_0
	while true do
		if bit_and(rt_load_i32_u8(memory_at_0, loc_0), 32) == 0 then
			while true do
				reg_0 = FUNC_LIST[632](loc_1, loc_2, loc_0)
				break
			end
		end
		break
	end
end
FUNC_LIST[790] = --[[ getint ]] function(loc_0)
	local loc_1 = 0
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	local desired
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_0)
		loc_2 = rt_sub_i32(rt_load_i32_i8(memory_at_0, loc_3), 48)
		if loc_2 > 9 then
			while true do
				reg_0 = 0
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			loc_4 = 4294967295
			if loc_1 <= 214748364 then
				while true do
					loc_1 = rt_mul_i32(loc_1, 10)
					reg_0 = (if bit_xor(loc_1, 2147483647) < loc_2 then 4294967295 else rt_add_i32(loc_1, loc_2))
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			else
				while true do
					reg_0 = loc_4
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
						continue
					end
					break
				end
			end
			loc_4 = reg_0
			loc_2 = rt_add_i32(loc_3, 1)
			rt_store_i32(memory_at_0, loc_0, loc_2)
			loc_5 = rt_load_i32_i8(memory_at_0, loc_3 + 1)
			loc_1 = loc_4
			loc_3 = loc_2
			loc_2 = rt_sub_i32(loc_5, 48)
			if loc_2 < 10 then
				continue
			end
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[791] = --[[ pop_arg ]] function(loc_0, loc_1, loc_2)
	local desired
	local br_map = {}
	while true do
		while true do
			while true do
				while true do
					while true do
						while true do
							while true do
								while true do
									while true do
										while true do
											while true do
												while true do
													if not br_map[1] then
														br_map[1] = (function()
															return { [0] = 0, 8, 9, 10, 8, 9, 1, 2, 3, 4, 10, 9, 10, 10, 8, 9, 5, 6, }
														end)()
													end
													temp = br_map[1][rt_sub_i32(loc_1, 9)] or 7
													if temp < 5 then
														if temp < 2 then
															if temp < 1 then
																break
															else
																desired = 10
																break
															end
														elseif temp > 2 then
															if temp < 4 then
																desired = 8
																break
															else
																desired = 7
																break
															end
														else
															desired = 9
															break
														end
													elseif temp > 5 then
														if temp < 8 then
															if temp < 7 then
																desired = 5
																break
															else
																desired = 4
																break
															end
														elseif temp > 8 then
															if temp < 10 then
																desired = 2
																break
															else
																desired = 1
																break
															end
														else
															desired = 3
															break
														end
													else
														desired = 6
														break
													end
												end
												if desired then
													if desired == 10 then
														desired = nil
													end
													break
												end
												loc_1 = rt_load_i32(memory_at_0, loc_2)
												rt_store_i32(memory_at_0, loc_2, rt_add_i32(loc_1, 4))
												rt_store_i32(memory_at_0, loc_0, rt_load_i32(memory_at_0, loc_1))
												desired = 0
												break
											end
											if desired then
												if desired == 9 then
													desired = nil
												end
												break
											end
											loc_1 = rt_load_i32(memory_at_0, loc_2)
											rt_store_i32(memory_at_0, loc_2, rt_add_i32(loc_1, 4))
											rt_store_i64(memory_at_0, loc_0, rt_load_i64_i16(memory_at_0, loc_1))
											desired = 0
											break
										end
										if desired then
											if desired == 8 then
												desired = nil
											end
											break
										end
										loc_1 = rt_load_i32(memory_at_0, loc_2)
										rt_store_i32(memory_at_0, loc_2, rt_add_i32(loc_1, 4))
										rt_store_i64(memory_at_0, loc_0, rt_load_i64_u16(memory_at_0, loc_1))
										desired = 0
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
										end
										break
									end
									loc_1 = rt_load_i32(memory_at_0, loc_2)
									rt_store_i32(memory_at_0, loc_2, rt_add_i32(loc_1, 4))
									rt_store_i64(memory_at_0, loc_0, rt_load_i64_i8(memory_at_0, loc_1))
									desired = 0
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								loc_1 = rt_load_i32(memory_at_0, loc_2)
								rt_store_i32(memory_at_0, loc_2, rt_add_i32(loc_1, 4))
								rt_store_i64(memory_at_0, loc_0, rt_load_i64_u8(memory_at_0, loc_1))
								desired = 0
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							loc_1 = bit_and(rt_add_i32(rt_load_i32(memory_at_0, loc_2), 7), 4294967288)
							rt_store_i32(memory_at_0, loc_2, rt_add_i32(loc_1, 8))
							rt_store_f64(memory_at_0, loc_0, rt_load_f64(memory_at_0, loc_1))
							desired = 0
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						FUNC_LIST[799](loc_0, loc_2)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					desired = 0
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_1 = rt_load_i32(memory_at_0, loc_2)
				rt_store_i32(memory_at_0, loc_2, rt_add_i32(loc_1, 4))
				rt_store_i64(memory_at_0, loc_0, rt_load_i64_i32(memory_at_0, loc_1))
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_1 = rt_load_i32(memory_at_0, loc_2)
			rt_store_i32(memory_at_0, loc_2, rt_add_i32(loc_1, 4))
			rt_store_i64(memory_at_0, loc_0, rt_load_i64_u32(memory_at_0, loc_1))
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		loc_1 = bit_and(rt_add_i32(rt_load_i32(memory_at_0, loc_2), 7), 4294967288)
		rt_store_i32(memory_at_0, loc_2, rt_add_i32(loc_1, 8))
		rt_store_i64(memory_at_0, loc_0, rt_load_i64(memory_at_0, loc_1))
		break
	end
end
FUNC_LIST[792] = --[[ fmt_x ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local reg_0
	while true do
		if rt_ne_i64(loc_0, rt_i64_ZERO) then
			while true do
				while true do
					loc_1 = rt_sub_i32(loc_1, 1)
					rt_store_i32_n8(memory_at_0, loc_1, bit_or(loc_2, rt_load_i32_u8(memory_at_0, rt_add_i32(bit_and(rt_wrap_i32_i64(loc_0), 15), 30032))))
					loc_3 = (if rt_gt_u64(loc_0, rt_i64_from_u32(15, 0)) then 1 else 0)
					loc_0 = rt_shr_u64(loc_0, rt_i64_from_u32(4, 0))
					if loc_3 ~= 0 then
						continue
					end
					break
				end
				break
			end
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[793] = --[[ fmt_o ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		if rt_ne_i64(loc_0, rt_i64_ZERO) then
			while true do
				while true do
					loc_1 = rt_sub_i32(loc_1, 1)
					rt_store_i32_n8(memory_at_0, loc_1, bit_or(bit_and(rt_wrap_i32_i64(loc_0), 7), 48))
					loc_2 = (if rt_gt_u64(loc_0, rt_i64_from_u32(7, 0)) then 1 else 0)
					loc_0 = rt_shr_u64(loc_0, rt_i64_from_u32(3, 0))
					if loc_2 ~= 0 then
						continue
					end
					break
				end
				break
			end
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[794] = --[[ fmt_u ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = rt_i64_ZERO
	local reg_0
	local desired
	while true do
		while true do
			if rt_lt_u64(loc_0, rt_i64_from_u32(0, 1)) then
				while true do
					loc_5 = loc_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			while true do
				loc_1 = rt_sub_i32(loc_1, 1)
				loc_5 = rt_div_u64(loc_0, rt_i64_from_u32(10, 0))
				rt_store_i32_n8(memory_at_0, loc_1, bit_or(rt_wrap_i32_i64(rt_add_i64(loc_0, rt_mul_i64(loc_5, rt_i64_from_u32(246, 0)))), 48))
				loc_2 = (if rt_gt_u64(loc_0, rt_i64_from_u32(4294967295, 9)) then 1 else 0)
				loc_0 = loc_5
				if loc_2 ~= 0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			break
		end
		if rt_ne_i64(loc_5, rt_i64_ZERO) then
			while true do
				loc_2 = rt_wrap_i32_i64(loc_5)
				while true do
					loc_1 = rt_sub_i32(loc_1, 1)
					loc_3 = rt_div_u32(loc_2, 10)
					rt_store_i32_n8(memory_at_0, loc_1, bit_or(rt_add_i32(loc_2, rt_mul_i32(loc_3, 246)), 48))
					loc_4 = (if loc_2 > 9 then 1 else 0)
					loc_2 = loc_3
					if loc_4 ~= 0 then
						continue
					end
					break
				end
				break
			end
		end
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[795] = --[[ strnlen ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[728](loc_0, 0, loc_1)
		loc_2 = reg_0
		reg_0 = (if loc_2 ~= 0 then rt_sub_i32(loc_2, loc_0) else loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[796] = --[[ pad ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local reg_0
	while true do
		loc_5 = rt_sub_i32(GLOBAL_LIST[0].value, 256)
		GLOBAL_LIST[0].value = loc_5
		while true do
			if rt_le_i32(loc_2, loc_3) then
				break
			end
			if bit_and(loc_4, 73728) ~= 0 then
				break
			end
			loc_3 = rt_sub_i32(loc_2, loc_3)
			loc_2 = (if loc_3 < 256 then 1 else 0)
			reg_0 = FUNC_LIST[611](loc_5, loc_1, (if loc_2 ~= 0 then loc_3 else 256))
			if loc_2 == 0 then
				while true do
					while true do
						FUNC_LIST[789](loc_0, loc_5, 256)
						loc_3 = rt_sub_i32(loc_3, 256)
						if loc_3 > 255 then
							continue
						end
						break
					end
					break
				end
			end
			FUNC_LIST[789](loc_0, loc_5, loc_3)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_5, 256)
		break
	end
end
FUNC_LIST[797] = --[[ wctomb ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[800](loc_0, loc_1)
		break
	end
	return reg_0
end
FUNC_LIST[798] = --[[ fmt_fp ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local loc_6 = 0
	local loc_7 = 0
	local loc_8 = 0
	local loc_9 = 0
	local loc_10 = 0
	local loc_11 = 0
	local loc_12 = 0
	local loc_13 = 0
	local loc_14 = 0
	local loc_15 = 0
	local loc_16 = 0
	local loc_17 = 0
	local loc_18 = 0
	local loc_19 = 0
	local loc_20 = 0
	local loc_21 = 0
	local loc_22 = 0
	local loc_23 = 0
	local loc_24 = 0.0
	local loc_25 = rt_i64_ZERO
	local loc_26 = rt_i64_ZERO
	local loc_27 = rt_i64_ZERO
	local reg_0
	local reg_1
	local reg_2
	local desired
	while true do
		loc_12 = rt_sub_i32(GLOBAL_LIST[0].value, 560)
		GLOBAL_LIST[0].value = loc_12
		rt_store_i32(memory_at_0, loc_12 + 44, 0)
		while true do
			reg_0 = FUNC_LIST[621](loc_1)
			loc_25 = reg_0
			if rt_lt_i64(loc_25, rt_i64_ZERO) then
				while true do
					loc_17 = 1
					loc_19 = 1399
					loc_1 = rt_neg_f64(loc_1)
					reg_0 = FUNC_LIST[621](loc_1)
					loc_25 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			if bit_and(loc_4, 2048) ~= 0 then
				while true do
					loc_17 = 1
					loc_19 = 1402
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_17 = bit_and(loc_4, 1)
			loc_19 = (if loc_17 ~= 0 then 1405 else 1400)
			loc_23 = (if loc_17 == 0 then 1 else 0)
			break
		end
		while true do
			if rt_eq_i64(rt_bit_and_i64(loc_25, rt_i64_from_u32(0, 2146435072)), rt_i64_from_u32(0, 2146435072)) then
				while true do
					loc_6 = rt_add_i32(loc_17, 3)
					FUNC_LIST[796](loc_0, 32, loc_2, loc_6, bit_and(loc_4, 4294901759))
					FUNC_LIST[789](loc_0, loc_19, loc_17)
					loc_7 = bit_and(loc_5, 32)
					FUNC_LIST[789](loc_0, (if loc_1 ~= loc_1 then (if loc_7 ~= 0 then 2882 else 5179) else (if loc_7 ~= 0 then 3596 else 5192)), 3)
					FUNC_LIST[796](loc_0, 32, loc_2, loc_6, bit_xor(loc_4, 8192))
					loc_10 = (if rt_gt_i32(loc_2, loc_6) then loc_2 else loc_6)
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_18 = rt_add_i32(loc_12, 16)
			while true do
				while true do
					while true do
						reg_0 = FUNC_LIST[717](loc_1, rt_add_i32(loc_12, 44))
						loc_1 = reg_0
						loc_1 = (loc_1 + loc_1)
						if loc_1 ~= 0e0 then
							while true do
								loc_6 = rt_load_i32(memory_at_0, loc_12 + 44)
								rt_store_i32(memory_at_0, loc_12 + 44, rt_sub_i32(loc_6, 1))
								loc_21 = bit_or(loc_5, 32)
								if loc_21 ~= 97 then
									desired = 4
									break
								end
								desired = 2
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						loc_21 = bit_or(loc_5, 32)
						if loc_21 == 97 then
							desired = 2
							break
						end
						loc_20 = rt_load_i32(memory_at_0, loc_12 + 44)
						reg_0 = (if rt_lt_i32(loc_3, 0) then 6 else loc_3)
						desired = 3
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_20 = rt_sub_i32(loc_6, 29)
					rt_store_i32(memory_at_0, loc_12 + 44, loc_20)
					loc_1 = (loc_1 * 2.68435456e8)
					reg_0 = (if rt_lt_i32(loc_3, 0) then 6 else loc_3)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_11 = reg_0
				loc_16 = rt_add_i32(rt_add_i32(loc_12, 48), (if rt_ge_i32(loc_20, 0) then 288 else 0))
				loc_7 = loc_16
				while true do
					reg_0 = loc_7
					while true do
						if bit_and((if loc_1 < 4.294967296e9 then 1 else 0), (if loc_1 >= 0e0 then 1 else 0)) ~= 0 then
							while true do
								reg_1 = rt_truncate_f64(loc_1)
								desired = 4
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
						end
						reg_1 = 0
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
							continue
						end
						break
					end
					loc_6 = reg_1
					rt_store_i32(memory_at_0, reg_0, loc_6)
					loc_7 = rt_add_i32(loc_7, 4)
					loc_1 = ((loc_1 - no_op(loc_6)) * 1e9)
					if loc_1 ~= 0e0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if rt_le_i32(loc_20, 0) then
						while true do
							loc_8 = loc_20
							loc_6 = loc_7
							loc_9 = loc_16
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_9 = loc_16
					loc_8 = loc_20
					while true do
						loc_8 = (if loc_8 >= 29 then 29 else loc_8)
						while true do
							loc_6 = rt_sub_i32(loc_7, 4)
							if loc_9 > loc_6 then
								break
							end
							loc_27 = rt_extend_i64_u32(loc_8)
							loc_25 = rt_i64_ZERO
							while true do
								loc_26 = rt_add_i64(rt_bit_and_i64(loc_25, rt_i64_from_u32(4294967295, 0)), rt_shl_i64(rt_load_i64_u32(memory_at_0, loc_6), loc_27))
								loc_25 = rt_div_u64(loc_26, rt_i64_from_u32(1000000000, 0))
								rt_store_i64_n32(memory_at_0, loc_6, rt_add_i64(rt_mul_i64(loc_25, rt_i64_from_u32(3294967296, 0)), loc_26))
								loc_6 = rt_sub_i32(loc_6, 4)
								if loc_9 <= loc_6 then
									continue
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							if rt_lt_u64(loc_26, rt_i64_from_u32(1000000000, 0)) then
								break
							end
							loc_9 = rt_sub_i32(loc_9, 4)
							rt_store_i64_n32(memory_at_0, loc_9, loc_25)
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						while true do
							loc_6 = loc_7
							if loc_6 > loc_9 then
								while true do
									loc_7 = rt_sub_i32(loc_6, 4)
									if rt_load_i32(memory_at_0, loc_7) == 0 then
										desired = 5
										break
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
										continue
									end
									break
								end
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
								continue
							end
							break
						end
						loc_8 = rt_sub_i32(rt_load_i32(memory_at_0, loc_12 + 44), loc_8)
						rt_store_i32(memory_at_0, loc_12 + 44, loc_8)
						loc_7 = loc_6
						if rt_gt_i32(loc_8, 0) then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if rt_lt_i32(loc_8, 0) then
					while true do
						loc_14 = rt_add_i32(rt_div_u32(rt_add_i32(loc_11, 25), 9), 1)
						loc_22 = (if loc_21 == 102 then 1 else 0)
						while true do
							loc_7 = rt_sub_i32(0, loc_8)
							loc_10 = (if loc_7 >= 9 then 9 else loc_7)
							while true do
								if loc_6 <= loc_9 then
									while true do
										loc_7 = rt_shl_i32((if rt_load_i32(memory_at_0, loc_9) == 0 then 1 else 0), 2)
										desired = 5
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_13 = rt_shr_u32(1000000000, loc_10)
								loc_15 = bit_xor(rt_shl_i32(4294967295, loc_10), 4294967295)
								loc_8 = 0
								loc_7 = loc_9
								while true do
									loc_3 = rt_load_i32(memory_at_0, loc_7)
									rt_store_i32(memory_at_0, loc_7, rt_add_i32(loc_8, rt_shr_u32(loc_3, loc_10)))
									loc_8 = rt_mul_i32(loc_13, bit_and(loc_3, loc_15))
									loc_7 = rt_add_i32(loc_7, 4)
									if loc_6 > loc_7 then
										continue
									end
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
								loc_7 = rt_shl_i32((if rt_load_i32(memory_at_0, loc_9) == 0 then 1 else 0), 2)
								if loc_8 == 0 then
									break
								end
								rt_store_i32(memory_at_0, loc_6, loc_8)
								loc_6 = rt_add_i32(loc_6, 4)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
									continue
								end
								break
							end
							loc_8 = rt_add_i32(loc_10, rt_load_i32(memory_at_0, loc_12 + 44))
							rt_store_i32(memory_at_0, loc_12 + 44, loc_8)
							loc_9 = rt_add_i32(loc_7, loc_9)
							loc_7 = (if loc_22 ~= 0 then loc_16 else loc_9)
							loc_6 = (if rt_lt_i32(loc_14, rt_shr_i32(rt_sub_i32(loc_6, loc_7), 2)) then rt_add_i32(loc_7, rt_shl_i32(loc_14, 2)) else loc_6)
							if rt_lt_i32(loc_8, 0) then
								continue
							end
							break
						end
						if desired then
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_8 = 0
				while true do
					if loc_6 <= loc_9 then
						break
					end
					loc_8 = rt_mul_i32(rt_shr_i32(rt_sub_i32(loc_16, loc_9), 2), 9)
					loc_7 = 10
					loc_3 = rt_load_i32(memory_at_0, loc_9)
					if loc_3 < 10 then
						break
					end
					while true do
						loc_8 = rt_add_i32(loc_8, 1)
						loc_7 = rt_mul_i32(loc_7, 10)
						if loc_7 <= loc_3 then
							continue
						end
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_7 = rt_sub_i32(rt_sub_i32(loc_11, (if loc_21 ~= 102 then loc_8 else 0)), bit_and((if loc_21 == 103 then 1 else 0), (if loc_11 ~= 0 then 1 else 0)))
				if rt_lt_i32(loc_7, rt_sub_i32(rt_mul_i32(rt_shr_i32(rt_sub_i32(loc_6, loc_16), 2), 9), 9)) then
					while true do
						loc_3 = rt_add_i32(loc_7, 9216)
						loc_13 = rt_div_i32(loc_3, 9)
						loc_10 = rt_add_i32(rt_add_i32(rt_add_i32(loc_12, 48), (if rt_lt_i32(loc_20, 0) then 4294963204 else 4294963492)), rt_shl_i32(loc_13, 2))
						loc_7 = 10
						loc_3 = rt_add_i32(loc_3, rt_mul_i32(loc_13, 4294967287))
						if rt_le_i32(loc_3, 7) then
							while true do
								while true do
									loc_7 = rt_mul_i32(loc_7, 10)
									loc_3 = rt_add_i32(loc_3, 1)
									if loc_3 ~= 8 then
										continue
									end
									break
								end
								if desired then
									break
								end
								break
							end
							if desired then
								break
							end
						end
						while true do
							loc_3 = rt_load_i32(memory_at_0, loc_10)
							loc_14 = rt_div_u32(loc_3, loc_7)
							loc_13 = rt_mul_i32(loc_7, loc_14)
							loc_15 = rt_add_i32(loc_10, 4)
							if bit_and((if loc_3 == loc_13 then 1 else 0), (if loc_6 == loc_15 then 1 else 0)) ~= 0 then
								break
							end
							loc_3 = rt_sub_i32(loc_3, loc_13)
							while true do
								if bit_and(loc_14, 1) == 0 then
									while true do
										loc_1 = 9.007199254740992e15
										if loc_7 ~= 1000000000 then
											desired = 5
											break
										end
										if loc_9 >= loc_10 then
											desired = 5
											break
										end
										if bit_and(rt_load_i32_u8(memory_at_0, rt_sub_i32(loc_10, 4)), 1) == 0 then
											desired = 5
											break
										end
										break
									end
									if desired then
										if desired == 5 then
											desired = nil
										end
										break
									end
								end
								loc_1 = 9.007199254740994e15
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							reg_1 = (if loc_6 == loc_15 then 1e0 else 1.5e0)
							loc_15 = rt_shr_u32(loc_7, 1)
							loc_24 = (if loc_3 < loc_15 then 5e-1 else (if loc_15 == loc_3 then reg_1 else 1.5e0))
							while true do
								if loc_23 ~= 0 then
									break
								end
								if rt_load_i32_u8(memory_at_0, loc_19) ~= 45 then
									break
								end
								loc_24 = rt_neg_f64(loc_24)
								loc_1 = rt_neg_f64(loc_1)
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							rt_store_i32(memory_at_0, loc_10, loc_13)
							if loc_1 == (loc_1 + loc_24) then
								break
							end
							loc_7 = rt_add_i32(loc_7, loc_13)
							rt_store_i32(memory_at_0, loc_10, loc_7)
							if loc_7 >= 1000000000 then
								while true do
									while true do
										rt_store_i32(memory_at_0, loc_10, 0)
										loc_10 = rt_sub_i32(loc_10, 4)
										if loc_10 < loc_9 then
											while true do
												loc_9 = rt_sub_i32(loc_9, 4)
												rt_store_i32(memory_at_0, loc_9, 0)
												break
											end
											if desired then
												if desired == 6 then
													desired = nil
													continue
												end
												break
											end
										end
										loc_7 = rt_add_i32(rt_load_i32(memory_at_0, loc_10), 1)
										rt_store_i32(memory_at_0, loc_10, loc_7)
										if loc_7 > 999999999 then
											continue
										end
										break
									end
									if desired then
										break
									end
									break
								end
								if desired then
									if desired == 4 then
										desired = nil
									end
									break
								end
							end
							loc_8 = rt_mul_i32(rt_shr_i32(rt_sub_i32(loc_16, loc_9), 2), 9)
							loc_7 = 10
							loc_3 = rt_load_i32(memory_at_0, loc_9)
							if loc_3 < 10 then
								break
							end
							while true do
								loc_8 = rt_add_i32(loc_8, 1)
								loc_7 = rt_mul_i32(loc_7, 10)
								if loc_7 <= loc_3 then
									continue
								end
								break
							end
							if desired then
								if desired == 4 then
									desired = nil
								end
								break
							end
							break
						end
						if desired then
							break
						end
						loc_7 = rt_add_i32(loc_10, 4)
						reg_0 = (if loc_6 > loc_7 then loc_7 else loc_6)
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = loc_6
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_6 = reg_0
				while true do
					loc_7 = loc_6
					loc_3 = (if loc_9 >= loc_7 then 1 else 0)
					if loc_3 == 0 then
						while true do
							loc_6 = rt_sub_i32(loc_6, 4)
							if rt_load_i32(memory_at_0, loc_6) == 0 then
								desired = 3
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
								continue
							end
							break
						end
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				while true do
					if loc_21 ~= 103 then
						while true do
							loc_13 = bit_and(loc_4, 8)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_6 = (if loc_11 ~= 0 then loc_11 else 1)
					loc_10 = bit_and((if rt_lt_i32(loc_8, loc_6) then 1 else 0), (if rt_gt_i32(loc_8, 4294967291) then 1 else 0))
					loc_11 = rt_add_i32((if loc_10 ~= 0 then bit_xor(loc_8, 4294967295) else 4294967295), loc_6)
					loc_5 = rt_add_i32(loc_5, (if loc_10 ~= 0 then 4294967295 else 4294967294))
					loc_13 = bit_and(loc_4, 8)
					if loc_13 ~= 0 then
						break
					end
					loc_6 = 4294967287
					while true do
						if loc_3 ~= 0 then
							break
						end
						loc_10 = rt_load_i32(memory_at_0, rt_sub_i32(loc_7, 4))
						if loc_10 == 0 then
							break
						end
						loc_3 = 10
						loc_6 = 0
						if (loc_10 % 10) ~= 0 then
							break
						end
						while true do
							loc_13 = loc_6
							loc_6 = rt_add_i32(loc_13, 1)
							loc_3 = rt_mul_i32(loc_3, 10)
							if (loc_10 % loc_3) == 0 then
								continue
							end
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_6 = bit_xor(loc_13, 4294967295)
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					loc_3 = rt_mul_i32(rt_shr_i32(rt_sub_i32(loc_7, loc_16), 2), 9)
					if bit_and(loc_5, 4294967263) == 70 then
						while true do
							loc_13 = 0
							loc_6 = rt_sub_i32(rt_add_i32(loc_3, loc_6), 9)
							loc_6 = (if rt_gt_i32(loc_6, 0) then loc_6 else 0)
							loc_11 = (if rt_gt_i32(loc_6, loc_11) then loc_11 else loc_6)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_13 = 0
					loc_6 = rt_sub_i32(rt_add_i32(loc_6, rt_add_i32(loc_3, loc_8)), 9)
					loc_6 = (if rt_gt_i32(loc_6, 0) then loc_6 else 0)
					loc_11 = (if rt_gt_i32(loc_6, loc_11) then loc_11 else loc_6)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_10 = 4294967295
				loc_15 = bit_or(loc_11, loc_13)
				if rt_lt_i32((if loc_15 ~= 0 then 2147483645 else 2147483646), loc_11) then
					desired = 1
					break
				end
				loc_3 = rt_add_i32(rt_add_i32((if loc_15 ~= 0 then 1 else 0), loc_11), 1)
				while true do
					loc_22 = bit_and(loc_5, 4294967263)
					if loc_22 == 70 then
						while true do
							if rt_lt_i32(bit_xor(loc_3, 2147483647), loc_8) then
								desired = 1
								break
							end
							loc_6 = (if rt_gt_i32(loc_8, 0) then loc_8 else 0)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_6 = rt_shr_i32(loc_8, 31)
					reg_1 = FUNC_LIST[794](rt_extend_i64_u32(rt_sub_i32(bit_xor(loc_6, loc_8), loc_6)), loc_18)
					loc_6 = reg_1
					if rt_le_i32(rt_sub_i32(loc_18, loc_6), 1) then
						while true do
							while true do
								loc_6 = rt_sub_i32(loc_6, 1)
								rt_store_i32_n8(memory_at_0, loc_6, 48)
								if rt_lt_i32(rt_sub_i32(loc_18, loc_6), 2) then
									continue
								end
								break
							end
							if desired then
								break
							end
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					loc_14 = rt_sub_i32(loc_6, 2)
					rt_store_i32_n8(memory_at_0, loc_14, loc_5)
					rt_store_i32_n8(memory_at_0, rt_sub_i32(loc_6, 1), (if rt_lt_i32(loc_8, 0) then 45 else 43))
					loc_6 = rt_sub_i32(loc_18, loc_14)
					if rt_gt_i32(loc_6, bit_xor(loc_3, 2147483647)) then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_6 = rt_add_i32(loc_3, loc_6)
				if rt_gt_i32(loc_6, bit_xor(loc_17, 2147483647)) then
					desired = 1
					break
				end
				loc_5 = rt_add_i32(loc_6, loc_17)
				FUNC_LIST[796](loc_0, 32, loc_2, loc_5, loc_4)
				FUNC_LIST[789](loc_0, loc_19, loc_17)
				FUNC_LIST[796](loc_0, 48, loc_2, loc_5, bit_xor(loc_4, 65536))
				while true do
					while true do
						while true do
							if loc_22 == 70 then
								while true do
									loc_8 = bit_or(rt_add_i32(loc_12, 16), 9)
									loc_3 = (if loc_9 > loc_16 then loc_16 else loc_9)
									loc_9 = loc_3
									while true do
										reg_0 = FUNC_LIST[794](rt_load_i64_u32(memory_at_0, loc_9), loc_8)
										loc_6 = reg_0
										while true do
											if loc_3 ~= loc_9 then
												while true do
													if rt_add_i32(loc_12, 16) >= loc_6 then
														desired = 8
														break
													end
													while true do
														loc_6 = rt_sub_i32(loc_6, 1)
														rt_store_i32_n8(memory_at_0, loc_6, 48)
														if rt_add_i32(loc_12, 16) < loc_6 then
															continue
														end
														break
													end
													if desired then
														break
													end
													desired = 8
													break
												end
												if desired then
													if desired == 8 then
														desired = nil
													end
													break
												end
											end
											if loc_6 ~= loc_8 then
												break
											end
											loc_6 = rt_sub_i32(loc_6, 1)
											rt_store_i32_n8(memory_at_0, loc_6, 48)
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
										FUNC_LIST[789](loc_0, loc_6, rt_sub_i32(loc_8, loc_6))
										loc_9 = rt_add_i32(loc_9, 4)
										if loc_16 >= loc_9 then
											continue
										end
										break
									end
									if desired then
										break
									end
									if loc_15 ~= 0 then
										while true do
											FUNC_LIST[789](loc_0, 5451, 1)
											break
										end
										if desired then
											break
										end
									end
									if loc_7 <= loc_9 then
										desired = 5
										break
									end
									if rt_le_i32(loc_11, 0) then
										desired = 5
										break
									end
									while true do
										reg_0 = FUNC_LIST[794](rt_load_i64_u32(memory_at_0, loc_9), loc_8)
										loc_6 = reg_0
										if loc_6 > rt_add_i32(loc_12, 16) then
											while true do
												while true do
													loc_6 = rt_sub_i32(loc_6, 1)
													rt_store_i32_n8(memory_at_0, loc_6, 48)
													if rt_add_i32(loc_12, 16) < loc_6 then
														continue
													end
													break
												end
												if desired then
													break
												end
												break
											end
											if desired then
												if desired == 7 then
													desired = nil
													continue
												end
												break
											end
										end
										FUNC_LIST[789](loc_0, loc_6, (if rt_ge_i32(loc_11, 9) then 9 else loc_11))
										loc_6 = rt_sub_i32(loc_11, 9)
										loc_9 = rt_add_i32(loc_9, 4)
										if loc_7 <= loc_9 then
											desired = 4
											break
										end
										loc_3 = (if rt_gt_i32(loc_11, 9) then 1 else 0)
										loc_11 = loc_6
										if loc_3 ~= 0 then
											continue
										end
										break
									end
									if desired then
										break
									end
									desired = 4
									break
								end
								if desired then
									if desired == 5 then
										desired = nil
									end
									break
								end
							end
							while true do
								if rt_lt_i32(loc_11, 0) then
									break
								end
								loc_10 = (if loc_7 > loc_9 then loc_7 else rt_add_i32(loc_9, 4))
								loc_8 = bit_or(rt_add_i32(loc_12, 16), 9)
								loc_7 = loc_9
								while true do
									reg_0 = FUNC_LIST[794](rt_load_i64_u32(memory_at_0, loc_7), loc_8)
									loc_6 = reg_0
									if loc_6 == loc_8 then
										while true do
											loc_6 = rt_sub_i32(loc_6, 1)
											rt_store_i32_n8(memory_at_0, loc_6, 48)
											break
										end
										if desired then
											if desired == 7 then
												desired = nil
												continue
											end
											break
										end
									end
									while true do
										if loc_7 ~= loc_9 then
											while true do
												if rt_add_i32(loc_12, 16) >= loc_6 then
													desired = 8
													break
												end
												while true do
													loc_6 = rt_sub_i32(loc_6, 1)
													rt_store_i32_n8(memory_at_0, loc_6, 48)
													if rt_add_i32(loc_12, 16) < loc_6 then
														continue
													end
													break
												end
												if desired then
													break
												end
												desired = 8
												break
											end
											if desired then
												if desired == 8 then
													desired = nil
												end
												break
											end
										end
										FUNC_LIST[789](loc_0, loc_6, 1)
										loc_6 = rt_add_i32(loc_6, 1)
										if bit_or(loc_11, loc_13) == 0 then
											break
										end
										FUNC_LIST[789](loc_0, 5451, 1)
										break
									end
									if desired then
										if desired == 7 then
											desired = nil
											continue
										end
										break
									end
									loc_3 = rt_sub_i32(loc_8, loc_6)
									FUNC_LIST[789](loc_0, loc_6, (if rt_lt_i32(loc_3, loc_11) then loc_3 else loc_11))
									loc_11 = rt_sub_i32(loc_11, loc_3)
									loc_7 = rt_add_i32(loc_7, 4)
									if loc_10 <= loc_7 then
										desired = 6
										break
									end
									if rt_ge_i32(loc_11, 0) then
										continue
									end
									break
								end
								if desired then
									if desired == 6 then
										desired = nil
									end
									break
								end
								break
							end
							if desired then
								if desired == 5 then
									desired = nil
								end
								break
							end
							FUNC_LIST[796](loc_0, 48, rt_add_i32(loc_11, 18), 18, 0)
							FUNC_LIST[789](loc_0, loc_14, rt_sub_i32(loc_18, loc_14))
							desired = 3
							break
						end
						if desired then
							if desired == 4 then
								desired = nil
							end
							break
						end
						loc_6 = loc_11
						break
					end
					if desired then
						if desired == 3 then
							desired = nil
						end
						break
					end
					FUNC_LIST[796](loc_0, 48, rt_add_i32(loc_6, 9), 9, 0)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				FUNC_LIST[796](loc_0, 32, loc_2, loc_5, bit_xor(loc_4, 8192))
				loc_10 = (if rt_gt_i32(loc_2, loc_5) then loc_2 else loc_5)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_14 = rt_add_i32(bit_and(rt_shr_i32(rt_shl_i32(loc_5, 26), 31), 9), loc_19)
			while true do
				if loc_3 > 11 then
					break
				end
				loc_6 = rt_sub_i32(12, loc_3)
				loc_24 = 1.6e1
				while true do
					loc_24 = (loc_24 * 1.6e1)
					loc_6 = rt_sub_i32(loc_6, 1)
					if loc_6 ~= 0 then
						continue
					end
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				if rt_load_i32_u8(memory_at_0, loc_14) == 45 then
					while true do
						loc_1 = rt_neg_f64((loc_24 + (rt_neg_f64(loc_1) - loc_24)))
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_1 = ((loc_1 + loc_24) - loc_24)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_7 = rt_load_i32(memory_at_0, loc_12 + 44)
			loc_6 = rt_shr_i32(loc_7, 31)
			reg_0 = FUNC_LIST[794](rt_extend_i64_u32(rt_sub_i32(bit_xor(loc_7, loc_6), loc_6)), loc_18)
			loc_6 = reg_0
			if loc_6 == loc_18 then
				while true do
					loc_6 = rt_sub_i32(loc_6, 1)
					rt_store_i32_n8(memory_at_0, loc_6, 48)
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_13 = bit_or(loc_17, 2)
			loc_9 = bit_and(loc_5, 32)
			loc_15 = rt_sub_i32(loc_6, 2)
			rt_store_i32_n8(memory_at_0, loc_15, rt_add_i32(loc_5, 15))
			rt_store_i32_n8(memory_at_0, rt_sub_i32(loc_6, 1), (if rt_lt_i32(loc_7, 0) then 45 else 43))
			loc_8 = bit_and((if bit_and(loc_4, 8) == 0 then 1 else 0), (if rt_le_i32(loc_3, 0) then 1 else 0))
			loc_7 = rt_add_i32(loc_12, 16)
			while true do
				loc_6 = loc_7
				reg_0 = loc_6
				reg_1 = loc_9
				while true do
					if math_abs(loc_1) < 2.147483648e9 then
						while true do
							reg_2 = rt_truncate_f64(loc_1)
							desired = 3
							break
						end
						if desired then
							if desired == 3 then
								desired = nil
							end
							break
						end
					end
					reg_2 = 2147483648
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				loc_7 = reg_2
				rt_store_i32_n8(memory_at_0, reg_0, bit_or(reg_1, rt_load_i32_u8(memory_at_0, rt_add_i32(loc_7, 30032))))
				loc_1 = ((loc_1 - rt_convert_f64_i32(loc_7)) * 1.6e1)
				while true do
					loc_7 = rt_add_i32(loc_6, 1)
					if rt_sub_i32(loc_7, rt_add_i32(loc_12, 16)) ~= 1 then
						break
					end
					if bit_and(loc_8, (if loc_1 == 0e0 then 1 else 0)) ~= 0 then
						break
					end
					rt_store_i32_n8(memory_at_0, loc_6 + 1, 46)
					loc_7 = rt_add_i32(loc_6, 2)
					break
				end
				if desired then
					if desired == 2 then
						desired = nil
						continue
					end
					break
				end
				if loc_1 ~= 0e0 then
					continue
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			loc_10 = 4294967295
			loc_9 = rt_sub_i32(loc_18, loc_15)
			loc_8 = rt_add_i32(loc_9, loc_13)
			if rt_lt_i32(rt_sub_i32(2147483645, loc_8), loc_3) then
				break
			end
			loc_6 = rt_sub_i32(loc_7, rt_add_i32(loc_12, 16))
			loc_3 = (if loc_3 ~= 0 then (if rt_gt_i32(loc_3, rt_sub_i32(loc_6, 2)) then rt_add_i32(loc_3, 2) else loc_6) else loc_6)
			loc_7 = rt_add_i32(loc_3, loc_8)
			FUNC_LIST[796](loc_0, 32, loc_2, loc_7, loc_4)
			FUNC_LIST[789](loc_0, loc_14, loc_13)
			FUNC_LIST[796](loc_0, 48, loc_2, loc_7, bit_xor(loc_4, 65536))
			FUNC_LIST[789](loc_0, rt_add_i32(loc_12, 16), loc_6)
			FUNC_LIST[796](loc_0, 48, rt_sub_i32(loc_3, loc_6), 0, 0)
			FUNC_LIST[789](loc_0, loc_15, loc_9)
			FUNC_LIST[796](loc_0, 32, loc_2, loc_7, bit_xor(loc_4, 8192))
			loc_10 = (if rt_gt_i32(loc_2, loc_7) then loc_2 else loc_7)
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_12, 560)
		reg_0 = loc_10
		break
	end
	return reg_0
end
FUNC_LIST[799] = --[[ pop_arg_long_double ]] function(loc_0, loc_1)
	local loc_2 = 0
	local reg_0
	local reg_1
	while true do
		loc_2 = bit_and(rt_add_i32(rt_load_i32(memory_at_0, loc_1), 7), 4294967288)
		rt_store_i32(memory_at_0, loc_1, rt_add_i32(loc_2, 16))
		reg_1 = FUNC_LIST[679](rt_load_i64(memory_at_0, loc_2), rt_load_i64(memory_at_0, loc_2 + 8))
		rt_store_f64(memory_at_0, loc_0, reg_1)
		break
	end
end
FUNC_LIST[800] = --[[ wcrtomb ]] function(loc_0, loc_1)
	local reg_0
	local desired
	while true do
		while true do
			if loc_1 <= 127 then
				break
			end
			while true do
				if rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, 30812)) == 0 then
					while true do
						if bit_and(loc_1, 4294967168) == 57216 then
							desired = 1
							break
						end
						desired = 2
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_1 <= 2047 then
					while true do
						rt_store_i32_n8(memory_at_0, loc_0 + 1, bit_or(bit_and(loc_1, 63), 128))
						rt_store_i32_n8(memory_at_0, loc_0, bit_or(rt_shr_u32(loc_1, 6), 192))
						reg_0 = 2
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if bit_and((if bit_and(loc_1, 4294959104) ~= 57344 then 1 else 0), (if loc_1 >= 55296 then 1 else 0)) == 0 then
					while true do
						rt_store_i32_n8(memory_at_0, loc_0 + 2, bit_or(bit_and(loc_1, 63), 128))
						rt_store_i32_n8(memory_at_0, loc_0, bit_or(rt_shr_u32(loc_1, 12), 224))
						rt_store_i32_n8(memory_at_0, loc_0 + 1, bit_or(bit_and(rt_shr_u32(loc_1, 6), 63), 128))
						reg_0 = 3
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if rt_sub_i32(loc_1, 65536) <= 1048575 then
					while true do
						rt_store_i32_n8(memory_at_0, loc_0 + 3, bit_or(bit_and(loc_1, 63), 128))
						rt_store_i32_n8(memory_at_0, loc_0, bit_or(rt_shr_u32(loc_1, 18), 240))
						rt_store_i32_n8(memory_at_0, loc_0 + 2, bit_or(bit_and(rt_shr_u32(loc_1, 6), 63), 128))
						rt_store_i32_n8(memory_at_0, loc_0 + 1, bit_or(bit_and(rt_shr_u32(loc_1, 12), 63), 128))
						reg_0 = 4
						desired = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			reg_0 = FUNC_LIST[612]()
			rt_store_i32(memory_at_0, reg_0, 25)
			reg_0 = 4294967295
			desired = 0
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		rt_store_i32_n8(memory_at_0, loc_0, loc_1)
		reg_0 = 1
		break
	end
	return reg_0
end
FUNC_LIST[801] = --[[ std::exception::exception[abi:nn180100]() ]] function(loc_0)
	local reg_0
	while true do
		rt_store_i32(memory_at_0, loc_0, 30432)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[802] = --[[ std::__2::__libcpp_refstring::__libcpp_refstring(char const*) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[803](25)
		loc_1 = reg_0
		rt_store_i32(memory_at_0, loc_1 + 8, 0)
		rt_store_i64(memory_at_0, loc_1, rt_i64_from_u32(12, 12))
		reg_0 = FUNC_LIST[804](loc_1)
		loc_1 = reg_0
		rt_store_i64(memory_at_0, loc_1 + 5, rt_load_i64(memory_at_0, 3296))
		rt_store_i64(memory_at_0, loc_1, rt_load_i64(memory_at_0, 3291))
		rt_store_i32(memory_at_0, loc_0, loc_1)
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[803] = --[[ operator new(unsigned long) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[805](loc_0)
		loc_0 = reg_0
		if loc_0 == 0 then
			while true do
				FUNC_LIST[806]()
				error("out of code bounds")
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[804] = --[[ std::__2::__refstring_imp::(anonymous namespace)::data_from_rep(std::__2::__refstring_imp::(anonymous namespace)::_Rep_base*) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = rt_add_i32(loc_0, 12)
		break
	end
	return reg_0
end
FUNC_LIST[805] = --[[ operator_new_impl(unsigned long) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	local desired
	while true do
		loc_1 = (if loc_0 <= 1 then 1 else loc_0)
		while true do
			while true do
				reg_0 = FUNC_LIST[652](loc_1)
				loc_0 = reg_0
				if loc_0 ~= 0 then
					while true do
						reg_0 = loc_0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				else
					while true do
						reg_0 = FUNC_LIST[807]()
						loc_0 = reg_0
						if loc_0 ~= 0 then
							desired = 2
							break
						end
						reg_0 = 0
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				loc_0 = reg_0
				reg_0 = loc_0
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
					continue
				end
				break
			end
			TABLE_LIST[0].data[loc_0]()
			continue
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		error("out of code bounds")
	end
	return reg_0
end
FUNC_LIST[806] = --[[ __throw_bad_alloc_shim() ]] function()
	while true do
		FUNC_LIST[808]()
		error("out of code bounds")
	end
end
FUNC_LIST[807] = --[[ std::get_new_handler() ]] function()
	local reg_0
	while true do
		reg_0 = FUNC_LIST[812](38072)
		break
	end
	return reg_0
end
FUNC_LIST[808] = --[[ std::__throw_bad_alloc() ]] function()
	while true do
		FUNC_LIST[696]()
		error("out of code bounds")
	end
end
FUNC_LIST[809] = --[[ operator delete(void*) ]] function(loc_0)
	while true do
		FUNC_LIST[654](loc_0)
		break
	end
end
FUNC_LIST[810] = --[[ operator delete(void*, unsigned long) ]] function(loc_0)
	while true do
		FUNC_LIST[809](loc_0)
		break
	end
end
FUNC_LIST[811] = --[[ std::get_terminate() ]] function()
	local reg_0
	while true do
		reg_0 = FUNC_LIST[812](30992)
		break
	end
	return reg_0
end
FUNC_LIST[812] = --[[ void (*std::__2::(anonymous namespace)::__libcpp_atomic_load[abi:nn180100]<void (*)()>(void (* const*)(), int))() ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = rt_load_i32(memory_at_0, loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[813] = --[[ std::__terminate(void (*)()) ]] function(loc_0)
	while true do
		TABLE_LIST[0].data[loc_0]()
		FUNC_LIST[808]()
		error("out of code bounds")
	end
end
FUNC_LIST[814] = --[[ std::terminate() ]] function()
	local reg_0
	while true do
		reg_0 = FUNC_LIST[811]()
		FUNC_LIST[813](reg_0)
		error("out of code bounds")
	end
end
FUNC_LIST[815] = --[[ __cxa_increment_exception_refcount ]] function(loc_0)
	while true do
		if loc_0 ~= 0 then
			while true do
				FUNC_LIST[814]()
				error("out of code bounds")
			end
		end
		break
	end
end
FUNC_LIST[816] = --[[ std::exception::~exception() ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[817] = --[[ std::exception::~exception()_843 ]] function(loc_0)
	while true do
		FUNC_LIST[810](loc_0)
		break
	end
end
FUNC_LIST[818] = --[[ std::exception::what() const ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = 2752
		break
	end
	return reg_0
end
FUNC_LIST[819] = --[[ __cxxabiv1::__class_type_info::can_catch(__cxxabiv1::__shim_type_info const*, void*&) const ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local reg_0
	local reg_1
	while true do
		loc_3 = rt_add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_3
		while true do
			loc_4 = 1
			reg_1 = FUNC_LIST[820](loc_0, loc_1, 0)
			reg_0 = loc_4
			if reg_1 ~= 0 then
				break
			end
			reg_0 = 0
			if loc_1 == 0 then
				break
			end
			loc_4 = 0
			reg_1 = FUNC_LIST[821](loc_1, 30064, 30112)
			loc_1 = reg_1
			reg_0 = loc_4
			if loc_1 == 0 then
				break
			end
			reg_0 = FUNC_LIST[611](rt_add_i32(loc_3, 8), 0, 56)
			rt_store_i32_n8(memory_at_0, loc_3 + 59, 1)
			rt_store_i32(memory_at_0, loc_3 + 16, 4294967295)
			rt_store_i32(memory_at_0, loc_3 + 12, loc_0)
			rt_store_i32(memory_at_0, loc_3 + 4, loc_1)
			rt_store_i32(memory_at_0, loc_3 + 52, 1)
			TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_1) + 28)](loc_1, rt_add_i32(loc_3, 4), rt_load_i32(memory_at_0, loc_2), 1)
			loc_1 = rt_load_i32(memory_at_0, loc_3 + 28)
			if loc_1 == 1 then
				while true do
					rt_store_i32(memory_at_0, loc_2, rt_load_i32(memory_at_0, loc_3 + 20))
					break
				end
			end
			reg_0 = (if loc_1 == 1 then 1 else 0)
			break
		end
		loc_4 = reg_0
		GLOBAL_LIST[0].value = rt_sub_i32(loc_3, 4294967232)
		reg_0 = loc_4
		break
	end
	return reg_0
end
FUNC_LIST[820] = --[[ is_equal(std::type_info const*, std::type_info const*, bool) ]] function(loc_0, loc_1, loc_2)
	local reg_0
	local desired
	while true do
		if loc_2 == 0 then
			while true do
				reg_0 = (if rt_load_i32(memory_at_0, loc_0 + 4) == rt_load_i32(memory_at_0, loc_1 + 4) then 1 else 0)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		if loc_0 == loc_1 then
			while true do
				reg_0 = 1
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		reg_0 = FUNC_LIST[695](rt_load_i32(memory_at_0, loc_0 + 4), rt_load_i32(memory_at_0, loc_1 + 4))
		reg_0 = (if reg_0 == 0 then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[821] = --[[ __dynamic_cast ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local loc_4 = 0
	local loc_5 = 0
	local loc_6 = 0
	local reg_0
	local desired
	while true do
		loc_3 = rt_sub_i32(GLOBAL_LIST[0].value, 16)
		GLOBAL_LIST[0].value = loc_3
		FUNC_LIST[822](rt_add_i32(loc_3, 4), loc_0)
		loc_4 = rt_load_i32(memory_at_0, loc_3 + 4)
		while true do
			loc_6 = rt_load_i32(memory_at_0, loc_3 + 8)
			reg_0 = FUNC_LIST[820](loc_6, loc_2, 0)
			if reg_0 ~= 0 then
				while true do
					reg_0 = FUNC_LIST[823](loc_4, rt_load_i32(memory_at_0, loc_3 + 12))
					loc_5 = reg_0
					desired = 1
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			reg_0 = FUNC_LIST[824](loc_0, loc_4, loc_2, loc_6)
			loc_5 = reg_0
			if loc_5 ~= 0 then
				break
			end
			reg_0 = FUNC_LIST[825](loc_0, loc_4, loc_1, loc_2, loc_6)
			loc_5 = reg_0
			break
		end
		GLOBAL_LIST[0].value = rt_add_i32(loc_3, 16)
		reg_0 = loc_5
		break
	end
	return reg_0
end
FUNC_LIST[822] = --[[ __cxxabiv1::(anonymous namespace)::dyn_cast_get_derived_info(__cxxabiv1::(anonymous namespace)::derived_object_info*, void const*) ]] function(loc_0, loc_1)
	local loc_2 = 0
	local loc_3 = 0
	while true do
		loc_2 = rt_load_i32(memory_at_0, loc_1)
		loc_3 = rt_load_i32(memory_at_0, rt_sub_i32(loc_2, 8))
		rt_store_i32(memory_at_0, loc_0 + 8, loc_3)
		rt_store_i32(memory_at_0, loc_0, rt_add_i32(loc_1, loc_3))
		rt_store_i32(memory_at_0, loc_0 + 4, rt_load_i32(memory_at_0, rt_sub_i32(loc_2, 4)))
		break
	end
end
FUNC_LIST[823] = --[[ __cxxabiv1::(anonymous namespace)::dyn_cast_to_derived(void const*, void const*, __cxxabiv1::__class_type_info const*, __cxxabiv1::__class_type_info const*, long, long) ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = (if loc_1 ~= 0 then 0 else loc_0)
		break
	end
	return reg_0
end
FUNC_LIST[824] = --[[ __cxxabiv1::(anonymous namespace)::dyn_cast_try_downcast(void const*, void const*, __cxxabiv1::__class_type_info const*, __cxxabiv1::__class_type_info const*, long) ]] function(loc_0, loc_1, loc_2, loc_3)
	local loc_4 = 0
	local loc_5 = 0
	local reg_0
	while true do
		loc_4 = rt_add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_4
		if rt_ge_i32(loc_0, loc_1) then
			while true do
				rt_store_i32(memory_at_0, loc_4 + 12, loc_2)
				rt_store_i32(memory_at_0, loc_4 + 4, loc_3)
				rt_store_i32(memory_at_0, loc_4 + 8, loc_0)
				reg_0 = FUNC_LIST[611](rt_add_i32(loc_4, 16), 0, 36)
				rt_store_i32(memory_at_0, loc_4 + 60, 0)
				rt_store_i64(memory_at_0, loc_4 + 52, rt_i64_from_u32(1, 16777216))
				TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_3) + 20)](loc_3, rt_add_i32(loc_4, 4), loc_1, loc_1, 1, 0)
				reg_0 = (if rt_load_i32(memory_at_0, loc_4 + 28) ~= 0 then loc_0 else 0)
				break
			end
		else
			while true do
				reg_0 = loc_5
				break
			end
		end
		loc_5 = reg_0
		GLOBAL_LIST[0].value = rt_sub_i32(loc_4, 4294967232)
		reg_0 = loc_5
		break
	end
	return reg_0
end
FUNC_LIST[825] = --[[ __cxxabiv1::(anonymous namespace)::dyn_cast_slow(void const*, void const*, __cxxabiv1::__class_type_info const*, __cxxabiv1::__class_type_info const*, __cxxabiv1::__class_type_info const*, long) ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = 0
	local reg_0
	local desired
	local br_map = {}
	while true do
		loc_5 = rt_add_i32(GLOBAL_LIST[0].value, 4294967232)
		GLOBAL_LIST[0].value = loc_5
		rt_store_i32(memory_at_0, loc_5 + 12, loc_2)
		rt_store_i32(memory_at_0, loc_5 + 8, loc_0)
		rt_store_i32(memory_at_0, loc_5 + 4, loc_3)
		loc_2 = 0
		reg_0 = FUNC_LIST[611](rt_add_i32(loc_5, 16), 0, 43)
		rt_store_i32(memory_at_0, loc_5 + 60, 0)
		rt_store_i32_n8(memory_at_0, loc_5 + 59, 1)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_4) + 24)](loc_4, rt_add_i32(loc_5, 4), loc_1, 1, 0)
		while true do
			while true do
				while true do
					if not br_map[1] then
						br_map[1] = (function()
							return { [0] = 0, 1, }
						end)()
					end
					temp = br_map[1][rt_load_i32(memory_at_0, loc_5 + 40)] or 2
					if temp < 1 then
						break
					elseif temp > 1 then
						desired = 1
						break
					else
						desired = 2
						break
					end
				end
				if desired then
					if desired == 2 then
						desired = nil
					end
					break
				end
				loc_2 = (if rt_load_i32(memory_at_0, loc_5 + 44) == 1 then (if rt_load_i32(memory_at_0, loc_5 + 32) == 1 then (if rt_load_i32(memory_at_0, loc_5 + 36) == 1 then rt_load_i32(memory_at_0, loc_5 + 24) else 0) else 0) else 0)
				desired = 1
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			if rt_load_i32(memory_at_0, loc_5 + 28) ~= 1 then
				while true do
					if rt_load_i32(memory_at_0, loc_5 + 44) ~= 0 then
						desired = 1
						break
					end
					if rt_load_i32(memory_at_0, loc_5 + 32) ~= 1 then
						desired = 1
						break
					end
					if rt_load_i32(memory_at_0, loc_5 + 36) ~= 1 then
						desired = 1
						break
					end
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_2 = rt_load_i32(memory_at_0, loc_5 + 20)
			break
		end
		GLOBAL_LIST[0].value = rt_sub_i32(loc_5, 4294967232)
		reg_0 = loc_2
		break
	end
	return reg_0
end
FUNC_LIST[826] = --[[ __cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, void const*, void const*, int, bool) const ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[820](loc_0, rt_load_i32(memory_at_0, loc_1 + 8), loc_5)
		if reg_0 ~= 0 then
			while true do
				FUNC_LIST[827](loc_1, loc_2, loc_3, loc_4)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_0 = rt_load_i32(memory_at_0, loc_0 + 8)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0) + 20)](loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
		break
	end
end
FUNC_LIST[827] = --[[ __cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, void const*, void const*, int) const ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	local desired
	while true do
		rt_store_i32_n8(memory_at_0, loc_0 + 53, 1)
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 4) ~= loc_2 then
				break
			end
			rt_store_i32_n8(memory_at_0, loc_0 + 52, 1)
			while true do
				loc_2 = rt_load_i32(memory_at_0, loc_0 + 16)
				if loc_2 == 0 then
					while true do
						rt_store_i32(memory_at_0, loc_0 + 36, 1)
						rt_store_i32(memory_at_0, loc_0 + 24, loc_3)
						rt_store_i32(memory_at_0, loc_0 + 16, loc_1)
						if loc_3 ~= 1 then
							desired = 1
							break
						end
						if rt_load_i32(memory_at_0, loc_0 + 48) == 1 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_1 == loc_2 then
					while true do
						loc_2 = rt_load_i32(memory_at_0, loc_0 + 24)
						if loc_2 == 2 then
							while true do
								rt_store_i32(memory_at_0, loc_0 + 24, loc_3)
								reg_0 = loc_3
								break
							end
							if desired then
								break
							end
						else
							while true do
								reg_0 = loc_2
								break
							end
							if desired then
								break
							end
						end
						loc_2 = reg_0
						if rt_load_i32(memory_at_0, loc_0 + 48) ~= 1 then
							desired = 1
							break
						end
						if loc_2 == 1 then
							desired = 2
							break
						end
						desired = 1
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				rt_store_i32(memory_at_0, loc_0 + 36, rt_add_i32(rt_load_i32(memory_at_0, loc_0 + 36), 1))
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32_n8(memory_at_0, loc_0 + 54, 1)
			break
		end
		break
	end
end
FUNC_LIST[828] = --[[ __cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int, bool) const ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[820](loc_0, rt_load_i32(memory_at_0, loc_1 + 8), loc_4)
		if reg_0 ~= 0 then
			while true do
				FUNC_LIST[829](loc_1, loc_2, loc_3)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			reg_0 = FUNC_LIST[820](loc_0, rt_load_i32(memory_at_0, loc_1), loc_4)
			if reg_0 ~= 0 then
				while true do
					while true do
						if loc_2 ~= rt_load_i32(memory_at_0, loc_1 + 16) then
							while true do
								if rt_load_i32(memory_at_0, loc_1 + 20) ~= loc_2 then
									desired = 3
									break
								end
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						if loc_3 ~= 1 then
							desired = 1
							break
						end
						rt_store_i32(memory_at_0, loc_1 + 32, 1)
						desired = 0
						break
					end
					if desired then
						break
					end
					rt_store_i32(memory_at_0, loc_1 + 32, loc_3)
					while true do
						if rt_load_i32(memory_at_0, loc_1 + 44) == 4 then
							break
						end
						rt_store_i32_n16(memory_at_0, loc_1 + 52, 0)
						loc_0 = rt_load_i32(memory_at_0, loc_0 + 8)
						TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0) + 20)](loc_0, loc_1, loc_2, loc_2, 1, loc_4)
						if rt_load_i32_u8(memory_at_0, loc_1 + 53) == 1 then
							while true do
								rt_store_i32(memory_at_0, loc_1 + 44, 3)
								if rt_load_i32_u8(memory_at_0, loc_1 + 52) == 0 then
									desired = 3
									break
								end
								desired = 1
								break
							end
							if desired then
								if desired == 3 then
									desired = nil
								end
								break
							end
						end
						rt_store_i32(memory_at_0, loc_1 + 44, 4)
						break
					end
					if desired then
						break
					end
					rt_store_i32(memory_at_0, loc_1 + 20, loc_2)
					rt_store_i32(memory_at_0, loc_1 + 40, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 40), 1))
					if rt_load_i32(memory_at_0, loc_1 + 36) ~= 1 then
						desired = 1
						break
					end
					if rt_load_i32(memory_at_0, loc_1 + 24) ~= 2 then
						desired = 1
						break
					end
					rt_store_i32_n8(memory_at_0, loc_1 + 54, 1)
					desired = 0
					break
				end
				if desired then
					if desired == 1 then
						desired = nil
					end
					break
				end
			end
			loc_0 = rt_load_i32(memory_at_0, loc_0 + 8)
			TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0) + 24)](loc_0, loc_1, loc_2, loc_3, loc_4)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
end
FUNC_LIST[829] = --[[ __cxxabiv1::__class_type_info::process_static_type_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int) const ]] function(loc_0, loc_1, loc_2)
	while true do
		while true do
			if rt_load_i32(memory_at_0, loc_0 + 4) ~= loc_1 then
				break
			end
			if rt_load_i32(memory_at_0, loc_0 + 28) == 1 then
				break
			end
			rt_store_i32(memory_at_0, loc_0 + 28, loc_2)
			break
		end
		break
	end
end
FUNC_LIST[830] = --[[ __cxxabiv1::__si_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[820](loc_0, rt_load_i32(memory_at_0, loc_1 + 8), 0)
		if reg_0 ~= 0 then
			while true do
				FUNC_LIST[831](loc_1, loc_2, loc_3)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_0 = rt_load_i32(memory_at_0, loc_0 + 8)
		TABLE_LIST[0].data[rt_load_i32(memory_at_0, rt_load_i32(memory_at_0, loc_0) + 28)](loc_0, loc_1, loc_2, loc_3)
		break
	end
end
FUNC_LIST[831] = --[[ __cxxabiv1::__class_type_info::process_found_base_class(__cxxabiv1::__dynamic_cast_info*, void*, int) const ]] function(loc_0, loc_1, loc_2)
	local loc_3 = 0
	local desired
	while true do
		loc_3 = rt_load_i32(memory_at_0, loc_0 + 36)
		if loc_3 == 0 then
			while true do
				rt_store_i32(memory_at_0, loc_0 + 24, loc_2)
				rt_store_i32(memory_at_0, loc_0 + 16, loc_1)
				rt_store_i32(memory_at_0, loc_0 + 36, 1)
				rt_store_i32(memory_at_0, loc_0 + 20, rt_load_i32(memory_at_0, loc_0 + 56))
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			while true do
				if rt_load_i32(memory_at_0, loc_0 + 20) ~= rt_load_i32(memory_at_0, loc_0 + 56) then
					break
				end
				if loc_1 ~= rt_load_i32(memory_at_0, loc_0 + 16) then
					break
				end
				if rt_load_i32(memory_at_0, loc_0 + 24) ~= 2 then
					desired = 1
					break
				end
				rt_store_i32(memory_at_0, loc_0 + 24, loc_2)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32_n8(memory_at_0, loc_0 + 54, 1)
			rt_store_i32(memory_at_0, loc_0 + 24, 2)
			rt_store_i32(memory_at_0, loc_0 + 36, rt_add_i32(loc_3, 1))
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
end
FUNC_LIST[832] = --[[ __cxxabiv1::__class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[820](loc_0, rt_load_i32(memory_at_0, loc_1 + 8), 0)
		if reg_0 ~= 0 then
			while true do
				FUNC_LIST[831](loc_1, loc_2, loc_3)
				break
			end
		end
		break
	end
end
FUNC_LIST[833] = --[[ __cxxabiv1::__class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, void const*, int, bool) const ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[820](loc_0, rt_load_i32(memory_at_0, loc_1 + 8), loc_4)
		if reg_0 ~= 0 then
			while true do
				FUNC_LIST[829](loc_1, loc_2, loc_3)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		while true do
			reg_0 = FUNC_LIST[820](loc_0, rt_load_i32(memory_at_0, loc_1), loc_4)
			if reg_0 == 0 then
				break
			end
			while true do
				if loc_2 ~= rt_load_i32(memory_at_0, loc_1 + 16) then
					while true do
						if rt_load_i32(memory_at_0, loc_1 + 20) ~= loc_2 then
							desired = 2
							break
						end
						break
					end
					if desired then
						if desired == 2 then
							desired = nil
						end
						break
					end
				end
				if loc_3 ~= 1 then
					desired = 1
					break
				end
				rt_store_i32(memory_at_0, loc_1 + 32, 1)
				desired = 0
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_1 + 20, loc_2)
			rt_store_i32(memory_at_0, loc_1 + 32, loc_3)
			rt_store_i32(memory_at_0, loc_1 + 40, rt_add_i32(rt_load_i32(memory_at_0, loc_1 + 40), 1))
			while true do
				if rt_load_i32(memory_at_0, loc_1 + 36) ~= 1 then
					break
				end
				if rt_load_i32(memory_at_0, loc_1 + 24) ~= 2 then
					break
				end
				rt_store_i32_n8(memory_at_0, loc_1 + 54, 1)
				break
			end
			if desired then
				if desired == 1 then
					desired = nil
				end
				break
			end
			rt_store_i32(memory_at_0, loc_1 + 44, 4)
			break
		end
		if desired then
			if desired == 0 then
				desired = nil
			end
			break
		end
		break
	end
end
FUNC_LIST[834] = --[[ __cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, void const*, void const*, int, bool) const ]] function(loc_0, loc_1, loc_2, loc_3, loc_4, loc_5)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[820](loc_0, rt_load_i32(memory_at_0, loc_1 + 8), loc_5)
		if reg_0 ~= 0 then
			while true do
				FUNC_LIST[827](loc_1, loc_2, loc_3, loc_4)
				break
			end
		end
		break
	end
end
FUNC_LIST[835] = --[[ std::__2::__libcpp_refstring::~__libcpp_refstring() ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		reg_0 = FUNC_LIST[836](rt_load_i32(memory_at_0, loc_0))
		loc_1 = reg_0
		reg_0 = FUNC_LIST[837](rt_add_i32(loc_1, 8))
		if rt_lt_i32(reg_0, 0) then
			while true do
				FUNC_LIST[809](loc_1)
				break
			end
		end
		reg_0 = loc_0
		break
	end
	return reg_0
end
FUNC_LIST[836] = --[[ std::__2::__refstring_imp::(anonymous namespace)::rep_from_data(char const*) ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = rt_sub_i32(loc_0, 12)
		break
	end
	return reg_0
end
FUNC_LIST[837] = --[[ int std::__2::(anonymous namespace)::__libcpp_atomic_add[abi:nn180100]<int, int>(int*, int, int) ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	while true do
		loc_1 = rt_sub_i32(rt_load_i32(memory_at_0, loc_0), 1)
		rt_store_i32(memory_at_0, loc_0, loc_1)
		reg_0 = loc_1
		break
	end
	return reg_0
end
FUNC_LIST[838] = --[[ std::logic_error::~logic_error()_869 ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[690](loc_0)
		FUNC_LIST[810](reg_0)
		break
	end
end
FUNC_LIST[839] = --[[ std::logic_error::what() const ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = rt_load_i32(memory_at_0, loc_0 + 4)
		break
	end
	return reg_0
end
FUNC_LIST[840] = --[[ _emscripten_timeout ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[9](loc_0, 0e0)
		FUNC_LIST[841]((if loc_0 == 2 then 27 else (if loc_0 == 1 then 26 else 14)))
		break
	end
end
FUNC_LIST[841] = --[[ raise ]] function(loc_0)
	local loc_1 = 0
	local reg_0
	local desired
	while true do
		reg_0 = FUNC_LIST[845](loc_0)
		if reg_0 ~= 0 then
			while true do
				FUNC_LIST[846](loc_0)
				desired = 0
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		loc_1 = rt_load_i32(memory_at_0, rt_add_i32(rt_shl_i32(loc_0, 2), 30448))
		if loc_1 ~= 0 then
			while true do
				TABLE_LIST[0].data[loc_1](loc_0)
				break
			end
			if desired then
				if desired == 0 then
					desired = nil
				end
				break
			end
		end
		break
	end
end
FUNC_LIST[842] = --[[ action_abort ]] function(loc_0)
	while true do
		FUNC_LIST[696]()
		error("out of code bounds")
	end
end
FUNC_LIST[843] = --[[ action_terminate ]] function(loc_0)
	while true do
		FUNC_LIST[10]()
		FUNC_LIST[844](rt_add_i32(loc_0, 128))
		error("out of code bounds")
	end
end
FUNC_LIST[844] = --[[ _Exit ]] function(loc_0)
	while true do
		FUNC_LIST[11](loc_0)
		error("out of code bounds")
	end
end
FUNC_LIST[845] = --[[ __sig_is_blocked ]] function(loc_0)
	local reg_0
	while true do
		reg_0 = FUNC_LIST[847](rt_load_i32(memory_at_0, 38076), loc_0)
		reg_0 = (if reg_0 ~= 0 then 1 else 0)
		break
	end
	return reg_0
end
FUNC_LIST[846] = --[[ sigaddset ]] function(loc_0)
	while true do
		rt_store_i32(memory_at_0, 38204, bit_or(rt_load_i32(memory_at_0, 38204), rt_shl_i32(1, rt_sub_i32(loc_0, 1))))
		break
	end
end
FUNC_LIST[847] = --[[ sigismember ]] function(loc_0, loc_1)
	local reg_0
	while true do
		reg_0 = bit_and(rt_shr_u32(loc_0, rt_sub_i32(loc_1, 1)), 1)
		break
	end
	return reg_0
end
FUNC_LIST[848] = --[[ dynCall_jiji ]] function(loc_0, loc_1, loc_2, loc_3)
	local reg_0
	while true do
		reg_0 = TABLE_LIST[0].data[loc_0](loc_1, loc_2, loc_3)
		break
	end
	return reg_0
end
FUNC_LIST[849] = --[[ legalstub$dynCall_jiji ]] function(loc_0, loc_1, loc_2, loc_3, loc_4)
	local loc_5 = rt_i64_ZERO
	local reg_0
	while true do
		reg_0 = FUNC_LIST[848](loc_0, loc_1, rt_bit_or_i64(rt_extend_i64_u32(loc_2), rt_shl_i64(rt_extend_i64_u32(loc_3), rt_i64_from_u32(32, 0))), loc_4)
		loc_5 = reg_0
		FUNC_LIST[668](rt_wrap_i32_i64(rt_shr_u64(loc_5, rt_i64_from_u32(32, 0))))
		reg_0 = rt_wrap_i32_i64(loc_5)
		break
	end
	return reg_0
end
FUNC_LIST[850] = --[[ legalfunc$_localtime_js ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[12](rt_wrap_i32_i64(loc_0), rt_wrap_i32_i64(rt_shr_u64(loc_0, rt_i64_from_u32(32, 0))), loc_1)
		break
	end
end
FUNC_LIST[851] = --[[ legalfunc$_gmtime_js ]] function(loc_0, loc_1)
	while true do
		FUNC_LIST[13](rt_wrap_i32_i64(loc_0), rt_wrap_i32_i64(rt_shr_u64(loc_0, rt_i64_from_u32(32, 0))), loc_1)
		break
	end
end
local function run_init_code()
	TABLE_LIST[0] = { min = 309, max = 309, data = {} }
	MEMORY_LIST[0] = rt_allocator_new(258, 258)
	GLOBAL_LIST[0] = { value = 103744 }
	GLOBAL_LIST[1] = { value = 0 }
	do
		local target = TABLE_LIST[0].data
		local offset = 1
		local data = { FUNC_LIST[27],FUNC_LIST[28],FUNC_LIST[34],FUNC_LIST[35],FUNC_LIST[30],FUNC_LIST[31],FUNC_LIST[32],FUNC_LIST[33],FUNC_LIST[36],FUNC_LIST[37],FUNC_LIST[38],FUNC_LIST[40],FUNC_LIST[87],FUNC_LIST[88],FUNC_LIST[94],FUNC_LIST[173],FUNC_LIST[242],FUNC_LIST[244],FUNC_LIST[241],FUNC_LIST[245],FUNC_LIST[246],FUNC_LIST[247],FUNC_LIST[248],FUNC_LIST[249],FUNC_LIST[250],FUNC_LIST[251],FUNC_LIST[252],FUNC_LIST[253],FUNC_LIST[254],FUNC_LIST[255],FUNC_LIST[257],FUNC_LIST[258],FUNC_LIST[259],FUNC_LIST[260],FUNC_LIST[261],FUNC_LIST[262],FUNC_LIST[263],FUNC_LIST[264],FUNC_LIST[265],FUNC_LIST[266],FUNC_LIST[267],FUNC_LIST[268],FUNC_LIST[269],FUNC_LIST[270],FUNC_LIST[272],FUNC_LIST[273],FUNC_LIST[275],FUNC_LIST[276],FUNC_LIST[277],FUNC_LIST[278],FUNC_LIST[279],FUNC_LIST[280],FUNC_LIST[281],FUNC_LIST[282],FUNC_LIST[283],FUNC_LIST[284],FUNC_LIST[285],FUNC_LIST[286],FUNC_LIST[287],FUNC_LIST[288],FUNC_LIST[289],FUNC_LIST[291],FUNC_LIST[292],FUNC_LIST[293],FUNC_LIST[294],FUNC_LIST[295],FUNC_LIST[296],FUNC_LIST[297],FUNC_LIST[298],FUNC_LIST[299],FUNC_LIST[300],FUNC_LIST[301],FUNC_LIST[302],FUNC_LIST[302],FUNC_LIST[303],FUNC_LIST[303],FUNC_LIST[304],FUNC_LIST[304],FUNC_LIST[305],FUNC_LIST[306],FUNC_LIST[307],FUNC_LIST[308],FUNC_LIST[309],FUNC_LIST[310],FUNC_LIST[311],FUNC_LIST[243],FUNC_LIST[316],FUNC_LIST[26],FUNC_LIST[436],FUNC_LIST[369],FUNC_LIST[389],FUNC_LIST[317],FUNC_LIST[271],FUNC_LIST[466],FUNC_LIST[274],FUNC_LIST[290],FUNC_LIST[473],FUNC_LIST[318],FUNC_LIST[319],FUNC_LIST[320],FUNC_LIST[321],FUNC_LIST[322],FUNC_LIST[323],FUNC_LIST[324],FUNC_LIST[325],FUNC_LIST[326],FUNC_LIST[327],FUNC_LIST[328],FUNC_LIST[329],FUNC_LIST[330],FUNC_LIST[331],FUNC_LIST[332],FUNC_LIST[333],FUNC_LIST[334],FUNC_LIST[335],FUNC_LIST[336],FUNC_LIST[337],FUNC_LIST[338],FUNC_LIST[339],FUNC_LIST[340],FUNC_LIST[341],FUNC_LIST[342],FUNC_LIST[343],FUNC_LIST[344],FUNC_LIST[345],FUNC_LIST[346],FUNC_LIST[347],FUNC_LIST[348],FUNC_LIST[349],FUNC_LIST[350],FUNC_LIST[370],FUNC_LIST[371],FUNC_LIST[372],FUNC_LIST[373],FUNC_LIST[381],FUNC_LIST[396],FUNC_LIST[390],FUNC_LIST[391],FUNC_LIST[392],FUNC_LIST[394],FUNC_LIST[395],FUNC_LIST[397],FUNC_LIST[400],FUNC_LIST[401],FUNC_LIST[402],FUNC_LIST[403],FUNC_LIST[404],FUNC_LIST[405],FUNC_LIST[406],FUNC_LIST[407],FUNC_LIST[408],FUNC_LIST[410],FUNC_LIST[411],FUNC_LIST[437],FUNC_LIST[591],FUNC_LIST[448],FUNC_LIST[438],FUNC_LIST[440],FUNC_LIST[441],FUNC_LIST[442],FUNC_LIST[443],FUNC_LIST[444],FUNC_LIST[446],FUNC_LIST[447],FUNC_LIST[450],FUNC_LIST[451],FUNC_LIST[452],FUNC_LIST[453],FUNC_LIST[454],FUNC_LIST[455],FUNC_LIST[456],FUNC_LIST[457],FUNC_LIST[472],FUNC_LIST[467],FUNC_LIST[468],FUNC_LIST[469],FUNC_LIST[470],FUNC_LIST[471],FUNC_LIST[474],FUNC_LIST[475],FUNC_LIST[476],FUNC_LIST[477],FUNC_LIST[478],FUNC_LIST[479],FUNC_LIST[480],FUNC_LIST[481],FUNC_LIST[482],FUNC_LIST[483],FUNC_LIST[484],FUNC_LIST[485],FUNC_LIST[486],FUNC_LIST[487],FUNC_LIST[488],FUNC_LIST[489],FUNC_LIST[490],FUNC_LIST[491],FUNC_LIST[492],FUNC_LIST[493],FUNC_LIST[494],FUNC_LIST[495],FUNC_LIST[496],FUNC_LIST[497],FUNC_LIST[498],FUNC_LIST[499],FUNC_LIST[500],FUNC_LIST[501],FUNC_LIST[502],FUNC_LIST[503],FUNC_LIST[504],FUNC_LIST[505],FUNC_LIST[506],FUNC_LIST[507],FUNC_LIST[508],FUNC_LIST[509],FUNC_LIST[510],FUNC_LIST[511],FUNC_LIST[512],FUNC_LIST[513],FUNC_LIST[514],FUNC_LIST[515],FUNC_LIST[516],FUNC_LIST[517],FUNC_LIST[518],FUNC_LIST[519],FUNC_LIST[520],FUNC_LIST[521],FUNC_LIST[522],FUNC_LIST[523],FUNC_LIST[524],FUNC_LIST[525],FUNC_LIST[526],FUNC_LIST[527],FUNC_LIST[528],FUNC_LIST[529],FUNC_LIST[530],FUNC_LIST[531],FUNC_LIST[532],FUNC_LIST[533],FUNC_LIST[534],FUNC_LIST[535],FUNC_LIST[536],FUNC_LIST[537],FUNC_LIST[538],FUNC_LIST[539],FUNC_LIST[540],FUNC_LIST[541],FUNC_LIST[542],FUNC_LIST[543],FUNC_LIST[544],FUNC_LIST[545],FUNC_LIST[546],FUNC_LIST[547],FUNC_LIST[548],FUNC_LIST[549],FUNC_LIST[550],FUNC_LIST[551],FUNC_LIST[552],FUNC_LIST[553],FUNC_LIST[554],FUNC_LIST[555],FUNC_LIST[556],FUNC_LIST[557],FUNC_LIST[558],FUNC_LIST[559],FUNC_LIST[560],FUNC_LIST[561],FUNC_LIST[562],FUNC_LIST[563],FUNC_LIST[564],FUNC_LIST[565],FUNC_LIST[566],FUNC_LIST[567],FUNC_LIST[568],FUNC_LIST[569],FUNC_LIST[570],FUNC_LIST[571],FUNC_LIST[572],FUNC_LIST[573],FUNC_LIST[574],FUNC_LIST[575],FUNC_LIST[576],FUNC_LIST[585],FUNC_LIST[690],FUNC_LIST[785],FUNC_LIST[741],FUNC_LIST[743],FUNC_LIST[742],FUNC_LIST[806],FUNC_LIST[838],FUNC_LIST[839],FUNC_LIST[838],FUNC_LIST[816],FUNC_LIST[817],FUNC_LIST[623],FUNC_LIST[623],FUNC_LIST[819],FUNC_LIST[834],FUNC_LIST[833],FUNC_LIST[832],FUNC_LIST[817],FUNC_LIST[826],FUNC_LIST[828],FUNC_LIST[830],FUNC_LIST[816],FUNC_LIST[817],FUNC_LIST[818],FUNC_LIST[843],FUNC_LIST[842], }
		table.move(data, 1, #data, offset, target)
	end
	rt_store_string(MEMORY_LIST[0], 1024,"countrz\x00countlz\x00max.z must be greater than or equal to min.z\x00newproxy\x00interval is empty\x00infinity\x00not enough memory\x00attempt to break across metamethod/C-call boundary\x00attempt to yield across metamethod/C-call boundary\x00copy\x00yday\x00wday\x00max.y must be greater than or equal to min.y\x00%m/%d/%y\x00%s: 0x%016llx\x00pattern too complex\x00__newindex\x00__index\x00invalid capture index\x00max\x00-+   0X0x\x00-0X+0X 0X-0x+0x 0x\x00max.x must be greater than or equal to min.x\x00__pow\x00integer overflow\x00C stack overflow\x00string length overflow\x00table overflow\x00unsigned overflow\x00setfenv\x00getfenv\x00__idiv\x00__div\x00Luau\x00next\x00btest\x00isdst\x00sqrt\x00sort\x00data string too short\x00assert\x00insert\x00bnot\x00dot\x00count\x00print\x00codepoint\x00__lt\x00limit\x00LuauStackLimit\x00split\x00arshift\x00lshift\x00rawset\x00offset\x00rawget\x00select\x00\'setfenv\' cannot change environment of given object\x00extract\x00variable-length format\x00__concat\x00status\x00wrong number of arguments\x00too many results\x00trying to access non-existent bits\x00cross\x00ipairs\x00LuauDebugInfoInvArgLeftovers\x00string contains zeros\x00acos\x00too many captures\x00codes\x00buffer access out of bounds\x00abs\x00%s%.*s\x00attempt to compare %s %s %s\x00attempt to perform arithmetic (%s) on %s\x00attempt to index %s with %s\x00attempt to concatenate %s with %s\x00attempt to call missing method \'%s\' of %s\x00attempt to perform arithmetic (%s) on %s and %s\x00%s:%d: %s\x00hour\x00bxor\x00vector\x00error\x00floor\x00bor\x00lower\x00iterate over\x00__iter\x00upper\x00invalid conversion specifier\x00%d-byte integer does not fit into Lua Integer\x00buffer\x00tonumber\x00\'__len\' must return a number\x00char\x00year\x00clear\x00\\r\x00__eq\x00frexp\x00ldexp\x00\'__newindex\' chain too long; possible loop\x00\'__index\' chain too long; possible loop\x00clamp\x00step\x00rep\x00byteswap\x00wrap\x00map\x00LuauMathMap\x00zero\x00gcinfo\x00maxn\x00getn\x00charpattern\x00missing \'[\' after \'%%f\' in pattern\x00duplicate option\x00invalid option\x00std::exception\x00function\x00sln\x00asin\x00max must be greater than or equal to min\x00sign\x00isfrozen\x00table is already frozen\x00rawlen\x00__len\x00atan\x00nan\x00nil or boolean\x00\'%%*\' does not take a form\x00random\x00__unm\x00__mul\x00sl\x00fill\x00xpcall\x00__namecall\x00__call\x00table index is nil\x00ceil\x00invalid level\x00rawequal\x00normal\x00clock\x00LuauCoroCheckStack\x00too many results to unpack\x00traceback\x00pi\x00foreachi\x00month\x00math\x00cosh\x00sinh\x00tanh\x00gmatch\x00foreach\x00debug\x00log\x00string slice too long\x00invalid order function for sorting\x00table modified during sorting\x00__tostring\x00fromstring\x00writestring\x00readstring\x00basic_string\x00invalid use of \'%c\' in replacement string\x00final position out of string\x00initial position out of string\x00\'__tostring\' must return a string\x00LuauFixIndexerSubtypingOrdering\x00LuauInstantiateInSubtyping\x00running\x00error in error handling\x00memory allocation error: block too big\x00deg\x00typeof\x00get length of\x00-inf\x00modf\x00packsize\x00string length does not fit in given size\x00string longer than given size\x00normalize\x00freeze\x00remove\x00too many elements to move\x00width must be positive\x00level must be non-negative\x00field cannot be negative\x00level can\'t be negative\x00true\x00attempt to %s a %s value\x00no value\x00initial value\x00invalid value\x00initial position is a continuation byte\x00rrotate\x00lrotate\x00create\x00date\x00reverse\x00close\x00false\x00noise\x00invalid pattern capture\x00unfinished capture\x00__type\x00clone\x00cannot close %s coroutine\x00cannot resume %s coroutine\x00cannot resume non-suspended coroutine\x00cannot resume dead coroutine\x00too many arguments to resume\x00too many results to resume\x00difftime\x00angle\x00setmetatable\x00getmetatable\x00__metatable\x00table has a protected metatable\x00cannot change a protected metatable\x00LuauVectorMetatable\x00string/function/table\x00attempt to modify a readonly table\x00nil or table\x00field \'%s\' missing in date table\x00isyieldable\x00__le\x00huge\x00format result too large\x00size specifier is too large\x00interval is too large\x00buffer too large\x00resulting string too large\x00index out of range\x00position out of range\x00size out of range\x00value out of range\x00base out of range\x00magnitude\x00__mode\x00invalid UTF-8 code\x00replace\x00fmod\x00__mod\x00destination wrap around\x00find\x00band\x00%0*lld\x00%*lld\x00+%lld\x00yield\x00%+.4ld\x00function or level expected\x00table or string expected\x00randomseed\x00suspended\x00__add\x00rad\x00thread\x00dead\x00:%d\x00%Y-%m-%d\x00invalid capture index %%%d\x00missing argument #%d\x00no function environment for tail call at level %d\x00sec\x00%c\x00gsub\x00__sub\x00Lua\x00userdata\x00integral size (%d) out of limits [1,%d]\x00=[C]\x00\"]\x00GMT\x00%H:%M:%S\x00table index contains NaN\x00table index is NaN\x00_VERSION\x00NAN\x00%H:%M\x00_G\x00INF\x00_LOADED\x00C\x00==\x00<=\x00<\x00writeu8\x00readu8\x00writei8\x00readi8\x00utf8\x00writeu16\x00readu16\x00writei16\x00readi16\x00writef64\x00readf64\x00StudioReportLuauAny2\x00atan2\x00LuauSolverV2\x00writeu32\x00readu32\x00bit32\x00writei32\x00readi32\x00writef32\x00readf32\x00format asks for alignment not power of 2\x00log10\x00\\000\x00...\x00^$*+?.([%-\x00,\x00invalid format (repeated flags)\x00stack overflow (%s)\x00invalid argument #%d (%s)\x00invalid argument #%d to \'%s\' (%s)\x00invalid argument #%d (%s expected, got %s)\x00invalid argument #%d to \'%s\' (%s expected, got %s)\x00invalid \'for\' %s (number expected, got %s)\x00invalid replacement value (a %s)\x00(null)\x00invalid format (width or precision too long)\x00missing argument #%d (%s expected)\x00missing argument #%d to \'%s\' (%s expected)\x00%s: bytecode type version mismatch (expected [%d..%d], got %d)\x00%s: bytecode version mismatch (expected [%d..%d], got %d)\x00malformed pattern (missing arguments to \'%%b\')\x00malformed pattern (missing \']\')\x00malformed pattern (ends with \'%%\')\x00unfinished string for format \'z\'\x00invalid key to \'next\'\x00wrong number of arguments to \'insert\'\x00invalid option \'%%%c\' to \'format\'\x00invalid value (%s) at index %d in table for \'concat\'\x00invalid option \'%s\'\x00attempt to index %s with \'%s\'\x00attempt to index vector with \'%s\'\x00name conflict for module \'%s\'\x00missing size for format option \'c\'\x00invalid format option \'%c\'\x00invalid next option for option \'X\'\x00aAbBcdHIjmMpSUwWxXyYzZ%\x00[string \"\x00assertion failed!\x00 function \x00%s:%d: \x00\n\r\x00... (+%d frames)\n\x00\t")
	rt_store_string(MEMORY_LIST[0], 6608,"u\x0f\x00\x00\x05\x00\x00\x00\xab\r\x00\x00\x06\x00\x00\x00>\x07\x00\x00\x07\x00\x00\x00F\n\x00\x00\x08\x00\x00\x00\xcf\x12\x00\x00\t\x00\x00\x00w\x11\x00\x00\n\x00\x00\x00\x89\x0f\x00\x00\x0b")
	rt_store_string(MEMORY_LIST[0], 6672,"\xab\r\x00\x00\x1b\x13\x00\x00\xd3\x0b\x00\x006\x13\x00\x006\x13")
	rt_store_string(MEMORY_LIST[0], 6704,"j\x06\x00\x00\x1b\x00\x00\x00\x0f\t\x00\x00\x1c\x00\x00\x00`\n\x00\x00\x1d\x00\x00\x00\x1f\x06\x00\x00\x1e\x00\x00\x00\x9f\x10\x00\x00\x1f\x00\x00\x009\x06\x00\x00\x13\x00\x00\x00=\x04\x00\x00 \x00\x00\x00\x87\x06\x00\x00!\x00\x00\x00\xca\x0b\x00\x00\"\x00\x00\x00\xd4\x06\x00\x00#\x00\x00\x00\xc6\x06\x00\x00$\x00\x00\x000\x0b\x00\x00%\x00\x00\x00\xdb\x06\x00\x00&\x00\x00\x00\x17\x06\x00\x00\'\x00\x00\x00\x92\x10\x00\x00(\x00\x00\x00\x91\t\x00\x00)\x00\x00\x00\xb0\x0c\x00\x00*\x00\x00\x00\xc8\x0f\x00\x00+\x00\x00\x00\xf6\r\x00\x00,")
	rt_store_string(MEMORY_LIST[0], 6864,"b\n\x00\x00-\x00\x00\x00\x0e\x0c\x00\x00.")
	rt_store_string(MEMORY_LIST[0], 6896,"\xb7\x06\x00\x00/\x00\x00\x00\xb7\x12\x00\x000\x00\x00\x00x\x06\x00\x001\x00\x00\x00\x1b\t\x00\x002\x00\x00\x00\x03\t\x00\x003\x00\x00\x00>\x06\x00\x004\x00\x00\x00\x16\x07\x00\x005\x00\x00\x00m\x0f\x00\x006\x00\x00\x00\xbf\x06\x00\x007\x00\x00\x00\x87\x12\x00\x008\x00\x00\x00e\x0f\x00\x009\x00\x00\x00\xb8\x06\x00\x00:\x00\x00\x00\x08\x04\x00\x00;\x00\x00\x00\x00\x04\x00\x00<\x00\x00\x00=\n\x00\x00=")
	rt_store_string(MEMORY_LIST[0], 7024,"u\x0f\x00\x00>\x00\x00\x00\xb9\x0c\x00\x00?\x00\x00\x00\xb0\x0c\x00\x00@\x00\x00\x00u\x14\x00\x00A\x00\x00\x00f\x14\x00\x00B\x00\x00\x00\x9b\x14\x00\x00C\x00\x00\x00\x8a\x14\x00\x00D\x00\x00\x00\xfc\x14\x00\x00E\x00\x00\x00\xe5\x14\x00\x00F\x00\x00\x00\r\x15\x00\x00G\x00\x00\x00\xac\x14\x00\x00H\x00\x00\x00m\x14\x00\x00I\x00\x00\x00^\x14\x00\x00J\x00\x00\x00\x92\x14\x00\x00K\x00\x00\x00\x81\x14\x00\x00L\x00\x00\x00\xf3\x14\x00\x00M\x00\x00\x00\xdc\x14\x00\x00N\x00\x00\x00\x04\x15\x00\x00O\x00\x00\x00\xa3\x14\x00\x00P\x00\x00\x00\xd0\x0c\x00\x00Q\x00\x00\x00\xc4\x0c\x00\x00R\x00\x00\x009\x0b\x00\x00S\x00\x00\x00\xd9\x04\x00\x00T\x00\x00\x00\x86\x0b\x00\x00U")
	rt_store_string(MEMORY_LIST[0], 7232,"\xc5\x19\x00\x00V\x00\x00\x00A\x10\x00\x00X\x00\x00\x00q\x11\x00\x00Y\x00\x00\x00\xd5\x07\x00\x00Z\x00\x00\x00i\r\x00\x00[\x00\x00\x00*\x0c\x00\x00\\\x00\x00\x00M\x0c\x00\x00]\x00\x00\x00|\x14\x00\x00^\x00\x00\x00\xed\x14\x00\x00_\x00\x00\x00\x8a\t\x00\x00`\x00\x00\x00\x08\t\x00\x00a")
	rt_store_string(MEMORY_LIST[0], 7328,"\x0c\x08\x00\x00c\x00\x00\x00\xd3\x07\x00\x00d\x00\x00\x00\xdc\n\x00\x00e\x00\x00\x00\xc9\x14\x00\x00f\x00\x00\x00=\x0b\x00\x00g\x00\x00\x00\xb7\x0b\x00\x00h\x00\x00\x00/\x0c\x00\x00i\x00\x00\x00\xd4\x07\x00\x00j\x00\x00\x00\xf2\r\x00\x00k\x00\x00\x00\xd7\t\x00\x00l\x00\x00\x00\x15\t\x00\x00m\x00\x00\x00\x8f\x12\x00\x00n\x00\x00\x00\xcf\t\x00\x00o\x00\x00\x00\xd5\t\x00\x00p\x00\x00\x00>\x15\x00\x00q\x00\x00\x00S\x0c\x00\x00r\x00\x00\x00i\x05\x00\x00s\x00\x00\x00\x06\x0b\x00\x00t\x00\x00\x00\x10\x0e\x00\x00u\x00\x00\x00\xb9\x05\x00\x00v\x00\x00\x00+\x13\x00\x00w\x00\x00\x00p\x0b\x00\x00x\x00\x00\x00\x10\x13\x00\x00y\x00\x00\x004\x0c\x00\x00z\x00\x00\x00\xdd\n\x00\x00{\x00\x00\x00J\x06\x00\x00|\x00\x00\x009\x0c\x00\x00}\x00\x00\x00>\x0b\x00\x00~\x00\x00\x00\x95\x0f\x00\x00\x7f\x00\x00\x00.\n\x00\x00\x80\x00\x00\x00\n\x0b\x00\x00\x81\x00\x00\x00\xac\x12\x00\x00\x82")
	rt_store_string(MEMORY_LIST[0], 7600,"\x97\xa0\x89[Z\x0f\x83\r\xc9_`5\xc2\xe9\x07\xe1\x8c$g\x1eE\x8e\x08c%\xf0\x15\n\x17\xbe\x06\x94\xf7x\xeaK\x00\x1a\xc5>^\xfc\xdb\xcbu#\x0b 9\xb1!X\xed\x958W\xae\x14}\x88\xab\xa8D\xafJ\xa5G\x86\x8b0\x1b\xa6M\x92\x9e\xe7So\xe5z<\xd3\x85\xe6\xdci\\)7.\xf5(\xf4f\x8f6A\x19?\xa1\x01\xd8PI\xd1L\x84\xbb\xd0Y\x12\xa9\xc8\xc4\x87\x82t\xbc\x9fV\xa4dm\xc6\xad\xba\x03@4\xd9\xe2\xfa|{\x05\xca&\x93v~\xffRU\xd4\xcf\xce;\xe3/\x10:\x11\xb6\xbd\x1c*\xdf\xb7\xaa\xd5w\xf8\x98\x02,\x9a\xa3F\xdd\x99e\x9b\xa7+\xac\t\x81\x16\'\xfd\x13blnOq\xe0\xe8\xb2\xb9ph\xda\xf6a\xe4\xfb\"\xf2\xc1\xee\xd2\x90\x0c\xbf\xb3\xa2\xf1Q3\x91\xeb\xf9\x0e\xefk1\xc0\xd6\x1f\xb5\xc7j\x9d\xb8T\xcc\xb0sy2-\x7f\x04\x96\xfe\x8a\xec\xcd]\xderC\x1d\x18H\xf3\x8d\x80\xc3NB\xd7=\x9c\xb4\x97")
	rt_store_string(MEMORY_LIST[0], 7874,"\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80\xbf\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80\xbf\x00\x00\x00\x00\x00\x00\x80\xbf\x00\x00\x80\xbf\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80\xbf\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80\xbf\x00\x00\x80\xbf\x00\x00\x00\x00\x00\x00\x80\xbf\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80\xbf\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x80\xbf\x00\x00\x00\x00\x00\x00\x80\xbf\x00\x00\x80\xbf\x00\x00\x80?\x00\x00\x80?")
	rt_store_string(MEMORY_LIST[0], 8034,"\x80\xbf\x00\x00\x80?\x00\x00\x80\xbf\x00\x00\x80?")
	rt_store_string(MEMORY_LIST[0], 8058,"\x80\xbf\x00\x00\x80\xbfO\xdc\xbc\xbe\xfc\xb1w\xff{\x0f\xbb\x13\x9c\xe8\xe8%;D33DC43;\xfc\x7f\x90\xad\x1f\xd0\x8d\xe4\x92g\x7f\xd9\xa7=\xae\xbc<\xba\xb3<\xab\xb3\xbb\xb5\xc9\xa6\xad\x8f\xacq\x9d\xaa\xb4=`\xc3?wo\xccK\xbb\xb4K\xbc\xa4KmSx@\x91I\xcc\xae\x19n\x88s\xf7\xe9\xfaX\xbbC;\xb43\xbc\xa3;6V\xfbM6\x94\x10\xc2\xe5B\xf5\x12\xfc\x15Y\x98\xcb3;\xa3C;\xb43\xc7:\x82%\xcb\x85t\xd7\x8c\x82k6\x932c}<DCCDL\xb44\xe4\xac*\x17\x98\n4\xef5|\xc8\x16q\x89\xfb\x86K3C33C33;?\xc6\xd2\xdf\xd4\xc8\x84t\xe0A\x00\xf4\xd9\xec)\xbcK\xbb\xbc\xbc\xcb\xac\xcc\x95\xc9%\xbb\xce\x9fk\x935\xec\xbe\x00\xd9\r\xb1\xca\xbb;\xbb\xb3:\xab\xb3:\xf5\xda_\rXf\xab\xa3\xbb\xeb\xe0\xd2\xd0`>\xc1\xbbM\xdb\xb4M\xdc\xc3L\xb8\x80\xff\xaa\xa8\xad\xb5\xb5\xbbV$\x13\x92\x99\x81\r\xab4;\xc34:\xb33R0\xc14`\xff\xbc\xc9\xb6\xf0\x02\xdd\x93\xb3\x89\xfc\xbc4<\xb4D;\xc33\xbd~)p$w\xf9\xdf\xf8V\xbc\x93+~xYLCCDDD\xb4C\x94}t\x88\xcf_\xa9\xf8+\x91\xce\x97cL\xa4u;4C4443Dk\x15\x0f\xbf\xf8\xf0\x08\x8a\x00Y\x1bd\xcb\x9e\x8e\x1b\xccL\xab\xa3:\xab\xab\xbb\xab\x7f{\xd0\xc6\xe2?\x99*@\xfe\x8e\x03\xa8F\xe5\xccK\xdb\xb4M\xbc\xb4L\xd2\x92si\x99$$\xaa\xea\xb9\xd0\xd5\xd1\x0b\xe5\xdd\xbc3;\xb3;\xba\xa3;\xea\x1a\x11\x92d\x08\xe5\xbc\x85\xf5\xbc\xa6\x1c\xbb\xf4\x88\xcbCL\xc4DL\xb4D+e\x19\xe2X\x17\xb7\xd1\xa9\xa4N@\x13a\xc3\xd3;DD\xc4DL\xc4D\x00\x00\x00\x00\x10\xa5\xd4\xe8\x00\x00\x00\x00\x00\x00\x00\x00LDDDDDDD\x84\t\x94\xf8x9?\x81\x00\x00\x00\x00\x00\x00\x00@\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcco\\\xea{\xce2~\x8f\x00\x00\x00\xa2#\x00\x82\xe4\xccL\xcc\xc4L\xbc\xa3\xbbE\"\x9a\x17&\'O\x9f\x91e\x94,Bb\xd7\x01\xab;\xba\xa3:\xbb\xa3J\xa8\xad\xc8\x8c8e\xde\xb0\xccK)C_\xa5%;\xbcCK\xb43;\xa3<\x9a\x1dqB\xf9\x1d]\xc4\x95\x83O2\xbd\xd0\xa5;\xcbDK\xc44L\xc4D\xe9\x8dp\x1ad\xee\x01\xda\x96\x94\xcc Ho\x0e\xe8<3334;\xb33\x84k}\xb4{x\t\xf2\x9b\xa4#\xbd]\x8cg\xc0;DCDDD4D\xc2\xc5\x9b[\x92\x86[\x86\xb3\xa9E\xba\x92#\x8a\x0b\xbb;\xcb\xb4\xcc\xbc\xcc\xdb\xb2\xa0\x97\xfa\\\xb4*\x95\x84a\xf2{tZ\x94\xdd\xbc<\xca\xb3J\xbb\xc4;%\x8c9\xdb4\xc2\x9b\xa5\x96\x90i~\x83\xb9\xfaC\xac3\xbb\xb3:\xac\xb3;\xce\xbe\xe9TS\xbf\xdc\xb70\xeb\x8aSm\xed\x11\x0c\xdc4L\xb3C;\xb43\xa5x\\\xd3\x9b\xce \xcc\xf5A\xb4\xf7\x8d\x03\xec1\xcbDK\xc4CL\xc44:0\x1f\x97\xdc\xb5\xa0\xe2\x1e\xd6\x0f\x84d\xaeD.<3333333<D\xa7\xa4\xd9|\x9b\xfb\xb2\xa3}\x01\xef@\x98\x16L433DD3C\x1a\x9c@\xb6\xef\x8e\xab\x8b\x8fT\xf7\xc2\xb6\x89\xd0\x1a\xcbK\xcc\xc4<\xcc\xbd\xdc(1\x91\xe9\xe5\xa4\x10\x9b\'\x83\x1c\x19\xb4\xf2|\xca\xbbK\xbb\xc3;\xcb\xb3:)\xf4;b\xd9 (\xacE\xcd\xbd\x9f\xfaEcT\xcbC<\xc4C\xcc\xb3;,\xdd\xac\x03@\xe4!\xbf\xc4V\xbd\xe6c\nG\xe0\xbcDL\xb4CJ\xb3DA\xb8\x8c\x9c\x9d\x173\xd4\xecQa\xa4\x92\x06\xa6_<33\xa33:\xa3C")
	rt_store_string(MEMORY_LIST[0], 9015,"\x80\x00\x00\x00\x00\x00\x00\x00\xa0\x00\x00\x00\x00\x00\x00\x00\xc8\x00\x00\x00\x00\x00\x00\x00\xfa\x00\x00\x00\x00\x00\x00@\x9c\x00\x00\x00\x00\x00\x00P\xc3\x00\x00\x00\x00\x00\x00$\xf4\x00\x00\x00\x00\x00\x80\x96\x98\x00\x00\x00\x00\x00 \xbc\xbe\x00\x00\x00\x00\x00(k\xee\x00\x00\x00\x00\x00\xf9\x02\x95\x00\x00\x00\x00@\xb7C\xba\x00\x00\x00\x00\x10\xa5\xd4\xe8\x00\x00\x00\x00*\xe7\x84\x91\x00\x00\x00\x80\xf4 \xe6\xb5\x00\x00\x00\xa01\xa9_\xe300010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899")
	rt_store_string(MEMORY_LIST[0], 9361,"\x01\x02\x02\x03\x03\x03\x03\x04\x04\x04\x04\x04\x04\x04\x04\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x05\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x06\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x07\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\xda\x0b\x00\x00\x83\x00\x00\x00|\x0f\x00\x00\x84\x00\x00\x00\x83\x10\x00\x00\x85\x00\x00\x00\x87\x10\x00\x00\x86")
	rt_store_string(MEMORY_LIST[0], 9664,"`\x0f\x00\x00\x89\x00\x00\x00\xb7\t\x00\x00\x8a\x00\x00\x00\xb2\x12\x00\x00\x8b\x00\x00\x00.\x07\x00\x00\x8c\x00\x00\x00>\x0c\x00\x00\x8d\x00\x00\x00\xb1\x13\x00\x00\x8e\x00\x00\x009\x0b\x00\x00\x8f\x00\x00\x00\x1f\t\x00\x00\x90\x00\x00\x00?\x0c\x00\x00\x91\x00\x00\x009\n\x00\x00\x92\x00\x00\x00\x81\x0f\x00\x00\x93\x00\x00\x00\xb8\x13\x00\x00\x94\x00\x00\x009\t\x00\x00\x95\x00\x00\x00\xb1\x06\x00\x00\x96\x00\x00\x00\t\x0c\x00\x00\x97\x00\x00\x00\x15\x0e\x00\x00\x98\x00\x00\x00\x07\x0c\x00\x00\x99")
	rt_store_string(MEMORY_LIST[0], 9840,"7\x07\x00\x00\x9d\x00\x00\x00E\x0c\x00\x00\x9e\x00\x00\x00\x1b\x0c\x00\x00\x9f\x00\x00\x00l\n\x00\x00\xa0\x00\x00\x00g\n\x00\x00\xa1\x00\x00\x00q\x06\x00\x00\xa2\x00\x00\x00v\x0e\x00\x00\xa3\x00\x00\x00O\x06\x00\x00\xa4\x00\x00\x00\t\x0c\x00\x00\xa5\x00\x00\x00\x07\x0c\x00\x00\x9a\x00\x00\x00\x92\x0e\x00\x00\xa6\x00\x00\x00u\x0f\x00\x00\xa7\x00\x00\x00\xb2\x12\x00\x00\xa8\x00\x00\x00\xc1\t\x00\x00\xa9\x00\x00\x00o\x0e\x00\x00\xaa\x00\x00\x00\x0f\x0b\x00\x00\xab\x00\x00\x00\xcd\x0f\x00\x00\xac")
	rt_store_string(MEMORY_LIST[0], 9984,"\xb3\x0b\x00\x00M\x0b\x00\x00\xc0\x13\x00\x00\xb0\t\x00\x00\x08\t\x00\x00i\r\x00\x00q\x11\x00\x00\xcf\n\x00\x00\xc0\x13\x00\x00/\x13\x00\x00\x8a\t\x00\x00\x00\x00\x00\x00K\x05\x00\x00@\x05\x00\x00m\x12\x00\x00\x92\x0b\x00\x00\x9d\x0b\x00\x002\t\x00\x007\x0b\x00\x00\xca\t\x00\x00%\x13\x00\x00\xb6\x13\x00\x00}\x0b\x00\x00.\x06\x00\x00\'\x06\x00\x00\x94\x12\x00\x00\xb7\x05\x00\x00w\x0b\x00\x00\x97\x06\x00\x00\x83\x11\x00\x005\x07\x00\x00\xc6\x0f\x00\x00\xac\x10")
	rt_store_string(MEMORY_LIST[0], 10128,"\xcd\x06\x00\x00\xae\x00\x00\x00\x8d\x06\x00\x00\xaf\x00\x00\x00\xb7\t\x00\x00\xb0\x00\x00\x009\x0b\x00\x00\xb1\x00\x00\x00\xea\x07\x00\x00\xb2")
	rt_store_string(MEMORY_LIST[0], 10176,"[\x00-\x7f\xc2-\xf4][\x80-\xbf]*\x00\x00\xff\x00\x00\x00\x7f\x00\x00\x00\xff\x07\x00\x00\xff\xff\x00\x00u\x0f\x00\x00\xb4\x00\x00\x00c\x12\x00\x00\xb5\x00\x00\x00e\x0e\x00\x00\xb6\x00\x00\x00\x93\x07\x00\x00\xb7\x00\x00\x00}\x06\x00\x00\xb8\x00\x00\x00\x8c\x10\x00\x00\xb9\x00\x00\x00\x15\t\x00\x00\xba\x00\x00\x00\xb7\x0b\x00\x00\xbb\x00\x00\x00\x0c\x08\x00\x00\xbc\x00\x00\x00\n\x0b\x00\x00\xbd\x00\x00\x00.\n\x00\x00\xbe\x00\x00\x00i\x05\x00\x00\xbf\x00\x00\x00\x06\x0b\x00\x00\xc0")
	rt_store_string(MEMORY_LIST[0], 10324,"\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00\xc8\x00\x00\x00\xc9\x00\x00\x00\xca\x00\x00\x00\xcb\x00\x00\x00\xcc\x00\x00\x00\xcd\x00\x00\x00\xce\x00\x00\x00\xcf\x00\x00\x00\xd0\x00\x00\x00\xd1\x00\x00\x00\xd2\x00\x00\x00\xd3\x00\x00\x00\xd4\x00\x00\x00\xd5\x00\x00\x00\xd6\x00\x00\x00\xd7\x00\x00\x00\xd8\x00\x00\x00\xd9\x00\x00\x00\xda\x00\x00\x00\xdb\x00\x00\x00\xdc\x00\x00\x00\xdd\x00\x00\x00\xde\x00\x00\x00\xdf\x00\x00\x00\xe0\x00\x00\x00\xe1\x00\x00\x00\xe2\x00\x00\x00\xe3\x00\x00\x00\xe4\x00\x00\x00\xe5\x00\x00\x00\xe6\x00\x00\x00\xe7\x00\x00\x00\xe8\x00\x00\x00\xe9\x00\x00\x00\xea\x00\x00\x00\xeb\x00\x00\x00\xec\x00\x00\x00\xed\x00\x00\x00\xee\x00\x00\x00\xef\x00\x00\x00\xf0\x00\x00\x00\xf1\x00\x00\x00\xf2\x00\x00\x00\xf3\x00\x00\x00\xf4\x00\x00\x00\xf5\x00\x00\x00\xf6\x00\x00\x00\xf7\x00\x00\x00\xf8\x00\x00\x00\xf9\x00\x00\x00\xfa\x00\x00\x00\xfb\x00\x00\x00\xfc\x00\x00\x00\xfd\x00\x00\x00\xfe\x00\x00\x00\xff\x00\x00\x00\x00\x01\x00\x00\x01\x01\x00\x00\x02\x01\x00\x00\x03\x01\x00\x00\x04\x01\x00\x00\x05\x01\x00\x00\x06\x01\x00\x00\x07\x01\x00\x00\x08\x01\x00\x00\t\x01\x00\x00\n\x01\x00\x00\x0b\x01\x00\x00\x0c\x01\x00\x00\r\x01\x00\x00\x0e\x01\x00\x00\x0f\x01\x00\x00\x10\x01\x00\x00\x11\x01\x00\x00\x12\x01\x00\x00\x13\x01\x00\x00\x14\x01\x00\x00\x15\x01\x00\x00\x16\x01\x00\x00\x17\x01\x00\x00\x18\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01\x00\x00\x19\x01")
	rt_store_string(MEMORY_LIST[0], 11344,"\x02\x00\x00\x00P\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00D\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1d\x00\x00\x00\x1f\x00\x00\x00\x1c\x00\x00\x00\x1e\x00\x00\x00 \x00\x00\x00!\x00\x00\x00\"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00=\x00\x00\x00>\x00\x00\x00O\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00<\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00%\x00\x00\x00,")
	rt_store_string(MEMORY_LIST[0], 12368,"\x01\x00\x00\x00O\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00C\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1c\x00\x00\x00\x1e\x00\x00\x00\x1b\x00\x00\x00\x1d\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00\"\x00\x00\x00#\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00<\x00\x00\x00=\x00\x00\x00N\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00;\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00$\x00\x00\x00+")
	rt_store_string(MEMORY_LIST[0], 13392,"\xfe\x82+eG\x15g@\x00\x00\x00\x00\x00\x008C\x00\x00\xfa\xfeB.v\xbf:;\x9e\xbc\x9a\xf7\x0c\xbd\xbd\xfd\xff\xff\xff\xff\xdf?<TUUUU\xc5?\x91+\x17\xcfUU\xa5?\x17\xd0\xa4g\x11\x11\x81?\x00\x00\x00\x00\x00\x00\xc8B\xef9\xfa\xfeB.\xe6?$\xc4\x82\xff\xbd\xbf\xce?\xb5\xf4\x0c\xd7\x08k\xac?\xccPF\xd2\xab\xb2\x83?\x84:N\x9b\xe0\xd7U?")
	rt_store_string(MEMORY_LIST[0], 13518,"\xf0?n\xbf\x88\x1aO;\x9b<53\xfb\xa9=\xf6\xef?]\xdc\xd8\x9c\x13`q\xbca\x80w>\x9a\xec\xef?\xd1f\x87\x10z^\x90\xbc\x85\x7fn\xe8\x15\xe3\xef?\x13\xf6g5R\xd2\x8c<t\x85\x15\xd3\xb0\xd9\xef?\xfa\x8e\xf9#\x80\xce\x8b\xbc\xde\xf6\xdd)k\xd0\xef?a\xc8\xe6aN\xf7`<\xc8\x9bu\x18E\xc7\xef?\x99\xd33[\xe4\xa3\x90<\x83\xf3\xc6\xca>\xbe\xef?m{\x83]\xa6\x9a\x97<\x0f\x89\xf9lX\xb5\xef?\xfc\xef\xfd\x92\x1a\xb5\x8e<\xf7Gr+\x92\xac\xef?\xd1\x9c/p=\xbe><\xa2\xd1\xd32\xec\xa3\xef?\x0bn\x90\x894\x03j\xbc\x1b\xd3\xfe\xaff\x9b\xef?\x0e\xbd/*RV\x95\xbcQ[\x12\xd0\x01\x93\xef?U\xeaN\x8c\xef\x80P\xbc\xcc1l\xc0\xbd\x8a\xef?\x16\xf4\xd5\xb9#\xc9\x91\xbc\xe0-\xa9\xae\x9a\x82\xef?\xafU\\\xe9\xe3\xd3\x80<Q\x8e\xa5\xc8\x98z\xef?H\x93\xa5\xea\x15\x1b\x80\xbc{Q}<\xb8r\xef?=2\xdeU\xf0\x1f\x8f\xbc\xea\x8d\x8c8\xf9j\xef?\xbfS\x13?\x8c\x89\x8b<u\xcbo\xeb[c\xef?&\xeb\x11v\x9c\xd9\x96\xbc\xd4\\\x04\x84\xe0[\xef?`/:>\xf7\xec\x9a<\xaa\xb9h1\x87T\xef?\x9d8\x86\xcb\x82\xe7\x8f\xbc\x1d\xd9\xfc\"PM\xef?\x8d\xc3\xa6DAo\x8a<\xd6\x8cb\x88;F\xef?}\x04\xe4\xb0\x05z\x80<\x96\xdc}\x91I?\xef?\x94\xa8\xa8\xe3\xfd\x8e\x96<8bunz8\xef?}Ht\xf2\x18^\x87<?\xa6\xb2O\xce1\xef?\xf2\xe7\x1f\x98+G\x80<\xdd|\xe2eE+\xef?^\x08q?{\xb8\x96\xbc\x81c\xf5\xe1\xdf$\xef?1\xab\tm\xe1\xf7\x82<\xe1\xde\x1f\xf5\x9d\x1e\xef?\xfa\xbfo\x1a\x9b!=\xbc\x90\xd9\xda\xd0\x7f\x18\xef?\xb4\n\x0cr\x827\x8b<\x0b\x03\xe4\xa6\x85\x12\xef?\x8f\xcb\xce\x89\x92\x14n<V/>\xa9\xaf\x0c\xef?\xb6\xab\xb0MuM\x83<\x15\xb71\n\xfe\x06\xef?Lt\xac\xe2\x01B\x86<1\xd8L\xfcp\x01\xef?J\xf8\xd3]9\xdd\x8f<\xff\x16d\xb2\x08\xfc\xee?\x04[\x8e;\x80\xa3\x86\xbc\xf1\x9f\x92_\xc5\xf6\xee?hPK\xcc\xedJ\x92\xbc\xcb\xa9:7\xa7\xf1\xee?\x8e-Q\x1b\xf8\x07\x99\xbcf\xd8\x05m\xae\xec\xee?\xd26\x94>\xe8\xd1q\xbc\xf7\x9f\xe54\xdb\xe7\xee?\x15\x1b\xce\xb3\x19\x19\x99\xbc\xe5\xa8\x13\xc3-\xe3\xee?mL*\xa7H\x9f\x85<\"4\x12L\xa6\xde\xee?\x8ai(z`\x12\x93\xbc\x1c\x80\xac\x04E\xda\xee?[\x89\x17H\x8f\xa7X\xbc*.\xf7!\n\xd6\xee?\x1b\x9aIg\x9b,|\xbc\x97\xa8P\xd9\xf5\xd1\xee?\x11\xac\xc2`\xedcC<-\x89a`\x08\xce\xee?\xefd\x06;\tf\x96<W\x00\x1d\xedA\xca\xee?y\x03\xa1\xda\xe1\xccn<\xd0<\xc1\xb5\xa2\xc6\xee?0\x12\x0f?\x8e\xff\x93<\xde\xd3\xd7\xf0*\xc3\xee?\xb0\xafz\xbb\xce\x90v<\'*6\xd5\xda\xbf\xee?w\xe0T\xeb\xbd\x1d\x93<\r\xdd\xfd\x99\xb2\xbc\xee?\x8e\xa3q\x004\x94\x8f\xbc\xa7,\x9dv\xb2\xb9\xee?I\xa3\x93\xdc\xcc\xde\x87\xbcBf\xcf\xa2\xda\xb6\xee?_8\x0f\xbd\xc6\xdex\xbc\x82O\x9dV+\xb4\xee?\xf6\\{\xecF\x12\x86\xbc\x0f\x92]\xca\xa4\xb1\xee?\x8e\xd7\xfd\x18\x055\x93<\xda\'\xb56G\xaf\xee?\x05\x9b\x8a/\xb7\x98{<\xfd\xc7\x97\xd4\x12\xad\xee?\tT\x1c\xe2\xe1c\x90<)TH\xdd\x07\xab\xee?\xea\xc6\x19P\x85\xc74<\xb7FY\x8a&\xa9\xee?5\xc0d+\xe62\x94<H!\xad\x15o\xa7\xee?\x9fv\x99aJ\xe4\x8c\xbc\t\xdcv\xb9\xe1\xa5\xee?\xa8M\xef;\xc53\x8c\xbc\x85U:\xb0~\xa4\xee?\xae\xe9+\x89xS\x84\xbc \xc3\xcc4F\xa3\xee?XXVx\xdd\xce\x93\xbc%\"U\x828\xa2\xee?d\x19~\x80\xaa\x10W<s\xa9L\xd4U\xa1\xee?(\"^\xbf\xef\xb3\x93\xbc\xcd;\x7ff\x9e\xa0\xee?\x82\xb94\x87\xad\x12j\xbc\xbf\xda\x0bu\x12\xa0\xee?\xee\xa9m\xb8\xefgc\xbc/\x1ae<\xb2\x9f\xee?Q\x88\xe0T=\xdc\x80\xbc\x84\x94Q\xf9}\x9f\xee?\xcf>Z~d\x1fx\xbct_\xec\xe8u\x9f\xee?\xb0}\x8b\xc0J\xee\x86\xbct\x81\xa5H\x9a\x9f\xee?\x8a\xe6U\x1e2\x19\x86\xbc\xc9gBV\xeb\x9f\xee?\xd3\xd4\t^\xcb\x9c\x90<?]\xdeOi\xa0\xee?\x1d\xa5M\xb9\xdc2{\xbc\x87\x01\xebs\x14\xa1\xee?k\xc0gT\xfd\xec\x94<2\xc10\x01\xed\xa1\xee?Ul\xd6\xab\xe1\xebe<bN\xcf6\xf3\xa2\xee?B\xcf\xb3/\xc5\xa1\x88\xbc\x12\x1a>T\'\xa4\xee?47;\xf1\xb6i\x93\xbc\x13\xceL\x99\x89\xa5\xee?\x1e\xff\x19:\x84^\x80\xbc\xad\xc7#F\x1a\xa7\xee?nWr\xd8P\xd4\x94\xbc\xed\x92D\x9b\xd9\xa8\xee?\x00\x8a\x0e[g\xad\x90<\x99f\x8a\xd9\xc7\xaa\xee?\xb4\xea\xf0\xc1/\xb7\x8d<\xdb\xa0*B\xe5\xac\xee?\xff\xe7\xc5\x9c`\xb6e\xbc\x8cD\xb5\x162\xaf\xee?D_\xf3Y\x83\xf6{<6w\x15\x99\xae\xb1\xee?\x83=\x1e\xa7\x1f\t\x93\xbc\xc6\xff\x91\x0b[\xb4\xee?)\x1el\x8b\xb8\xa9]\xbc\xe5\xc5\xcd\xb07\xb7\xee?Y\xb9\x90|\xf9#l\xbc\x0fR\xc8\xcbD\xba\xee?\xaa\xf9\xf4\"CC\x92\xbcPN\xde\x9f\x82\xbd\xee?K\x8ef\xd7l\xca\x85\xbc\xba\x07\xcap\xf1\xc0\xee?\'\xce\x91+\xfc\xafq<\x90\xf0\xa3\x82\x91\xc4\xee?\xbbs\n\xe15\xd2m<##\xe3\x19c\xc8\xee?c\"b\"\x04\xc5\x87\xbce\xe5]{f\xcc\xee?\xd51\xe2\xe3\x86\x1c\x8b<3-J\xec\x9b\xd0\xee?\x15\xbb\xbc\xd3\xd1\xbb\x91\xbc]%>\xb2\x03\xd5\xee?\xd21\xee\x9c1\xcc\x90<X\xb30\x13\x9e\xd9\xee?\xb3Zsn\x84i\x84<\xbf\xfdyUk\xde\xee?\xb4\x9d\x8e\x97\xcd\xdf\x82\xbcz\xf3\xd3\xbfk\xe3\xee?\x873\xcb\x92w\x1a\x8c<\xad\xd3Z\x99\x9f\xe8\xee?\xfa\xd9\xd1J\x8f{\x90\xbcf\xb6\x8d)\x07\xee\xee?\xba\xae\xdcV\xd9\xc3U\xbc\xfb\x15O\xb8\xa2\xf3\xee?@\xf6\xa6=\x0e\xa4\x90\xbc:Y\xe5\x8dr\xf9\xee?4\x93\xad8\xf4\xd6h\xbcG^\xfb\xf2v\xff\xee?5\x8aXk\xe2\xee\x91\xbcJ\x06\xa10\xb0\x05\xef?\xcd\xdd_\n\xd7\xfft<\xd2\xc1K\x90\x1e\x0c\xef?\xac\x98\x92\xfa\xfb\xbd\x91\xbc\t\x1e\xd7[\xc2\x12\xef?\xb3\x0c\xaf0\xaens<\x9cR\x85\xdd\x9b\x19\xef?\x94\xfd\x9f\\2\xe3\x8e<z\xd0\xff_\xab \xef?\xacY\t\xd1\x8f\xe0\x84<K\xd1W.\xf1\'\xef?g\x1aN8\xaf\xcdc<\xb5\xe7\x06\x94m/\xef?h\x19\x92l,kg<i\x90\xef\xdc 7\xef?\xd2\xb5\xcc\x83\x18\x8a\x80\xbc\xfa\xc3]U\x0b?\xef?o\xfa\xff?]\xad\x8f\xbc|\x89\x07J-G\xef?I\xa9u8\xae\r\x90\xbc\xf2\x89\r\x08\x87O\xef?\xa7\x07=\xa6\x85\xa3t<\x87\xa4\xfb\xdc\x18X\xef?\x0f\"@ \x9e\x91\x82\xbc\x98\x83\xc9\x16\xe3`\xef?\xac\x92\xc1\xd5PZ\x8e<\x852\xdb\x03\xe6i\xef?Kk\x01\xacY:\x84<`\xb4\x01\xf3!s\xef?\x1f>\xb4\x07!\xd5\x82\xbc_\x9b{3\x97|\xef?\xc9\rG;\xb9*\x89\xbc)\xa1\xf5\x14F\x86\xef?\xd3\x88:`\x04\xb6t<\xf6?\x8b\xe7.\x90\xef?qr\x9dQ\xec\xc5\x83<\x83L\xc7\xfbQ\x9a\xef?\xf0\x91\xd3\x8f\x12\xf7\x8f\xbc\xda\x90\xa4\xa2\xaf\xa4\xef?}t#\xe2\x98\xae\x8d\xbc\xf1g\x8e-H\xaf\xef?\x08 \xaaA\xbc\xc3\x8e<\'Za\xee\x1b\xba\xef?2\xeb\xa9\xc3\x94+\x84<\x97\xbak7+\xc5\xef?\xee\x85\xd11\xa9d\x8a<@En[v\xd0\xef?\xed\xe3;\xe4\xba7\x8e\xbc\x14\xbe\x9c\xad\xfd\xdb\xef?\x9d\xcd\x91M;\x89w<\xd8\x90\x9e\x81\xc1\xe7\xef?\x89\xcc`A\xc1\x05S<\xf1q\x8f+\xc2\xf3\xef?\x00\x00 eG\x15\xf7?\x00\xa2\xef.\xfc\x05\xe7=9\x83+eG\x15\xe7\xbf\xbe\x04:\xdc\t\xc7\xde?\xfb/pdG\x15\xd7\xbfHL\x03Plw\xd2?\xbc\x92\xea(\xb3\xc7\xce\xbf.\xf9\x17\xe1%b\xca?\xfe\x82+eG\x15\xe7\xbf\xf7\x03:\xdc\t\xc7\xde??|+eG\x15\xd7\xbf\xe4[\xf0Plw\xd2?\xe5\x8fv\xdd\t\xc7\xce\xbf6\xe7\xc4\x1eva\xca?\x9b\xa7d\xbc?\x15\xc7\xbfJ\x1b\xf0T\xd1\x84\xc4?<8,\xa7\xe4\x89\xc2\xbff\xeeZ(/\xb3\xc0?\xf8\xac\xb1k($\xf7?\x00\xb0\xcd\xee_\t\xe1\xbf\xa1\xcc\xd2f\xf7\xe1\xf6?\x00\xd0v\xbd\x94\x84\xe0\xbf\x8a\xd40\x0e=\xa1\xf6?\x00\xf8\xe8\xaeC\x01\xe0\xbf\x85l\xd02\xeca\xf6?\x00@\x0b6\xc5\xfe\xde\xbf\xf8\x98\x11\x95\xfa#\xf6?\x00\xe0\xb7\x1a\xd9\xfd\xdd\xbfl\x02\xcf\xa4[\xe7\xf5?\x00\x90\xc7\x0c\xae\xff\xdc\xbf\xb8O!Z\x05\xac\xf5?\x00\xa0\xfd\x118\x04\xdc\xbf\x1en\x16\x0f\xedq\xf5?\x00\xe0:2g\x0b\xdb\xbf5\xf8\x0bY\t9\xf5?\x00\xb0-Z/\x15\xda\xbf\xdd\xada\xedO\x01\xf5?\x00`\xf8Z\x7f!\xd9\xbf\xd0{H\x8e\xb8\xca\xf4?\x00\x90q\xb0M0\xd8\xbf\xeeO3\xb49\x95\xf4?\x00\xe0\xa9\xf9\x89A\xd7\xbfi\xd5\xaf\xdf\xcb`\xf4?\x00\x90\x19\xb5+U\xd6\xbfS\xb9\xe4Nf-\xf4?\x00\x10\x9b\xa2#k\xd5\xbf\xa6\xd8\x1d\x11\x01\xfb\xf3?\x00\xa0_\x0fe\x83\xd4\xbf6X\x0c\xb7\x95\xc9\xf3?\x00\xa0\xf67\xe9\x9d\xd3\xbfJ\xfd\xb6J\x1c\x99\xf3?\x00`\x8dS\xa1\xba\xd2\xbf\xb5\x99\xe0\x0c\x8ei\xf3?\x00@\xca@\x83\xd9\xd1\xbf\xb2\xe7\x13\x82\xe4:\xf3?\x00\xe0@:\x85\xfa\xd0\xbf\xb1\xbd\x85\x19\x19\r\xf3?\x000\xe72\x9c\x1d\xd0\xbf\xd7q\xb2\xca%\xe0\xf2?\x00`\xfa\xa2}\x85\xce\xbf\x82\xcd\x13\xcf\x04\xb4\xf2?\x00\x80=c\xc8\xd3\xcc\xbfP\xcb|,\xb0\x88\xf2?\x00\xa0\x14L\x03&\xcb\xbf\xe5M\x94c\"^\xf2?\x00\xe0O/\x1c|\xc9\xbf\xb1\x15\x86=V4\xf2?\x00\x00\x80?\x02\xd6\xc7\xbf8\xaf>\xe3F\x0b\xf2?\x00\xe0\x05\x1a\xa73\xc6\xbf\xdd\xa3\xcd\xfd\xee\xe2\xf1?\x00\x00W\xe9\xf5\x94\xc4\xbf09\x0bXJ\xbb\xf1?\x00\xa0\xe0$\xe4\xf9\xc2\xbf\x00\"\x7f\x84S\x94\xf1?\x00\xc0\xfdZYb\xc1\xbf<\xd7\xd5\xc0\x06n\xf1?\x00\x80\xbdu\x9a\x9c\xbf\xbf\xc2\xe4\xb7G_H\xf1?\x00\xc0\xf9[W{\xbc\xbf\xd1\x85\x00\xadX#\xf1?\x00\x80\xf4\x0f\xc6`\xb9\xbf\'\"S\x0f\xf0\xfe\xf0?\x00\x00\xb6G\xe2L\xb6\xbf\x8f:\xd0w \xdb\xf0?\x00@\x01\xb2x?\xb3\xbf\xd9\x80Y\xd6\xe6\xb7\xf0?\x00\xc0B\x1a}8\xb0\xbf\x8d@{\xfe>\x95\xf0?\x00\x00\xb5\x08\x92o\xaa\xbf\x83;\xc5\xca%s\xf0?\x00\x00wO\x95z\xa4\xbf\\\x1b\r\xe4\x97Q\xf0?\x00\x00\x0c\xc5\xa8#\x9d\xbf\xa2\x8e \xc1\x910\xf0?\x00\x00x)&j\x91\xbf!~\xb3%\x10\x10\xf0?\x00\x00\xe8\xd8\xf8 w\xbfk\xa7\xca\xf9~\xc0\xef?\x00\x00P\xb1S\xfe\x86?\x84\xf1\xf6\xd3eD\xef?\x00\x80\x0f\xe1\xcc\x1c\xa1?\x7f\x10\x84\x9f\x07\xcc\xee?\x00\x80\x8b\x8c\xfcM\xac?\xe8Z\x97\x99:W\xee?\x00@W\x1e2\xaa\xb3?\xe6=\xbd\xf0\xd6\xe5\xed?\x00\x80\x8b\xd0\xa0\x18\xb9?\xb38\xff\x81\xb6w\xed?\x00@\x04\xda\xe9r\xbe?C\xe9Mr\xb5\x0c\xed?\x00`\x7fP\xd2\xdc\xc1?cu\x0e\xdc\xb2\xa4\xec?\x00\xa0\xde\x03\xabv\xc4?Q\xcb\xd6\xe8\x8e?\xec?\x00 \xe2wC\x07\xc7?L\x0c\x02O+\xdd\xeb?\x00@\xa9\x8b\xde\x8e\xc9?\xca\x15`\x00l}\xeb?\x00\xe0\xd2j\xb8\r\xcc?\x8f3.n6 \xeb?\x00\xe0\xce\xaf\n\x84\xce?9P)&p\xc5\xea?\x00\x80g\xb4\ny\xd0?\xdd1\'\xbc\x01m\xea?\x00\xc0\x01h\x05\xac\xd1?\x8b\xf1?\xbc\xd3\x16\xea?\x00\xe0\xfe\xd4\x11\xdb\xd2?\xad\xfegI\xd1\xc2\xe9?\x00\x80\xc5NF\x06\xd4?\x02\x99|\xf4\xe4p\xe9?\x00\xf0:\t\xbe-\xd5?\xf2\xbc\x829\xfb \xe9?\x00\xd0P \x90Q\xd6?\xf1Y\xf7\x87\x01\xd3\xe8?\x00\xf0\xea\xcd\xd2q\xd7?m\xf6\xb9\xeb\xe5\x86\xe8?\x00\x90}\x85\x9c\x8e\xd8?\x94\xb9X\xb6\x97<\xe8?\x00`\xe1U\x01\xa8\xd9?\"\x10\xc6\xff\x05\xf4\xe7?\x00\xd0\xd3n\x18\xbe\xda?\xca\x15\x14\x18\"\xad\xe7?\x00\xe0\xa0\xae\xf2\xd0\xdb?\x8c\xff\x9e\xf9\xdcg\xe7?\x00@\xbf=\xa4\xe0\xdc?\x8e\n\xb9\x12\x00 \xe6?\x05\xb6D\x06\xab\x04\x89<\xa64W\x04\x00`\xe6?\xa9\xf7b\xea\x9b\xffa<\xc5\xf2%\xc3\xff\x9f\xe6?\xba\x90<\xcb\xcf~\x82<\x04Z\xb98\x00\xe0\xe6?&\x93sV\x88\xff\x88<\xe3\x94\x99\xe0\xff\x1f\xe7?\xb1\x82_\'@\xfd\x8a<\x10\x0eY\x15\x00`\xe7?A\x83#\xb4u\xfdr\xbc\xd5[e\x12\x00\xa0\xe7?v+$|\xe6\x08x<\xa6\xe9Y2\x00\xe0\xe7?\xb7\"\xf6&\xe4\x08b\xbc\xd2\xb2\xb4\xed\xff\x1f\xe8?/\xc9\xa5\x1eF\x02\x84\xbc\xc3\xfc\xfa-\x00`\xe8?\x1f\x9a\xf2\xa2\xf4\xf7m<Pk\x8c\xf7\xff\x9f\xe8?\xfd\x95I\tS\x04\x8e\xbcf\x15g9\x00\xe0\xe8?E{\xc7\xbe\xf3\x04\x8a\xbcE\x17\xbf\xe2\xff\x1f\xe9?< \x0e@4\xfaw\xbc\xd1\x9f\\\xcc\xff_\xe9?]i\xa0\x05\x80\xffv\xbcgG\xba;\x00\xa0\xe9?\x03~\xec\xc4\xc4\xf8p<\xa5-\xb9\xe7\xff\xdf\xe9?\x02F\x8cG\xd9\x7f\x8e<\xaf\xfd.\xd7\xff\x1f\xea?~\xae\xcdMU\x0cj\xbc\x95\xff\x04\xde\xff_\xea?k\xb2\xe9\x8c\xa9}\x86<+\x8d^\xca\xff\x9f\xea?\xde\x13L\xb5\xc9\x84\x82\xbc\xea\x03\xad\xdd\xff\xdf\xea?<.`\xea\xc8\x12X<M=\r\xf1\xff\x1f\xeb?\x9cx\'\xad\xdd\xfa\x8e\xbcZ\x16!\xce\xff_\xeb?7\x12\xc6\x19\x17\xcbS<t\xe6P\xd9\xff\x9f\xeb?\x00\xce\x94A\xd9\xf7s<\xaf\xa8\x9c\x13\x00\xe0\xeb?\xc0\x9b]!\xc4\nu<\x99\xdfF[\x00 \xec?\xc9\xc1\xe9S\xa6\xeek<\xae\xf7\xb9@\x00`\xec?\xd6pJ\'\x9f\x07|\xbc\x8a\xfdUb\x00\xa0\xec?\x1fL\xe8v@\x0bz\xbc]\tL\xd9\xff\xdf\xec?\xd7\xb5\x9a\xf93\xf9\x88<\xcf\xd6u\xf9\xff\x1f\xed?\xbe\xe1_f\x08,X\xbc\x93\x1cV\xa2\xff_\xed?\xf3\x95\xd2\x9b(\x04{\xbc\x0c\x8b\"\x9d\xff\x9f\xed?6\xa2\x0f4Q\x02\x87<\x16~\xbce\x00\xe0\xed?\x0c\xd8\xa4\x16\x1e\x01u\xbc\x91G\xf6\x02\x00 \xee?\xe0b\xef\t/\x80\x89<\xd8\xa6\xd7W\x00`\xee?\xfa\xf7\x0cXu\x0b~\xbc\x0c\xc0\xed\'\x00\xa0\xee?\x11\x98E\t\x83\x84\x8c\xbc|\xcb\xf5l\x00\xe0\xee?\xf4v\x15\x95\'\x80\x8f\xbc\xcc}+x\x00 \xef?\x8fStr\xd9\x81\x8f\xbc\nE\x0c&\x00`\xef?\xdc\xff\'\'\x00q@\xbc3\xd5\x8c\xe8\xff\x9f\xef?\xb0\xa8\xfd\xe1\xdc\x1bX\xbc\x89\x86\x0f\xd5\xff\xdf\xef?n\x8e\x91\xcb\x1a\xf9\x87<g#)\x04\x00 \xf0?\x81F2e\xf3\x7f\x9b<h\xd6\xe3\xe3\xff_\xf0?{\x95\xae\xdd\x08\xfa\x86<W\xa7\x85\n\x00\xa0\xf0?\x91\xfb\xd3\x80\xde\xe2W\xbc\xcc?_\x1a\x00\xe0\xf0?\x14\xf0\xc5\x053\x82\x91\xbc\xf5\xba\xaf\xf8\xff\x1f\xf1?\xc2\xba\x80f\xbb\xfa\x8b\xbc\xad\x91M\xe5\xff_\xf1?\xef\xe77\x17\x12\x7f\x9d\xbc\xe16\xac\x11\x00\xa0\xf1?\xff\xf5\x16\x05\n\x00\x9c<HB\xc8\x19\x00\xe0\xf1?\xa0]\xda\xe4\xfb\x82\x90\xbcn^\xfe\x0f\x00 \xf2?C\xfb\x9cL\xd0\xfd\x88\xbc\x91\xd8\x9f&\x00`\xf2?\x82\xd1\x94y*\xfe\x8c<\xda\xe6\xa6)\x00\xa0\xf2?\xc5\x8b^qs\x02p\xbc9>)\xe0\xff\xdf\xf2?\xf9\xa6\xb2\xda9|\x9b<\x82\xf0\xdc\xf7\xff\x1f\xf3?TR\xdcn3\xf1}<`\x8bZ\xf0\xff_\xf3?\xeb1\xcdLV\x03\x9e\xbc\xcc\xae\x0e.\x00\xa0\xf3?w\xa4\xd3K\xe7\xf0u<6\xb2;\x04\x00\xe0\xf3?3\x88\x9d\x14\xcb}\x9c<\xff\x87\xd1\x02\x00 \xf4?(=-\xcf\xaf\x08~<\xb1|8\r\x00`\xf4?\xa6\x99e\x857\x08\x82<\x89\x9fV\x04\x00\xa0\xf4?\xd2\xbcO\x90\\\xfa\x89\xbc\xf3C5\x04\x00\xe0\xf4?)S\x17\xed%\x11x\xbc\x0f\x7f\x02\xcc\xff\x1f\xf5?\xdcTw\x84\xd8\x83\x98<o\xb3\x87\xfd\xff_\xf5?\x07(\xd01\xe7\t\x87\xbc\xba\xf7\x1d\xf2\xff\x9f\xf5?\x02{rh\x9f\xf7\x87<\x814\xfc\xeb\xff\xdf\xf5?>\xe90.\x90\x80\x91\xbc\x008\xfa\xfeB.\xe6?0g\xc7\x93W\xf3.=\x01\x00\x00\x00\x00\x00\xe0\xbf[0QUUU\xd5?\x90E\xeb\xff\xff\xff\xcf\xbf\x11\x01\xf1$\xb3\x99\xc9?\x9f\xc8\x06\xe5uU\xc5\xbf\x00\x00\x00\x00\x00\x00\xe0\xbfwUUUUU\xd5?\xcb\xfd\xff\xff\xff\xff\xcf\xbf\x0c\xdd\x95\x99\x99\x99\xc9?\xa7EgUUU\xc5\xbf0\xdeD\xa3$I\xc2?e=B\xa4\xff\xff\xbf\xbf\xca\xd6*(\x84q\xbc?\xffh\xb0C\xeb\x99\xb9\xbf\x85\xd0\xaf\xf7\x82\x81\xb7?\xcdE\xd1u\x13R\xb5\xbf\x9f\xde\xe0\xc3\xf04\xf7?\x00\x90\xe6y\x7f\xcc\xd7\xbf\x1f\xe9,jx\x13\xf7?\x00\x00\r\xc2\xeeo\xd7\xbf\xa0\xb5\xfa\x08`\xf2\xf6?\x00\xe0Q\x13\xe3\x13\xd7\xbf}\x8c\x13\x1f\xa6\xd1\xf6?\x00x(8[\xb8\xd6\xbf\xd1\xb4\xc5\x0bI\xb1\xf6?\x00x\x80\x90U]\xd6\xbf\xba\x0c/3G\x91\xf6?\x00\x00\x18v\xd0\x02\xd6\xbf#B\"\x18\x9fq\xf6?\x00\x90\x90\x86\xca\xa8\xd5\xbf\xd9\x1e\xa5\x99OR\xf6?\x00P\x03VCO\xd5\xbf\xc4$\x8f\xaaV3\xf6?\x00@k\xc37\xf6\xd4\xbf\x14\xdc\x9dk\xb3\x14\xf6?\x00P\xa8\xfd\xa7\x9d\xd4\xbfL\\\xc6Rd\xf6\xf5?\x00\xa8\x899\x92E\xd4\xbfO,\x91\xb5g\xd8\xf5?\x00\xb8\xb09\xf4\xed\xd3\xbf\xde\x90[\xcb\xbc\xba\xf5?\x00p\x8fD\xce\x96\xd3\xbfx\x1a\xd9\xf2a\x9d\xf5?\x00\xa0\xbd\x17\x1e@\xd3\xbf\x87VF\x12V\x80\xf5?\x00\x80F\xef\xe2\xe9\xd2\xbf\xd3k\xe7\xce\x97c\xf5?\x00\xe008\x1b\x94\xd2\xbf\x93\x7f\xa7\xe2%G\xf5?\x00\x88\xda\x8c\xc5>\xd2\xbf\x83E\x06B\xff*\xf5?\x00\x90\')\xe1\xe9\xd1\xbf\xdf\xbd\xb2\xdb\"\x0f\xf5?\x00\xf8H+m\x95\xd1\xbf\xd7\xde4G\x8f\xf3\xf4?\x00\xf8\xb9\x9agA\xd1\xbf@(\xde\xcfC\xd8\xf4?\x00\x98\xef\x94\xd0\xed\xd0\xbf\xc8\xa3x\xc0>\xbd\xf4?\x00\x10\xdb\x18\xa5\x9a\xd0\xbf\x8a%\xe0\xc3\x7f\xa2\xf4?\x00\xb8cR\xe6G\xd0\xbf4\x84\xd4$\x05\x88\xf4?\x00\xf0\x86E\"\xeb\xcf\xbf\x0b-\x19\x1b\xcem\xf4?\x00\xb0\x17uJG\xcf\xbfT\x189\xd3\xd9S\xf4?\x000\x10=D\xa4\xce\xbfZ\x84\xb4D\':\xf4?\x00\xb0\xe9D\r\x02\xce\xbf\xfb\xf8\x15A\xb5 \xf4?\x00\xf0w)\xa2`\xcd\xbf\xb1\xf4>\xda\x82\x07\xf4?\x00\x90\x95\x04\x01\xc0\xcc\xbf\x8f\xfeW]\x8f\xee\xf3?\x00\x10\x89V) \xcc\xbf\xe9L\x0b\xa0\xd9\xd5\xf3?\x00\x10\x81\x8d\x17\x81\xcb\xbf+\xc1\x10\xc0`\xbd\xf3?\x00\xd0\xd3\xcc\xc9\xe2\xca\xbf\xb8\xdau+$\xa5\xf3?\x00\x90\x12.@E\xca\xbf\x02\xd0\x9f\xcd\"\x8d\xf3?\x00\xf0\x1dhw\xa8\xc9\xbf\x1cz\x84\xc5[u\xf3?\x000Him\x0c\xc9\xbf\xe26\xadI\xce]\xf3?\x00\xc0E\xa6 q\xc8\xbf@\xd4M\x98yF\xf3?\x000\x14\xb4\x8f\xd6\xc7\xbf$\xcb\xff\xce\\/\xf3?\x00pb<\xb8<\xc7\xbfI\r\xa1uw\x18\xf3?\x00`7\x9b\x9a\xa3\xc6\xbf\x909>7\xc8\x01\xf3?\x00\xa0\xb7T1\x0b\xc6\xbfA\xf8\x95\xbbN\xeb\xf2?\x000$v}s\xc5\xbf\xd1\xa9\x19\x02\n\xd5\xf2?\x000\xc2\x8f{\xdc\xc4\xbf*\xfd\xb7\xa8\xf9\xbe\xf2?\x00\x00\xd2Q,F\xc4\xbf\xab\x1b\x0cz\x1c\xa9\xf2?\x00\x00\x83\xbc\x8a\xb0\xc3\xbf0\xb5\x14`r\x93\xf2?\x00\x00Ik\x99\x1b\xc3\xbf\xf5\xa1WW\xfa}\xf2?\x00@\xa4\x90T\x87\xc2\xbf\xbf;\x1d\x9b\xb3h\xf2?\x00\xa0y\xf8\xb9\xf3\xc1\xbf\xbd\xf5\x8f\x83\x9dS\xf2?\x00\xa0,%\xc8`\xc1\xbf;\x08\xc9\xaa\xb7>\xf2?\x00 \xf7W\x7f\xce\xc0\xbf\xb6@\xa9+\x01*\xf2?\x00\xa0\xfeI\xdc<\xc0\xbf2A\xcc\x96y\x15\xf2?\x00\x80K\xbc\xbdW\xbf\xbf\x9b\xfc\xd2\x1d \x01\xf2?\x00@@\x96\x087\xbe\xbf\x0bHMI\xf4\xec\xf1?\x00@\xf9>\x98\x17\xbd\xbfie\x8fR\xf5\xd8\xf1?\x00\xa0\xd8Ng\xf9\xbb\xbf|~W\x11#\xc5\xf1?\x00`/ y\xdc\xba\xbf\xe9&\xcbt|\xb1\xf1?\x00\x80(\xe7\xc3\xc0\xb9\xbf\xb6\x1a,\x0c\x01\x9e\xf1?\x00\xc0r\xb3F\xa6\xb8\xbf\xbdp\xb6{\xb0\x8a\xf1?\x00\x00\xac\xb3\x01\x8d\xb7\xbf\xb6\xbc\xef%\x8aw\xf1?\x00\x008E\xf1t\xb6\xbf\xda1L5\x8dd\xf1?\x00\x80\x87m\x0e^\xb5\xbf\xdd_\'\x90\xb9Q\xf1?\x00\xe0\xa1\xde\\H\xb4\xbfL\xd22\xa4\x0e?\xf1?\x00\xa0jM\xd93\xb3\xbf\xda\xf9\x10r\x8b,\xf1?\x00`\xc5\xf8y \xb2\xbf1\xb5\xec(0\x1a\xf1?\x00 b\x98F\x0e\xb1\xbf\xaf4\x84\xda\xfb\x07\xf1?\x00\x00\xd2jl\xfa\xaf\xbf\xb3kN\x0f\xee\xf5\xf0?\x00@wJ\x8d\xda\xad\xbf\xce\x9f*]\x06\xe4\xf0?\x00\x00\x85\xe4\xec\xbc\xab\xbf!\xa5,cD\xd2\xf0?\x00\xc0\x12@\x89\xa1\xa9\xbf\x1a\x98\xe2|\xa7\xc0\xf0?\x00\xc0\x023X\x88\xa7\xbf\xd16\xc6\x83/\xaf\xf0?\x00\x80\xd6g^q\xa5\xbf9\x13\xa0\x98\xdb\x9d\xf0?\x00\x80eI\x8a\\\xa3\xbf\xdf\xe7R\xaf\xab\x8c\xf0?\x00@\x15d\xe3I\xa1\xbf\xfb(N/\x9f{\xf0?\x00\x80\xeb\x82\xc0r\x9e\xbf\x19\x8f5\x8c\xb5j\xf0?\x00\x80RR\xf1U\x9a\xbf,\xf9\xec\xa5\xeeY\xf0?\x00\x80\x81\xcfb=\x96\xbf\x90,\xd1\xcdII\xf0?\x00\x00\xaa\x8c\xfb(\x92\xbf\xa9\xad\xf0\xc6\xc68\xf0?\x00\x00\xf9 {1\x8c\xbf\xa92y\x13e(\xf0?\x00\x00\xaa]5\x19\x84\xbfHs\xea\'$\x18\xf0?\x00\x00\xec\xc2\x03\x12x\xbf\x95\xb1\x14\x06\x04\x08\xf0?\x00\x00$y\t\x04`\xbf\x1a\xfa&\xf7\x1f\xe0\xef?\x00\x00\x90\x84\xf3\xefo?t\xeaa\xc2\x1c\xa1\xef?\x00\x00=5A\xdc\x87?.\x99\x81\xb0\x10c\xef?\x00\x80\xc2\xc4\xa3\xce\x93?\xcd\xad\xee<\xf6%\xef?\x00\x00\x89\x14\xc1\x9f\x9b?\xe7\x13\x91\x03\xc8\xe9\xee?\x00\x00\x11\xce\xd8\xb0\xa1?\xab\xb1\xcbx\x80\xae\xee?\x00\xc0\x01\xd0[\x8a\xa5?\x9b\x0c\x9d\xa2\x1at\xee?\x00\x80\xd8@\x83\\\xa9?\xb5\x99\n\x83\x91:\xee?\x00\x80W\xefj\'\xad?V\x9a`\t\xe0\x01\xee?\x00\xc0\x98\xe5\x98u\xb0?\x98\xbbw\xe5\x01\xca\xed?\x00 \r\xe3\xf5S\xb2?\x03\x91|\x0b\xf2\x92\xed?\x00\x008\x8b\xdd.\xb4?\xce\\\xfbf\xac\\\xed?\x00\xc0W\x87Y\x06\xb6?\x9d\xde^\xaa,\'\xed?\x00\x00j5v\xda\xb7?\xcd,k>n\xf2\xec?\x00`\x1cNC\xab\xb9?\x02y\xa7\xa2m\xbe\xec?\x00`\r\xbb\xc7x\xbb?m\x087m&\x8b\xec?\x00 \xe72\x13C\xbd?\x04X]\xbd\x94X\xec?\x00`\xdeq1\n\xbf?\x8c\x9f\xbb3\xb5&\xec?\x00@\x91+\x15g\xc0??\xe7\xec\xee\x83\xf5\xeb?\x00\xb0\x92\x82\x85G\xc1?\xc1\x96\xdbu\xfd\xc4\xeb?\x000\xca\xcdn&\xc2?(J\x86\x0c\x1e\x95\xeb?\x00P\xc5\xa6\xd7\x03\xc3?,>\xef\xc5\xe2e\xeb?\x00\x103<\xc3\xdf\xc3?\x8b\x88\xc9gH7\xeb?\x00\x80zk6\xba\xc4?J0\x1d!K\t\xeb?\x00\xf0\xd1(9\x93\xc5?~\xef\xf2\x85\xe8\xdb\xea?\x00\xf0\x18$\xcdj\xc6?\xa2=`1\x1d\xaf\xea?\x00\x90f\xec\xf8@\xc7?\xa7X\xd3?\xe6\x82\xea?\x00\xf0\x1a\xf5\xc0\x15\xc8?\x8bs\t\xef@W\xea?\x00\x80\xf6T)\xe9\xc8?\'K\xab\x90*,\xea?\x00@\xf8\x026\xbb\xc9?\xd1\xf2\x93\x13\xa0\x01\xea?\x00\x00,\x1c\xed\x8b\xca?\x1b<\xdb$\x9f\xd7\xe9?\x00\xd0\x01\\Q[\xcb?\x90\xb1\xc7\x05%\xae\xe9?\x00\xc0\xbc\xccg)\xcc?/\xce\x97\xf2.\x85\xe9?\x00`H\xd55\xf6\xcc?uK\xa4\xee\xba\\\xe9?\x00\xc0F4\xbd\xc1\xcd?8H\xe7\x9d\xc64\xe9?\x00\xe0\xcf\xb8\x01\x8c\xce?\xe6Rg/O\r\xe9?\x00\x90\x17\xc0\tU\xcf?\x9d\xd7\xff\x8eR\xe6\xe8?\x00\xb8\x1f\x12l\x0e\xd0?|\x00\xcc\x9f\xce\xbf\xe8?\x00\xd0\x93\x0e\xb8q\xd0?\x0e\xc3\xbe\xda\xc0\x99\xe8?\x00p\x86\x9ek\xd4\xd0?\xfb\x17#\xaa\'t\xe8?\x00\xd0K3\x876\xd1?\x08\x9a\xb3\xac\x00O\xe8?\x00H#g\r\x98\xd1?U>e\xe8I*\xe8?\x00\x80\xcc\xe0\xff\xf8\xd1?`\x02\xf4\x95\x01\x06\xe8?\x00hc\xd7_Y\xd2?)\xa3\xe0c%\xe2\xe7?\x00\xa8\x14\t0\xb9\xd2?\xad\xb5\xdcw\xb3\xbe\xe7?\x00`C\x10r\x18\xd3?\xc2%\x97g\xaa\x9b\xe7?\x00\x18\xecm&w\xd3?W\x06\x17\xf2\x07y\xe7?\x000\xaf\xfbO\xd5\xd3?\x0c\x13\xd6\xdb\xcaV\xe7?\x00\xe0/\xe3\xee2\xd4?k\xb6O\x01\x00\x10\xe6?<[B\x91l\x02~<\x95\xb4M\x03\x000\xe6?A]\x00H\xea\xbf\x8d<x\xd4\x94\r\x00P\xe6?\xb7\xa5\xd6\x86\xa7\x7f\x8e<\xadoN\x07\x00p\xe6?L%Tk\xea\xfca<\xae\x0f\xdf\xfe\xff\x8f\xe6?\xfd\x0eYL\'~|\xbc\xbc\xc5c\x07\x00\xb0\xe6?\x01\xda\xdcHh\xc1\x8a\xbc\xf6\xc1\\\x1e\x00\xd0\xe6?\x11\x93I\x9d\x1c?\x83<>\xf6\x05\xeb\xff\xef\xe6?S-\xe2\x1a\x04\x80~\xbc\x80\x97\x86\x0e\x00\x10\xe7?Ry\tqf\xff{<\x12\xe9g\xfc\xff/\xe7?$\x87\xbd&\xe2\x00\x8c<j\x11\x81\xdf\xffO\xe7?\xd2\x01\xf1n\x91\x02n\xbc\x90\x9cg\x0f\x00p\xe7?t\x9cT\xcdq\xfcg\xbc5\xc8~\xfa\xff\x8f\xe7?\x83\x04\xf5\x9e\xc1\xbe\x81<\xe6\xc2 \xfe\xff\xaf\xe7?ed\xcc)\x17~p\xbc\x00\xc9?\xed\xff\xcf\xe7?\x1c\x8b{\x08r\x80\x80\xbcv\x1a&\xe9\xff\xef\xe7?\xae\xf9\x9dm(\xc0\x8d<\xe8\xa3\x9c\x04\x00\x10\xe8?3L\xe5Q\xd2\x7f\x89<\x8f,\x93\x17\x000\xe8?\x81\xf30\xb6\xe9\xfe\x8a\xbc\x9cs3\x06\x00P\xe8?\xbc5ek\xbf\xbf\x89<\xc6\x89B \x00p\xe8?u{\x11\xf3e\xbf\x8b\xbc\x04y\xf5\xeb\xff\x8f\xe8?W\xcb=\xa2n\x00\x89\xbc\xdf\x04\xbc\"\x00\xb0\xe8?\nK\xe08\xdf\x00}\xbc\x8a\x1b\x0c\xe5\xff\xcf\xe8?\x05\x9f\xffFq\x00\x88\xbcC\x8e\x91\xfc\xff\xef\xe8?8pz\xd0{\x81\x83<\xc7_\xfa\x1e\x00\x10\xe9?\x03\xb4\xdfv\x91>\x89<\xb9{F\x13\x000\xe9?v\x02\x98KN\x80\x7f<o\x07\xee\xe6\xffO\xe9?.b\xff\xd9\xf0~\x8f\xbc\xd1\x12<\xde\xffo\xe9?\xba8&\x96\xaa\x82p\xbc\r\x8aE\xf4\xff\x8f\xe9?\xef\xa8d\x91\x1b\x80\x87\xbc>.\x98\xdd\xff\xaf\xe9?7\x93Z\x8a\xe0@\x87\xbcf\xfbI\xed\xff\xcf\xe9?\x00\xe0\x9b\xc1\x08\xce?<Q\x9c\xf1 \x00\xf0\xe9?\n[\x88\'\xaa?\x8a\xbc\x06\xb0E\x11\x00\x10\xea?V\xdaX\x99H\xfft<\xfa\xf6\xbb\x07\x000\xea?\x18m+\x8a\xab\xbe\x8c<y\x1d\x97\x10\x00P\xea?0yx\xdd\xca\xfe\x88<H.\xf5\x1d\x00p\xea?\xdb\xab\xd8=vA\x8f\xbcR3Y\x1c\x00\x90\xea?\x12v\xc2\x84\x02\xbf\x8e\xbcK>O*\x00\xb0\xea?_?\xff<\x04\xfdi\xbc\xd1\x1e\xae\xd7\xff\xcf\xea?\xb4p\x90\x12\xe7>\x82\xbcx\x04Q\xee\xff\xef\xea?\xa3\xde\x0e\xe0>\x06j<[\re\xdb\xff\x0f\xeb?\xb9\n\x1f8\xc8\x06Z<W\xca\xaa\xfe\xff/\xeb?\x1d<#t\x1e\x01y\xbc\xdc\xba\x95\xd9\xffO\xeb?\x9f*\x86h\x10\xffy\xbc\x9ce\x9e$\x00p\xeb?>O\x86\xd0E\xff\x8a<@\x16\x87\xf9\xff\x8f\xeb?\xf9\xc3\xc2\x96w\xfe|<O\xcb\x04\xd2\xff\xaf\xeb?\xc4+\xf2\xee\'\xffc\xbcE\\A\xd2\xff\xcf\xeb?!\xea;\xee\xb7\xffl\xbc\xdf\tc\xf8\xff\xef\xeb?\\\x0b.\x97\x03A\x81\xbcSv\xb5\xe1\xff\x0f\xec?\x19j\xb7\x94d\xc1\x8b<\xe3W\xfa\xf1\xff/\xec?\xed\xc60\x8d\xef\xfed\xbc$\xe4\xbf\xdc\xffO\xec?uG\xec\xbch?\x84\xbc\xf7\xb9T\xed\xffo\xec?\xec\xe0S\xf0\xa3~\x84<\xd5\x8f\x99\xeb\xff\x8f\xec?\xf1\x92\xf9\x8d\x06\x83s<\x9a!%!\x00\xb0\xec?\x04\x0e\x18d\x8e\xfdh\xbc\x9cF\x94\xdd\xff\xcf\xec?r\xea\xc7\x1c\xbe~\x8e<v\xc4\xfd\xea\xff\xef\xec?\xfe\x88\x9f\xad9\xbe\x8e<+\xf8\x9a\x16\x00\x10\xed?qZ\xb9\xa8\x91}u<\x1d\xf7\x0f\r\x000\xed?\xda\xc7pi\x90\xc1\x89<\xc4\x0fy\xea\xffO\xed?\x0c\xfeX\xc57\x0eX\xbc\xe5\x87\xdc.\x00p\xed?D\x0f\xc1M\xd6\x80\x7f\xbc\xaa\x82\xdc!\x00\x90\xed?\\\\\xfd\x94\x8f|t\xbc\x83\x02k\xd8\xff\xaf\xed?~a!\xc5\x1d\x7f\x8c<9Gl)\x00\xd0\xed?S\xb1\xff\xb2\x9e\x01\x88<\xf5\x90D\xe5\xff\xef\xed?\x89\xccR\xc6\xd2\x00n<\x94\xf6\xab\xcd\xff\x0f\xee?\xd2i- @\x83\x7f\xbc\xdd\xc8R\xdb\xff/\xee?d\x08\x1b\xca\xc1\x00{<\xef\x16B\xf2\xffO\xee?Q\xab\x94\xb0\xa8\xffr<\x11^\x8a\xe8\xffo\xee?Y\xbe\xef\xb1s\xf6W\xbc\r\xff\x9e\x11\x00\x90\xee?\x01\xc8\x0b^\x8d\x80\x84\xbcD\x17\xa5\xdf\xff\xaf\xee?\xb5 C\xd5\x06\x00x<\xa1\x7f\x12\x1a\x00\xd0\xee?\x92\\V`\xf8\x02P\xbc\xc4\xbc\xba\x07\x00\xf0\xee?\x11\xe65]D@\x85\xbc\x02\x8dz\xf5\xff\x0f\xef?\x05\x91\xef91\xfbO\xbc\xc7\x8a\xe5\x1e\x000\xef?U\x11s\xf2\xac\x81\x8a<\x944\x82\xf5\xffO\xef?C\xc7\xd7\xd4A?\x8a<kL\xa9\xfc\xffo\xef?ux\x98\x1c\xf4\x02b\xbcA\xc4\xf9\xe1\xff\x8f\xef?K\xe7w\xf4\xd1}w<~\xe3\xe0\xd2\xff\xaf\xef?1\xa3|\x9a\x19\x01o\xbc\x9e\xe4w\x1c\x00\xd0\xef?\xb1\xac\xceK\xee\x81q<1\xc3\xe0\xf7\xff\xef\xef?Z\x87p\x017\x05n\xbcn`e\xf4\xff\x0f\xf0?\xda\n\x1cI\xad~\x8a\xbcXz\x86\xf3\xff/\xf0?\xe0\xb2\xfc\xc3i\x7f\x97\xbc\x17\r\xfc\xfd\xffO\xf0?[\x94\xcb4\xfe\xbf\x97<\x82M\xcd\x03\x00p\xf0?\xcbV\xe4\xc0\x83\x00\x82<\xe8\xcb\xf2\xf9\xff\x8f\xf0?\x1au7\xbe\xdf\xffm\xbce\xda\x0c\x01\x00\xb0\xf0?\xeb&\xe6\xae\x7f?\x91\xbc8\xd3\xa4\x01\x00\xd0\xf0?\xf7\x9fHy\xfa}\x80<\xfd\xfd\xda\xfa\xff\xef\xf0?\xc0k\xd6p\x05\x04w\xbc\x96\xfd\xba\x0b\x00\x10\xf1?b\x0bm\x84\xd4\x80\x8e<]\xf4\xe5\xfa\xff/\xf1?\xef6\xfdd\xfa\xbf\x9d<\xd9\x9a\xd5\r\x00P\xf1?\xaeP\x12pw\x00\x9a<\x9aU!\x0f\x00p\xf1?\xee\xde\xe3\xe2\xf9\xfd\x8d<&T\'\xfc\xff\x8f\xf1?sr;\xdc0\x00\x91<Y<=\x12\x00\xb0\xf1?\x88\x01\x03\x80y\x7f\x99<\xb7\x9e)\xf8\xff\xcf\xf1?g\x8c\x9f\xab2\xf9e\xbc\x00\xd4\x8a\xf4\xff\xef\xf1?\xeb[\xa7\x9d\xbf\x7f\x93<\xa4\x86\x8b\x0c\x00\x10\xf2?\"[\xfd\x91k\x80\x9f<\x03C\x85\x03\x000\xf2?3\xbf\x9f\xeb\xc2\xff\x93<\x84\xf6\xbc\xff\xffO\xf2?r..~\xe7\x01v<\xd9!)\xf5\xffo\xf2?a\x0c\x7fv\xbb\xfc\x7f<<:\x93\x14\x00\x90\xf2?+A\x02<\xca\x02r\xbc\x13cU\x14\x00\xb0\xf2?\x02\x1f\xf23\x82\x80\x92\xbc;R\xfe\xeb\xff\xcf\xf2?\xf2\xdcO8~\xff\x88\xbc\x96\xad\xb8\x0b\x00\xf0\xf2?\xc5A0PQ\xff\x85\xbc\xaf\xe2z\xfb\xff\x0f\xf3?\x9d(^\x88q\x00\x81\xbc\x7f_\xac\xfe\xff/\xf3?\x15\xb7\xb7?]\xff\x91\xbcVg\xa6\x0c\x00P\xf3?\xbd\x82\x8b\"\x82\x7f\x95<!\xf7\xfb\x11\x00p\xf3?\xcc\xd5\r\xc4\xba\x00\x80<\xb9/Y\xf9\xff\x8f\xf3?Q\xa7\xb2-\x9d?\x94\xbcB\xd2\xdd\x04\x00\xb0\xf3?\xe18vpk\x7f\x85<W\xc9\xb2\xf5\xff\xcf\xf3?1\x12\xbf\x10:\x02z<\x18\xb4\xb0\xea\xff\xef\xf3?\xb0R\xb1fm\x7f\x98<\xf4\xaf2\x15\x00\x10\xf4?$\x85\x19_7\xf8g<)\x8bG\x17\x000\xf4?CQ\xdcr\xe6\x01\x83<c\xb4\x95\xe7\xffO\xf4?Z\x89\xb2\xb8i\xff\x89<\xe0u\x04\xe8\xffo\xf4?T\xf2\xc2\x9b\xb1\xc0\x95\xbc\xe7\xc1o\xef\xff\x8f\xf4?r*:\xf2\t@\x9b<\x04\xa7\xbe\xe5\xff\xaf\xf4?E}\r\xbf\xb7\xff\x94\xbc\xde\'\x10\x17\x00\xd0\xf4?=j\xdcqd\xc0\x99\xbc\xe2>\xf0\x0f\x00\xf0\xf4?\x1cS\x85\x0b\x89\x7f\x97<\xd1K\xdc\x12\x00\x10\xf5?6\xa4fqe\x04`<z\'\x05\x16\x000\xf5?\t2#\xce\xce\xbf\x96\xbcLp\xdb\xec\xffO\xf5?\xd7\xa1\x05\x05r\x02\x89\xbc\xa9T_\xef\xffo\xf5?\x12d\xc9\x0e\xe6\xbf\x9b<\x12\x10\xe6\x17\x00\x90\xf5?\x90\xef\xaf\x81\xc5~\x88<\x92>\xc9\x03\x00\xb0\xf5?\xc0\x0c\xbf\n\x08A\x9f\xbc\xbc\x19I\x1d\x00\xd0\xf5?)G%\xfb*\x81\x98\xbc\x89z\xb8\xe7\xff\xef\xf5?\x04i\xed\x80\xb7~\x94\xbc\x008\xfa\xfeB.\xe6?0g\xc7\x93W\xf3.=\x00\x00\x00\x00\x00\x00\xe0\xbf`UUUUU\xe5\xbf\x06\x00\x00\x00\x00\x00\xe0?NUY\x99\x99\x99\xe9?z\xa4)UUU\xe5\xbf\xe9EH\x9b[I\xf2\xbf\xc3?&\x8b+\x00\xf0?\x00\x00\x00\x00\x00\xa0\xf6?")
	rt_store_string(MEMORY_LIST[0], 22073,"\xc8\xb9\xf2\x82,\xd6\xbf\x80V7($\xb4\xfa<\x00\x00\x00\x00\x00\x80\xf6?")
	rt_store_string(MEMORY_LIST[0], 22105,"\x08X\xbf\xbd\xd1\xd5\xbf \xf7\xe0\xd8\x08\xa5\x1c\xbd\x00\x00\x00\x00\x00`\xf6?")
	rt_store_string(MEMORY_LIST[0], 22137,"XE\x17wv\xd5\xbfmP\xb6\xd5\xa4b#\xbd\x00\x00\x00\x00\x00@\xf6?")
	rt_store_string(MEMORY_LIST[0], 22169,"\xf8-\x87\xad\x1a\xd5\xbf\xd5g\xb0\x9e\xe4\x84\xe6\xbc\x00\x00\x00\x00\x00 \xf6?")
	rt_store_string(MEMORY_LIST[0], 22201,"xw\x95_\xbe\xd4\xbf\xe0>)\x93i\x1b\x04\xbd\x00\x00\x00\x00\x00\x00\xf6?")
	rt_store_string(MEMORY_LIST[0], 22233,"`\x1c\xc2\x8ba\xd4\xbf\xcc\x84LH/\xd8\x13=\x00\x00\x00\x00\x00\xe0\xf5?")
	rt_store_string(MEMORY_LIST[0], 22265,"\xa8\x86\x860\x04\xd4\xbf:\x0b\x82\xed\xf3B\xdc<\x00\x00\x00\x00\x00\xc0\xf5?")
	rt_store_string(MEMORY_LIST[0], 22297,"HiUL\xa6\xd3\xbf`\x94Q\x86\xc6\xb1 =\x00\x00\x00\x00\x00\xa0\xf5?")
	rt_store_string(MEMORY_LIST[0], 22329,"\x80\x98\x9a\xddG\xd3\xbf\x92\x80\xc5\xd4MY%=\x00\x00\x00\x00\x00\x80\xf5?")
	rt_store_string(MEMORY_LIST[0], 22361," \xe1\xba\xe2\xe8\xd2\xbf\xd8+\xb7\x99\x1e{&=\x00\x00\x00\x00\x00`\xf5?")
	rt_store_string(MEMORY_LIST[0], 22393,"\x88\xde\x13Z\x89\xd2\xbf?\xb0\xcf\xb6\x14\xca\x15=\x00\x00\x00\x00\x00`\xf5?")
	rt_store_string(MEMORY_LIST[0], 22425,"\x88\xde\x13Z\x89\xd2\xbf?\xb0\xcf\xb6\x14\xca\x15=\x00\x00\x00\x00\x00@\xf5?")
	rt_store_string(MEMORY_LIST[0], 22457,"x\xcf\xfbA)\xd2\xbfv\xdaS($Z\x16\xbd\x00\x00\x00\x00\x00 \xf5?")
	rt_store_string(MEMORY_LIST[0], 22489,"\x98i\xc1\x98\xc8\xd1\xbf\x04T\xe7h\xbc\xaf\x1f\xbd\x00\x00\x00\x00\x00\x00\xf5?")
	rt_store_string(MEMORY_LIST[0], 22521,"\xa8\xab\xab\\g\xd1\xbf\xf0\xa8\x823\xc6\x1f\x1f=\x00\x00\x00\x00\x00\xe0\xf4?")
	rt_store_string(MEMORY_LIST[0], 22553,"H\xae\xf9\x8b\x05\xd1\xbffZ\x05\xfd\xc4\xa8&\xbd\x00\x00\x00\x00\x00\xc0\xf4?")
	rt_store_string(MEMORY_LIST[0], 22585,"\x90s\xe2$\xa3\xd0\xbf\x0e\x03\xf4~\xeek\x0c\xbd\x00\x00\x00\x00\x00\xa0\xf4?")
	rt_store_string(MEMORY_LIST[0], 22617,"\xd0\xb4\x94%@\xd0\xbf\x7f-\xf4\x9e\xb86\xf0\xbc\x00\x00\x00\x00\x00\xa0\xf4?")
	rt_store_string(MEMORY_LIST[0], 22649,"\xd0\xb4\x94%@\xd0\xbf\x7f-\xf4\x9e\xb86\xf0\xbc\x00\x00\x00\x00\x00\x80\xf4?")
	rt_store_string(MEMORY_LIST[0], 22681,"@^m\x18\xb9\xcf\xbf\x87<\x99\xab*W\r=\x00\x00\x00\x00\x00`\xf4?")
	rt_store_string(MEMORY_LIST[0], 22713,"`\xdc\xcb\xad\xf0\xce\xbf$\xaf\x86\x9c\xb7&+=\x00\x00\x00\x00\x00@\xf4?")
	rt_store_string(MEMORY_LIST[0], 22745,"\xf0*n\x07\'\xce\xbf\x10\xff?TO/\x17\xbd\x00\x00\x00\x00\x00 \xf4?")
	rt_store_string(MEMORY_LIST[0], 22777,"\xc0Ok!\\\xcd\xbf\x1bh\xca\xbb\x91\xba!=\x00\x00\x00\x00\x00\x00\xf4?")
	rt_store_string(MEMORY_LIST[0], 22809,"\xa0\x9a\xc7\xf7\x8f\xcc\xbf4\x84\x9fhOy\'=\x00\x00\x00\x00\x00\x00\xf4?")
	rt_store_string(MEMORY_LIST[0], 22841,"\xa0\x9a\xc7\xf7\x8f\xcc\xbf4\x84\x9fhOy\'=\x00\x00\x00\x00\x00\xe0\xf3?")
	rt_store_string(MEMORY_LIST[0], 22873,"\x90-t\x86\xc2\xcb\xbf\x8f\xb7\x8b1\xb0N\x19=\x00\x00\x00\x00\x00\xc0\xf3?")
	rt_store_string(MEMORY_LIST[0], 22905,"\xc0\x80N\xc9\xf3\xca\xbff\x90\xcd?cN\xba<\x00\x00\x00\x00\x00\xa0\xf3?")
	rt_store_string(MEMORY_LIST[0], 22937,"\xb0\xe2\x1f\xbc#\xca\xbf\xea\xc1F\xdcd\x8c%\xbd\x00\x00\x00\x00\x00\xa0\xf3?")
	rt_store_string(MEMORY_LIST[0], 22969,"\xb0\xe2\x1f\xbc#\xca\xbf\xea\xc1F\xdcd\x8c%\xbd\x00\x00\x00\x00\x00\x80\xf3?")
	rt_store_string(MEMORY_LIST[0], 23001,"P\xf4\x9cZR\xc9\xbf\xe3\xd4\xc1\x04\xd9\xd1*\xbd\x00\x00\x00\x00\x00`\xf3?")
	rt_store_string(MEMORY_LIST[0], 23033,"\xd0 e\xa0\x7f\xc8\xbf\t\xfa\xdb\x7f\xbf\xbd+=\x00\x00\x00\x00\x00@\xf3?")
	rt_store_string(MEMORY_LIST[0], 23065,"\xe0\x10\x02\x89\xab\xc7\xbfXJSr\x90\xdb+=\x00\x00\x00\x00\x00@\xf3?")
	rt_store_string(MEMORY_LIST[0], 23097,"\xe0\x10\x02\x89\xab\xc7\xbfXJSr\x90\xdb+=\x00\x00\x00\x00\x00 \xf3?")
	rt_store_string(MEMORY_LIST[0], 23129,"\xd0\x19\xe7\x0f\xd6\xc6\xbff\xe2\xb2\xa3j\xe4\x10\xbd\x00\x00\x00\x00\x00\x00\xf3?")
	rt_store_string(MEMORY_LIST[0], 23161,"\x90\xa7p0\xff\xc5\xbf9P\x10\x9fC\x9e\x1e\xbd\x00\x00\x00\x00\x00\x00\xf3?")
	rt_store_string(MEMORY_LIST[0], 23193,"\x90\xa7p0\xff\xc5\xbf9P\x10\x9fC\x9e\x1e\xbd\x00\x00\x00\x00\x00\xe0\xf2?")
	rt_store_string(MEMORY_LIST[0], 23225,"\xb0\xa1\xe3\xe5&\xc5\xbf\x8f[\x07\x90\x8b\xde \xbd\x00\x00\x00\x00\x00\xc0\xf2?")
	rt_store_string(MEMORY_LIST[0], 23257,"\x80\xcbl+M\xc4\xbf<x5a\xc1\x0c\x17=\x00\x00\x00\x00\x00\xc0\xf2?")
	rt_store_string(MEMORY_LIST[0], 23289,"\x80\xcbl+M\xc4\xbf<x5a\xc1\x0c\x17=\x00\x00\x00\x00\x00\xa0\xf2?")
	rt_store_string(MEMORY_LIST[0], 23321,"\x90\x1e \xfcq\xc3\xbf:T\'M\x86x\xf1<\x00\x00\x00\x00\x00\x80\xf2?")
	rt_store_string(MEMORY_LIST[0], 23353,"\xf0\x1f\xf8R\x95\xc2\xbf\x08\xc4q\x170\x8d$\xbd\x00\x00\x00\x00\x00`\xf2?")
	rt_store_string(MEMORY_LIST[0], 23385,"`/\xd5*\xb7\xc1\xbf\x96\xa3\x11\x18\xa4\x80.\xbd\x00\x00\x00\x00\x00`\xf2?")
	rt_store_string(MEMORY_LIST[0], 23417,"`/\xd5*\xb7\xc1\xbf\x96\xa3\x11\x18\xa4\x80.\xbd\x00\x00\x00\x00\x00@\xf2?")
	rt_store_string(MEMORY_LIST[0], 23449,"\x90\xd0|~\xd7\xc0\xbf\xf4[\xe8\x88\x96i\n=\x00\x00\x00\x00\x00@\xf2?")
	rt_store_string(MEMORY_LIST[0], 23481,"\x90\xd0|~\xd7\xc0\xbf\xf4[\xe8\x88\x96i\n=\x00\x00\x00\x00\x00 \xf2?")
	rt_store_string(MEMORY_LIST[0], 23513,"\xe0\xdb1\x91\xec\xbf\xbf\xf23\xa3\\Tu%\xbd\x00\x00\x00\x00\x00\x00\xf2?")
	rt_store_string(MEMORY_LIST[0], 23546,"+n\x07\'\xbe\xbf<\x00\xf0*,4*=\x00\x00\x00\x00\x00\x00\xf2?")
	rt_store_string(MEMORY_LIST[0], 23578,"+n\x07\'\xbe\xbf<\x00\xf0*,4*=\x00\x00\x00\x00\x00\xe0\xf1?")
	rt_store_string(MEMORY_LIST[0], 23609,"\xc0[\x8fT^\xbc\xbf\x06\xbe_XW\x0c\x1d\xbd\x00\x00\x00\x00\x00\xc0\xf1?")
	rt_store_string(MEMORY_LIST[0], 23641,"\xe0J:m\x92\xba\xbf\xc8\xaa[\xe859%=\x00\x00\x00\x00\x00\xc0\xf1?")
	rt_store_string(MEMORY_LIST[0], 23673,"\xe0J:m\x92\xba\xbf\xc8\xaa[\xe859%=\x00\x00\x00\x00\x00\xa0\xf1?")
	rt_store_string(MEMORY_LIST[0], 23705,"\xa01\xd6E\xc3\xb8\xbfhV/M)|\x13=\x00\x00\x00\x00\x00\xa0\xf1?")
	rt_store_string(MEMORY_LIST[0], 23737,"\xa01\xd6E\xc3\xb8\xbfhV/M)|\x13=\x00\x00\x00\x00\x00\x80\xf1?")
	rt_store_string(MEMORY_LIST[0], 23769,"`\xe5\x8a\xd2\xf0\xb6\xbf\xdas3\xc97\x97&\xbd\x00\x00\x00\x00\x00`\xf1?")
	rt_store_string(MEMORY_LIST[0], 23801," \x06?\x07\x1b\xb5\xbfW^\xc6a[\x02\x1f=\x00\x00\x00\x00\x00`\xf1?")
	rt_store_string(MEMORY_LIST[0], 23833," \x06?\x07\x1b\xb5\xbfW^\xc6a[\x02\x1f=\x00\x00\x00\x00\x00@\xf1?")
	rt_store_string(MEMORY_LIST[0], 23865,"\xe0\x1b\x96\xd7A\xb3\xbf\xdf\x13\xf9\xcc\xda^,=\x00\x00\x00\x00\x00@\xf1?")
	rt_store_string(MEMORY_LIST[0], 23897,"\xe0\x1b\x96\xd7A\xb3\xbf\xdf\x13\xf9\xcc\xda^,=\x00\x00\x00\x00\x00 \xf1?")
	rt_store_string(MEMORY_LIST[0], 23929,"\x80\xa3\xee6e\xb1\xbf\t\xa3\x8fv^|\x14=\x00\x00\x00\x00\x00\x00\xf1?")
	rt_store_string(MEMORY_LIST[0], 23961,"\x80\x11\xc00\n\xaf\xbf\x91\x8e6\x83\x9eY-=\x00\x00\x00\x00\x00\x00\xf1?")
	rt_store_string(MEMORY_LIST[0], 23993,"\x80\x11\xc00\n\xaf\xbf\x91\x8e6\x83\x9eY-=\x00\x00\x00\x00\x00\xe0\xf0?")
	rt_store_string(MEMORY_LIST[0], 24025,"\x80\x19q\xddB\xab\xbfLp\xd6\xe5z\x82\x1c=\x00\x00\x00\x00\x00\xe0\xf0?")
	rt_store_string(MEMORY_LIST[0], 24057,"\x80\x19q\xddB\xab\xbfLp\xd6\xe5z\x82\x1c=\x00\x00\x00\x00\x00\xc0\xf0?")
	rt_store_string(MEMORY_LIST[0], 24089,"\xc02\xf6Xt\xa7\xbf\xee\xa1\xf24F\xfc,\xbd\x00\x00\x00\x00\x00\xc0\xf0?")
	rt_store_string(MEMORY_LIST[0], 24121,"\xc02\xf6Xt\xa7\xbf\xee\xa1\xf24F\xfc,\xbd\x00\x00\x00\x00\x00\xa0\xf0?")
	rt_store_string(MEMORY_LIST[0], 24153,"\xc0\xfe\xb9\x87\x9e\xa3\xbf\xaa\xfe&\xf5\xb7\x02\xf5<\x00\x00\x00\x00\x00\xa0\xf0?")
	rt_store_string(MEMORY_LIST[0], 24185,"\xc0\xfe\xb9\x87\x9e\xa3\xbf\xaa\xfe&\xf5\xb7\x02\xf5<\x00\x00\x00\x00\x00\x80\xf0?")
	rt_store_string(MEMORY_LIST[0], 24218,"x\x0e\x9b\x82\x9f\xbf\xe4\t~|&\x80)\xbd\x00\x00\x00\x00\x00\x80\xf0?")
	rt_store_string(MEMORY_LIST[0], 24250,"x\x0e\x9b\x82\x9f\xbf\xe4\t~|&\x80)\xbd\x00\x00\x00\x00\x00`\xf0?")
	rt_store_string(MEMORY_LIST[0], 24281,"\x80\xd5\x07\x1b\xb9\x97\xbf9\xa6\xfa\x93T\x8d(\xbd\x00\x00\x00\x00\x00@\xf0?")
	rt_store_string(MEMORY_LIST[0], 24314,"\xfc\xb0\xa8\xc0\x8f\xbf\x9c\xa6\xd3\xf6|\x1e\xdf\xbc\x00\x00\x00\x00\x00@\xf0?")
	rt_store_string(MEMORY_LIST[0], 24346,"\xfc\xb0\xa8\xc0\x8f\xbf\x9c\xa6\xd3\xf6|\x1e\xdf\xbc\x00\x00\x00\x00\x00 \xf0?")
	rt_store_string(MEMORY_LIST[0], 24378,"\x10k*\xe0\x7f\xbf\xe4@\xda\r?\xe2\x19\xbd\x00\x00\x00\x00\x00 \xf0?")
	rt_store_string(MEMORY_LIST[0], 24410,"\x10k*\xe0\x7f\xbf\xe4@\xda\r?\xe2\x19\xbd\x00\x00\x00\x00\x00\x00\xf0?")
	rt_store_string(MEMORY_LIST[0], 24462,"\xf0?")
	rt_store_string(MEMORY_LIST[0], 24493,"\xc0\xef?")
	rt_store_string(MEMORY_LIST[0], 24506,"\x89u\x15\x10\x80?\xe8+\x9d\x99k\xc7\x10\xbd\x00\x00\x00\x00\x00\x80\xef?")
	rt_store_string(MEMORY_LIST[0], 24537,"\x80\x93XV \x90?\xd2\xf7\xe2\x06[\xdc#\xbd\x00\x00\x00\x00\x00@\xef?")
	rt_store_string(MEMORY_LIST[0], 24570,"\xc9(%I\x98?4\x0cZ2\xba\xa0*\xbd\x00\x00\x00\x00\x00\x00\xef?")
	rt_store_string(MEMORY_LIST[0], 24601,"@\xe7\x89]A\xa0?S\xd7\xf1\\\xc0\x11\x01=\x00\x00\x00\x00\x00\xc0\xee?")
	rt_store_string(MEMORY_LIST[0], 24634,".\xd4\xaef\xa4?(\xfd\xbdus\x16,\xbd\x00\x00\x00\x00\x00\x80\xee?")
	rt_store_string(MEMORY_LIST[0], 24665,"\xc0\x9f\x14\xaa\x94\xa8?}&Z\xd0\x95y\x19\xbd\x00\x00\x00\x00\x00@\xee?")
	rt_store_string(MEMORY_LIST[0], 24697,"\xc0\xdd\xcds\xcb\xac?\x07(\xd8G\xf2h\x1a\xbd\x00\x00\x00\x00\x00 \xee?")
	rt_store_string(MEMORY_LIST[0], 24729,"\xc0\x06\xc01\xea\xae?{;\xc9O>\x11\x0e\xbd\x00\x00\x00\x00\x00\xe0\xed?")
	rt_store_string(MEMORY_LIST[0], 24761,"`F\xd1;\x97\xb1?\x9b\x9e\rV]2%\xbd\x00\x00\x00\x00\x00\xa0\xed?")
	rt_store_string(MEMORY_LIST[0], 24793,"\xe0\xd1\xa7\xf5\xbd\xb3?\xd7N\xdb\xa5^\xc8,=\x00\x00\x00\x00\x00`\xed?")
	rt_store_string(MEMORY_LIST[0], 24825,"\xa0\x97MZ\xe9\xb5?\x1e\x1d]<\x06i,\xbd\x00\x00\x00\x00\x00@\xed?")
	rt_store_string(MEMORY_LIST[0], 24857,"\xc0\xea\n\xd3\x00\xb7?2\xed\x9d\xa9\x8d\x1e\xec<\x00\x00\x00\x00\x00\x00\xed?")
	rt_store_string(MEMORY_LIST[0], 24889,"@Y]^3\xb9?\xdaG\xbd:\\\x11#=\x00\x00\x00\x00\x00\xc0\xec?")
	rt_store_string(MEMORY_LIST[0], 24921,"`\xad\x8d\xc8j\xbb?\xe5h\xf7+\x80\x90\x13\xbd\x00\x00\x00\x00\x00\xa0\xec?")
	rt_store_string(MEMORY_LIST[0], 24953,"@\xbc\x01X\x88\xbc?\xd3\xacZ\xc6\xd1F&=\x00\x00\x00\x00\x00`\xec?")
	rt_store_string(MEMORY_LIST[0], 24985," \n\x839\xc7\xbe?\xe0E\xe6\xafh\xc0-\xbd\x00\x00\x00\x00\x00@\xec?")
	rt_store_string(MEMORY_LIST[0], 25017,"\xe0\xdb9\x91\xe8\xbf?\xfd\n\xa1O\xd64%\xbd\x00\x00\x00\x00\x00\x00\xec?")
	rt_store_string(MEMORY_LIST[0], 25049,"\xe0\'\x82\x8e\x17\xc1?\xf2\x07-\xcex\xef!=\x00\x00\x00\x00\x00\xe0\xeb?")
	rt_store_string(MEMORY_LIST[0], 25081,"\xf0#~+\xaa\xc1?4\x998D\x8e\xa7,=\x00\x00\x00\x00\x00\xa0\xeb?")
	rt_store_string(MEMORY_LIST[0], 25113,"\x80\x86\x0ca\xd1\xc2?\xa1\xb4\x81\xcbl\x9d\x03=\x00\x00\x00\x00\x00\x80\xeb?")
	rt_store_string(MEMORY_LIST[0], 25145,"\x90\x15\xb0\xfce\xc3?\x89rK#\xa8/\xc6<\x00\x00\x00\x00\x00@\xeb?")
	rt_store_string(MEMORY_LIST[0], 25177,"\xb03\x83=\x91\xc4?x\xb6\xfdTy\x83%=\x00\x00\x00\x00\x00 \xeb?")
	rt_store_string(MEMORY_LIST[0], 25209,"\xb0\xa1\xe4\xe5\'\xc5?\xc7}i\xe5\xe83&=\x00\x00\x00\x00\x00\xe0\xea?")
	rt_store_string(MEMORY_LIST[0], 25241,"\x10\x8c\xbeNW\xc6?x.<,\x8b\xcf\x19=\x00\x00\x00\x00\x00\xc0\xea?")
	rt_store_string(MEMORY_LIST[0], 25273,"pu\x8b\x12\xf0\xc6?\xe1!\x9c\xe5\x8d\x11%\xbd\x00\x00\x00\x00\x00\xa0\xea?")
	rt_store_string(MEMORY_LIST[0], 25305,"PD\x85\x8d\x89\xc7?\x05C\x91p\x10f\x1c\xbd\x00\x00\x00\x00\x00`\xea?")
	rt_store_string(MEMORY_LIST[0], 25338,"9\xeb\xaf\xbe\xc8?\xd1,\xe9\xaaT=\x07\xbd\x00\x00\x00\x00\x00@\xea?")
	rt_store_string(MEMORY_LIST[0], 25370,"\xf7\xdcZZ\xc9?o\xff\xa0X(\xf2\x07=\x00\x00\x00\x00\x00\x00\xea?")
	rt_store_string(MEMORY_LIST[0], 25401,"\xe0\x8a<\xed\x93\xca?i!VPCr(\xbd\x00\x00\x00\x00\x00\xe0\xe9?")
	rt_store_string(MEMORY_LIST[0], 25433,"\xd0[W\xd81\xcb?\xaa\xe1\xacN\x8d5\x0c\xbd\x00\x00\x00\x00\x00\xc0\xe9?")
	rt_store_string(MEMORY_LIST[0], 25465,"\xe0;8\x87\xd0\xcb?\xb6\x12TY\xc4K-\xbd\x00\x00\x00\x00\x00\xa0\xe9?")
	rt_store_string(MEMORY_LIST[0], 25497,"\x10\xf0\xc6\xfbo\xcc?\xd2+\x96\xc5r\xec\xf1\xbc\x00\x00\x00\x00\x00`\xe9?")
	rt_store_string(MEMORY_LIST[0], 25529,"\x90\xd4\xb0=\xb1\xcd?5\xb0\x15\xf7*\xff*\xbd\x00\x00\x00\x00\x00@\xe9?")
	rt_store_string(MEMORY_LIST[0], 25561,"\x10\xe7\xff\x0eS\xce?0\xf4A`\'\x12\xc2<\x00\x00\x00\x00\x00 \xe9?")
	rt_store_string(MEMORY_LIST[0], 25594,"\xdd\xe4\xad\xf5\xce?\x11\x8e\xbbe\x15!\xca\xbc\x00\x00\x00\x00\x00\x00\xe9?")
	rt_store_string(MEMORY_LIST[0], 25625,"\xb0\xb3l\x1c\x99\xcf?0\xdf\x0c\xca\xec\xcb\x1b=\x00\x00\x00\x00\x00\xc0\xe8?")
	rt_store_string(MEMORY_LIST[0], 25657,"XM`8q\xd0?\x91N\xed\x16\xdb\x9c\xf8<\x00\x00\x00\x00\x00\xa0\xe8?")
	rt_store_string(MEMORY_LIST[0], 25689,"`ag-\xc4\xd0?\xe9\xea<\x16\x8b\x18\'=\x00\x00\x00\x00\x00\x80\xe8?")
	rt_store_string(MEMORY_LIST[0], 25721,"\xe8\'\x82\x8e\x17\xd1?\x1c\xf0\xa5c\x0e!,\xbd\x00\x00\x00\x00\x00`\xe8?")
	rt_store_string(MEMORY_LIST[0], 25753,"\xf8\xac\xcb\\k\xd1?\x81\x16\xa5\xf7\xcd\x9a+=\x00\x00\x00\x00\x00@\xe8?")
	rt_store_string(MEMORY_LIST[0], 25785,"hZc\x99\xbf\xd1?\xb7\xbdGQ\xed\xa6,=\x00\x00\x00\x00\x00 \xe8?")
	rt_store_string(MEMORY_LIST[0], 25817,"\xb8\x0emE\x14\xd2?\xea\xbaF\xba\xde\x87\n=\x00\x00\x00\x00\x00\xe0\xe7?")
	rt_store_string(MEMORY_LIST[0], 25849,"\x90\xdc|\xf0\xbe\xd2?\xf4\x04PJ\xfa\x9c*=\x00\x00\x00\x00\x00\xc0\xe7?")
	rt_store_string(MEMORY_LIST[0], 25881,"`\xd3\xe1\xf1\x14\xd3?\xb8<!\xd3z\xe2(\xbd\x00\x00\x00\x00\x00\xa0\xe7?")
	rt_store_string(MEMORY_LIST[0], 25913,"\x10\xbevgk\xd3?\xc8w\xf1\xb0\xcdn\x11=\x00\x00\x00\x00\x00\x80\xe7?")
	rt_store_string(MEMORY_LIST[0], 25945,"03wR\xc2\xd3?\\\xbd\x06\xb6T;\x18=\x00\x00\x00\x00\x00`\xe7?")
	rt_store_string(MEMORY_LIST[0], 25977,"\xe8\xd5#\xb4\x19\xd4?\x9d\xe0\x90\xec6\xe4\x08=\x00\x00\x00\x00\x00@\xe7?")
	rt_store_string(MEMORY_LIST[0], 26009,"\xc8q\xc2\x8dq\xd4?u\xd6g\t\xce\'/\xbd\x00\x00\x00\x00\x00 \xe7?")
	rt_store_string(MEMORY_LIST[0], 26041,"0\x17\x9e\xe0\xc9\xd4?\xa4\xd8\n\x1b\x89 .\xbd\x00\x00\x00\x00\x00\x00\xe7?")
	rt_store_string(MEMORY_LIST[0], 26073,"\xa08\x07\xae\"\xd5?Y\xc7d\x81p\xbe.=\x00\x00\x00\x00\x00\xe0\xe6?")
	rt_store_string(MEMORY_LIST[0], 26105,"\xd0\xc8S\xf7{\xd5?\xef@]\xee\xed\xad\x1f=\x00\x00\x00\x00\x00\xc0\xe6?")
	rt_store_string(MEMORY_LIST[0], 26137,"`Y\xdf\xbd\xd5\xd5?\xdce\xa4\x08*\x0b\n\xbd\x00\x00\x00\x00\x00\x00\x00\x00O\xbba\x05g\xac\xdd?\x18-DT\xfb!\xe9?\x9b\xf6\x81\xd2\x0bs\xef?\x18-DT\xfb!\xf9?\xe2e/\"\x7f+z<\x07\\\x143&\xa6\x81<\xbd\xcb\xf0z\x88\x07p<\x07\\\x143&\xa6\x91<\x18-DT\xfb!\xe9?\x18-DT\xfb!\xe9\xbf\xd2!3\x7f|\xd9\x02@\xd2!3\x7f|\xd9\x02\xc0")
	rt_store_string(MEMORY_LIST[0], 26271,"\x80\x18-DT\xfb!\t@\x18-DT\xfb!\t\xc0\x03\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x06\x00\x00\x00\x83\xf9\xa2\x00DNn\x00\xfc)\x15\x00\xd1W\'\x00\xdd4\xf5\x00b\xdb\xc0\x00<\x99\x95\x00A\x90C\x00cQ\xfe\x00\xbb\xde\xab\x00\xb7a\xc5\x00:n$\x00\xd2MB\x00I\x06\xe0\x00\t\xea.\x00\x1c\x92\xd1\x00\xeb\x1d\xfe\x00)\xb1\x1c\x00\xe8>\xa7\x00\xf55\x82\x00D\xbb.\x00\x9c\xe9\x84\x00\xb4&p\x00A~_\x00\xd6\x919\x00S\x839\x00\x9c\xf49\x00\x8b_\x84\x00(\xf9\xbd\x00\xf8\x1f;\x00\xde\xff\x97\x00\x0f\x98\x05\x00\x11/\xef\x00\nZ\x8b\x00m\x1fm\x00\xcf~6\x00\t\xcb\'\x00FO\xb7\x00\x9ef?\x00-\xea_\x00\xba\'u\x00\xe5\xeb\xc7\x00={\xf1\x00\xf79\x07\x00\x92R\x8a\x00\xfbk\xea\x00\x1f\xb1_\x00\x08]\x8d\x000\x03V\x00{\xfcF\x00\xf0\xabk\x00 \xbc\xcf\x006\xf4\x9a\x00\xe3\xa9\x1d\x00^a\x91\x00\x08\x1b\xe6\x00\x85\x99e\x00\xa0\x14_\x00\x8d@h\x00\x80\xd8\xff\x00\'sM\x00\x06\x061\x00\xcaV\x15\x00\xc9\xa8s\x00{\xe2`\x00k\x8c\xc0\x00\x19\xc4G\x00\xcdg\xc3\x00\t\xe8\xdc\x00Y\x83*\x00\x8bv\xc4\x00\xa6\x1c\x96\x00D\xaf\xdd\x00\x19W\xd1\x00\xa5>\x05\x00\x05\x07\xff\x003~?\x00\xc22\xe8\x00\x98O\xde\x00\xbb}2\x00&=\xc3\x00\x1ek\xef\x00\x9f\xf8^\x005\x1f:\x00\x7f\xf2\xca\x00\xf1\x87\x1d\x00|\x90!\x00j$|\x00\xd5n\xfa\x000-w\x00\x15;C\x00\xb5\x14\xc6\x00\xc3\x19\x9d\x00\xad\xc4\xc2\x00,MA\x00\x0c\x00]\x00\x86}F\x00\xe3q-\x00\x9b\xc6\x9a\x003b\x00\x00\xb4\xd2|\x00\xb4\xa7\x97\x007U\xd5\x00\xd7>\xf6\x00\xa3\x10\x18\x00Mv\xfc\x00d\x9d*\x00p\xd7\xab\x00c|\xf8\x00z\xb0W\x00\x17\x15\xe7\x00\xc0IV\x00;\xd6\xd9\x00\xa7\x848\x00$#\xcb\x00\xd6\x8aw\x00ZT#\x00\x00\x1f\xb9\x00\xf1\n\x1b\x00\x19\xce\xdf\x00\x9f1\xff\x00f\x1ej\x00\x99Wa\x00\xac\xfbG\x00~\x7f\xd8\x00\"e\xb7\x002\xe8\x89\x00\xe6\xbf`\x00\xef\xc4\xcd\x00l6\t\x00]?\xd4\x00\x16\xde\xd7\x00X;\xde\x00\xde\x9b\x92\x00\xd2\"(\x00(\x86\xe8\x00\xe2XM\x00\xc6\xca2\x00\x08\xe3\x16\x00\xe0}\xcb\x00\x17\xc0P\x00\xf3\x1d\xa7\x00\x18\xe0[\x00.\x134\x00\x83\x12b\x00\x83H\x01\x00\xf5\x8e[\x00\xad\xb0\x7f\x00\x1e\xe9\xf2\x00HJC\x00\x10g\xd3\x00\xaa\xdd\xd8\x00\xae_B\x00ja\xce\x00\n(\xa4\x00\xd3\x99\xb4\x00\x06\xa6\xf2\x00\\w\x7f\x00\xa3\xc2\x83\x00a<\x88\x00\x8asx\x00\xaf\x8cZ\x00o\xd7\xbd\x00-\xa6c\x00\xf4\xbf\xcb\x00\x8d\x81\xef\x00&\xc1g\x00U\xcaE\x00\xca\xd96\x00(\xa8\xd2\x00\xc2a\x8d\x00\x12\xc9w\x00\x04&\x14\x00\x12F\x9b\x00\xc4Y\xc4\x00\xc8\xc5D\x00M\xb2\x91\x00\x00\x17\xf3\x00\xd4C\xad\x00)I\xe5\x00\xfd\xd5\x10\x00\x00\xbe\xfc\x00\x1e\x94\xcc\x00p\xce\xee\x00\x13>\xf5\x00\xec\xf1\x80\x00\xb3\xe7\xc3\x00\xc7\xf8(\x00\x93\x05\x94\x00\xc1q>\x00.\t\xb3\x00\x0bE\xf3\x00\x88\x12\x9c\x00\xab {\x00.\xb5\x9f\x00G\x92\xc2\x00{2/\x00\x0cUm\x00r\xa7\x90\x00k\xe7\x1f\x001\xcb\x96\x00y\x16J\x00Ay\xe2\x00\xf4\xdf\x89\x00\xe8\x94\x97\x00\xe2\xe6\x84\x00\x991\x97\x00\x88\xedk\x00__6\x00\xbb\xfd\x0e\x00H\x9a\xb4\x00g\xa4l\x00qrB\x00\x8d]2\x00\x9f\x15\xb8\x00\xbc\xe5\t\x00\x8d1%\x00\xf7t9\x000\x05\x1c\x00\r\x0c\x01\x00K\x08h\x00,\xeeX\x00G\xaa\x90\x00t\xe7\x02\x00\xbd\xd6$\x00\xf7}\xa6\x00nHr\x00\x9f\x16\xef\x00\x8e\x94\xa6\x00\xb4\x91\xf6\x00\xd1SQ\x00\xcf\n\xf2\x00 \x983\x00\xf5K~\x00\xb2ch\x00\xdd>_\x00@]\x03\x00\x85\x89\x7f\x00UR)\x007d\xc0\x00m\xd8\x10\x002H2\x00[Lu\x00Nq\xd4\x00ETn\x00\x0b\t\xc1\x00*\xf5i\x00\x14f\xd5\x00\'\x07\x9d\x00]\x04P\x00\xb4;\xdb\x00\xeav\xc5\x00\x87\xf9\x17\x00Ik}\x00\x1d\'\xba\x00\x96i)\x00\xc6\xcc\xac\x00\xad\x14T\x00\x90\xe2j\x00\x88\xd9\x89\x00,rP\x00\x04\xa4\xbe\x00w\x07\x94\x00\xf30p\x00\x00\xfc\'\x00\xeaq\xa8\x00f\xc2I\x00d\xe0=\x00\x97\xdd\x83\x00\xa3?\x97\x00C\x94\xfd\x00\r\x86\x8c\x001A\xde\x00\x929\x9d\x00\xddp\x8c\x00\x17\xb7\xe7\x00\x08\xdf;\x00\x157+\x00\\\x80\xa0\x00Z\x80\x93\x00\x10\x11\x92\x00\x0f\xe8\xd8\x00l\x80\xaf\x00\xdb\xffK\x008\x90\x0f\x00Y\x18v\x00b\xa5\x15\x00a\xcb\xbb\x00\xc7\x89\xb9\x00\x10@\xbd\x00\xd2\xf2\x04\x00Iu\'\x00\xeb\xb6\xf6\x00\xdb\"\xbb\x00\n\x14\xaa\x00\x89&/\x00d\x83v\x00\t;3\x00\x0e\x94\x1a\x00Q:\xaa\x00\x1d\xa3\xc2\x00\xaf\xed\xae\x00\\&\x12\x00m\xc2M\x00-z\x9c\x00\xc0V\x97\x00\x03?\x83\x00\t\xf0\xf6\x00+@\x8c\x00m1\x99\x009\xb4\x07\x00\x0c \x15\x00\xd8\xc3[\x00\xf5\x92\xc4\x00\xc6\xadK\x00N\xca\xa5\x00\xa77\xcd\x00\xe6\xa96\x00\xab\x92\x94\x00\xddBh\x00\x19c\xde\x00v\x8c\xef\x00h\x8bR\x00\xfc\xdb7\x00\xae\xa1\xab\x00\xdf\x151\x00\x00\xae\xa1\x00\x0c\xfb\xda\x00dMf\x00\xed\x05\xb7\x00)e0\x00WV\xbf\x00G\xff:\x00j\xf9\xb9\x00u\xbe\xf3\x00(\x93\xdf\x00\xab\x800\x00f\x8c\xf6\x00\x04\xcb\x15\x00\xfa\"\x06\x00\xd9\xe4\x1d\x00=\xb3\xa4\x00W\x1b\x8f\x006\xcd\t\x00NB\xe9\x00\x13\xbe\xa4\x003#\xb5\x00\xf0\xaa\x1a\x00Oe\xa8\x00\xd2\xc1\xa5\x00\x0b?\x0f\x00[x\xcd\x00#\xf9v\x00{\x8b\x04\x00\x89\x17r\x00\xc6\xa6S\x00on\xe2\x00\xef\xeb\x00\x00\x9bJX\x00\xc4\xda\xb7\x00\xaaf\xba\x00v\xcf\xcf\x00\xd1\x02\x1d\x00\xb1\xf1-\x00\x8c\x99\xc1\x00\xc3\xadw\x00\x86H\xda\x00\xf7]\xa0\x00\xc6\x80\xf4\x00\xac\xf0/\x00\xdd\xec\x9a\x00?\\\xbc\x00\xd0\xdem\x00\x90\xc7\x1f\x00*\xdb\xb6\x00\xa3%:\x00\x00\xaf\x9a\x00\xadS\x93\x00\xb6W\x04\x00)-\xb4\x00K\x80~\x00\xda\x07\xa7\x00v\xaa\x0e\x00{Y\xa1\x00\x16\x12*\x00\xdc\xb7-\x00\xfa\xe5\xfd\x00\x89\xdb\xfe\x00\x89\xbe\xfd\x00\xe4vl\x00\x06\xa9\xfc\x00>\x80p\x00\x85n\x15\x00\xfd\x87\xff\x00(>\x07\x00ag3\x00*\x18\x86\x00M\xbd\xea\x00\xb3\xe7\xaf\x00\x8fmn\x00\x95g9\x001\xbf[\x00\x84\xd7H\x000\xdf\x16\x00\xc7-C\x00%a5\x00\xc9p\xce\x000\xcb\xb8\x00\xbfl\xfd\x00\xa4\x00\xa2\x00\x05l\xe4\x00Z\xdd\xa0\x00!oG\x00b\x12\xd2\x00\xb9\\\x84\x00paI\x00kV\xe0\x00\x99R\x01\x00PU7\x00\x1e\xd5\xb7\x003\xf1\xc4\x00\x13n_\x00]0\xe4\x00\x85.\xa9\x00\x1d\xb2\xc3\x00\xa126\x00\x08\xb7\xa4\x00\xea\xb1\xd4\x00\x16\xf7!\x00\x8fi\xe4\x00\'\xffw\x00\x0c\x03\x80\x00\x8d@-\x00O\xcd\xa0\x00 \xa5\x99\x00\xb3\xa2\xd3\x00/]\n\x00\xb4\xf9B\x00\x11\xda\xcb\x00}\xbe\xd0\x00\x9b\xdb\xc1\x00\xab\x17\xbd\x00\xca\xa2\x81\x00\x08j\\\x00.U\x17\x00\'\x00U\x00\x7f\x14\xf0\x00\xe1\x07\x86\x00\x14\x0bd\x00\x96A\x8d\x00\x87\xbe\xde\x00\xda\xfd*\x00k%\xb6\x00{\x894\x00\x05\xf3\xfe\x00\xb9\xbf\x9e\x00hjO\x00J*\xa8\x00O\xc4Z\x00-\xf8\xbc\x00\xd7Z\x98\x00\xf4\xc7\x95\x00\rM\x8d\x00 :\xa6\x00\xa4W_\x00\x14?\xb1\x00\x808\x95\x00\xcc \x01\x00q\xdd\x86\x00\xc9\xde\xb6\x00\xbf`\xf5\x00Me\x11\x00\x01\x07k\x00\x8c\xb0\xac\x00\xb2\xc0\xd0\x00QUH\x00\x1e\xfb\x0e\x00\x95r\xc3\x00\xa3\x06;\x00\xc0@5\x00\x06\xdc{\x00\xe0E\xcc\x00N)\xfa\x00\xd6\xca\xc8\x00\xe8\xf3A\x00|d\xde\x00\x9bd\xd8\x00\xd9\xbe1\x00\xa4\x97\xc3\x00wX\xd4\x00i\xe3\xc5\x00\xf0\xda\x13\x00\xba:<\x00F\x18F\x00Uu_\x00\xd2\xbd\xf5\x00n\x92\xc6\x00\xac.]\x00\x0eD\xed\x00\x1c>B\x00a\xc4\x87\x00)\xfd\xe9\x00\xe7\xd6\xf3\x00\"|\xca\x00o\x915\x00\x08\xe0\xc5\x00\xff\xd7\x8d\x00nj\xe2\x00\xb0\xfd\xc6\x00\x93\x08\xc1\x00|]t\x00k\xad\xb2\x00\xcdn\x9d\x00>r{\x00\xc6\x11j\x00\xf7\xcf\xa9\x00)s\xdf\x00\xb5\xc9\xba\x00\xb7\x00Q\x00\xe2\xb2\r\x00t\xba$\x00\xe5}`\x00t\xd8\x8a\x00\r\x15,\x00\x81\x18\x0c\x00~f\x94\x00\x01)\x16\x00\x9fzv\x00\xfd\xfd\xbe\x00VE\xef\x00\xd9~6\x00\xec\xd9\x13\x00\x8b\xba\xb9\x00\xc4\x97\xfc\x001\xa8\'\x00\xf1n\xc3\x00\x94\xc56\x00\xd8\xa8V\x00\xb4\xa8\xb5\x00\xcf\xcc\x0e\x00\x12\x89-\x00oW4\x00,V\x89\x00\x99\xce\xe3\x00\xd6 \xb9\x00k^\xaa\x00>*\x9c\x00\x11_\xcc\x00\xfd\x0bJ\x00\xe1\xf4\xfb\x00\x8e;m\x00\xe2\x86,\x00\xe9\xd4\x84\x00\xfc\xb4\xa9\x00\xef\xee\xd1\x00.5\xc9\x00/9a\x008!D\x00\x1b\xd9\xc8\x00\x81\xfc\n\x00\xfbJj\x00/\x1c\xd8\x00S\xb4\x84\x00N\x99\x8c\x00T\"\xcc\x00*U\xdc\x00\xc0\xc6\xd6\x00\x0b\x19\x96\x00\x1ap\xb8\x00i\x95d\x00&Z`\x00?R\xee\x00\x7f\x11\x0f\x00\xf4\xb5\x11\x00\xfc\xcb\xf5\x004\xbc-\x004\xbc\xee\x00\xe8]\xcc\x00\xdd^`\x00g\x8e\x9b\x00\x923\xef\x00\xc9\x17\xb8\x00aX\x9b\x00\xe1W\xbc\x00Q\x83\xc6\x00\xd8>\x10\x00\xddqH\x00-\x1c\xdd\x00\xaf\x18\xa1\x00!,F\x00Y\xf3\xd7\x00\xd9z\x98\x00\x9eT\xc0\x00O\x86\xfa\x00V\x06\xfc\x00\xe5y\xae\x00\x89\"6\x008\xad\"\x00g\x93\xdc\x00U\xe8\xaa\x00\x82&8\x00\xca\xe7\x9b\x00Q\r\xa4\x00\x993\xb1\x00\xa9\xd7\x0e\x00i\x05H\x00e\xb2\xf0\x00\x7f\x88\xa7\x00\x88L\x97\x00\xf9\xd16\x00!\x92\xb3\x00{\x82J\x00\x98\xcf!\x00@\x9f\xdc\x00\xdcGU\x00\xe1t:\x00g\xebB\x00\xfe\x9d\xdf\x00^\xd4_\x00{g\xa4\x00\xba\xacz\x00U\xf6\xa2\x00+\x88#\x00A\xbaU\x00Yn\x08\x00!*\x86\x009G\x83\x00\x89\xe3\xe6\x00\xe5\x9e\xd4\x00I\xfb@\x00\xffV\xe9\x00\x1c\x0f\xca\x00\xc5Y\x8a\x00\x94\xfa+\x00\xd3\xc1\xc5\x00\x0f\xc5\xcf\x00\xdbZ\xae\x00G\xc5\x86\x00\x85Cb\x00!\x86;\x00,y\x94\x00\x10a\x87\x00*L{\x00\x80,\x1a\x00C\xbf\x12\x00\x88&\x90\x00x<\x89\x00\xa8\xc4\xe4\x00\xe5\xdb{\x00\xc4:\xc2\x00&\xf4\xea\x00\xf7g\x8a\x00\r\x92\xbf\x00e\xa3+\x00=\x93\xb1\x00\xbd|\x0b\x00\xa4Q\xdc\x00\'\xddc\x00i\xe1\xdd\x00\x9a\x94\x19\x00\xa8)\x95\x00h\xce(\x00\t\xed\xb4\x00D\x9f \x00N\x98\xca\x00p\x82c\x00~|#\x00\x0f\xb92\x00\xa7\xf5\x8e\x00\x14V\xe7\x00!\xf1\x08\x00\xb5\x9d*\x00o~M\x00\xa5\x19Q\x00\xb5\xf9\xab\x00\x82\xdf\xd6\x00\x96\xdda\x00\x166\x02\x00\xc4:\x9f\x00\x83\xa2\xa1\x00r\xedm\x009\x8dz\x00\x82\xb8\xa9\x00k2\\\x00F\'[\x00\x004\xed\x00\xd2\x00w\x00\xfc\xf4U\x00\x01YM\x00\xe0q\x80")
	rt_store_string(MEMORY_LIST[0], 29075,"@\xfb!\xf9?\x00\x00\x00\x00-Dt>\x00\x00\x00\x80\x98F\xf8<\x00\x00\x00`Q\xccx;\x00\x00\x00\x80\x83\x1b\xf09\x00\x00\x00@ %z8\x00\x00\x00\x80\"\x82\xe36\x00\x00\x00\x00\x1d\xf3i5\x80x")
	rt_store_string(MEMORY_LIST[0], 29156,"\x80\xde(\x00\x80\xc8M\x00\x00\xa7v\x00\x004\x9e\x00\x80\x12\xc7\x00\x80\x9f\xee\x00\x00~\x17\x01\x80\\@\x01\x80\xe9g\x01\x00\xc8\x90\x01\x00U\xb8\x01Sun\x00Mon\x00Tue\x00Wed\x00Thu\x00Fri\x00Sat\x00Sunday\x00Monday\x00Tuesday\x00Wednesday\x00Thursday\x00Friday\x00Saturday\x00Jan\x00Feb\x00Mar\x00Apr\x00May\x00Jun\x00Jul\x00Aug\x00Sep\x00Oct\x00Nov\x00Dec\x00January\x00February\x00March\x00April\x00May\x00June\x00July\x00August\x00September\x00October\x00November\x00December\x00AM\x00PM\x00%a %b %e %T %Y\x00%m/%d/%y\x00%H:%M:%S\x00%I:%M:%S %p\x00\x00\x00%m/%d/%y\x000123456789\x00%a %b %e %T %Y\x00%H:%M:%S\x00\x00\x00\x00\x00\xd1t\x9e\x00W\x9d\xbd*\x80pR\x0f\xff\xff>\'\n\x00\x00\x00d\x00\x00\x00\xe8\x03\x00\x00\x10\'\x00\x00\xa0\x86\x01\x00@B\x0f\x00\x80\x96\x98\x00\x00\xe1\xf5\x05\x19\x00\x0b\x00\x19\x19\x19\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x19\x00\n\n\x19\x19\x19\x03\n\x07\x00\x01\x00\t\x0b\x18\x00\x00\t\x06\x0b\x00\x00\x0b\x00\x06\x19\x00\x00\x00\x19\x19\x19")
	rt_store_string(MEMORY_LIST[0], 29649,"\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x19\x00\x0b\r\x19\x19\x19\x00\r\x00\x00\x02\x00\t\x0e\x00\x00\x00\t\x00\x0e\x00\x00\x0e")
	rt_store_string(MEMORY_LIST[0], 29707,"\x0c")
	rt_store_string(MEMORY_LIST[0], 29719,"\x13\x00\x00\x00\x00\x13\x00\x00\x00\x00\t\x0c\x00\x00\x00\x00\x00\x0c\x00\x00\x0c")
	rt_store_string(MEMORY_LIST[0], 29765,"\x10")
	rt_store_string(MEMORY_LIST[0], 29777,"\x0f\x00\x00\x00\x04\x0f\x00\x00\x00\x00\t\x10\x00\x00\x00\x00\x00\x10\x00\x00\x10")
	rt_store_string(MEMORY_LIST[0], 29823,"\x12")
	rt_store_string(MEMORY_LIST[0], 29835,"\x11\x00\x00\x00\x00\x11\x00\x00\x00\x00\t\x12\x00\x00\x00\x00\x00\x12\x00\x00\x12\x00\x00\x1a\x00\x00\x00\x1a\x1a\x1a")
	rt_store_string(MEMORY_LIST[0], 29890,"\x1a\x00\x00\x00\x1a\x1a\x1a\x00\x00\x00\x00\x00\x00\t")
	rt_store_string(MEMORY_LIST[0], 29939,"\x14")
	rt_store_string(MEMORY_LIST[0], 29951,"\x17\x00\x00\x00\x00\x17\x00\x00\x00\x00\t\x14\x00\x00\x00\x00\x00\x14\x00\x00\x14")
	rt_store_string(MEMORY_LIST[0], 29997,"\x16")
	rt_store_string(MEMORY_LIST[0], 30009,"\x15\x00\x00\x00\x00\x15\x00\x00\x00\x00\t\x16\x00\x00\x00\x00\x00\x16\x00\x00\x16\x00\x000123456789ABCDEFSt9exception\x00\x00\x00\x00\xb0v\x00\x00|u\x00\x00hv\x00\x00N10__cxxabiv116__shim_type_infoE\x00\x00\x00\x00\xb0v\x00\x00\xacu\x00\x00pu\x00\x00N10__cxxabiv117__class_type_infoE\x00\x00\x00\xb0v\x00\x00\xdcu\x00\x00\xa0u\x00\x00N10__cxxabiv120__si_class_type_infoE\x00\x00\x00\x00\x00\x00\x00\x00\x18v\x00\x00\x1b\x01\x00\x00!\x01\x00\x00\"\x01\x00\x00\xb0v\x00\x00$v\x00\x00\xd0v\x00\x00St11logic_error\x00\x00\x00\x00\x00Hv\x00\x00\x1b\x01\x00\x00#\x01\x00\x00\"\x01\x00\x00\xb0v\x00\x00Tv\x00\x00\x18v\x00\x00St12out_of_range\x00\x00\x00\x00xv\x00\x00\x98v\x00\x00\x00\x00\x00\x00\xa0u\x00\x00$\x01\x00\x00%\x01\x00\x00&\x01\x00\x00\'\x01\x00\x00(\x01\x00\x00)\x01\x00\x00*\x01\x00\x00+\x01\x00\x00St9type_info\x00\x00\x00\x00\x00\x00\x00\x00\xd0u\x00\x00$\x01\x00\x00,\x01\x00\x00&\x01\x00\x00\'\x01\x00\x00(\x01\x00\x00-\x01\x00\x00.\x01\x00\x00/\x01\x00\x00xv\x00\x00`u\x00\x00\x00\x00\x00\x00\xd0v\x00\x000\x01\x00\x001\x01\x00\x002\x01")
	rt_store_string(MEMORY_LIST[0], 30452,"3\x01\x00\x003\x01\x00\x004\x01\x00\x004\x01\x00\x004\x01\x00\x004\x01\x00\x004\x01\x00\x004\x01\x00\x003\x01\x00\x003\x01\x00\x004\x01\x00\x003\x01\x00\x003\x01\x00\x003\x01\x00\x003\x01")
	rt_store_string(MEMORY_LIST[0], 30544,"4\x01\x00\x004\x01\x00\x003\x01\x00\x003\x01\x00\x00\x00\x00\x00\x003\x01\x00\x00\x00\x00\x00\x004\x01")
	rt_store_string(MEMORY_LIST[0], 30712,"@\x95\x01")
	rt_store_string(MEMORY_LIST[0], 30740,"*")
	rt_store_string(MEMORY_LIST[0], 30812,"\x94\x90")
	rt_store_string(MEMORY_LIST[0], 30848,"\x05")
	rt_store_string(MEMORY_LIST[0], 30860,"\x1d\x01")
	rt_store_string(MEMORY_LIST[0], 30884,"\x1e\x01\x00\x00\x1f\x01\x00\x00\xb8\x90\x00\x00\x00\x04")
	rt_store_string(MEMORY_LIST[0], 30908,"\x01")
	rt_store_string(MEMORY_LIST[0], 30924,"\xff\xff\xff\xff\n")
	rt_store_string(MEMORY_LIST[0], 30992," \x01")
	rt_store_string(MEMORY_LIST[0], 31009,"\x01\x00\x00\xe0\x0b")
	rt_store_string(MEMORY_LIST[0], 35121,"\x01\x00\x00\xa2\x06\x00\x00 y\x00\x00\x00\x01\x00\x00\xa0\x07\x00\x000\x89\x00\x00\x00\x00\x00\x00O\n\x00\x00<\x89\x00\x00\x08\x00\x00\x00\x10\x00\x00\x00\x18\x00\x00\x00 \x00\x00\x00(\x00\x00\x000\x00\x00\x008\x00\x00\x00@\x00\x00\x00P\x00\x00\x00`\x00\x00\x00p\x00\x00\x00\x80\x00\x00\x00\x90\x00\x00\x00\xa0\x00\x00\x00\xb0\x00\x00\x00\xc0\x00\x00\x00\xd0\x00\x00\x00\xe0\x00\x00\x00\xf0\x00\x00\x00\x00\x01\x00\x00 \x01\x00\x00@\x01\x00\x00`\x01\x00\x00\x80\x01\x00\x00\xa0\x01\x00\x00\xc0\x01\x00\x00\xe0\x01\x00\x00\x00\x02\x00\x00@\x02\x00\x00\x80\x02\x00\x00\xc0\x02\x00\x00\x00\x03\x00\x00@\x03\x00\x00\x80\x03\x00\x00\xc0\x03\x00\x00\x00\x04")
	rt_store_string(MEMORY_LIST[0], 35325,"\x01\x01\x01\x01\x01\x01\x01\x01\x02\x02\x02\x02\x02\x02\x02\x02\x03\x03\x03\x03\x03\x03\x03\x03\x04\x04\x04\x04\x04\x04\x04\x04\x05\x05\x05\x05\x05\x05\x05\x05\x06\x06\x06\x06\x06\x06\x06\x06\x07\x07\x07\x07\x07\x07\x07\x07\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\x08\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0e\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x10\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x13\x13\x13\x13\x13\x13\x13\x13\x13\x13\x13\x13\x13\x13\x13\x13\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x14\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x15\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x16\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x17\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x18\x19\x19\x19\x19\x19\x19\x19\x19\x19\x19\x19\x19\x19\x19\x19\x19\x19\x19\x19\x19\x19\x19\x19\x19\x19\x19\x19\x19\x19\x19\x19\x19\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1b\x1b\x1b\x1b\x1b\x1b\x1b\x1b\x1b\x1b\x1b\x1b\x1b\x1b\x1b\x1b\x1b\x1b\x1b\x1b\x1b\x1b\x1b\x1b\x1b\x1b\x1b\x1b\x1b\x1b\x1b\x1b\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1c\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1d\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1e\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f                                                                !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"################################################################\x00\x00\x00$")
	rt_store_string(MEMORY_LIST[0], 36368,"\xfc\x10\x00\x00H\x89")
	rt_store_string(MEMORY_LIST[0], 36884,"\x0c\x8e")
end

--[[
return function(wasm)
	FUNC_LIST[0] = wasm["env"].func_list["__cxa_throw"]
	FUNC_LIST[1] = wasm["env"].func_list["invoke_vii"]
	FUNC_LIST[2] = wasm["env"].func_list["_abort_js"]
	FUNC_LIST[3] = wasm["env"].func_list["_emscripten_memcpy_js"]
	FUNC_LIST[4] = wasm["env"].func_list["emscripten_date_now"]
	FUNC_LIST[5] = wasm["env"].func_list["_tzset_js"]
	FUNC_LIST[6] = wasm["wasi_snapshot_preview1"].func_list["fd_write"]
	FUNC_LIST[7] = wasm["env"].func_list["emscripten_resize_heap"]
	FUNC_LIST[8] = wasm["env"].func_list["_emscripten_throw_longjmp"]
	FUNC_LIST[9] = wasm["env"].func_list["_setitimer_js"]
	FUNC_LIST[10] = wasm["env"].func_list["_emscripten_runtime_keepalive_clear"]
	FUNC_LIST[11] = wasm["wasi_snapshot_preview1"].func_list["proc_exit"]
	FUNC_LIST[12] = wasm["env"].func_list["_localtime_js"]
	FUNC_LIST[13] = wasm["env"].func_list["_gmtime_js"]
	run_init_code()
	memory_at_0 = MEMORY_LIST[0]
	return {
        rt = {
            rem = {
                i32 = rt_rem_i32,
                u64 = rt_rem_u64,
                i64 = rt_rem_i64,
            },
            eq = {
                i64 = rt_eq_i64,
            },
            shr = {
                u32 = rt_shr_u32,
                u64 = rt_shr_u64,
                i64 = rt_shr_i64,
                i32 = rt_shr_i32,
            },
            saturate = {
                u32_f64 = rt_saturate_u32_f64,
                u32_f32 = rt_saturate_u32_f64,
                u64_f64 = rt_saturate_u64_f64,
                u64_f32 = rt_saturate_u64_f64,
                i32_f64 = rt_saturate_i32_f64,
                i32_f32 = rt_saturate_i32_f64,
                i64_f64 = rt_saturate_i64_f64,
                i64_f32 = rt_saturate_i64_f64,
            },
            copysign = {
                f64 = rt_copysign_f64,
                f32 = rt_copysign_f64,
            },
            promote = {
                f64_f32 = no_op,
            },
            ne = {
                i64 = rt_ne_i64,
            },
            clz = {
                i64 = rt_clz_i64,
            },
            max = {
                f64 = rt_max_f64,
                f32 = rt_max_f64,
            },
            div = {
                i32 = rt_div_i32,
                u64 = rt_div_u64,
                i64 = rt_div_i64,
                u32 = rt_div_u32,
            },
            ge = {
                i32 = rt_ge_i32,
                u64 = rt_ge_u64,
                i64 = rt_ge_i64,
            },
            mul = {
                i32 = rt_mul_i32,
                i64 = rt_mul_i64,
            },
            extend = {
                i32_n8 = rt_extend_i32_n8,
                i64_n32 = rt_extend_i64_n32,
                i64_u32 = rt_extend_i64_u32,
                i64_n8 = rt_extend_i64_n8,
                i64_i32 = rt_extend_i64_i32,
                i32_n16 = rt_extend_i32_n16,
                i64_n16 = rt_extend_i64_n16,
            },
            load = {
                i32_i16 = rt_load_i32_i16,
                string = rt_load_string,
                i32_u8 = rt_load_i32_u8,
                i32 = rt_load_i32,
                f64 = rt_load_f64,
                i64_u16 = rt_load_i64_u16,
                i32_u16 = rt_load_i32_u16,
                i64_i32 = rt_load_i64_i32,
                f32 = rt_load_f32,
                i64 = rt_load_i64,
                i64_i16 = rt_load_i64_i16,
                i64_i8 = rt_load_i64_i8,
                i32_i8 = rt_load_i32_i8,
                i64_u32 = rt_load_i64_u32,
                i64_u8 = rt_load_i64_u8,
            },
            gt = {
                i32 = rt_gt_i32,
                u64 = rt_gt_u64,
                i64 = rt_gt_i64,
            },
            rotr = {
                i32 = rt_rotr_i32,
                i64 = rt_rotr_i64,
            },
            demote = {
                f32_f64 = no_op,
            },
            bnot = {
                i64 = rt_bit_not_i64,
            },
            allocator = {
                grow = rt_allocator_grow,
                size = rt_allocator_size,
                new = rt_allocator_new,
            },
            store = {
                i32_n8 = rt_store_i32_n8,
                string = rt_store_string,
                i64_n32 = rt_store_i64_n32,
                i32 = rt_store_i32,
                i64 = rt_store_i64,
                f32 = rt_store_f32,
                i64_n16 = rt_store_i64_n16,
                copy = rt_store_copy,
                i64_n8 = rt_store_i64_n8,
                f64 = rt_store_f64,
                i32_n16 = rt_store_i32_n16,
                fill = rt_store_fill,
            },
            min = {
                f64 = rt_min_f64,
                f32 = rt_min_f64,
            },
            convert = {
                f64_u64 = rt_convert_f64_u64,
                f32_i64 = rt_convert_f64_i64,
                f64_i64 = rt_convert_f64_i64,
                f32_u64 = rt_convert_f64_u64,
                f32_i32 = rt_convert_f64_i32,
                f64_i32 = rt_i64_into_u32,
                f64_u32 = no_op,
                f32_u32 = no_op,
            },
            lt = {
                i32 = rt_lt_i32,
                u64 = rt_lt_u64,
                i64 = rt_lt_i64,
            },
            sub = {
                i32 = rt_sub_i32,
                i64 = rt_sub_i64,
            },
            neg = {
                f64 = rt_neg_f64,
                f32 = rt_neg_f64,
            },
            wrap = {
                i32_i64 = rt_wrap_i32_i64,
            },
            truncate = {
                u32_f64 = rt_truncate_f64,
                u32_f32 = rt_truncate_f64,
                u64_f32 = rt_truncate_u64_f64,
                i64_f32 = rt_truncate_i64_f64,
                f32 = rt_truncate_f64,
                f64 = rt_truncate_f64,
                i32_f64 = rt_truncate_i32_f64,
                i32_f32 = rt_truncate_i32_f64,
                u64_f64 = rt_truncate_u64_f64,
                i64_f64 = rt_truncate_i64_f64,
            },
            bor = {
                i64 = rt_bit_or_i64,
            },
            shl = {
                i32 = rt_shl_i32,
                i64 = rt_shl_i64,
            },
            bxor = {
                i64 = rt_bit_xor_i64,
            },
            nearest = {
                f64 = rt_nearest_f32,
                f32 = rt_nearest_f32,
            },
            i64 = {
                bit_not = rt_bit_not_i64,
                ONE = rt_i64_ONE,
                multiply = rt_mul_i64,
                divide_signed = rt_div_i64,
                into_u64 = rt_convert_f64_u64,
                ZERO = rt_i64_ZERO,
                from_u32 = rt_i64_from_u32,
                bit_and = rt_bit_and_i64,
                is_zero = rt_i64_is_zero,
                is_less_signed = rt_lt_i64,
                is_negative = rt_i64_is_negative,
                divide_unsigned = rt_div_i64,
                is_greater_signed = rt_gt_i64,
                negate = rt_i64_negate,
                is_less_unsigned = rt_lt_u64,
                is_equal = rt_eq_i64,
                into_u32 = rt_i64_into_u32,
                shift_right_signed = rt_shr_i64,
                rotate_left = rt_rotl_i64,
                rotate_right = rt_rotr_i64,
                shift_right_unsigned = rt_shr_u64,
                from_u64 = rt_i64_from_u64,
                shift_left = rt_shl_i64,
                subtract = rt_sub_i64,
                bit_or = rt_bit_or_i64,
                is_greater_unsigned = rt_gt_u64,
                bit_xor = rt_bit_xor_i64,
                add = rt_add_i64,
            },
            popcnt = {
                i32 = rt_popcnt_i32,
                i64 = rt_popcnt_i64,
            },
            band = {
                i64 = rt_bit_and_i64,
            },
            le = {
                i32 = rt_le_i32,
                u64 = rt_le_u64,
                i64 = rt_le_i64,
            },
            ctz = {
                i64 = rt_ctz_i64,
            },
            reinterpret = {
                i64_f64 = rt_reinterpret_i64_f64,
                i32_f32 = rt_reinterpret_i32_f32,
                f64_i64 = rt_reinterpret_f64_i64,
                f32_i32 = rt_reinterpret_f32_i32,
            },
            rotl = {
                i32 = rt_rotl_i32,
                i64 = rt_rotl_i64,
            },
            add = {
                i32 = rt_add_i32,
                i64 = rt_add_i64,
            },
        },
		func_list = {
			["luaL_newstate"] = FUNC_LIST[315],
			["lua_close"] = FUNC_LIST[383],
			["set_flag"] = FUNC_LIST[684],
			["set_all_flags"] = FUNC_LIST[692],
			["reset_flags"] = FUNC_LIST[694],
			["strlen"] = FUNC_LIST[649],
			["lua_checkstack"] = FUNC_LIST[98],
			["lua_rawcheckstack"] = FUNC_LIST[99],
			["lua_xmove"] = FUNC_LIST[100],
			["lua_xpush"] = FUNC_LIST[101],
			["lua_newthread"] = FUNC_LIST[102],
			["lua_mainthread"] = FUNC_LIST[103],
			["lua_absindex"] = FUNC_LIST[104],
			["lua_gettop"] = FUNC_LIST[105],
			["lua_settop"] = FUNC_LIST[106],
			["lua_remove"] = FUNC_LIST[107],
			["lua_insert"] = FUNC_LIST[108],
			["lua_replace"] = FUNC_LIST[109],
			["lua_pushvalue"] = FUNC_LIST[110],
			["lua_type"] = FUNC_LIST[111],
			["lua_typename"] = FUNC_LIST[112],
			["lua_iscfunction"] = FUNC_LIST[113],
			["lua_isLfunction"] = FUNC_LIST[114],
			["lua_isnumber"] = FUNC_LIST[115],
			["lua_isstring"] = FUNC_LIST[116],
			["lua_isuserdata"] = FUNC_LIST[117],
			["lua_rawequal"] = FUNC_LIST[118],
			["lua_equal"] = FUNC_LIST[119],
			["lua_lessthan"] = FUNC_LIST[120],
			["lua_tonumberx"] = FUNC_LIST[121],
			["lua_tointegerx"] = FUNC_LIST[122],
			["lua_toboolean"] = FUNC_LIST[124],
			["lua_tolstring"] = FUNC_LIST[125],
			["lua_tostringatom"] = FUNC_LIST[126],
			["lua_namecallatom"] = FUNC_LIST[127],
			["lua_tovector"] = FUNC_LIST[128],
			["lua_objlen"] = FUNC_LIST[129],
			["lua_tocfunction"] = FUNC_LIST[130],
			["lua_tolightuserdata"] = FUNC_LIST[131],
			["lua_tolightuserdatatagged"] = FUNC_LIST[132],
			["lua_touserdata"] = FUNC_LIST[133],
			["lua_touserdatatagged"] = FUNC_LIST[134],
			["lua_userdatatag"] = FUNC_LIST[135],
			["lua_lightuserdatatag"] = FUNC_LIST[136],
			["lua_tothread"] = FUNC_LIST[137],
			["lua_tobuffer"] = FUNC_LIST[138],
			["lua_topointer"] = FUNC_LIST[139],
			["lua_pushnil"] = FUNC_LIST[140],
			["lua_pushnumber"] = FUNC_LIST[141],
			["lua_pushinteger"] = FUNC_LIST[142],
			["lua_pushunsigned"] = FUNC_LIST[143],
			["lua_pushvector"] = FUNC_LIST[144],
			["lua_pushlstring"] = FUNC_LIST[145],
			["lua_pushstring"] = FUNC_LIST[146],
			["lua_pushvfstring"] = FUNC_LIST[147],
			["lua_pushfstringL"] = FUNC_LIST[148],
			["lua_pushcclosurek"] = FUNC_LIST[149],
			["lua_pushboolean"] = FUNC_LIST[150],
			["lua_pushlightuserdatatagged"] = FUNC_LIST[151],
			["lua_pushthread"] = FUNC_LIST[152],
			["lua_gettable"] = FUNC_LIST[153],
			["lua_getfield"] = FUNC_LIST[154],
			["lua_rawgetfield"] = FUNC_LIST[155],
			["lua_rawget"] = FUNC_LIST[156],
			["lua_rawgeti"] = FUNC_LIST[157],
			["lua_createtable"] = FUNC_LIST[158],
			["lua_setreadonly"] = FUNC_LIST[159],
			["lua_getreadonly"] = FUNC_LIST[160],
			["lua_setsafeenv"] = FUNC_LIST[161],
			["lua_getmetatable"] = FUNC_LIST[162],
			["lua_settable"] = FUNC_LIST[164],
			["lua_setfield"] = FUNC_LIST[165],
			["lua_rawsetfield"] = FUNC_LIST[166],
			["lua_rawset"] = FUNC_LIST[167],
			["lua_rawseti"] = FUNC_LIST[168],
			["lua_setmetatable"] = FUNC_LIST[169],
			["lua_setfenv"] = FUNC_LIST[170],
			["lua_call"] = FUNC_LIST[171],
			["lua_pcall"] = FUNC_LIST[172],
			["lua_status"] = FUNC_LIST[174],
			["lua_costatus"] = FUNC_LIST[175],
			["lua_getthreaddata"] = FUNC_LIST[176],
			["lua_setthreaddata"] = FUNC_LIST[177],
			["lua_gc"] = FUNC_LIST[178],
			["lua_error"] = FUNC_LIST[179],
			["lua_next"] = FUNC_LIST[180],
			["lua_rawiter"] = FUNC_LIST[181],
			["lua_concat"] = FUNC_LIST[182],
			["lua_newuserdatatagged"] = FUNC_LIST[183],
			["lua_newuserdatataggedwithmetatable"] = FUNC_LIST[184],
			["lua_newuserdatadtor"] = FUNC_LIST[185],
			["lua_newbuffer"] = FUNC_LIST[186],
			["lua_getupvalue"] = FUNC_LIST[187],
			["lua_setupvalue"] = FUNC_LIST[188],
			["lua_encodepointer"] = FUNC_LIST[189],
			["lua_ref"] = FUNC_LIST[190],
			["lua_unref"] = FUNC_LIST[191],
			["lua_setuserdatatag"] = FUNC_LIST[192],
			["lua_setuserdatadtor"] = FUNC_LIST[193],
			["lua_getuserdatadtor"] = FUNC_LIST[194],
			["lua_setlightuserdataname"] = FUNC_LIST[195],
			["lua_getlightuserdataname"] = FUNC_LIST[196],
			["lua_clonefunction"] = FUNC_LIST[197],
			["lua_cleartable"] = FUNC_LIST[198],
			["lua_setmemcat"] = FUNC_LIST[199],
			["lua_totalbytes"] = FUNC_LIST[200],
			["lua_getallocf"] = FUNC_LIST[201],
			["luaL_argerrorL"] = FUNC_LIST[202],
			["luaL_errorL"] = FUNC_LIST[203],
			["luaL_where"] = FUNC_LIST[204],
			["luaL_typeerrorL"] = FUNC_LIST[205],
			["luaL_checkoption"] = FUNC_LIST[206],
			["luaL_optlstring"] = FUNC_LIST[208],
			["luaL_checklstring"] = FUNC_LIST[209],
			["luaL_newmetatable"] = FUNC_LIST[210],
			["luaL_checkudata"] = FUNC_LIST[211],
			["luaL_checkbuffer"] = FUNC_LIST[212],
			["luaL_checkstack"] = FUNC_LIST[213],
			["luaL_checktype"] = FUNC_LIST[214],
			["luaL_checkany"] = FUNC_LIST[215],
			["luaL_checknumber"] = FUNC_LIST[216],
			["luaL_optnumber"] = FUNC_LIST[217],
			["luaL_checkboolean"] = FUNC_LIST[218],
			["luaL_optboolean"] = FUNC_LIST[219],
			["luaL_checkinteger"] = FUNC_LIST[220],
			["luaL_optinteger"] = FUNC_LIST[221],
			["luaL_checkunsigned"] = FUNC_LIST[222],
			["luaL_optunsigned"] = FUNC_LIST[223],
			["luaL_checkvector"] = FUNC_LIST[224],
			["luaL_optvector"] = FUNC_LIST[225],
			["luaL_getmetafield"] = FUNC_LIST[226],
			["luaL_callmeta"] = FUNC_LIST[227],
			["luaL_register"] = FUNC_LIST[228],
			["luaL_findtable"] = FUNC_LIST[229],
			["luaL_typename"] = FUNC_LIST[230],
			["luaL_buffinitsize"] = FUNC_LIST[232],
			["luaL_prepbuffsize"] = FUNC_LIST[234],
			["luaL_addlstring"] = FUNC_LIST[235],
			["luaL_addvalue"] = FUNC_LIST[236],
			["luaL_addvalueany"] = FUNC_LIST[237],
			["luaL_tolstring"] = FUNC_LIST[238],
			["luaL_pushresult"] = FUNC_LIST[239],
			["luaL_pushresultsize"] = FUNC_LIST[240],
			["luaopen_base"] = FUNC_LIST[243],
			["luaopen_bit32"] = FUNC_LIST[274],
			["luaopen_buffer"] = FUNC_LIST[290],
			["luaopen_coroutine"] = FUNC_LIST[26],
			["luaopen_debug"] = FUNC_LIST[271],
			["lua_getargument"] = FUNC_LIST[54],
			["lua_getlocal"] = FUNC_LIST[55],
			["lua_setlocal"] = FUNC_LIST[56],
			["lua_stackdepth"] = FUNC_LIST[57],
			["lua_getinfo"] = FUNC_LIST[58],
			["lua_singlestep"] = FUNC_LIST[71],
			["lua_breakpoint"] = FUNC_LIST[72],
			["lua_getcoverage"] = FUNC_LIST[74],
			["lua_debugtrace"] = FUNC_LIST[77],
			["lua_resume"] = FUNC_LIST[86],
			["lua_resumeerror"] = FUNC_LIST[89],
			["lua_yield"] = FUNC_LIST[90],
			["lua_break"] = FUNC_LIST[91],
			["lua_isyieldable"] = FUNC_LIST[92],
			["luaL_openlibs"] = FUNC_LIST[312],
			["luaL_sandbox"] = FUNC_LIST[313],
			["luaL_sandboxthread"] = FUNC_LIST[314],
			["lua_clock"] = FUNC_LIST[374],
			["lua_resetthread"] = FUNC_LIST[378],
			["lua_newstate"] = FUNC_LIST[380],
			["free"] = FUNC_LIST[654],
			["luaopen_table"] = FUNC_LIST[436],
			["luaopen_os"] = FUNC_LIST[369],
			["luaopen_string"] = FUNC_LIST[389],
			["luaopen_math"] = FUNC_LIST[317],
			["luaopen_utf8"] = FUNC_LIST[466],
			["luaopen_vector"] = FUNC_LIST[473],
			["lua_isthreadreset"] = FUNC_LIST[379],
			["luau_load"] = FUNC_LIST[584],
			["_emscripten_timeout"] = FUNC_LIST[840],
			["malloc"] = FUNC_LIST[652],
			["setThrew"] = FUNC_LIST[664],
			["_emscripten_tempret_set"] = FUNC_LIST[668],
			["_emscripten_stack_restore"] = FUNC_LIST[673],
			["_emscripten_stack_alloc"] = FUNC_LIST[674],
			["emscripten_stack_get_current"] = FUNC_LIST[675],
			["__cxa_increment_exception_refcount"] = FUNC_LIST[815],
			["dynCall_jiji"] = FUNC_LIST[849],
		},
		table_list = {
			["__indirect_function_table"] = TABLE_LIST[0],
		},
		memory_list = {
			["memory"] = MEMORY_LIST[0],
		},
		global_list = {
		},
	}
end
--]]

local cfns = {
    ["luaL_newstate"] = FUNC_LIST[315],
    ["lua_close"] = FUNC_LIST[383],
    ["set_flag"] = FUNC_LIST[684],
    ["set_all_flags"] = FUNC_LIST[692],
    ["reset_flags"] = FUNC_LIST[694],
    ["strlen"] = FUNC_LIST[649],
    ["lua_checkstack"] = FUNC_LIST[98],
    ["lua_rawcheckstack"] = FUNC_LIST[99],
    ["lua_xmove"] = FUNC_LIST[100],
    ["lua_xpush"] = FUNC_LIST[101],
    ["lua_newthread"] = FUNC_LIST[102],
    ["lua_mainthread"] = FUNC_LIST[103],
    ["lua_absindex"] = FUNC_LIST[104],
    ["lua_gettop"] = FUNC_LIST[105],
    ["lua_settop"] = FUNC_LIST[106],
    ["lua_remove"] = FUNC_LIST[107],
    ["lua_insert"] = FUNC_LIST[108],
    ["lua_replace"] = FUNC_LIST[109],
    ["lua_pushvalue"] = FUNC_LIST[110],
    ["lua_type"] = FUNC_LIST[111],
    ["lua_typename"] = FUNC_LIST[112],
    ["lua_iscfunction"] = FUNC_LIST[113],
    ["lua_isLfunction"] = FUNC_LIST[114],
    ["lua_isnumber"] = FUNC_LIST[115],
    ["lua_isstring"] = FUNC_LIST[116],
    ["lua_isuserdata"] = FUNC_LIST[117],
    ["lua_rawequal"] = FUNC_LIST[118],
    ["lua_equal"] = FUNC_LIST[119],
    ["lua_lessthan"] = FUNC_LIST[120],
    ["lua_tonumberx"] = FUNC_LIST[121],
    ["lua_tointegerx"] = FUNC_LIST[122],
    ["lua_toboolean"] = FUNC_LIST[124],
    ["lua_tolstring"] = FUNC_LIST[125],
    ["lua_tostringatom"] = FUNC_LIST[126],
    ["lua_namecallatom"] = FUNC_LIST[127],
    ["lua_tovector"] = FUNC_LIST[128],
    ["lua_objlen"] = FUNC_LIST[129],
    ["lua_tocfunction"] = FUNC_LIST[130],
    ["lua_tolightuserdata"] = FUNC_LIST[131],
    ["lua_tolightuserdatatagged"] = FUNC_LIST[132],
    ["lua_touserdata"] = FUNC_LIST[133],
    ["lua_touserdatatagged"] = FUNC_LIST[134],
    ["lua_userdatatag"] = FUNC_LIST[135],
    ["lua_lightuserdatatag"] = FUNC_LIST[136],
    ["lua_tothread"] = FUNC_LIST[137],
    ["lua_tobuffer"] = FUNC_LIST[138],
    ["lua_topointer"] = FUNC_LIST[139],
    ["lua_pushnil"] = FUNC_LIST[140],
    ["lua_pushnumber"] = FUNC_LIST[141],
    ["lua_pushinteger"] = FUNC_LIST[142],
    ["lua_pushunsigned"] = FUNC_LIST[143],
    ["lua_pushvector"] = FUNC_LIST[144],
    ["lua_pushlstring"] = FUNC_LIST[145],
    ["lua_pushstring"] = FUNC_LIST[146],
    ["lua_pushvfstring"] = FUNC_LIST[147],
    ["lua_pushfstringL"] = FUNC_LIST[148],
    ["lua_pushcclosurek"] = FUNC_LIST[149],
    ["lua_pushboolean"] = FUNC_LIST[150],
    ["lua_pushlightuserdatatagged"] = FUNC_LIST[151],
    ["lua_pushthread"] = FUNC_LIST[152],
    ["lua_gettable"] = FUNC_LIST[153],
    ["lua_getfield"] = FUNC_LIST[154],
    ["lua_rawgetfield"] = FUNC_LIST[155],
    ["lua_rawget"] = FUNC_LIST[156],
    ["lua_rawgeti"] = FUNC_LIST[157],
    ["lua_createtable"] = FUNC_LIST[158],
    ["lua_setreadonly"] = FUNC_LIST[159],
    ["lua_getreadonly"] = FUNC_LIST[160],
    ["lua_setsafeenv"] = FUNC_LIST[161],
    ["lua_getmetatable"] = FUNC_LIST[162],
    ["lua_settable"] = FUNC_LIST[164],
    ["lua_setfield"] = FUNC_LIST[165],
    ["lua_rawsetfield"] = FUNC_LIST[166],
    ["lua_rawset"] = FUNC_LIST[167],
    ["lua_rawseti"] = FUNC_LIST[168],
    ["lua_setmetatable"] = FUNC_LIST[169],
    ["lua_setfenv"] = FUNC_LIST[170],
    ["lua_call"] = FUNC_LIST[171],
    ["lua_pcall"] = FUNC_LIST[172],
    ["lua_status"] = FUNC_LIST[174],
    ["lua_costatus"] = FUNC_LIST[175],
    ["lua_getthreaddata"] = FUNC_LIST[176],
    ["lua_setthreaddata"] = FUNC_LIST[177],
    ["lua_gc"] = FUNC_LIST[178],
    ["lua_error"] = FUNC_LIST[179],
    ["lua_next"] = FUNC_LIST[180],
    ["lua_rawiter"] = FUNC_LIST[181],
    ["lua_concat"] = FUNC_LIST[182],
    ["lua_newuserdatatagged"] = FUNC_LIST[183],
    ["lua_newuserdatataggedwithmetatable"] = FUNC_LIST[184],
    ["lua_newuserdatadtor"] = FUNC_LIST[185],
    ["lua_newbuffer"] = FUNC_LIST[186],
    ["lua_getupvalue"] = FUNC_LIST[187],
    ["lua_setupvalue"] = FUNC_LIST[188],
    ["lua_encodepointer"] = FUNC_LIST[189],
    ["lua_ref"] = FUNC_LIST[190],
    ["lua_unref"] = FUNC_LIST[191],
    ["lua_setuserdatatag"] = FUNC_LIST[192],
    ["lua_setuserdatadtor"] = FUNC_LIST[193],
    ["lua_getuserdatadtor"] = FUNC_LIST[194],
    ["lua_setlightuserdataname"] = FUNC_LIST[195],
    ["lua_getlightuserdataname"] = FUNC_LIST[196],
    ["lua_clonefunction"] = FUNC_LIST[197],
    ["lua_cleartable"] = FUNC_LIST[198],
    ["lua_setmemcat"] = FUNC_LIST[199],
    ["lua_totalbytes"] = FUNC_LIST[200],
    ["lua_getallocf"] = FUNC_LIST[201],
    ["luaL_argerrorL"] = FUNC_LIST[202],
    ["luaL_errorL"] = FUNC_LIST[203],
    ["luaL_where"] = FUNC_LIST[204],
    ["luaL_typeerrorL"] = FUNC_LIST[205],
    ["luaL_checkoption"] = FUNC_LIST[206],
    ["luaL_optlstring"] = FUNC_LIST[208],
    ["luaL_checklstring"] = FUNC_LIST[209],
    ["luaL_newmetatable"] = FUNC_LIST[210],
    ["luaL_checkudata"] = FUNC_LIST[211],
    ["luaL_checkbuffer"] = FUNC_LIST[212],
    ["luaL_checkstack"] = FUNC_LIST[213],
    ["luaL_checktype"] = FUNC_LIST[214],
    ["luaL_checkany"] = FUNC_LIST[215],
    ["luaL_checknumber"] = FUNC_LIST[216],
    ["luaL_optnumber"] = FUNC_LIST[217],
    ["luaL_checkboolean"] = FUNC_LIST[218],
    ["luaL_optboolean"] = FUNC_LIST[219],
    ["luaL_checkinteger"] = FUNC_LIST[220],
    ["luaL_optinteger"] = FUNC_LIST[221],
    ["luaL_checkunsigned"] = FUNC_LIST[222],
    ["luaL_optunsigned"] = FUNC_LIST[223],
    ["luaL_checkvector"] = FUNC_LIST[224],
    ["luaL_optvector"] = FUNC_LIST[225],
    ["luaL_getmetafield"] = FUNC_LIST[226],
    ["luaL_callmeta"] = FUNC_LIST[227],
    ["luaL_register"] = FUNC_LIST[228],
    ["luaL_findtable"] = FUNC_LIST[229],
    ["luaL_typename"] = FUNC_LIST[230],
    ["luaL_buffinitsize"] = FUNC_LIST[232],
    ["luaL_prepbuffsize"] = FUNC_LIST[234],
    ["luaL_addlstring"] = FUNC_LIST[235],
    ["luaL_addvalue"] = FUNC_LIST[236],
    ["luaL_addvalueany"] = FUNC_LIST[237],
    ["luaL_tolstring"] = FUNC_LIST[238],
    ["luaL_pushresult"] = FUNC_LIST[239],
    ["luaL_pushresultsize"] = FUNC_LIST[240],
    ["luaopen_base"] = FUNC_LIST[243],
    ["luaopen_bit32"] = FUNC_LIST[274],
    ["luaopen_buffer"] = FUNC_LIST[290],
    ["luaopen_coroutine"] = FUNC_LIST[26],
    ["luaopen_debug"] = FUNC_LIST[271],
    ["lua_getargument"] = FUNC_LIST[54],
    ["lua_getlocal"] = FUNC_LIST[55],
    ["lua_setlocal"] = FUNC_LIST[56],
    ["lua_stackdepth"] = FUNC_LIST[57],
    ["lua_getinfo"] = FUNC_LIST[58],
    ["lua_singlestep"] = FUNC_LIST[71],
    ["lua_breakpoint"] = FUNC_LIST[72],
    ["lua_getcoverage"] = FUNC_LIST[74],
    ["lua_debugtrace"] = FUNC_LIST[77],
    ["lua_resume"] = FUNC_LIST[86],
    ["lua_resumeerror"] = FUNC_LIST[89],
    ["lua_yield"] = FUNC_LIST[90],
    ["lua_break"] = FUNC_LIST[91],
    ["lua_isyieldable"] = FUNC_LIST[92],
    ["luaL_openlibs"] = FUNC_LIST[312],
    ["luaL_sandbox"] = FUNC_LIST[313],
    ["luaL_sandboxthread"] = FUNC_LIST[314],
    ["lua_clock"] = FUNC_LIST[374],
    ["lua_resetthread"] = FUNC_LIST[378],
    ["lua_newstate"] = FUNC_LIST[380],
    ["free"] = FUNC_LIST[654],
    ["luaopen_table"] = FUNC_LIST[436],
    ["luaopen_os"] = FUNC_LIST[369],
    ["luaopen_string"] = FUNC_LIST[389],
    ["luaopen_math"] = FUNC_LIST[317],
    ["luaopen_utf8"] = FUNC_LIST[466],
    ["luaopen_vector"] = FUNC_LIST[473],
    ["lua_isthreadreset"] = FUNC_LIST[379],
    ["luau_load"] = FUNC_LIST[584],
    ["_emscripten_timeout"] = FUNC_LIST[840],
    ["malloc"] = FUNC_LIST[652],
    ["setThrew"] = FUNC_LIST[664],
    ["_emscripten_tempret_set"] = FUNC_LIST[668],
    ["_emscripten_stack_restore"] = FUNC_LIST[673],
    ["emscripten_stack_get_current"] = FUNC_LIST[675],
}

local macros do
    local LUAI_MAXCSTACK    = 8000
    local LUA_REGISTRYINDEX = -LUAI_MAXCSTACK - 2000
    local LUA_ENVIRONINDEX  = -LUAI_MAXCSTACK - 2001
    local LUA_GLOBALSINDEX  = -LUAI_MAXCSTACK - 2002
    local LUA_VECTOR_SIZE   = 3

    local LUA_TNIL           = 0
    local LUA_TBOOLEAN       = 1
    local LUA_TLIGHTUSERDATA = 2
    local LUA_TNUMBER        = 3
    local LUA_TVECTOR        = 4
    local LUA_TSTRING        = 5
    local LUA_TTABLE         = 6
    local LUA_TFUNCTION      = 7
    local LUA_TUSERDATA      = 8
    local LUA_TTHREAD        = 9
    local LUA_TBUFFER        = 10
    local LUA_TPROTO         = 11
    local LUA_TUPVAL         = 12
    local LUA_TDEADKEY       = 13
    local LUA_T_COUNT        = LUA_TPROTO

    macros = {
        LUA_TNIL           = LUA_TNIL,
        LUA_TBOOLEAN       = LUA_TBOOLEAN,
        LUA_TLIGHTUSERDATA = LUA_TLIGHTUSERDATA,
        LUA_TNUMBER        = LUA_TNUMBER,
        LUA_TVECTOR        = LUA_TVECTOR,
        LUA_TSTRING        = LUA_TSTRING,
        LUA_TTABLE         = LUA_TTABLE,
        LUA_TFUNCTION      = LUA_TFUNCTION,
        LUA_TUSERDATA      = LUA_TUSERDATA,
        LUA_TTHREAD        = LUA_TTHREAD,
        LUA_TBUFFER        = LUA_TBUFFER,
        LUA_TPROTO         = LUA_TPROTO,  
        LUA_TUPVAL         = LUA_TUPVAL,
        LUA_TDEADKEY       = LUA_TDEADKEY,
        LUA_T_COUNT        = LUA_T_COUNT,

        LUA_OK        = 0,
        LUA_YIELD     = 1,
        LUA_ERRRUN    = 2,
        LUA_ERRSYNTAX = 3,
        LUA_ERRMEM    = 4,
        LUA_ERRERR    = 5,
        LUA_BREAK     = 6,

        LUA_CORUN = 0,
        LUA_COSUS = 1,
        LUA_CONOR = 2,
        LUA_COFIN = 3,
        LUA_COERR = 4,

        LUA_GCSTOP        = 0,
        LUA_GCRESTART     = 1,
        LUA_GCCOLLECT     = 2,
        LUA_GCCOUNT       = 3,
        LUA_GCCOUNTB      = 4,
        LUA_GCISRUNNING   = 5,
        LUA_GCSTEP        = 6,
        LUA_GCSETGOAL     = 7,
        LUA_GCSETSTEPMUL  = 8,
        LUA_GCSETSTEPSIZE = 9,

        LUA_IDSIZE            = 256,
        LUA_MINSTACK          = 20,
        LUAI_MAXCSTACK        = LUAI_MAXCSTACK,
        LUAI_MAXCALLS         = 20000,
        LUAI_MAXCCALLS        = 200,
        LUA_BUFFERSIZE        = 512,
        LUA_UTAG_LIMIT        = 128,
        LUA_LUTAG_LIMIT       = 128,
        LUA_SIZECLASSES       = 40,
        LUA_MEMORY_CATEGORIES = 256,
        LUA_MINSTRTABSIZE     = 32,
        LUA_MAXCAPTURES       = 32,
        LUA_VECTOR_SIZE       = 3,
        LUA_EXTRA_SIZE        = LUA_VECTOR_SIZE - 2,
        LUA_MULTRET           = -1,
        LUA_REGISTRYINDEX     = LUA_REGISTRYINDEX,
        LUA_ENVIRONINDEX      = LUA_ENVIRONINDEX,
        LUA_GLOBALSINDEX      = LUA_GLOBALSINDEX,
        LUA_TNONE             = -1,
        LUA_NOREF             = -1,
        LUA_REFNIL            = 0,
        LUA_COLIBNAME         = "coroutine",
        LUA_TABLIBNAME        = "table",
        LUA_OSLIBNAME         = "os",
        LUA_STRLIBNAME        = "string",
        LUA_BITLIBNAME        = "bit32",
        LUA_BUFFERLIBNAME     = "buffer",
        LUA_UTF8LIBNAME       = "utf8",
        LUA_MATHLIBNAME       = "math",
        LUA_DBLIBNAME         = "debug",
        LUA_VECLIBNAME        = "vector",

        lua_upvalueindex      = function(i)                      return LUA_GLOBALSINDEX - i end,
        lua_ispseudo          = function(i)                      return if (i <= LUA_REGISTRYINDEX) then 1 else 0 end,
        lua_getref            = function(L, ref)                 return cfns.lua_rawgeti(L, LUA_REGISTRYINDEX, ref) end,
        lua_tonumberx         = function(L, i)                   return cfns.lua_tonumberx(L, i, 0) end,
        lua_tointegerx        = function(L, i)                   return cfns.lua_tointegerx(L, i, 0) end,
        lua_tounsigned        = function(L, i)                   return cfns.lua_tounsignedx(L, i, 0) end,
        lua_pop               = function(L, n)                   return cfns.lua_settop(L, -n - 1) end,
        lua_newtable          = function(L)                      return cfns.lua_createtable(L, 0, 0) end,
        lua_newuserdata       = function(L, s)                   return cfns.lua_newuserdatatagged(L, s, 0) end,
        lua_strlen            = function(L, i)                   return cfns.lua_objlen(L, i) end,
        lua_isfunction        = function(L, n)                   return if (cfns.lua_type(L, (n)) == LUA_TFUNCTION) then 1 else 0 end,
        lua_istable           = function(L, n)                   return if (cfns.lua_type(L, (n)) == LUA_TTABLE) then 1 else 0 end,
        lua_islightuserdata   = function(L, n)                   return if (cfns.lua_type(L, (n)) == LUA_TLIGHTUSERDATA) then 1 else 0 end,
        lua_isnil             = function(L, n)                   return if (cfns.lua_type(L, (n)) == LUA_TNIL) then 1 else 0 end,
        lua_isboolean         = function(L, n)                   return if (cfns.lua_type(L, (n)) == LUA_TBOOLEAN) then 1 else 0 end,
        lua_isvector          = function(L, n)                   return if (cfns.lua_type(L, (n)) == LUA_TVECTOR) then 1 else 0 end,
        lua_isthread          = function(L, n)                   return if (cfns.lua_type(L, (n)) == LUA_TTHREAD) then 1 else 0 end,
        lua_isbuffer          = function(L, n)                   return if (cfns.lua_type(L, (n)) == LUA_TBUFFER) then 1 else 0 end,
        lua_isnone            = function(L, n)                   return if (cfns.lua_type(L, (n)) == LUA_TNONE) then 1 else 0 end,
        lua_isnoneornil       = function(L, n)                   return if (cfns.lua_type(L, (n)) <= LUA_TNIL) then 1 else 0 end,
        --// lua_pushliteral  = function(L, s)                   return cfns.lua_pushlstring(L, cstr(""), (sizeof(s) / sizeof(char)) - 1) end, --// sizeof needed, not sure atm
        lua_pushcfunction     = function(L, fn, debugname)       return cfns.lua_pushcclosurek(L, fn, debugname, 0, 0) end,
        lua_pushcclosure      = function(L, fn, debugname, nup)  return cfns.lua_pushcclosurek(L, fn, debugname, nup, 0) end,
        lua_pushlightuserdata = function(L, p)                   return cfns.lua_pushlightuserdatatagged(L, p, 0) end,
        lua_setglobal         = function(L, s)                   return cfns.lua_setfield(L, LUA_GLOBALSINDEX, s) end,
        lua_getglobal         = function(L, s)                   return cfns.lua_getfield(L, LUA_GLOBALSINDEX, s) end,
        lua_tostring          = function(L, i)                   return cfns.lua_tolstring(L, i, 0) end,
        lua_pushfstring       = function(L, fmt, ...)            return cfns.lua_pushfstringL(L, fmt, ...) end,
        luaL_error            = function(L, fmt, ...)            return cfns.luaL_errorL(L, fmt, ...) end,
        luaL_typeerror        = function(L, narg, tname)         return cfns.luaL_typeerrorL(L, narg, tname) end,
        luaL_argerror         = function(L, narg, extramsg)      return cfns.luaL_argerrorL(L, narg, extramsg) end,
        luaL_argcheck         = function(L, cond, arg, extramsg) return if cond == 1 then 0 else cfns.luaL_argerror(L, arg, extramsg) end,
        luaL_argexpected      = function(L, cond, arg, tname)    return if cond == 1 then 0 else cfns.luaL_typeerror(L, arg, tname) end,
        luaL_checkstring      = function(L, n)                   return cfns.luaL_checklstring(L, n, NULL) end,
        luaL_optstring        = function(L, n, d)                return cfns.luaL_optlstring(L, n, d, NULL) end,
        luaL_getmetatable     = function(L, n)                   return cfns.lua_getfield(L, LUA_REGISTRYINDEX, n) end,
        --// luaL_opt         = function(L, f, n, d)             return if (lua_isnoneornil(L, n) == 1) then d else f(L, n) end,
        --// luaL_addchar     = function(B, c)                   return ((void)((B)->p < (B)->end || luaL_prepbuffsize(B, 1)), (*(B)->p++ = (char)(c))) end,
        luaL_addstring        = function(B, s)                   return cfns.luaL_addlstring(B, s, cfns.strlen(s)) end,
    }
end

local NOW_TIME = os.time() * 1000
local FILE_MAP = { {}, {} }
local timers = {}
local noExitRuntime = true
local rtKeepAliveCounter = 0
local abortWasm = false
local exitStatus = nil

local function fd_flush(file)
    local final = table.concat(file)
    local last = 1
    for index, data in string.gmatch(final, '()([^\n]*)\n') do
        last = index + #data
        print(data)
    end
    table.clear(file)
    file[1] = string.sub(final, last + 1)
end

local CException = {} do
    local CExcInternal = {}
    CExcInternal.__index = CExcInternal

    function CExcInternal:_UndecoratedName()
        local name_ptr = rt_load_i32(memory_at_0, self.ptr + 4);
        return rt_load_string(memory_at_0, name_ptr, cfns.strlen(name_ptr))
    end

    function CExcInternal:vfptr()
        local vfptr = rt_load_i32(memory_at_0, self.ptr);
        return vfptr
    end

    function CException.new(ptr)
        return setmetatable({ ptr = ptr }, CExcInternal)
    end
end

local function cstr(str)
    local strLen = #str
    local strPtr = cfns.malloc(strLen + 1)
    rt_store_string(memory_at_0, strPtr, str)
    rt_store_i32_n8(memory_at_0, strPtr + strLen, 0)
    return strPtr
end

local function stub(name, ret)
    return function(...)
        if (STUB_WARN) then print(`stub: {name} called`) end
        return ret
    end
end

local function invokeHandler(index)
    return function(...)
        local args = table.pack(...)
        local fnIndex = table.remove(args, 1)
        local sp = cfns.emscripten_stack_get_current()
        local e, stacktrace = "N/A", "N/A"
        local success = xpcall(function() return TABLE_LIST[0].data[fnIndex](table.unpack(args)) end, function(a) e = a; stacktrace = debug.traceback() end)
        if (not success) then
            cfns._emscripten_stack_restore(sp)
            assert(typeof(e) ~= "string", `{e}\n\ninvoke stacktrace:\n{stacktrace}`)
            cfns.setThrew(1, 0)
        end
    end
end

local function insertCFunction(f)
    local ptr = #TABLE_LIST[0].data + 1
    TABLE_LIST[0].data[ptr] = f
    return ptr
end

local rt = {
	rem = {
		i32 = rt_rem_i32,
		u64 = rt_rem_u64,
		i64 = rt_rem_i64,
	},
	eq = {
		i64 = rt_eq_i64,
	},
	shr = {
		u32 = rt_shr_u32,
		u64 = rt_shr_u64,
		i64 = rt_shr_i64,
		i32 = rt_shr_i32,
	},
	saturate = {
		u32_f64 = rt_saturate_u32_f64,
		u32_f32 = rt_saturate_u32_f64,
		u64_f64 = rt_saturate_u64_f64,
		u64_f32 = rt_saturate_u64_f64,
		i32_f64 = rt_saturate_i32_f64,
		i32_f32 = rt_saturate_i32_f64,
		i64_f64 = rt_saturate_i64_f64,
		i64_f32 = rt_saturate_i64_f64,
	},
	copysign = {
		f64 = rt_copysign_f64,
		f32 = rt_copysign_f64,
	},
	promote = {
		f64_f32 = no_op,
	},
	ne = {
		i64 = rt_ne_i64,
	},
	clz = {
		i64 = rt_clz_i64,
	},
	max = {
		f64 = rt_max_f64,
		f32 = rt_max_f64,
	},
	div = {
		i32 = rt_div_i32,
		u64 = rt_div_u64,
		i64 = rt_div_i64,
		u32 = rt_div_u32,
	},
	ge = {
		i32 = rt_ge_i32,
		u64 = rt_ge_u64,
		i64 = rt_ge_i64,
	},
	mul = {
		i32 = rt_mul_i32,
		i64 = rt_mul_i64,
	},
	extend = {
		i32_n8 = rt_extend_i32_n8,
		i64_n32 = rt_extend_i64_n32,
		i64_u32 = rt_extend_i64_u32,
		i64_n8 = rt_extend_i64_n8,
		i64_i32 = rt_extend_i64_i32,
		i32_n16 = rt_extend_i32_n16,
		i64_n16 = rt_extend_i64_n16,
	},
	load = {
		i32_i16 = rt_load_i32_i16,
		string = rt_load_string,
		i32_u8 = rt_load_i32_u8,
		i32 = rt_load_i32,
		f64 = rt_load_f64,
		i64_u16 = rt_load_i64_u16,
		i32_u16 = rt_load_i32_u16,
		i64_i32 = rt_load_i64_i32,
		f32 = rt_load_f32,
		i64 = rt_load_i64,
		i64_i16 = rt_load_i64_i16,
		i64_i8 = rt_load_i64_i8,
		i32_i8 = rt_load_i32_i8,
		i64_u32 = rt_load_i64_u32,
		i64_u8 = rt_load_i64_u8,
	},
	gt = {
		i32 = rt_gt_i32,
		u64 = rt_gt_u64,
		i64 = rt_gt_i64,
	},
	rotr = {
		i32 = rt_rotr_i32,
		i64 = rt_rotr_i64,
	},
	demote = {
		f32_f64 = no_op,
	},
	bnot = {
		i64 = rt_bit_not_i64,
	},
	allocator = {
		grow = rt_allocator_grow,
		size = rt_allocator_size,
		new = rt_allocator_new,
	},
	store = {
		i32_n8 = rt_store_i32_n8,
		string = rt_store_string,
		i64_n32 = rt_store_i64_n32,
		i32 = rt_store_i32,
		i64 = rt_store_i64,
		f32 = rt_store_f32,
		i64_n16 = rt_store_i64_n16,
		copy = rt_store_copy,
		i64_n8 = rt_store_i64_n8,
		f64 = rt_store_f64,
		i32_n16 = rt_store_i32_n16,
		fill = rt_store_fill,
	},
	min = {
		f64 = rt_min_f64,
		f32 = rt_min_f64,
	},
	convert = {
		f64_u64 = rt_convert_f64_u64,
		f32_i64 = rt_convert_f64_i64,
		f64_i64 = rt_convert_f64_i64,
		f32_u64 = rt_convert_f64_u64,
		f32_i32 = rt_convert_f64_i32,
		f64_i32 = rt_i64_into_u32,
		f64_u32 = no_op,
		f32_u32 = no_op,
	},
	lt = {
		i32 = rt_lt_i32,
		u64 = rt_lt_u64,
		i64 = rt_lt_i64,
	},
	sub = {
		i32 = rt_sub_i32,
		i64 = rt_sub_i64,
	},
	neg = {
		f64 = rt_neg_f64,
		f32 = rt_neg_f64,
	},
	wrap = {
		i32_i64 = rt_wrap_i32_i64,
	},
	truncate = {
		u32_f64 = rt_truncate_f64,
		u32_f32 = rt_truncate_f64,
		u64_f32 = rt_truncate_u64_f64,
		i64_f32 = rt_truncate_i64_f64,
		f32 = rt_truncate_f64,
		f64 = rt_truncate_f64,
		i32_f64 = rt_truncate_i32_f64,
		i32_f32 = rt_truncate_i32_f64,
		u64_f64 = rt_truncate_u64_f64,
		i64_f64 = rt_truncate_i64_f64,
	},
	bor = {
		i64 = rt_bit_or_i64,
	},
	shl = {
		i32 = rt_shl_i32,
		i64 = rt_shl_i64,
	},
	bxor = {
		i64 = rt_bit_xor_i64,
	},
	nearest = {
		f64 = rt_nearest_f32,
		f32 = rt_nearest_f32,
	},
	i64 = {
		bit_not = rt_bit_not_i64,
		ONE = rt_i64_ONE,
		multiply = rt_mul_i64,
		divide_signed = rt_div_i64,
		into_u64 = rt_convert_f64_u64,
		ZERO = rt_i64_ZERO,
		from_u32 = rt_i64_from_u32,
		bit_and = rt_bit_and_i64,
		is_zero = rt_i64_is_zero,
		is_less_signed = rt_lt_i64,
		is_negative = rt_i64_is_negative,
		divide_unsigned = rt_div_i64,
		is_greater_signed = rt_gt_i64,
		negate = rt_i64_negate,
		is_less_unsigned = rt_lt_u64,
		is_equal = rt_eq_i64,
		into_u32 = rt_i64_into_u32,
		shift_right_signed = rt_shr_i64,
		rotate_left = rt_rotl_i64,
		rotate_right = rt_rotr_i64,
		shift_right_unsigned = rt_shr_u64,
		from_u64 = rt_i64_from_u64,
		shift_left = rt_shl_i64,
		subtract = rt_sub_i64,
		bit_or = rt_bit_or_i64,
		is_greater_unsigned = rt_gt_u64,
		bit_xor = rt_bit_xor_i64,
		add = rt_add_i64,
	},
	popcnt = {
		i32 = rt_popcnt_i32,
		i64 = rt_popcnt_i64,
	},
	band = {
		i64 = rt_bit_and_i64,
	},
	le = {
		i32 = rt_le_i32,
		u64 = rt_le_u64,
		i64 = rt_le_i64,
	},
	ctz = {
		i64 = rt_ctz_i64,
	},
	reinterpret = {
		i64_f64 = rt_reinterpret_i64_f64,
		i32_f32 = rt_reinterpret_i32_f32,
		f64_i64 = rt_reinterpret_f64_i64,
		f32_i32 = rt_reinterpret_f32_i32,
	},
	rotl = {
		i32 = rt_rotl_i32,
		i64 = rt_rotl_i64,
	},
	add = {
		i32 = rt_add_i32,
		i64 = rt_add_i64,
	},
}

--// __cxa_throw
FUNC_LIST[0] = function(except, info, _dtor)
    local info = CException.new(info)
    assert(false, `exception occured in c: {info:_UndecoratedName()} ({info:vfptr()})`)
end

--// invoke_vii
FUNC_LIST[1] = invokeHandler(1)

--// _abort_js
FUNC_LIST[2] = function(reason)
    assert(false, `Aborted({reason})`)
end

--// emscripten_memcpy_js (emscripten_memcpy_big)
FUNC_LIST[3] = function(destination, source, size)
    rt_store_copy(memory_at_0, destination, memory_at_0, source, size)
end

--// emscripten_date_now
FUNC_LIST[4] = function()
    return NOW_TIME + os.clock() * 1000
end

FUNC_LIST[5] = stub("_tzset_js", 0)

--// fd_write
FUNC_LIST[6] = function(fd, list, count, ret_pointer)
    local file = FILE_MAP[fd]
    if not file then return 8 end
    local total = 0
    for pointer = list, list + (count - 1) * 8, 8 do
        local start = rt_load_i32(memory_at_0, pointer)
        local len = rt_load_i32(memory_at_0, pointer + 4)
        local read = rt_load_string(memory_at_0, start, len)
        table.insert(file, read)
        total = total + #read
    end
    rt_store_i32(memory_at_0, ret_pointer, total)
    fd_flush(file)
    return 0
end

--// emscripten_resize_heap
FUNC_LIST[7] = function(_requestedSize)
    assert(false, "OOM")
end

--// _emscripten_throw_longjmp
FUNC_LIST[8] = function()
    assert(false, "Infinity")
end

--// _setitimer_js
FUNC_LIST[9] = function(which, timeoutMs)
    if (not task) then
        print("program is using _setitimer_js but task library not found, timers will NOT work.")
        return 0
    end

    if (timers[which]) then
        task.cancel(timers[which].thread)
        timers[which] = nil
    end
    if (not timeoutMs or timeoutMs == 0) then return 0 end

    local t = task.delay(function()
        timers[which] = nil
        -- callUserCallback(() => __emscripten_timeout(which, _emscripten_get_now()));
        if (abortWasm) then return end
        local success, e = pcall(function()
            cfns.__emscripten_timeout(which, os.clock())
            if (not (noExitRuntime or rtKeepAliveCounter > 0)) then
                local success, e = pcall(FUNC_LIST[6], exitStatus)
                if (not success) then
                    if (string.match(e, "ExitStatus:" ~= nil or e == "unwind")) then
                        return exitStatus
                    end
                    assert(false, e)
                end
            end
        end)

        if (not success) then
            if (string.match(e, "ExitStatus:" ~= nil or e == "unwind")) then
                return
            end
            assert(false, e)
        end
    end, timeoutMs / 1000)

    timers[which] = { thread = t, timeoutMs = timeoutMs }
    return 0
end

--// _emscripten_runtime_keepalive_clear
FUNC_LIST[10] = function()
    noExitRuntime = false
    rtKeepAliveCounter = 0
    return
end

--// proc_exit
FUNC_LIST[11] = function(code)
    exitStatus = code
    if (not (noExitRuntime or rtKeepAliveCounter > 0)) then
        abortWasm = true
    end
    assert(false, `ExitStatus: Program exited with code ${code}`)
end

--// _localtime_js
FUNC_LIST[12] = function(timer, buf)
    local tdata = os.date("*t", timer)

    --// https://en.cppreference.com/w/cpp/chrono/c/tm
    local tm = cfns.malloc(36)
    rt_store_i32(memory_at_0, tm + 0, tdata.sec) --// int tm_sec
    rt_store_i32(memory_at_0, tm + 4, tdata.min) --// int tm_min
    rt_store_i32(memory_at_0, tm + 8, tdata.hour) --// int tm_hour
    rt_store_i32(memory_at_0, tm + 12, tdata.day) --// int tm_mday
    rt_store_i32(memory_at_0, tm + 16, tdata.month) --// int tm_mon
    rt_store_i32(memory_at_0, tm + 20, tdata.year) --// int tm_year
    rt_store_i32(memory_at_0, tm + 24, tdata.wday) --// int tm_wday
    rt_store_i32(memory_at_0, tm + 28, tdata.yday) --// int tm_yday
    rt_store_i32(memory_at_0, tm + 32, if tdata.isdst then 1 else 0) --// int tm_isdst

    --// https://en.cppreference.com/w/cpp/chrono/c/tm
    if (buf ~= 0) then
        rt_store_i32(memory_at_0, buf + 0, tdata.sec) --// int tm_sec
        rt_store_i32(memory_at_0, buf + 4, tdata.min) --// int tm_min
        rt_store_i32(memory_at_0, buf + 8, tdata.hour) --// int tm_hour
        rt_store_i32(memory_at_0, buf + 12, tdata.day) --// int tm_mday
        rt_store_i32(memory_at_0, buf + 16, tdata.month) --// int tm_mon
        rt_store_i32(memory_at_0, buf + 20, tdata.year) --// int tm_year
        rt_store_i32(memory_at_0, buf + 24, tdata.wday) --// int tm_wday
        rt_store_i32(memory_at_0, buf + 28, tdata.yday) --// int tm_yday
        rt_store_i32(memory_at_0, buf + 32, if tdata.isdst then 1 else 0) --// int tm_isdst
    end

    return tm
end

--// _gmtime_js
FUNC_LIST[13] = function(timer, buf)
    local tdata = os.date("!*t", timer)

    --// https://en.cppreference.com/w/cpp/chrono/c/tm
    local tm = cfns.malloc(36)
    rt_store_i32(memory_at_0, tm + 0, tdata.sec) --// int tm_sec
    rt_store_i32(memory_at_0, tm + 4, tdata.min) --// int tm_min
    rt_store_i32(memory_at_0, tm + 8, tdata.hour) --// int tm_hour
    rt_store_i32(memory_at_0, tm + 12, tdata.day) --// int tm_mday
    rt_store_i32(memory_at_0, tm + 16, tdata.month) --// int tm_mon
    rt_store_i32(memory_at_0, tm + 20, tdata.year) --// int tm_year
    rt_store_i32(memory_at_0, tm + 24, tdata.wday) --// int tm_wday
    rt_store_i32(memory_at_0, tm + 28, tdata.yday) --// int tm_yday
    rt_store_i32(memory_at_0, tm + 32, if tdata.isdst then 1 else 0) --// int tm_isdst

    --// https://en.cppreference.com/w/cpp/chrono/c/tm
    if (buf ~= 0) then
        rt_store_i32(memory_at_0, buf + 0, tdata.sec) --// int tm_sec
        rt_store_i32(memory_at_0, buf + 4, tdata.min) --// int tm_min
        rt_store_i32(memory_at_0, buf + 8, tdata.hour) --// int tm_hour
        rt_store_i32(memory_at_0, buf + 12, tdata.day) --// int tm_mday
        rt_store_i32(memory_at_0, buf + 16, tdata.month) --// int tm_mon
        rt_store_i32(memory_at_0, buf + 20, tdata.year) --// int tm_year
        rt_store_i32(memory_at_0, buf + 24, tdata.wday) --// int tm_wday
        rt_store_i32(memory_at_0, buf + 28, tdata.yday) --// int tm_yday
        rt_store_i32(memory_at_0, buf + 32, if tdata.isdst then 1 else 0) --// int tm_isdst
    end

    return tm
end

run_init_code()
memory_at_0 = MEMORY_LIST[0]

local function luau_run(bc: string, chunkName: string?, safeEnv: boolean?)
    --// Bytecode
    local bcPtr = cstr(bc)

    --// Chunk name
    local cnPtr = cstr(chunkName or "LuauCeptionChunk")

    --// State setup
    local L = cfns.luaL_newstate()
    cfns.luaL_openlibs(L);
    if (safeEnv) then cfns.luaL_sandbox(L) end

    --// Load bytecode
    local ldRes = cfns.luau_load(L, cnPtr, bcPtr, #bc, 0)

    --// Cleanup unused stuff
    cfns.free(bcPtr)
    cfns.free(cnPtr)

    --// Check if load succeded
    if (ldRes ~= 0) then cfns.lua_close(L) end
    assert(ldRes == 0, "failed to load luau bytecode")

    --// Call function
    local clRes = cfns.lua_pcall(L, 0, 0, 0)

    --// Cleanup state
    cfns.lua_close(L)

    return clRes == 0
end

local function luau_load(bc: string, chunkName: string?, safeEnv: boolean?): () -> (boolean)
    return function()
        return luau_run(bc, chunkName, safeEnv)
    end
end

local function luau_setflag(name: string, state: boolean)
    --// Flag name
    local flagNamePtr = cstr(name)

    --// Set the flag
    cfns.set_flag(flagNamePtr, if (state) then 1 else 0)

    --// Cleanup
    cfns.free(flagNamePtr)
    return
end

local function luau_setallflags(state: boolean)
    cfns.set_all_flags(if (state) then 1 else 0)
    return
end

local function luau_resetflags()
    cfns.reset_flags()
    return
end

return {
    luau_run = luau_run,
    luau_load = luau_load,
    luau_setflag = luau_setflag,
    luau_setallflags = luau_setallflags,
    luau_resetflags = luau_resetflags,
    macros = macros,
    wasm = {
        start_time = NOW_TIME,
        file_map = FILE_MAP,
        rt = rt,
        cfns = cfns,
        indirect_function_table = TABLE_LIST[0],
        memory = MEMORY_LIST[0],
        insertCFunction = insertCFunction,
        cstr = cstr
    }
}